package uk.co.chrisjenx.calligraphy;

import android.os.Build.VERSION;
import android.support.v7.widget.AppCompatCheckBox;
import android.support.v7.widget.AppCompatRadioButton;
import android.support.v7.widget.AppCompatTextView;
import android.support.v7.widget.e;
import android.support.v7.widget.g;
import android.support.v7.widget.h;
import android.support.v7.widget.k;
import android.support.v7.widget.p;
import android.text.TextUtils;
import android.view.View;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.MultiAutoCompleteTextView;
import android.widget.RadioButton;
import android.widget.TextView;
import android.widget.ToggleButton;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class CalligraphyConfig
{
  private static final Map<Class<? extends TextView>, Integer> DEFAULT_STYLES = new HashMap();
  private static CalligraphyConfig sInstance;
  private final Set<Class<?>> hasTypefaceViews;
  private final int mAttrId;
  private final Map<Class<? extends TextView>, Integer> mClassStyleAttributeMap;
  private final boolean mCustomViewCreation;
  private final boolean mCustomViewTypefaceSupport;
  private final String mFontPath;
  private final boolean mIsFontSet;
  private final boolean mReflection;
  
  static
  {
    DEFAULT_STYLES.put(TextView.class, Integer.valueOf(16842884));
    DEFAULT_STYLES.put(Button.class, Integer.valueOf(16842824));
    DEFAULT_STYLES.put(EditText.class, Integer.valueOf(16842862));
    Map localMap = DEFAULT_STYLES;
    Integer localInteger = Integer.valueOf(16842859);
    localMap.put(AutoCompleteTextView.class, localInteger);
    DEFAULT_STYLES.put(MultiAutoCompleteTextView.class, localInteger);
    DEFAULT_STYLES.put(CheckBox.class, Integer.valueOf(16842860));
    DEFAULT_STYLES.put(RadioButton.class, Integer.valueOf(16842878));
    DEFAULT_STYLES.put(ToggleButton.class, Integer.valueOf(16842827));
    if (CalligraphyUtils.canAddV7AppCompatViews()) {
      addAppCompatViews();
    }
  }
  
  protected CalligraphyConfig(Builder paramBuilder)
  {
    mIsFontSet = isFontSet;
    mFontPath = fontAssetPath;
    mAttrId = attrId;
    mReflection = reflection;
    mCustomViewCreation = customViewCreation;
    mCustomViewTypefaceSupport = customViewTypefaceSupport;
    HashMap localHashMap = new HashMap(DEFAULT_STYLES);
    localHashMap.putAll(mStyleClassMap);
    mClassStyleAttributeMap = Collections.unmodifiableMap(localHashMap);
    hasTypefaceViews = Collections.unmodifiableSet(mHasTypefaceClasses);
  }
  
  private static void addAppCompatViews()
  {
    DEFAULT_STYLES.put(AppCompatTextView.class, Integer.valueOf(16842884));
    DEFAULT_STYLES.put(g.class, Integer.valueOf(16842824));
    DEFAULT_STYLES.put(k.class, Integer.valueOf(16842862));
    Map localMap = DEFAULT_STYLES;
    Integer localInteger = Integer.valueOf(16842859);
    localMap.put(e.class, localInteger);
    DEFAULT_STYLES.put(p.class, localInteger);
    DEFAULT_STYLES.put(AppCompatCheckBox.class, Integer.valueOf(16842860));
    DEFAULT_STYLES.put(AppCompatRadioButton.class, Integer.valueOf(16842878));
    DEFAULT_STYLES.put(h.class, Integer.valueOf(16843720));
  }
  
  public static CalligraphyConfig get()
  {
    if (sInstance == null) {
      sInstance = new CalligraphyConfig(new Builder());
    }
    return sInstance;
  }
  
  public static void initDefault(CalligraphyConfig paramCalligraphyConfig)
  {
    sInstance = paramCalligraphyConfig;
  }
  
  public int getAttrId()
  {
    return mAttrId;
  }
  
  Map<Class<? extends TextView>, Integer> getClassStyles()
  {
    return mClassStyleAttributeMap;
  }
  
  public String getFontPath()
  {
    return mFontPath;
  }
  
  public boolean isCustomViewCreation()
  {
    return mCustomViewCreation;
  }
  
  public boolean isCustomViewHasTypeface(View paramView)
  {
    return hasTypefaceViews.contains(paramView.getClass());
  }
  
  public boolean isCustomViewTypefaceSupport()
  {
    return mCustomViewTypefaceSupport;
  }
  
  boolean isFontSet()
  {
    return mIsFontSet;
  }
  
  public boolean isReflection()
  {
    return mReflection;
  }
  
  public static class Builder
  {
    public static final int INVALID_ATTR_ID = -1;
    private int attrId;
    private boolean customViewCreation;
    private boolean customViewTypefaceSupport;
    private String fontAssetPath;
    private boolean isFontSet;
    private Set<Class<?>> mHasTypefaceClasses;
    private Map<Class<? extends TextView>, Integer> mStyleClassMap;
    private boolean reflection;
    
    public Builder()
    {
      boolean bool;
      if (Build.VERSION.SDK_INT >= 11) {
        bool = true;
      } else {
        bool = false;
      }
      reflection = bool;
      customViewCreation = true;
      customViewTypefaceSupport = false;
      attrId = R.attr.fontPath;
      isFontSet = false;
      fontAssetPath = null;
      mStyleClassMap = new HashMap();
      mHasTypefaceClasses = new HashSet();
    }
    
    public Builder addCustomStyle(Class<? extends TextView> paramClass, int paramInt)
    {
      if (paramClass != null)
      {
        if (paramInt == 0) {
          return this;
        }
        mStyleClassMap.put(paramClass, Integer.valueOf(paramInt));
        return this;
      }
      return this;
    }
    
    public Builder addCustomViewWithSetTypeface(Class<?> paramClass)
    {
      customViewTypefaceSupport = true;
      mHasTypefaceClasses.add(paramClass);
      return this;
    }
    
    public CalligraphyConfig build()
    {
      isFontSet = (TextUtils.isEmpty(fontAssetPath) ^ true);
      return new CalligraphyConfig(this);
    }
    
    public Builder disableCustomViewInflation()
    {
      customViewCreation = false;
      return this;
    }
    
    public Builder disablePrivateFactoryInjection()
    {
      reflection = false;
      return this;
    }
    
    public Builder setDefaultFontPath(String paramString)
    {
      isFontSet = (TextUtils.isEmpty(paramString) ^ true);
      fontAssetPath = paramString;
      return this;
    }
    
    public Builder setFontAttrId(int paramInt)
    {
      attrId = paramInt;
      return this;
    }
  }
}
