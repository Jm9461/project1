package com.aurelhubert.ahbottomnavigation;

import android.animation.Animator;
import android.animation.Animator.AnimatorListener;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Drawable.ConstantState;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.CoordinatorLayout.f;
import android.support.v4.view.u;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewAnimationUtils;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.ViewPropertyAnimator;
import android.view.WindowManager;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.OvershootInterpolator;
import android.widget.FrameLayout;
import android.widget.FrameLayout.LayoutParams;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import java.util.ArrayList;
import java.util.List;

public class AHBottomNavigation
  extends FrameLayout
{
  private static String c0 = "AHBottomNavigation";
  private int A;
  private int B;
  private int C;
  private int D;
  private int E;
  private int F;
  private int G;
  private int H;
  private float I;
  private float J;
  private int K;
  private int L;
  private float M;
  private float N;
  private boolean O;
  private h P;
  private int Q;
  private int R;
  private Drawable S;
  private Typeface T;
  private int U;
  private int V;
  private int W;
  private int a0;
  private long b0;
  private g c;
  private f d;
  private Context e;
  private Resources f;
  private ArrayList<a> g = new ArrayList();
  private ArrayList<View> h = new ArrayList();
  private AHBottomNavigationBehavior<AHBottomNavigation> i;
  private LinearLayout j;
  private View k;
  private Animator l;
  private boolean m = false;
  private boolean n = false;
  private boolean o;
  private List<com.aurelhubert.ahbottomnavigation.i.a> p = com.aurelhubert.ahbottomnavigation.i.a.a(5);
  private Boolean[] q;
  private boolean r;
  private int s;
  private int t;
  private boolean u;
  private boolean v;
  private boolean w;
  private boolean x;
  private Typeface y;
  private int z;
  
  public AHBottomNavigation(Context paramContext)
  {
    super(paramContext);
    Boolean localBoolean = Boolean.valueOf(true);
    q = new Boolean[] { localBoolean, localBoolean, localBoolean, localBoolean, localBoolean };
    r = false;
    s = 0;
    t = 0;
    u = true;
    v = false;
    w = false;
    x = true;
    z = -1;
    A = 0;
    L = 0;
    O = false;
    P = h.c;
    a(paramContext, null);
  }
  
  public AHBottomNavigation(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    Boolean localBoolean = Boolean.valueOf(true);
    q = new Boolean[] { localBoolean, localBoolean, localBoolean, localBoolean, localBoolean };
    r = false;
    s = 0;
    t = 0;
    u = true;
    v = false;
    w = false;
    x = true;
    z = -1;
    A = 0;
    L = 0;
    O = false;
    P = h.c;
    a(paramContext, paramAttributeSet);
  }
  
  public AHBottomNavigation(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    Boolean localBoolean = Boolean.valueOf(true);
    q = new Boolean[] { localBoolean, localBoolean, localBoolean, localBoolean, localBoolean };
    r = false;
    s = 0;
    t = 0;
    u = true;
    v = false;
    w = false;
    x = true;
    z = -1;
    A = 0;
    L = 0;
    O = false;
    P = h.c;
    a(paramContext, paramAttributeSet);
  }
  
  @SuppressLint({"NewApi"})
  @TargetApi(21)
  private int a(int paramInt)
  {
    if (!o) {
      return paramInt;
    }
    int i1 = getResources().getIdentifier("navigation_bar_height", "dimen", "android");
    if (i1 > 0) {
      L = f.getDimensionPixelSize(i1);
    }
    TypedArray localTypedArray = getContext().getTheme().obtainStyledAttributes(new int[] { 16842973, 16843760 });
    localTypedArray.getBoolean(0, false);
    boolean bool = localTypedArray.getBoolean(1, true);
    i1 = paramInt;
    if (a())
    {
      i1 = paramInt;
      if (bool) {
        i1 = paramInt + L;
      }
    }
    localTypedArray.recycle();
    return i1;
  }
  
  private void a(Context paramContext, AttributeSet paramAttributeSet)
  {
    e = paramContext;
    f = e.getResources();
    D = android.support.v4.content.a.a(paramContext, c.colorBottomNavigationAccent);
    F = android.support.v4.content.a.a(paramContext, c.colorBottomNavigationInactive);
    E = android.support.v4.content.a.a(paramContext, c.colorBottomNavigationDisable);
    G = android.support.v4.content.a.a(paramContext, c.colorBottomNavigationActiveColored);
    H = android.support.v4.content.a.a(paramContext, c.colorBottomNavigationInactiveColored);
    if (paramAttributeSet != null) {
      paramAttributeSet = paramContext.obtainStyledAttributes(paramAttributeSet, h.AHBottomNavigationBehavior_Params, 0, 0);
    }
    try
    {
      n = paramAttributeSet.getBoolean(h.AHBottomNavigationBehavior_Params_selectedBackgroundVisible, false);
      o = paramAttributeSet.getBoolean(h.AHBottomNavigationBehavior_Params_translucentNavigationEnabled, false);
      D = paramAttributeSet.getColor(h.AHBottomNavigationBehavior_Params_accentColor, android.support.v4.content.a.a(paramContext, c.colorBottomNavigationAccent));
      F = paramAttributeSet.getColor(h.AHBottomNavigationBehavior_Params_inactiveColor, android.support.v4.content.a.a(paramContext, c.colorBottomNavigationInactive));
      E = paramAttributeSet.getColor(h.AHBottomNavigationBehavior_Params_disableColor, android.support.v4.content.a.a(paramContext, c.colorBottomNavigationDisable));
      G = paramAttributeSet.getColor(h.AHBottomNavigationBehavior_Params_coloredActive, android.support.v4.content.a.a(paramContext, c.colorBottomNavigationActiveColored));
      H = paramAttributeSet.getColor(h.AHBottomNavigationBehavior_Params_coloredInactive, android.support.v4.content.a.a(paramContext, c.colorBottomNavigationInactiveColored));
      m = paramAttributeSet.getBoolean(h.AHBottomNavigationBehavior_Params_colored, false);
      paramAttributeSet.recycle();
    }
    finally
    {
      paramAttributeSet.recycle();
    }
    K = ((int)f.getDimension(d.bottom_navigation_height));
    B = D;
    C = F;
    U = ((int)f.getDimension(d.bottom_navigation_notification_margin_left_active));
    V = ((int)f.getDimension(d.bottom_navigation_notification_margin_left));
    W = ((int)f.getDimension(d.bottom_navigation_notification_margin_top_active));
    a0 = ((int)f.getDimension(d.bottom_navigation_notification_margin_top));
    b0 = 150L;
    u.a(this, f.getDimension(d.bottom_navigation_elevation));
    setClipToPadding(false);
    setLayoutParams(new ViewGroup.LayoutParams(-1, K));
  }
  
  private void a(LinearLayout paramLinearLayout)
  {
    LayoutInflater localLayoutInflater = (LayoutInflater)e.getSystemService("layout_inflater");
    float f8 = f.getDimension(d.bottom_navigation_height);
    float f3 = f.getDimension(d.bottom_navigation_min_width);
    float f4 = f.getDimension(d.bottom_navigation_max_width);
    float f1 = f3;
    float f2 = f4;
    if (P == h.d)
    {
      f1 = f3;
      f2 = f4;
      if (g.size() > 3)
      {
        f1 = f.getDimension(d.bottom_navigation_small_inactive_min_width);
        f2 = f.getDimension(d.bottom_navigation_small_inactive_max_width);
      }
    }
    int i2 = getWidth();
    if (i2 != 0)
    {
      if (g.size() == 0) {
        return;
      }
      f3 = i2 / g.size();
      float f5;
      if (f3 < f1)
      {
        f5 = f1;
      }
      else
      {
        f5 = f3;
        if (f3 > f2) {
          f5 = f2;
        }
      }
      float f6 = f.getDimension(d.bottom_navigation_text_size_active);
      float f7 = f.getDimension(d.bottom_navigation_text_size_inactive);
      int i1 = (int)f.getDimension(d.bottom_navigation_margin_top_active);
      if ((I != 0.0F) && (J != 0.0F))
      {
        f3 = I;
        f4 = J;
      }
      else
      {
        f3 = f6;
        f4 = f7;
        if (P == h.d)
        {
          f3 = f6;
          f4 = f7;
          if (g.size() > 3)
          {
            f3 = f.getDimension(d.bottom_navigation_text_size_forced_active);
            f4 = f.getDimension(d.bottom_navigation_text_size_forced_inactive);
          }
        }
      }
      final int i3 = 0;
      f6 = f1;
      while (i3 < g.size())
      {
        int i4;
        if (s == i3) {
          i4 = 1;
        } else {
          i4 = 0;
        }
        Object localObject1 = (a)g.get(i3);
        View localView = localLayoutInflater.inflate(g.bottom_navigation_item, this, false);
        Object localObject3 = (FrameLayout)localView.findViewById(f.bottom_navigation_container);
        ImageView localImageView = (ImageView)localView.findViewById(f.bottom_navigation_item_icon);
        TextView localTextView = (TextView)localView.findViewById(f.bottom_navigation_item_title);
        Object localObject2 = (TextView)localView.findViewById(f.bottom_navigation_notification);
        localImageView.setImageDrawable(((a)localObject1).b(e));
        localTextView.setText(((a)localObject1).c(e));
        Typeface localTypeface = y;
        if (localTypeface != null) {
          localTextView.setTypeface(localTypeface);
        }
        if ((P == h.d) && (g.size() > 3)) {
          ((FrameLayout)localObject3).setPadding(0, ((FrameLayout)localObject3).getPaddingTop(), 0, ((FrameLayout)localObject3).getPaddingBottom());
        }
        f1 = f4;
        if (i4 != 0)
        {
          if (n) {
            localView.setSelected(true);
          }
          localImageView.setSelected(true);
          if ((localView.getLayoutParams() instanceof ViewGroup.MarginLayoutParams))
          {
            localObject3 = (ViewGroup.MarginLayoutParams)localImageView.getLayoutParams();
            ((ViewGroup.MarginLayoutParams)localObject3).setMargins(leftMargin, i1, rightMargin, bottomMargin);
            localObject2 = (ViewGroup.MarginLayoutParams)((TextView)localObject2).getLayoutParams();
            ((ViewGroup.MarginLayoutParams)localObject2).setMargins(U, topMargin, rightMargin, bottomMargin);
            localView.requestLayout();
          }
        }
        else
        {
          localImageView.setSelected(false);
          localObject2 = (ViewGroup.MarginLayoutParams)((TextView)localObject2).getLayoutParams();
          ((ViewGroup.MarginLayoutParams)localObject2).setMargins(V, topMargin, rightMargin, bottomMargin);
        }
        int i5;
        if (m)
        {
          if (i4 != 0)
          {
            setBackgroundColor(((a)localObject1).a(e));
            t = ((a)localObject1).a(e);
          }
        }
        else
        {
          i5 = A;
          if (i5 != 0) {
            setBackgroundResource(i5);
          } else {
            setBackgroundColor(z);
          }
        }
        if (i4 != 0) {
          f4 = f3;
        } else {
          f4 = f1;
        }
        localTextView.setTextSize(0, f4);
        if (q[i3].booleanValue())
        {
          localView.setOnClickListener(new b(i3));
          localObject1 = ((a)g.get(i3)).b(e);
          if (i4 != 0) {
            i5 = B;
          } else {
            i5 = C;
          }
          localImageView.setImageDrawable(b.a((Drawable)localObject1, i5, O));
          if (i4 != 0) {
            i4 = B;
          } else {
            i4 = C;
          }
          localTextView.setTextColor(i4);
          localView.setSoundEffectsEnabled(x);
        }
        else
        {
          localImageView.setImageDrawable(b.a(((a)g.get(i3)).b(e), E, O));
          localTextView.setTextColor(E);
        }
        paramLinearLayout.addView(localView, new FrameLayout.LayoutParams((int)f5, (int)f8));
        h.add(localView);
        i3 += 1;
        f4 = f1;
      }
      a(true, -1);
      return;
    }
  }
  
  private void a(boolean paramBoolean, int paramInt)
  {
    int i1 = 0;
    while (i1 < h.size())
    {
      if (i1 >= p.size()) {
        return;
      }
      if ((paramInt == -1) || (paramInt == i1))
      {
        com.aurelhubert.ahbottomnavigation.i.a localA = (com.aurelhubert.ahbottomnavigation.i.a)p.get(i1);
        int i2 = com.aurelhubert.ahbottomnavigation.i.b.b(localA, Q);
        int i3 = com.aurelhubert.ahbottomnavigation.i.b.a(localA, R);
        TextView localTextView = (TextView)((View)h.get(i1)).findViewById(f.bottom_navigation_notification);
        boolean bool = localTextView.getText().toString().equals(String.valueOf(localA.b())) ^ true;
        if (paramBoolean)
        {
          localTextView.setTextColor(i2);
          Object localObject = T;
          if (localObject != null) {
            localTextView.setTypeface((Typeface)localObject);
          } else {
            localTextView.setTypeface(null, 1);
          }
          localObject = S;
          if (localObject != null)
          {
            if (Build.VERSION.SDK_INT >= 16) {
              localTextView.setBackground(((Drawable)localObject).getConstantState().newDrawable());
            } else {
              localTextView.setBackgroundDrawable((Drawable)localObject);
            }
          }
          else if (i3 != 0)
          {
            localObject = android.support.v4.content.a.c(e, e.notification_background);
            if (Build.VERSION.SDK_INT >= 16) {
              localTextView.setBackground(b.a((Drawable)localObject, i3, O));
            } else {
              localTextView.setBackgroundDrawable(b.a((Drawable)localObject, i3, O));
            }
          }
        }
        if ((localA.d()) && (localTextView.getText().length() > 0))
        {
          localTextView.setText("");
          if (bool) {
            localTextView.animate().scaleX(0.0F).scaleY(0.0F).alpha(0.0F).setInterpolator(new AccelerateInterpolator()).setDuration(b0).start();
          }
        }
        else if (!localA.d())
        {
          localTextView.setText(String.valueOf(localA.b()));
          if (bool)
          {
            localTextView.setScaleX(0.0F);
            localTextView.setScaleY(0.0F);
            localTextView.animate().scaleX(1.0F).scaleY(1.0F).alpha(1.0F).setInterpolator(new OvershootInterpolator()).setDuration(b0).start();
          }
        }
      }
      i1 += 1;
    }
  }
  
  private void b()
  {
    if (g.size() < 3) {
      Log.w(c0, "The items list should have at least 3 items");
    } else if (g.size() > 5) {
      Log.w(c0, "The items list should not have more than 5 items");
    }
    int i1 = (int)f.getDimension(d.bottom_navigation_height);
    removeAllViews();
    h.clear();
    k = new View(e);
    if (Build.VERSION.SDK_INT >= 21)
    {
      localLayoutParams = new FrameLayout.LayoutParams(-1, a(i1));
      addView(k, localLayoutParams);
      K = i1;
    }
    j = new LinearLayout(e);
    j.setOrientation(0);
    j.setGravity(17);
    FrameLayout.LayoutParams localLayoutParams = new FrameLayout.LayoutParams(-1, i1);
    addView(j, localLayoutParams);
    if ((P != h.e) && ((g.size() == 3) || (P == h.d))) {
      a(j);
    } else {
      b(j);
    }
    post(new a());
  }
  
  private void b(final int paramInt, boolean paramBoolean)
  {
    if (s == paramInt)
    {
      localObject = c;
      if ((localObject != null) && (paramBoolean)) {
        ((g)localObject).a(paramInt, true);
      }
      return;
    }
    Object localObject = c;
    if ((localObject != null) && (paramBoolean) && (!((g)localObject).a(paramInt, false))) {
      return;
    }
    int i2 = (int)f.getDimension(d.bottom_navigation_margin_top_active);
    int i3 = (int)f.getDimension(d.bottom_navigation_margin_top_inactive);
    float f3 = f.getDimension(d.bottom_navigation_text_size_active);
    float f4 = f.getDimension(d.bottom_navigation_text_size_inactive);
    float f1;
    float f2;
    if ((I != 0.0F) && (J != 0.0F))
    {
      f1 = I;
      f2 = J;
    }
    else
    {
      f1 = f3;
      f2 = f4;
      if (P == h.d)
      {
        f1 = f3;
        f2 = f4;
        if (g.size() > 3)
        {
          f1 = f.getDimension(d.bottom_navigation_text_size_forced_active);
          f2 = f.getDimension(d.bottom_navigation_text_size_forced_inactive);
        }
      }
    }
    int i1 = 0;
    while (i1 < h.size())
    {
      localObject = (View)h.get(i1);
      if (n)
      {
        if (i1 == paramInt) {
          paramBoolean = true;
        } else {
          paramBoolean = false;
        }
        ((View)localObject).setSelected(paramBoolean);
      }
      TextView localTextView1;
      ImageView localImageView;
      if (i1 == paramInt)
      {
        localTextView1 = (TextView)((View)localObject).findViewById(f.bottom_navigation_item_title);
        localImageView = (ImageView)((View)localObject).findViewById(f.bottom_navigation_item_icon);
        TextView localTextView2 = (TextView)((View)localObject).findViewById(f.bottom_navigation_notification);
        localImageView.setSelected(true);
        b.b(localImageView, i3, i2);
        b.a(localTextView2, V, U);
        b.a(localTextView1, C, B);
        b.a(localTextView1, f2, f1);
        b.a(e, ((a)g.get(paramInt)).b(e), localImageView, C, B, O);
        int i4;
        if ((Build.VERSION.SDK_INT >= 21) && (m))
        {
          i4 = Math.max(getWidth(), getHeight());
          int i5 = (int)((View)localObject).getX();
          int i6 = ((View)localObject).getWidth() / 2;
          int i7 = ((View)localObject).getHeight() / 2;
          localObject = l;
          if ((localObject != null) && (((Animator)localObject).isRunning()))
          {
            l.cancel();
            setBackgroundColor(((a)g.get(paramInt)).a(e));
            k.setBackgroundColor(0);
          }
          l = ViewAnimationUtils.createCircularReveal(k, i5 + i6, i7, 0.0F, i4);
          l.setStartDelay(5L);
          l.addListener(new d(paramInt));
          l.start();
        }
        else if (m)
        {
          b.c(this, t, ((a)g.get(paramInt)).a(e));
        }
        else
        {
          i4 = A;
          if (i4 != 0) {
            setBackgroundResource(i4);
          } else {
            setBackgroundColor(z);
          }
          k.setBackgroundColor(0);
        }
      }
      else if (i1 == s)
      {
        localTextView1 = (TextView)((View)localObject).findViewById(f.bottom_navigation_item_title);
        localImageView = (ImageView)((View)localObject).findViewById(f.bottom_navigation_item_icon);
        localObject = (TextView)((View)localObject).findViewById(f.bottom_navigation_notification);
        localImageView.setSelected(false);
        b.b(localImageView, i2, i3);
        b.a((View)localObject, U, V);
        b.a(localTextView1, B, C);
        b.a(localTextView1, f1, f2);
        b.a(e, ((a)g.get(s)).b(e), localImageView, B, C, O);
      }
      i1 += 1;
    }
    s = paramInt;
    paramInt = s;
    if ((paramInt > 0) && (paramInt < g.size()))
    {
      t = ((a)g.get(s)).a(e);
      return;
    }
    if (s == -1)
    {
      paramInt = A;
      if (paramInt != 0) {
        setBackgroundResource(paramInt);
      } else {
        setBackgroundColor(z);
      }
      k.setBackgroundColor(0);
    }
  }
  
  private void b(LinearLayout paramLinearLayout)
  {
    LayoutInflater localLayoutInflater = (LayoutInflater)e.getSystemService("layout_inflater");
    float f5 = f.getDimension(d.bottom_navigation_height);
    float f2 = f.getDimension(d.bottom_navigation_small_inactive_min_width);
    float f3 = f.getDimension(d.bottom_navigation_small_inactive_max_width);
    int i3 = getWidth();
    if (i3 != 0)
    {
      if (g.size() == 0) {
        return;
      }
      float f4 = i3 / g.size();
      if (f4 < f2)
      {
        f1 = f2;
      }
      else
      {
        f1 = f4;
        if (f4 > f3) {
          f1 = f3;
        }
      }
      int i2 = (int)f.getDimension(d.bottom_navigation_small_margin_top_active);
      f4 = f.getDimension(d.bottom_navigation_small_selected_width_difference);
      M = (g.size() * f4 + f1);
      f4 = f1 - f4;
      N = f4;
      final int i4 = 0;
      float f1 = f3;
      while (i4 < g.size())
      {
        Object localObject1 = (a)g.get(i4);
        View localView = localLayoutInflater.inflate(g.bottom_navigation_small_item, this, false);
        ImageView localImageView = (ImageView)localView.findViewById(f.bottom_navigation_small_item_icon);
        TextView localTextView = (TextView)localView.findViewById(f.bottom_navigation_small_item_title);
        Object localObject2 = (TextView)localView.findViewById(f.bottom_navigation_notification);
        localImageView.setImageDrawable(((a)localObject1).b(e));
        if (P != h.e) {
          localTextView.setText(((a)localObject1).c(e));
        }
        f3 = I;
        if (f3 != 0.0F) {
          localTextView.setTextSize(0, f3);
        }
        Object localObject3 = y;
        if (localObject3 != null) {
          localTextView.setTypeface((Typeface)localObject3);
        }
        if (i4 == s)
        {
          if (n) {
            localView.setSelected(true);
          }
          localImageView.setSelected(true);
          if (P != h.e) {
            if ((localView.getLayoutParams() instanceof ViewGroup.MarginLayoutParams))
            {
              localObject3 = (ViewGroup.MarginLayoutParams)localImageView.getLayoutParams();
              ((ViewGroup.MarginLayoutParams)localObject3).setMargins(leftMargin, i2, rightMargin, bottomMargin);
              localObject2 = (ViewGroup.MarginLayoutParams)((TextView)localObject2).getLayoutParams();
              ((ViewGroup.MarginLayoutParams)localObject2).setMargins(U, W, rightMargin, bottomMargin);
              localView.requestLayout();
              break label504;
            }
          }
        }
        else
        {
          localImageView.setSelected(false);
          localObject2 = (ViewGroup.MarginLayoutParams)((TextView)localObject2).getLayoutParams();
          ((ViewGroup.MarginLayoutParams)localObject2).setMargins(V, a0, rightMargin, bottomMargin);
        }
        label504:
        int i1;
        if (m)
        {
          if (i4 == s)
          {
            setBackgroundColor(((a)localObject1).a(e));
            t = ((a)localObject1).a(e);
          }
        }
        else
        {
          i1 = A;
          if (i1 != 0) {
            setBackgroundResource(i1);
          } else {
            setBackgroundColor(z);
          }
        }
        if (q[i4].booleanValue())
        {
          localObject1 = ((a)g.get(i4)).b(e);
          if (s == i4) {
            i1 = B;
          } else {
            i1 = C;
          }
          localImageView.setImageDrawable(b.a((Drawable)localObject1, i1, O));
          if (s == i4) {
            i1 = B;
          } else {
            i1 = C;
          }
          localTextView.setTextColor(i1);
          if (s == i4) {
            f3 = 1.0F;
          } else {
            f3 = 0.0F;
          }
          localTextView.setAlpha(f3);
          localView.setOnClickListener(new c(i4));
          localView.setSoundEffectsEnabled(x);
        }
        else
        {
          localImageView.setImageDrawable(b.a(((a)g.get(i4)).b(e), E, O));
          localTextView.setTextColor(E);
          localTextView.setAlpha(0.0F);
        }
        if (i4 == s) {
          i1 = (int)M;
        } else {
          i1 = (int)f4;
        }
        if (P == h.e)
        {
          double d1 = f4;
          Double.isNaN(d1);
          i1 = (int)(d1 * 1.16D);
        }
        paramLinearLayout.addView(localView, new FrameLayout.LayoutParams(i1, (int)f5));
        h.add(localView);
        i4 += 1;
      }
      a(true, -1);
      return;
    }
  }
  
  private void c(final int paramInt, boolean paramBoolean)
  {
    if (s == paramInt)
    {
      localObject1 = c;
      if ((localObject1 != null) && (paramBoolean)) {
        ((g)localObject1).a(paramInt, true);
      }
      return;
    }
    Object localObject1 = c;
    if ((localObject1 != null) && (paramBoolean) && (!((g)localObject1).a(paramInt, false))) {
      return;
    }
    int i2 = (int)f.getDimension(d.bottom_navigation_small_margin_top_active);
    int i3 = (int)f.getDimension(d.bottom_navigation_small_margin_top);
    int i1 = 0;
    while (i1 < h.size())
    {
      localObject1 = (View)h.get(i1);
      if (n)
      {
        if (i1 == paramInt) {
          paramBoolean = true;
        } else {
          paramBoolean = false;
        }
        ((View)localObject1).setSelected(paramBoolean);
      }
      Object localObject2;
      TextView localTextView;
      ImageView localImageView;
      if (i1 == paramInt)
      {
        localObject2 = (FrameLayout)((View)localObject1).findViewById(f.bottom_navigation_small_container);
        localTextView = (TextView)((View)localObject1).findViewById(f.bottom_navigation_small_item_title);
        localImageView = (ImageView)((View)localObject1).findViewById(f.bottom_navigation_small_item_icon);
        localObject1 = (TextView)((View)localObject1).findViewById(f.bottom_navigation_notification);
        localImageView.setSelected(true);
        if (P != h.e)
        {
          b.b(localImageView, i3, i2);
          b.a((View)localObject1, V, U);
          b.b((View)localObject1, a0, W);
          b.a(localTextView, C, B);
          b.b((View)localObject2, N, M);
        }
        b.a(localTextView, 0.0F, 1.0F);
        b.a(e, ((a)g.get(paramInt)).b(e), localImageView, C, B, O);
        int i4;
        if ((Build.VERSION.SDK_INT >= 21) && (m))
        {
          i4 = Math.max(getWidth(), getHeight());
          int i5 = (int)((View)h.get(paramInt)).getX();
          int i6 = ((View)h.get(paramInt)).getWidth() / 2;
          int i7 = ((View)h.get(paramInt)).getHeight() / 2;
          localObject1 = l;
          if ((localObject1 != null) && (((Animator)localObject1).isRunning()))
          {
            l.cancel();
            setBackgroundColor(((a)g.get(paramInt)).a(e));
            k.setBackgroundColor(0);
          }
          l = ViewAnimationUtils.createCircularReveal(k, i5 + i6, i7, 0.0F, i4);
          l.setStartDelay(5L);
          l.addListener(new e(paramInt));
          l.start();
        }
        else if (m)
        {
          b.c(this, t, ((a)g.get(paramInt)).a(e));
        }
        else
        {
          i4 = A;
          if (i4 != 0) {
            setBackgroundResource(i4);
          } else {
            setBackgroundColor(z);
          }
          k.setBackgroundColor(0);
        }
      }
      else if (i1 == s)
      {
        localObject2 = ((View)localObject1).findViewById(f.bottom_navigation_small_container);
        localTextView = (TextView)((View)localObject1).findViewById(f.bottom_navigation_small_item_title);
        localImageView = (ImageView)((View)localObject1).findViewById(f.bottom_navigation_small_item_icon);
        localObject1 = (TextView)((View)localObject1).findViewById(f.bottom_navigation_notification);
        localImageView.setSelected(false);
        if (P != h.e)
        {
          b.b(localImageView, i2, i3);
          b.a((View)localObject1, U, V);
          b.b((View)localObject1, W, a0);
          b.a(localTextView, B, C);
          b.b((View)localObject2, M, N);
        }
        b.a(localTextView, 1.0F, 0.0F);
        b.a(e, ((a)g.get(s)).b(e), localImageView, B, C, O);
      }
      i1 += 1;
    }
    s = paramInt;
    paramInt = s;
    if ((paramInt > 0) && (paramInt < g.size()))
    {
      t = ((a)g.get(s)).a(e);
      return;
    }
    if (s == -1)
    {
      paramInt = A;
      if (paramInt != 0) {
        setBackgroundResource(paramInt);
      } else {
        setBackgroundColor(z);
      }
      k.setBackgroundColor(0);
    }
  }
  
  public void a(float paramFloat1, float paramFloat2)
  {
    I = paramFloat1;
    J = paramFloat2;
    b();
  }
  
  public void a(int paramInt, boolean paramBoolean)
  {
    if (paramInt >= g.size())
    {
      String str = c0;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("The position is out of bounds of the items (");
      localStringBuilder.append(g.size());
      localStringBuilder.append(" elements)");
      Log.w(str, localStringBuilder.toString());
      return;
    }
    if ((P != h.e) && ((g.size() == 3) || (P == h.d)))
    {
      b(paramInt, paramBoolean);
      return;
    }
    c(paramInt, paramBoolean);
  }
  
  public void a(a paramA)
  {
    if (g.size() > 5) {
      Log.w(c0, "The items list should not have more than 5 items");
    }
    g.add(paramA);
    b();
  }
  
  @SuppressLint({"NewApi"})
  @TargetApi(21)
  public boolean a()
  {
    Display localDisplay = ((WindowManager)getContext().getSystemService("window")).getDefaultDisplay();
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    localDisplay.getRealMetrics(localDisplayMetrics);
    int i1 = heightPixels;
    int i2 = widthPixels;
    localDisplayMetrics = new DisplayMetrics();
    localDisplay.getMetrics(localDisplayMetrics);
    int i3 = heightPixels;
    return (i2 > widthPixels) || (i1 > i3);
  }
  
  public int getAccentColor()
  {
    return B;
  }
  
  public int getCurrentItem()
  {
    return s;
  }
  
  public int getDefaultBackgroundColor()
  {
    return z;
  }
  
  public int getInactiveColor()
  {
    return C;
  }
  
  public int getItemsCount()
  {
    return g.size();
  }
  
  public h getTitleState()
  {
    return P;
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    super.onMeasure(paramInt1, paramInt2);
    if (!r)
    {
      setBehaviorTranslationEnabled(u);
      r = true;
    }
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable)
  {
    Parcelable localParcelable = paramParcelable;
    if ((paramParcelable instanceof Bundle))
    {
      paramParcelable = (Bundle)paramParcelable;
      s = paramParcelable.getInt("current_item");
      p = paramParcelable.getParcelableArrayList("notifications");
      localParcelable = paramParcelable.getParcelable("superState");
    }
    super.onRestoreInstanceState(localParcelable);
  }
  
  protected Parcelable onSaveInstanceState()
  {
    Bundle localBundle = new Bundle();
    localBundle.putParcelable("superState", super.onSaveInstanceState());
    localBundle.putInt("current_item", s);
    localBundle.putParcelableArrayList("notifications", new ArrayList(p));
    return localBundle;
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    b();
  }
  
  public void setAccentColor(int paramInt)
  {
    D = paramInt;
    B = paramInt;
    b();
  }
  
  public void setBehaviorTranslationEnabled(boolean paramBoolean)
  {
    u = paramBoolean;
    if ((getParent() instanceof CoordinatorLayout))
    {
      ViewGroup.LayoutParams localLayoutParams = getLayoutParams();
      Object localObject = i;
      if (localObject == null) {
        i = new AHBottomNavigationBehavior(paramBoolean, L);
      } else {
        ((AHBottomNavigationBehavior)localObject).a(paramBoolean, L);
      }
      localObject = d;
      if (localObject != null) {
        i.a((f)localObject);
      }
      ((CoordinatorLayout.f)localLayoutParams).a(i);
      if (v)
      {
        v = false;
        i.a(this, K, w);
      }
    }
  }
  
  public void setColored(boolean paramBoolean)
  {
    m = paramBoolean;
    int i1;
    if (paramBoolean) {
      i1 = G;
    } else {
      i1 = D;
    }
    B = i1;
    if (paramBoolean) {
      i1 = H;
    } else {
      i1 = F;
    }
    C = i1;
    b();
  }
  
  public void setCurrentItem(int paramInt)
  {
    a(paramInt, true);
  }
  
  public void setDefaultBackgroundColor(int paramInt)
  {
    z = paramInt;
    b();
  }
  
  public void setDefaultBackgroundResource(int paramInt)
  {
    A = paramInt;
    b();
  }
  
  public void setForceTint(boolean paramBoolean)
  {
    O = paramBoolean;
    b();
  }
  
  public void setInactiveColor(int paramInt)
  {
    F = paramInt;
    C = paramInt;
    b();
  }
  
  public void setItemDisableColor(int paramInt)
  {
    E = paramInt;
  }
  
  public void setNotificationAnimationDuration(long paramLong)
  {
    b0 = paramLong;
    a(true, -1);
  }
  
  public void setNotificationBackground(Drawable paramDrawable)
  {
    S = paramDrawable;
    a(true, -1);
  }
  
  public void setNotificationBackgroundColor(int paramInt)
  {
    R = paramInt;
    a(true, -1);
  }
  
  public void setNotificationBackgroundColorResource(int paramInt)
  {
    R = android.support.v4.content.a.a(e, paramInt);
    a(true, -1);
  }
  
  public void setNotificationTextColor(int paramInt)
  {
    Q = paramInt;
    a(true, -1);
  }
  
  public void setNotificationTextColorResource(int paramInt)
  {
    Q = android.support.v4.content.a.a(e, paramInt);
    a(true, -1);
  }
  
  public void setNotificationTypeface(Typeface paramTypeface)
  {
    T = paramTypeface;
    a(true, -1);
  }
  
  public void setOnNavigationPositionListener(f paramF)
  {
    d = paramF;
    AHBottomNavigationBehavior localAHBottomNavigationBehavior = i;
    if (localAHBottomNavigationBehavior != null) {
      localAHBottomNavigationBehavior.a(paramF);
    }
  }
  
  public void setOnTabSelectedListener(g paramG)
  {
    c = paramG;
  }
  
  public void setSelectedBackgroundVisible(boolean paramBoolean)
  {
    n = paramBoolean;
    b();
  }
  
  public void setSoundEffectsEnabled(boolean paramBoolean)
  {
    super.setSoundEffectsEnabled(paramBoolean);
    x = paramBoolean;
  }
  
  public void setTitleState(h paramH)
  {
    P = paramH;
    b();
  }
  
  public void setTitleTypeface(Typeface paramTypeface)
  {
    y = paramTypeface;
    b();
  }
  
  public void setTranslucentNavigationEnabled(boolean paramBoolean)
  {
    o = paramBoolean;
  }
  
  public void setUseElevation(boolean paramBoolean)
  {
    float f1;
    if (paramBoolean) {
      f1 = f.getDimension(d.bottom_navigation_elevation);
    } else {
      f1 = 0.0F;
    }
    u.a(this, f1);
    setClipToPadding(false);
  }
  
  class a
    implements Runnable
  {
    a() {}
    
    public void run()
    {
      requestLayout();
    }
  }
  
  class b
    implements View.OnClickListener
  {
    b(int paramInt) {}
    
    public void onClick(View paramView)
    {
      AHBottomNavigation.a(AHBottomNavigation.this, i3, true);
    }
  }
  
  class c
    implements View.OnClickListener
  {
    c(int paramInt) {}
    
    public void onClick(View paramView)
    {
      AHBottomNavigation.b(AHBottomNavigation.this, i4, true);
    }
  }
  
  class d
    implements Animator.AnimatorListener
  {
    d(int paramInt) {}
    
    public void onAnimationCancel(Animator paramAnimator) {}
    
    public void onAnimationEnd(Animator paramAnimator)
    {
      paramAnimator = AHBottomNavigation.this;
      paramAnimator.setBackgroundColor(((a)AHBottomNavigation.b(paramAnimator).get(paramInt)).a(AHBottomNavigation.a(AHBottomNavigation.this)));
      AHBottomNavigation.c(AHBottomNavigation.this).setBackgroundColor(0);
    }
    
    public void onAnimationRepeat(Animator paramAnimator) {}
    
    public void onAnimationStart(Animator paramAnimator)
    {
      AHBottomNavigation.c(AHBottomNavigation.this).setBackgroundColor(((a)AHBottomNavigation.b(AHBottomNavigation.this).get(paramInt)).a(AHBottomNavigation.a(AHBottomNavigation.this)));
    }
  }
  
  class e
    implements Animator.AnimatorListener
  {
    e(int paramInt) {}
    
    public void onAnimationCancel(Animator paramAnimator) {}
    
    public void onAnimationEnd(Animator paramAnimator)
    {
      paramAnimator = AHBottomNavigation.this;
      paramAnimator.setBackgroundColor(((a)AHBottomNavigation.b(paramAnimator).get(paramInt)).a(AHBottomNavigation.a(AHBottomNavigation.this)));
      AHBottomNavigation.c(AHBottomNavigation.this).setBackgroundColor(0);
    }
    
    public void onAnimationRepeat(Animator paramAnimator) {}
    
    public void onAnimationStart(Animator paramAnimator)
    {
      AHBottomNavigation.c(AHBottomNavigation.this).setBackgroundColor(((a)AHBottomNavigation.b(AHBottomNavigation.this).get(paramInt)).a(AHBottomNavigation.a(AHBottomNavigation.this)));
    }
  }
  
  public static abstract interface f
  {
    public abstract void a(int paramInt);
  }
  
  public static abstract interface g
  {
    public abstract boolean a(int paramInt, boolean paramBoolean);
  }
  
  public static enum h
  {
    private h() {}
  }
}
