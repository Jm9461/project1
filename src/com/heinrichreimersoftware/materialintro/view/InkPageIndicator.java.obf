package com.heinrichreimersoftware.materialintro.view;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.ValueAnimator;
import android.animation.ValueAnimator.AnimatorUpdateListener;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.database.DataSetObserver;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Path.Direction;
import android.graphics.Path.Op;
import android.graphics.RectF;
import android.os.Build.VERSION;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.j;
import android.support.v4.view.q;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.View.OnAttachStateChangeListener;
import android.view.animation.Interpolator;
import java.util.Arrays;

public class InkPageIndicator
  extends View
  implements ViewPager.j, View.OnAttachStateChangeListener
{
  private final Paint A;
  private final Paint B;
  private final Path C;
  private final Path D;
  private final Path E;
  private final Path F;
  private final RectF G;
  private f H;
  private g[] I;
  private final Interpolator J;
  float K;
  float L;
  float M;
  float N;
  float O;
  float P;
  float Q;
  float R;
  private boolean S = false;
  private int c;
  private int d;
  private long e;
  private int f;
  private int g;
  private float h;
  private float i;
  private long j;
  private float k;
  private float l;
  private float m;
  private ViewPager n;
  private int o = 0;
  private int p = 0;
  private int q;
  private float r;
  private boolean s;
  private float[] t;
  private float[] u;
  private float v;
  private float w;
  private float[] x;
  private boolean y;
  private boolean z;
  
  public InkPageIndicator(Context paramContext)
  {
    this(paramContext, null, 0);
  }
  
  public InkPageIndicator(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public InkPageIndicator(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    int i1 = (int)getResourcesgetDisplayMetricsdensity;
    paramAttributeSet = getContext().obtainStyledAttributes(paramAttributeSet, b.g.a.a.InkPageIndicator, paramInt, 0);
    c = paramAttributeSet.getDimensionPixelSize(b.g.a.a.InkPageIndicator_dotDiameter, i1 * 8);
    h = (c / 2);
    i = (h / 2.0F);
    d = paramAttributeSet.getDimensionPixelSize(b.g.a.a.InkPageIndicator_dotGap, i1 * 12);
    e = paramAttributeSet.getInteger(b.g.a.a.InkPageIndicator_animationDuration, 400);
    j = (e / 2L);
    f = paramAttributeSet.getColor(b.g.a.a.InkPageIndicator_pageIndicatorColor, -2130706433);
    g = paramAttributeSet.getColor(b.g.a.a.InkPageIndicator_currentPageIndicatorColor, -1);
    paramAttributeSet.recycle();
    A = new Paint(1);
    A.setColor(f);
    B = new Paint(1);
    B.setColor(g);
    J = b.g.a.b.a.a(paramContext);
    C = new Path();
    D = new Path();
    E = new Path();
    F = new Path();
    G = new RectF();
    addOnAttachStateChangeListener(this);
  }
  
  private ValueAnimator a(float paramFloat, int paramInt1, int paramInt2, int paramInt3)
  {
    ValueAnimator localValueAnimator = ValueAnimator.ofFloat(new float[] { r, paramFloat });
    Object localObject;
    if (paramInt2 > paramInt1) {
      localObject = new i(paramFloat - (paramFloat - r) * 0.25F);
    } else {
      localObject = new e((r - paramFloat) * 0.25F + paramFloat);
    }
    H = new f(paramInt1, paramInt2, paramInt3, (j)localObject);
    H.addListener(new b());
    localValueAnimator.addUpdateListener(new c());
    localValueAnimator.addListener(new d());
    long l1;
    if (s) {
      l1 = e / 4L;
    } else {
      l1 = 0L;
    }
    localValueAnimator.setStartDelay(l1);
    localValueAnimator.setDuration(e * 3L / 4L);
    localValueAnimator.setInterpolator(J);
    return localValueAnimator;
  }
  
  private Path a(int paramInt, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
  {
    D.rewind();
    if (((paramFloat3 == 0.0F) || (paramFloat3 == -1.0F)) && (paramFloat4 == 0.0F) && ((paramInt != p) || (!s))) {
      D.addCircle(t[paramInt], l, h, Path.Direction.CW);
    }
    Object localObject;
    float f1;
    float f2;
    float f3;
    if ((paramFloat3 > 0.0F) && (paramFloat3 <= 0.5F) && (v == -1.0F))
    {
      E.rewind();
      E.moveTo(paramFloat1, m);
      localObject = G;
      f1 = h;
      ((RectF)localObject).set(paramFloat1 - f1, k, f1 + paramFloat1, m);
      E.arcTo(G, 90.0F, 180.0F, true);
      K = (h + paramFloat1 + d * paramFloat3);
      L = l;
      f1 = i;
      O = (paramFloat1 + f1);
      P = k;
      f2 = K;
      Q = f2;
      f3 = L;
      R = (f3 - f1);
      E.cubicTo(O, P, Q, R, f2, f3);
      M = paramFloat1;
      f1 = m;
      N = f1;
      O = K;
      f2 = L;
      f3 = i;
      P = (f2 + f3);
      Q = (paramFloat1 + f3);
      R = f1;
      E.cubicTo(O, P, Q, R, M, N);
      if (Build.VERSION.SDK_INT >= 19) {
        D.op(E, Path.Op.UNION);
      } else {
        D.addPath(E);
      }
      F.rewind();
      F.moveTo(paramFloat2, m);
      localObject = G;
      f1 = h;
      ((RectF)localObject).set(paramFloat2 - f1, k, f1 + paramFloat2, m);
      F.arcTo(G, 90.0F, -180.0F, true);
      K = (paramFloat2 - h - d * paramFloat3);
      L = l;
      f1 = i;
      O = (paramFloat2 - f1);
      P = k;
      f2 = K;
      Q = f2;
      f3 = L;
      R = (f3 - f1);
      F.cubicTo(O, P, Q, R, f2, f3);
      M = paramFloat2;
      f1 = m;
      N = f1;
      O = K;
      f3 = L;
      f2 = i;
      P = (f3 + f2);
      f3 = M;
      Q = (f3 - f2);
      R = f1;
      F.cubicTo(O, P, Q, R, f3, N);
      if (Build.VERSION.SDK_INT >= 19) {
        D.op(F, Path.Op.UNION);
      } else {
        D.addPath(F);
      }
    }
    if ((paramFloat3 > 0.5F) && (paramFloat3 < 1.0F) && (v == -1.0F))
    {
      f1 = (paramFloat3 - 0.2F) * 1.25F;
      D.moveTo(paramFloat1, m);
      localObject = G;
      f2 = h;
      ((RectF)localObject).set(paramFloat1 - f2, k, f2 + paramFloat1, m);
      D.arcTo(G, 90.0F, 180.0F, true);
      f3 = h;
      K = (paramFloat1 + f3 + d / 2);
      L = (l - f1 * f3);
      f2 = K;
      O = (f2 - f1 * f3);
      P = k;
      Q = (f2 - (1.0F - f1) * f3);
      f3 = L;
      R = f3;
      D.cubicTo(O, P, Q, R, f2, f3);
      M = paramFloat2;
      f2 = k;
      N = f2;
      f3 = K;
      float f4 = h;
      O = ((1.0F - f1) * f4 + f3);
      P = L;
      Q = (f3 + f4 * f1);
      R = f2;
      D.cubicTo(O, P, Q, R, M, N);
      localObject = G;
      f2 = h;
      ((RectF)localObject).set(paramFloat2 - f2, k, f2 + paramFloat2, m);
      D.arcTo(G, 270.0F, 180.0F, true);
      f3 = l;
      f2 = h;
      L = (f3 + f1 * f2);
      f3 = K;
      O = (f1 * f2 + f3);
      P = m;
      Q = ((1.0F - f1) * f2 + f3);
      f2 = L;
      R = f2;
      D.cubicTo(O, P, Q, R, f3, f2);
      M = paramFloat1;
      N = m;
      f2 = K;
      f3 = h;
      O = (f2 - (1.0F - f1) * f3);
      P = L;
      Q = (f2 - f3 * f1);
      f1 = N;
      R = f1;
      D.cubicTo(O, P, Q, R, M, f1);
    }
    if ((paramFloat3 == 1.0F) && (v == -1.0F))
    {
      localObject = G;
      paramFloat3 = h;
      ((RectF)localObject).set(paramFloat1 - paramFloat3, k, paramFloat3 + paramFloat2, m);
      localObject = D;
      RectF localRectF = G;
      paramFloat2 = h;
      ((Path)localObject).addRoundRect(localRectF, paramFloat2, paramFloat2, Path.Direction.CW);
    }
    if (paramFloat4 > 1.0E-5F) {
      D.addCircle(paramFloat1, l, h * paramFloat4, Path.Direction.CW);
    }
    return D;
  }
  
  private void a()
  {
    Arrays.fill(u, 0.0F);
    if (Build.VERSION.SDK_INT >= 16)
    {
      postInvalidateOnAnimation();
      return;
    }
    postInvalidate();
  }
  
  private void a(int paramInt, float paramFloat)
  {
    x[paramInt] = paramFloat;
    if (Build.VERSION.SDK_INT >= 16)
    {
      postInvalidateOnAnimation();
      return;
    }
    postInvalidate();
  }
  
  private void a(int paramInt1, int paramInt2)
  {
    if (!S) {
      return;
    }
    int i1 = getPaddingLeft();
    int i2 = getPaddingTop();
    int i3 = getPaddingRight();
    int i4 = getPaddingBottom();
    float f1 = i2 + (paramInt2 - i4) / 2.0F;
    float f2 = i1;
    float f3 = (paramInt1 - i3) / 2.0F;
    float f4 = getRequiredWidth() / 2.0F;
    float f5 = h;
    t = new float[Math.max(1, o)];
    paramInt1 = 0;
    while (paramInt1 < o)
    {
      t[paramInt1] = ((c + d) * paramInt1 + (f2 + f3 - f4 + f5));
      paramInt1 += 1;
    }
    f2 = h;
    k = (f1 - f2);
    l = f1;
    m = (f2 + f1);
    c();
  }
  
  private void a(Canvas paramCanvas)
  {
    paramCanvas.drawCircle(r, l, h, B);
  }
  
  private void b()
  {
    u = new float[Math.max(o - 1, 0)];
    Arrays.fill(u, 0.0F);
    x = new float[o];
    Arrays.fill(x, 0.0F);
    v = -1.0F;
    w = -1.0F;
    s = true;
  }
  
  private void b(int paramInt, float paramFloat)
  {
    float[] arrayOfFloat = u;
    if (paramInt < arrayOfFloat.length)
    {
      arrayOfFloat[paramInt] = paramFloat;
      if (Build.VERSION.SDK_INT >= 16)
      {
        postInvalidateOnAnimation();
        return;
      }
      postInvalidate();
    }
  }
  
  private void b(Canvas paramCanvas)
  {
    C.rewind();
    int i1 = 0;
    Object localObject;
    for (;;)
    {
      int i2 = o;
      if (i1 >= i2) {
        break;
      }
      if (i1 == i2 - 1) {
        i2 = i1;
      } else {
        i2 = i1 + 1;
      }
      localObject = t;
      float f2 = localObject[i1];
      float f3 = localObject[i2];
      float f1;
      if (i1 == o - 1) {
        f1 = -1.0F;
      } else {
        f1 = u[i1];
      }
      localObject = a(i1, f2, f3, f1, x[i1]);
      if (Build.VERSION.SDK_INT >= 19) {
        C.op((Path)localObject, Path.Op.UNION);
      } else {
        C.addPath((Path)localObject);
      }
      i1 += 1;
    }
    if (v != -1.0F)
    {
      localObject = getRetreatingJoinPath();
      if (Build.VERSION.SDK_INT >= 19) {
        C.op((Path)localObject, Path.Op.UNION);
      } else {
        C.addPath((Path)localObject);
      }
    }
    paramCanvas.drawPath(C, A);
  }
  
  private void c()
  {
    Object localObject = n;
    if (localObject != null) {
      p = ((ViewPager)localObject).getCurrentItem();
    } else {
      p = 0;
    }
    localObject = t;
    if (localObject != null) {
      r = localObject[Math.max(0, Math.min(p, localObject.length - 1))];
    }
  }
  
  private int getDesiredHeight()
  {
    return getPaddingTop() + c + getPaddingBottom();
  }
  
  private int getDesiredWidth()
  {
    return getPaddingLeft() + getRequiredWidth() + getPaddingRight();
  }
  
  private int getRequiredWidth()
  {
    int i1 = o;
    return c * i1 + (i1 - 1) * d;
  }
  
  private Path getRetreatingJoinPath()
  {
    D.rewind();
    G.set(v, k, w, m);
    Path localPath = D;
    RectF localRectF = G;
    float f1 = h;
    localPath.addRoundRect(localRectF, f1, f1, Path.Direction.CW);
    return D;
  }
  
  private void setPageCount(int paramInt)
  {
    o = paramInt;
    a(getWidth(), getHeight());
    b();
    requestLayout();
  }
  
  private void setSelectedPage(int paramInt)
  {
    int i1 = Math.min(paramInt, o - 1);
    paramInt = p;
    if (i1 == paramInt) {
      return;
    }
    z = true;
    q = paramInt;
    p = i1;
    int i2 = Math.abs(i1 - q);
    if (i2 > 1) {
      if (i1 > q)
      {
        paramInt = 0;
        while (paramInt < i2)
        {
          b(q + paramInt, 1.0F);
          paramInt += 1;
        }
      }
      else
      {
        paramInt = -1;
        while (paramInt > -i2)
        {
          b(q + paramInt, 1.0F);
          paramInt -= 1;
        }
      }
    }
    if (getVisibility() == 0) {
      a(t[i1], q, i1, i2).start();
    }
  }
  
  public void a(int paramInt) {}
  
  public void a(int paramInt1, float paramFloat, int paramInt2)
  {
    if (y)
    {
      float f1 = paramFloat;
      if (z) {
        paramInt2 = q;
      } else {
        paramInt2 = p;
      }
      int i1 = paramInt1;
      int i2 = i1;
      if (paramInt2 != paramInt1)
      {
        paramFloat = 1.0F - paramFloat;
        f1 = paramFloat;
        i2 = i1;
        if (paramFloat == 1.0F)
        {
          i2 = Math.min(paramInt2, paramInt1);
          f1 = paramFloat;
        }
      }
      b(i2, f1);
    }
  }
  
  public void b(int paramInt)
  {
    if (y)
    {
      setSelectedPage(paramInt);
      return;
    }
    c();
  }
  
  public int getCurrentPageIndicatorColor()
  {
    return B.getColor();
  }
  
  public int getPageIndicatorColor()
  {
    return A.getColor();
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    if (n != null)
    {
      if (o == 0) {
        return;
      }
      b(paramCanvas);
      a(paramCanvas);
      return;
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i1 = getDesiredHeight();
    int i2 = View.MeasureSpec.getMode(paramInt2);
    if (i2 != Integer.MIN_VALUE)
    {
      if (i2 != 1073741824) {
        paramInt2 = i1;
      } else {
        paramInt2 = View.MeasureSpec.getSize(paramInt2);
      }
    }
    else {
      paramInt2 = Math.min(i1, View.MeasureSpec.getSize(paramInt2));
    }
    i1 = getDesiredWidth();
    i2 = View.MeasureSpec.getMode(paramInt1);
    if (i2 != Integer.MIN_VALUE)
    {
      if (i2 != 1073741824) {
        paramInt1 = i1;
      } else {
        paramInt1 = View.MeasureSpec.getSize(paramInt1);
      }
    }
    else {
      paramInt1 = Math.min(i1, View.MeasureSpec.getSize(paramInt1));
    }
    setMeasuredDimension(paramInt1, paramInt2);
    if (!S) {
      S = true;
    }
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    a(paramInt1, paramInt2);
  }
  
  public void onViewAttachedToWindow(View paramView)
  {
    y = true;
  }
  
  public void onViewDetachedFromWindow(View paramView)
  {
    y = false;
  }
  
  public void setCurrentPageIndicatorColor(int paramInt)
  {
    B.setColor(paramInt);
    invalidate();
  }
  
  public void setPageIndicatorColor(int paramInt)
  {
    A.setColor(paramInt);
    invalidate();
  }
  
  public void setViewPager(ViewPager paramViewPager)
  {
    n = paramViewPager;
    paramViewPager.a(this);
    setPageCount(paramViewPager.getAdapter().a());
    paramViewPager.getAdapter().a(new a());
  }
  
  class a
    extends DataSetObserver
  {
    a() {}
    
    public void onChanged()
    {
      InkPageIndicator localInkPageIndicator = InkPageIndicator.this;
      InkPageIndicator.a(localInkPageIndicator, InkPageIndicator.a(localInkPageIndicator).getAdapter().a());
      invalidate();
    }
  }
  
  class b
    extends AnimatorListenerAdapter
  {
    b() {}
    
    public void onAnimationEnd(Animator paramAnimator)
    {
      InkPageIndicator.g(InkPageIndicator.this);
      InkPageIndicator.a(InkPageIndicator.this, false);
    }
  }
  
  class c
    implements ValueAnimator.AnimatorUpdateListener
  {
    c() {}
    
    public void onAnimationUpdate(ValueAnimator paramValueAnimator)
    {
      InkPageIndicator.c(InkPageIndicator.this, ((Float)paramValueAnimator.getAnimatedValue()).floatValue());
      InkPageIndicator.i(InkPageIndicator.this).a(InkPageIndicator.h(InkPageIndicator.this));
      if (Build.VERSION.SDK_INT >= 16)
      {
        postInvalidateOnAnimation();
        return;
      }
      postInvalidate();
    }
  }
  
  class d
    extends AnimatorListenerAdapter
  {
    d() {}
    
    public void onAnimationEnd(Animator paramAnimator)
    {
      InkPageIndicator.b(InkPageIndicator.this, true);
    }
    
    public void onAnimationStart(Animator paramAnimator)
    {
      InkPageIndicator.b(InkPageIndicator.this, false);
    }
  }
  
  public class e
    extends InkPageIndicator.j
  {
    public e(float paramFloat)
    {
      super(paramFloat);
    }
    
    boolean a(float paramFloat)
    {
      return paramFloat < a;
    }
  }
  
  public class f
    extends InkPageIndicator.h
  {
    public f(int paramInt1, int paramInt2, int paramInt3, final InkPageIndicator.j paramJ)
    {
      super(paramJ);
      setDuration(InkPageIndicator.j(InkPageIndicator.this));
      setInterpolator(InkPageIndicator.k(InkPageIndicator.this));
      final float f1;
      if (paramInt2 > paramInt1) {
        f1 = Math.min(InkPageIndicator.l(InkPageIndicator.this)[paramInt1], InkPageIndicator.h(InkPageIndicator.this)) - InkPageIndicator.b(InkPageIndicator.this);
      } else {
        f1 = InkPageIndicator.l(InkPageIndicator.this)[paramInt2] - InkPageIndicator.b(InkPageIndicator.this);
      }
      float f2;
      if (paramInt2 > paramInt1) {
        f2 = InkPageIndicator.l(InkPageIndicator.this)[paramInt2] - InkPageIndicator.b(InkPageIndicator.this);
      } else {
        f2 = InkPageIndicator.l(InkPageIndicator.this)[paramInt2] - InkPageIndicator.b(InkPageIndicator.this);
      }
      final float f3;
      if (paramInt2 > paramInt1) {
        f3 = InkPageIndicator.l(InkPageIndicator.this)[paramInt2] + InkPageIndicator.b(InkPageIndicator.this);
      } else {
        f3 = Math.max(InkPageIndicator.l(InkPageIndicator.this)[paramInt1], InkPageIndicator.h(InkPageIndicator.this)) + InkPageIndicator.b(InkPageIndicator.this);
      }
      float f4;
      if (paramInt2 > paramInt1) {
        f4 = InkPageIndicator.l(InkPageIndicator.this)[paramInt2] + InkPageIndicator.b(InkPageIndicator.this);
      } else {
        f4 = InkPageIndicator.l(InkPageIndicator.this)[paramInt2] + InkPageIndicator.b(InkPageIndicator.this);
      }
      InkPageIndicator.a(InkPageIndicator.this, new InkPageIndicator.g[paramInt3]);
      paramJ = new int[paramInt3];
      if (f1 != f2)
      {
        setFloatValues(new float[] { f1, f2 });
        paramInt2 = 0;
        while (paramInt2 < paramInt3)
        {
          InkPageIndicator.c(InkPageIndicator.this)[paramInt2] = new InkPageIndicator.g(InkPageIndicator.this, paramInt1 + paramInt2, new InkPageIndicator.i(InkPageIndicator.this, InkPageIndicator.l(InkPageIndicator.this)[(paramInt1 + paramInt2)]));
          paramJ[paramInt2] = (paramInt1 + paramInt2);
          paramInt2 += 1;
        }
        addUpdateListener(new a(InkPageIndicator.this));
      }
      else
      {
        setFloatValues(new float[] { f3, f4 });
        paramInt2 = 0;
        while (paramInt2 < paramInt3)
        {
          InkPageIndicator.c(InkPageIndicator.this)[paramInt2] = new InkPageIndicator.g(InkPageIndicator.this, paramInt1 - paramInt2, new InkPageIndicator.e(InkPageIndicator.this, InkPageIndicator.l(InkPageIndicator.this)[(paramInt1 - paramInt2)]));
          paramJ[paramInt2] = (paramInt1 - paramInt2);
          paramInt2 += 1;
        }
        addUpdateListener(new b(InkPageIndicator.this));
      }
      addListener(new c(InkPageIndicator.this, paramJ, f1, f3));
    }
    
    class a
      implements ValueAnimator.AnimatorUpdateListener
    {
      a(InkPageIndicator paramInkPageIndicator) {}
      
      public void onAnimationUpdate(ValueAnimator paramValueAnimator)
      {
        InkPageIndicator.a(InkPageIndicator.this, ((Float)paramValueAnimator.getAnimatedValue()).floatValue());
        if (Build.VERSION.SDK_INT >= 16) {
          postInvalidateOnAnimation();
        } else {
          postInvalidate();
        }
        paramValueAnimator = InkPageIndicator.c(InkPageIndicator.this);
        int j = paramValueAnimator.length;
        int i = 0;
        while (i < j)
        {
          paramValueAnimator[i].a(InkPageIndicator.d(InkPageIndicator.this));
          i += 1;
        }
      }
    }
    
    class b
      implements ValueAnimator.AnimatorUpdateListener
    {
      b(InkPageIndicator paramInkPageIndicator) {}
      
      public void onAnimationUpdate(ValueAnimator paramValueAnimator)
      {
        InkPageIndicator.b(InkPageIndicator.this, ((Float)paramValueAnimator.getAnimatedValue()).floatValue());
        if (Build.VERSION.SDK_INT >= 16) {
          postInvalidateOnAnimation();
        } else {
          postInvalidate();
        }
        paramValueAnimator = InkPageIndicator.c(InkPageIndicator.this);
        int j = paramValueAnimator.length;
        int i = 0;
        while (i < j)
        {
          paramValueAnimator[i].a(InkPageIndicator.e(InkPageIndicator.this));
          i += 1;
        }
      }
    }
    
    class c
      extends AnimatorListenerAdapter
    {
      c(InkPageIndicator paramInkPageIndicator, int[] paramArrayOfInt, float paramFloat1, float paramFloat2) {}
      
      public void onAnimationEnd(Animator paramAnimator)
      {
        InkPageIndicator.a(InkPageIndicator.this, -1.0F);
        InkPageIndicator.b(InkPageIndicator.this, -1.0F);
        if (Build.VERSION.SDK_INT >= 16)
        {
          postInvalidateOnAnimation();
          return;
        }
        postInvalidate();
      }
      
      public void onAnimationStart(Animator paramAnimator)
      {
        InkPageIndicator.f(InkPageIndicator.this);
        paramAnimator = paramJ;
        int j = paramAnimator.length;
        int i = 0;
        while (i < j)
        {
          int k = paramAnimator[i];
          InkPageIndicator.a(InkPageIndicator.this, k, 1.0E-5F);
          i += 1;
        }
        InkPageIndicator.a(InkPageIndicator.this, f1);
        InkPageIndicator.b(InkPageIndicator.this, f3);
        if (Build.VERSION.SDK_INT >= 16)
        {
          postInvalidateOnAnimation();
          return;
        }
        postInvalidate();
      }
    }
  }
  
  public class g
    extends InkPageIndicator.h
  {
    private int e;
    
    public g(int paramInt, InkPageIndicator.j paramJ)
    {
      super(paramJ);
      setFloatValues(new float[] { 1.0E-5F, 1.0F });
      e = paramInt;
      setDuration(InkPageIndicator.j(InkPageIndicator.this));
      setInterpolator(InkPageIndicator.k(InkPageIndicator.this));
      addUpdateListener(new a(InkPageIndicator.this));
      addListener(new b(InkPageIndicator.this));
    }
    
    class a
      implements ValueAnimator.AnimatorUpdateListener
    {
      a(InkPageIndicator paramInkPageIndicator) {}
      
      public void onAnimationUpdate(ValueAnimator paramValueAnimator)
      {
        InkPageIndicator.g localG = InkPageIndicator.g.this;
        InkPageIndicator.a(f, InkPageIndicator.g.a(localG), ((Float)paramValueAnimator.getAnimatedValue()).floatValue());
      }
    }
    
    class b
      extends AnimatorListenerAdapter
    {
      b(InkPageIndicator paramInkPageIndicator) {}
      
      public void onAnimationEnd(Animator paramAnimator)
      {
        paramAnimator = InkPageIndicator.g.this;
        InkPageIndicator.a(f, InkPageIndicator.g.a(paramAnimator), 0.0F);
        if (Build.VERSION.SDK_INT >= 16)
        {
          postInvalidateOnAnimation();
          return;
        }
        postInvalidate();
      }
    }
  }
  
  public abstract class h
    extends ValueAnimator
  {
    protected boolean c;
    protected InkPageIndicator.j d;
    
    public h(InkPageIndicator.j paramJ)
    {
      d = paramJ;
      c = false;
    }
    
    public void a(float paramFloat)
    {
      if ((!c) && (d.a(paramFloat)))
      {
        start();
        c = true;
      }
    }
  }
  
  public class i
    extends InkPageIndicator.j
  {
    public i(float paramFloat)
    {
      super(paramFloat);
    }
    
    boolean a(float paramFloat)
    {
      return paramFloat > a;
    }
  }
  
  public abstract class j
  {
    protected float a;
    
    public j(float paramFloat)
    {
      a = paramFloat;
    }
    
    abstract boolean a(float paramFloat);
  }
}
