package com.github.clans.fab;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Outline;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffXfermode;
import android.graphics.RectF;
import android.graphics.Xfermode;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.LayerDrawable;
import android.graphics.drawable.RippleDrawable;
import android.graphics.drawable.ShapeDrawable;
import android.graphics.drawable.StateListDrawable;
import android.graphics.drawable.shapes.OvalShape;
import android.graphics.drawable.shapes.Shape;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import android.os.SystemClock;
import android.util.AttributeSet;
import android.view.GestureDetector;
import android.view.GestureDetector.SimpleOnGestureListener;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.BaseSavedState;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.ViewOutlineProvider;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.ImageButton;
import android.widget.TextView;

public class FloatingActionButton
  extends ImageButton
{
  private static final Xfermode a0 = new PorterDuffXfermode(PorterDuff.Mode.CLEAR);
  private float A = -1.0F;
  private float B = -1.0F;
  private boolean C;
  private RectF D = new RectF();
  private Paint E = new Paint(1);
  private Paint F = new Paint(1);
  private boolean G;
  private long H;
  private float I = 195.0F;
  private long J = 0L;
  private double K;
  private boolean L = true;
  private int M = 16;
  private float N;
  private float O;
  private float P;
  private int Q;
  private boolean R;
  private boolean S;
  private boolean T;
  private int U = 100;
  private boolean V;
  GestureDetector W = new GestureDetector(getContext(), new b());
  int c;
  boolean d;
  int e;
  int f = g.a(getContext(), 4.0F);
  int g = g.a(getContext(), 1.0F);
  int h = g.a(getContext(), 3.0F);
  private int i;
  private int j;
  private int k;
  private int l;
  private Drawable m;
  private int n = g.a(getContext(), 24.0F);
  private Animation o;
  private Animation p;
  private String q;
  private View.OnClickListener r;
  private Drawable s;
  private boolean t;
  private boolean u;
  private boolean v;
  private int w = g.a(getContext(), 6.0F);
  private int x;
  private int y;
  private boolean z;
  
  public FloatingActionButton(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public FloatingActionButton(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public FloatingActionButton(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    a(paramContext, paramAttributeSet, paramInt);
  }
  
  @TargetApi(21)
  public FloatingActionButton(Context paramContext, AttributeSet paramAttributeSet, int paramInt1, int paramInt2)
  {
    super(paramContext, paramAttributeSet, paramInt1, paramInt2);
    a(paramContext, paramAttributeSet, paramInt1);
  }
  
  private Drawable a(int paramInt)
  {
    d localD = new d(new OvalShape(), null);
    localD.getPaint().setColor(paramInt);
    return localD;
  }
  
  private void a(long paramLong)
  {
    long l1 = J;
    if (l1 >= 200L)
    {
      double d1 = K;
      double d2 = paramLong;
      Double.isNaN(d2);
      K = (d1 + d2);
      d1 = K;
      if (d1 > 500.0D)
      {
        K = (d1 - 500.0D);
        J = 0L;
        L ^= true;
      }
      float f1 = (float)Math.cos((K / 500.0D + 1.0D) * 3.141592653589793D) / 2.0F + 0.5F;
      float f2 = 270 - M;
      if (L)
      {
        N = (f1 * f2);
      }
      else
      {
        f1 = (1.0F - f1) * f2;
        O += N - f1;
        N = f1;
      }
      return;
    }
    J = (l1 + paramLong);
  }
  
  private void a(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, f.FloatingActionButton, paramInt, 0);
    i = paramContext.getColor(f.FloatingActionButton_fab_colorNormal, -2473162);
    j = paramContext.getColor(f.FloatingActionButton_fab_colorPressed, -1617853);
    k = paramContext.getColor(f.FloatingActionButton_fab_colorDisabled, -5592406);
    l = paramContext.getColor(f.FloatingActionButton_fab_colorRipple, -1711276033);
    d = paramContext.getBoolean(f.FloatingActionButton_fab_showShadow, true);
    e = paramContext.getColor(f.FloatingActionButton_fab_shadowColor, 1711276032);
    f = paramContext.getDimensionPixelSize(f.FloatingActionButton_fab_shadowRadius, f);
    g = paramContext.getDimensionPixelSize(f.FloatingActionButton_fab_shadowXOffset, g);
    h = paramContext.getDimensionPixelSize(f.FloatingActionButton_fab_shadowYOffset, h);
    c = paramContext.getInt(f.FloatingActionButton_fab_size, 0);
    q = paramContext.getString(f.FloatingActionButton_fab_label);
    S = paramContext.getBoolean(f.FloatingActionButton_fab_progress_indeterminate, false);
    x = paramContext.getColor(f.FloatingActionButton_fab_progress_color, -16738680);
    y = paramContext.getColor(f.FloatingActionButton_fab_progress_backgroundColor, 1291845632);
    U = paramContext.getInt(f.FloatingActionButton_fab_progress_max, U);
    V = paramContext.getBoolean(f.FloatingActionButton_fab_progress_showBackground, true);
    if (paramContext.hasValue(f.FloatingActionButton_fab_progress))
    {
      Q = paramContext.getInt(f.FloatingActionButton_fab_progress, 0);
      T = true;
    }
    if (paramContext.hasValue(f.FloatingActionButton_fab_elevationCompat))
    {
      float f1 = paramContext.getDimensionPixelOffset(f.FloatingActionButton_fab_elevationCompat, 0);
      if (isInEditMode()) {
        setElevation(f1);
      } else {
        setElevationCompat(f1);
      }
    }
    b(paramContext);
    a(paramContext);
    paramContext.recycle();
    if (isInEditMode()) {
      if (S)
      {
        setIndeterminate(true);
      }
      else if (T)
      {
        p();
        a(Q, false);
      }
    }
    setClickable(true);
  }
  
  private void a(TypedArray paramTypedArray)
  {
    int i1 = paramTypedArray.getResourceId(f.FloatingActionButton_fab_hideAnimation, b.fab_scale_down);
    p = AnimationUtils.loadAnimation(getContext(), i1);
  }
  
  private void b(TypedArray paramTypedArray)
  {
    int i1 = paramTypedArray.getResourceId(f.FloatingActionButton_fab_showAnimation, b.fab_scale_up);
    o = AnimationUtils.loadAnimation(getContext(), i1);
  }
  
  private int getCircleSize()
  {
    Resources localResources = getResources();
    int i1;
    if (c == 0) {
      i1 = c.fab_size_normal;
    } else {
      i1 = c.fab_size_mini;
    }
    return localResources.getDimensionPixelSize(i1);
  }
  
  private int getShadowX()
  {
    return f + Math.abs(g);
  }
  
  private int getShadowY()
  {
    return f + Math.abs(h);
  }
  
  private float k()
  {
    return getMeasuredWidth() / 2;
  }
  
  private float l()
  {
    return getMeasuredHeight() / 2;
  }
  
  private int m()
  {
    int i2 = getCircleSize() + a();
    int i1 = i2;
    if (v) {
      i1 = i2 + w * 2;
    }
    return i1;
  }
  
  private int n()
  {
    int i2 = getCircleSize() + b();
    int i1 = i2;
    if (v) {
      i1 = i2 + w * 2;
    }
    return i1;
  }
  
  @TargetApi(21)
  private Drawable o()
  {
    Object localObject = new StateListDrawable();
    Drawable localDrawable = a(k);
    ((StateListDrawable)localObject).addState(new int[] { -16842910 }, localDrawable);
    localDrawable = a(j);
    ((StateListDrawable)localObject).addState(new int[] { 16842919 }, localDrawable);
    localDrawable = a(i);
    ((StateListDrawable)localObject).addState(new int[0], localDrawable);
    if (g.b())
    {
      int i1 = l;
      localObject = new RippleDrawable(new ColorStateList(new int[][] { new int[0] }, new int[] { i1 }), (Drawable)localObject, null);
      setOutlineProvider(new a());
      setClipToOutline(true);
      s = ((Drawable)localObject);
      return localObject;
    }
    s = ((Drawable)localObject);
    return localObject;
  }
  
  private void p()
  {
    if (!C)
    {
      if (A == -1.0F) {
        A = getX();
      }
      if (B == -1.0F) {
        B = getY();
      }
      C = true;
    }
  }
  
  private void q()
  {
    E.setColor(y);
    E.setStyle(Paint.Style.STROKE);
    E.setStrokeWidth(w);
    F.setColor(x);
    F.setStyle(Paint.Style.STROKE);
    F.setStrokeWidth(w);
  }
  
  private void r()
  {
    boolean bool = c();
    int i2 = 0;
    int i1;
    if (bool) {
      i1 = getShadowX();
    } else {
      i1 = 0;
    }
    if (c()) {
      i2 = getShadowY();
    }
    int i3 = w;
    D = new RectF(i3 / 2 + i1, i3 / 2 + i2, n() - i1 - w / 2, m() - i2 - w / 2);
  }
  
  private void s()
  {
    float f1;
    float f2;
    if (v)
    {
      if (A > getX()) {
        f1 = getX() + w;
      } else {
        f1 = getX() - w;
      }
      if (B > getY()) {
        f2 = getY() + w;
      } else {
        f2 = getY() - w;
      }
    }
    else
    {
      f1 = A;
      f2 = B;
    }
    setX(f1);
    setY(f2);
  }
  
  @TargetApi(16)
  private void setBackgroundCompat(Drawable paramDrawable)
  {
    if (g.a())
    {
      setBackground(paramDrawable);
      return;
    }
    setBackgroundDrawable(paramDrawable);
  }
  
  int a()
  {
    if (c()) {
      return getShadowY() * 2;
    }
    return 0;
  }
  
  void a(int paramInt1, int paramInt2, int paramInt3)
  {
    i = paramInt1;
    j = paramInt2;
    l = paramInt3;
  }
  
  public void a(int paramInt, boolean paramBoolean)
  {
    for (;;)
    {
      try
      {
        boolean bool = G;
        if (bool) {
          return;
        }
        Q = paramInt;
        R = paramBoolean;
        if (!C)
        {
          T = true;
          return;
        }
        v = true;
        z = true;
        r();
        p();
        i();
        int i1;
        if (paramInt < 0)
        {
          i1 = 0;
        }
        else
        {
          i1 = paramInt;
          if (paramInt > U) {
            i1 = U;
          }
        }
        f1 = i1;
        float f2 = P;
        if (f1 == f2) {
          return;
        }
        if (U > 0)
        {
          f1 = i1 / U * 360.0F;
          P = f1;
          H = SystemClock.uptimeMillis();
          if (!paramBoolean) {
            O = P;
          }
          invalidate();
          return;
        }
      }
      finally {}
      float f1 = 0.0F;
    }
  }
  
  public void a(boolean paramBoolean)
  {
    if (!d())
    {
      if (paramBoolean) {
        g();
      }
      super.setVisibility(4);
    }
  }
  
  int b()
  {
    if (c()) {
      return getShadowX() * 2;
    }
    return 0;
  }
  
  public void b(boolean paramBoolean)
  {
    if (d())
    {
      if (paramBoolean) {
        h();
      }
      super.setVisibility(0);
    }
  }
  
  public boolean c()
  {
    return (!t) && (d);
  }
  
  public boolean d()
  {
    return getVisibility() == 4;
  }
  
  @TargetApi(21)
  void e()
  {
    Object localObject = s;
    if ((localObject instanceof StateListDrawable))
    {
      ((StateListDrawable)localObject).setState(new int[] { 16842910, 16842919 });
    }
    else if (g.b())
    {
      localObject = (RippleDrawable)s;
      ((RippleDrawable)localObject).setState(new int[] { 16842910, 16842919 });
      ((RippleDrawable)localObject).setHotspot(k(), l());
      ((RippleDrawable)localObject).setVisible(true, true);
      return;
    }
  }
  
  @TargetApi(21)
  void f()
  {
    Object localObject = s;
    if ((localObject instanceof StateListDrawable))
    {
      ((StateListDrawable)localObject).setState(new int[] { 16842910 });
    }
    else if (g.b())
    {
      localObject = (RippleDrawable)s;
      ((RippleDrawable)localObject).setState(new int[] { 16842910 });
      ((RippleDrawable)localObject).setHotspot(k(), l());
      ((RippleDrawable)localObject).setVisible(true, true);
      return;
    }
  }
  
  void g()
  {
    o.cancel();
    startAnimation(p);
  }
  
  public int getButtonSize()
  {
    return c;
  }
  
  public int getColorDisabled()
  {
    return k;
  }
  
  public int getColorNormal()
  {
    return i;
  }
  
  public int getColorPressed()
  {
    return j;
  }
  
  public int getColorRipple()
  {
    return l;
  }
  
  Animation getHideAnimation()
  {
    return p;
  }
  
  protected Drawable getIconDrawable()
  {
    Drawable localDrawable = m;
    if (localDrawable != null) {
      return localDrawable;
    }
    return new ColorDrawable(0);
  }
  
  public String getLabelText()
  {
    return q;
  }
  
  a getLabelView()
  {
    return (a)getTag(e.fab_label);
  }
  
  public int getLabelVisibility()
  {
    a localA = getLabelView();
    if (localA != null) {
      return localA.getVisibility();
    }
    return -1;
  }
  
  public int getMax()
  {
    try
    {
      int i1 = U;
      return i1;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  View.OnClickListener getOnClickListener()
  {
    return r;
  }
  
  public int getProgress()
  {
    try
    {
      int i1;
      if (G) {
        i1 = 0;
      } else {
        i1 = Q;
      }
      return i1;
    }
    finally {}
  }
  
  public int getShadowColor()
  {
    return e;
  }
  
  public int getShadowRadius()
  {
    return f;
  }
  
  public int getShadowXOffset()
  {
    return g;
  }
  
  public int getShadowYOffset()
  {
    return h;
  }
  
  Animation getShowAnimation()
  {
    return o;
  }
  
  void h()
  {
    p.cancel();
    startAnimation(o);
  }
  
  void i()
  {
    boolean bool = c();
    int i2 = 0;
    LayerDrawable localLayerDrawable;
    if (bool) {
      localLayerDrawable = new LayerDrawable(new Drawable[] { new f(null), o(), getIconDrawable() });
    } else {
      localLayerDrawable = new LayerDrawable(new Drawable[] { o(), getIconDrawable() });
    }
    int i1;
    if (getIconDrawable() != null) {
      i1 = Math.max(getIconDrawable().getIntrinsicWidth(), getIconDrawable().getIntrinsicHeight());
    } else {
      i1 = -1;
    }
    int i3 = getCircleSize();
    if (i1 <= 0) {
      i1 = n;
    }
    int i4 = (i3 - i1) / 2;
    if (c()) {
      i1 = f + Math.abs(g);
    } else {
      i1 = 0;
    }
    if (c()) {
      i2 = f + Math.abs(h);
    }
    if (v)
    {
      i3 = w;
      i2 += i3;
      i1 += i3;
    }
    if (c()) {
      i3 = 2;
    } else {
      i3 = 1;
    }
    localLayerDrawable.setLayerInset(i3, i1 + i4, i2 + i4, i1 + i4, i2 + i4);
    setBackgroundCompat(localLayerDrawable);
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    if (v)
    {
      if (V) {
        paramCanvas.drawArc(D, 360.0F, 360.0F, false, E);
      }
      int i1 = 0;
      float f1;
      float f2;
      if (G)
      {
        i1 = 1;
        long l1 = SystemClock.uptimeMillis() - H;
        f1 = (float)l1 * I / 1000.0F;
        a(l1);
        O += f1;
        f1 = O;
        if (f1 > 360.0F) {
          O = (f1 - 360.0F);
        }
        H = SystemClock.uptimeMillis();
        f1 = O - 90.0F;
        f2 = M + N;
        if (isInEditMode())
        {
          f1 = 0.0F;
          f2 = 135.0F;
        }
        paramCanvas.drawArc(D, f1, f2, false, F);
      }
      else
      {
        if (O != P)
        {
          i1 = 1;
          f1 = (float)(SystemClock.uptimeMillis() - H) / 1000.0F;
          f1 = I * f1;
          f2 = O;
          float f3 = P;
          if (f2 > f3) {
            O = Math.max(f2 - f1, f3);
          } else {
            O = Math.min(f2 + f1, f3);
          }
          H = SystemClock.uptimeMillis();
        }
        paramCanvas.drawArc(D, -90.0F, O, false, F);
      }
      if (i1 != 0) {
        invalidate();
      }
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    setMeasuredDimension(n(), m());
  }
  
  public void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof e))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    paramParcelable = (e)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.getSuperState());
    O = c;
    P = d;
    I = e;
    w = g;
    x = h;
    y = i;
    S = m;
    T = n;
    Q = f;
    R = o;
    V = p;
    H = SystemClock.uptimeMillis();
  }
  
  public Parcelable onSaveInstanceState()
  {
    e localE = new e(super.onSaveInstanceState());
    c = O;
    d = P;
    e = I;
    g = w;
    h = x;
    i = y;
    boolean bool = G;
    m = bool;
    if ((v) && (Q > 0) && (!bool)) {
      bool = true;
    } else {
      bool = false;
    }
    n = bool;
    f = Q;
    o = R;
    p = V;
    return localE;
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    p();
    if (S)
    {
      setIndeterminate(true);
      S = false;
    }
    else if (T)
    {
      a(Q, R);
      T = false;
    }
    else if (z)
    {
      s();
      z = false;
    }
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    r();
    q();
    i();
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if ((r != null) && (isEnabled()))
    {
      a localA = (a)getTag(e.fab_label);
      if (localA == null) {
        return super.onTouchEvent(paramMotionEvent);
      }
      int i1 = paramMotionEvent.getAction();
      if (i1 != 1)
      {
        if (i1 == 3)
        {
          if (localA != null) {
            localA.e();
          }
          f();
        }
      }
      else
      {
        if (localA != null) {
          localA.e();
        }
        f();
      }
      W.onTouchEvent(paramMotionEvent);
    }
    return super.onTouchEvent(paramMotionEvent);
  }
  
  public void setButtonSize(int paramInt)
  {
    if ((paramInt != 0) && (paramInt != 1)) {
      throw new IllegalArgumentException("Use @FabSize constants only!");
    }
    if (c != paramInt)
    {
      c = paramInt;
      i();
    }
  }
  
  public void setColorDisabled(int paramInt)
  {
    if (paramInt != k)
    {
      k = paramInt;
      i();
    }
  }
  
  public void setColorDisabledResId(int paramInt)
  {
    setColorDisabled(getResources().getColor(paramInt));
  }
  
  public void setColorNormal(int paramInt)
  {
    if (i != paramInt)
    {
      i = paramInt;
      i();
    }
  }
  
  public void setColorNormalResId(int paramInt)
  {
    setColorNormal(getResources().getColor(paramInt));
  }
  
  public void setColorPressed(int paramInt)
  {
    if (paramInt != j)
    {
      j = paramInt;
      i();
    }
  }
  
  public void setColorPressedResId(int paramInt)
  {
    setColorPressed(getResources().getColor(paramInt));
  }
  
  public void setColorRipple(int paramInt)
  {
    if (paramInt != l)
    {
      l = paramInt;
      i();
    }
  }
  
  public void setColorRippleResId(int paramInt)
  {
    setColorRipple(getResources().getColor(paramInt));
  }
  
  public void setElevation(float paramFloat)
  {
    if ((g.b()) && (paramFloat > 0.0F))
    {
      super.setElevation(paramFloat);
      if (!isInEditMode())
      {
        t = true;
        d = false;
      }
      i();
    }
  }
  
  @TargetApi(21)
  public void setElevationCompat(float paramFloat)
  {
    e = 637534208;
    f = Math.round(paramFloat / 2.0F);
    g = 0;
    float f1;
    if (c == 0) {
      f1 = paramFloat;
    } else {
      f1 = paramFloat / 2.0F;
    }
    h = Math.round(f1);
    if (g.b())
    {
      super.setElevation(paramFloat);
      u = true;
      d = false;
      i();
      ViewGroup.LayoutParams localLayoutParams = getLayoutParams();
      if (localLayoutParams != null) {
        setLayoutParams(localLayoutParams);
      }
      return;
    }
    d = true;
    i();
  }
  
  public void setEnabled(boolean paramBoolean)
  {
    super.setEnabled(paramBoolean);
    a localA = (a)getTag(e.fab_label);
    if (localA != null) {
      localA.setEnabled(paramBoolean);
    }
  }
  
  public void setHideAnimation(Animation paramAnimation)
  {
    p = paramAnimation;
  }
  
  public void setImageDrawable(Drawable paramDrawable)
  {
    if (m != paramDrawable)
    {
      m = paramDrawable;
      i();
    }
  }
  
  public void setImageResource(int paramInt)
  {
    Drawable localDrawable = getResources().getDrawable(paramInt);
    if (m != localDrawable)
    {
      m = localDrawable;
      i();
    }
  }
  
  public void setIndeterminate(boolean paramBoolean)
  {
    if (!paramBoolean) {}
    try
    {
      O = 0.0F;
      v = paramBoolean;
      z = true;
      G = paramBoolean;
      H = SystemClock.uptimeMillis();
      r();
      i();
      return;
    }
    finally {}
  }
  
  public void setLabelText(String paramString)
  {
    q = paramString;
    a localA = getLabelView();
    if (localA != null) {
      localA.setText(paramString);
    }
  }
  
  public void setLabelTextColor(int paramInt)
  {
    getLabelView().setTextColor(paramInt);
  }
  
  public void setLabelTextColor(ColorStateList paramColorStateList)
  {
    getLabelView().setTextColor(paramColorStateList);
  }
  
  public void setLabelVisibility(int paramInt)
  {
    a localA = getLabelView();
    if (localA != null)
    {
      localA.setVisibility(paramInt);
      boolean bool;
      if (paramInt == 0) {
        bool = true;
      } else {
        bool = false;
      }
      localA.setHandleVisibilityChanges(bool);
    }
  }
  
  @TargetApi(21)
  public void setLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    if (((paramLayoutParams instanceof ViewGroup.MarginLayoutParams)) && (u))
    {
      ViewGroup.MarginLayoutParams localMarginLayoutParams = (ViewGroup.MarginLayoutParams)paramLayoutParams;
      leftMargin += getShadowX();
      localMarginLayoutParams = (ViewGroup.MarginLayoutParams)paramLayoutParams;
      topMargin += getShadowY();
      localMarginLayoutParams = (ViewGroup.MarginLayoutParams)paramLayoutParams;
      rightMargin += getShadowX();
      localMarginLayoutParams = (ViewGroup.MarginLayoutParams)paramLayoutParams;
      bottomMargin += getShadowY();
    }
    super.setLayoutParams(paramLayoutParams);
  }
  
  public void setMax(int paramInt)
  {
    try
    {
      U = paramInt;
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public void setOnClickListener(View.OnClickListener paramOnClickListener)
  {
    super.setOnClickListener(paramOnClickListener);
    r = paramOnClickListener;
    paramOnClickListener = (View)getTag(e.fab_label);
    if (paramOnClickListener != null) {
      paramOnClickListener.setOnClickListener(new c());
    }
  }
  
  public void setShadowColor(int paramInt)
  {
    if (e != paramInt)
    {
      e = paramInt;
      i();
    }
  }
  
  public void setShadowColorResource(int paramInt)
  {
    paramInt = getResources().getColor(paramInt);
    if (e != paramInt)
    {
      e = paramInt;
      i();
    }
  }
  
  public void setShadowRadius(float paramFloat)
  {
    f = g.a(getContext(), paramFloat);
    requestLayout();
    i();
  }
  
  public void setShadowRadius(int paramInt)
  {
    paramInt = getResources().getDimensionPixelSize(paramInt);
    if (f != paramInt)
    {
      f = paramInt;
      requestLayout();
      i();
    }
  }
  
  public void setShadowXOffset(float paramFloat)
  {
    g = g.a(getContext(), paramFloat);
    requestLayout();
    i();
  }
  
  public void setShadowXOffset(int paramInt)
  {
    paramInt = getResources().getDimensionPixelSize(paramInt);
    if (g != paramInt)
    {
      g = paramInt;
      requestLayout();
      i();
    }
  }
  
  public void setShadowYOffset(float paramFloat)
  {
    h = g.a(getContext(), paramFloat);
    requestLayout();
    i();
  }
  
  public void setShadowYOffset(int paramInt)
  {
    paramInt = getResources().getDimensionPixelSize(paramInt);
    if (h != paramInt)
    {
      h = paramInt;
      requestLayout();
      i();
    }
  }
  
  public void setShowAnimation(Animation paramAnimation)
  {
    o = paramAnimation;
  }
  
  public void setShowProgressBackground(boolean paramBoolean)
  {
    try
    {
      V = paramBoolean;
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public void setShowShadow(boolean paramBoolean)
  {
    if (d != paramBoolean)
    {
      d = paramBoolean;
      i();
    }
  }
  
  public void setVisibility(int paramInt)
  {
    super.setVisibility(paramInt);
    a localA = (a)getTag(e.fab_label);
    if (localA != null) {
      localA.setVisibility(paramInt);
    }
  }
  
  class a
    extends ViewOutlineProvider
  {
    a() {}
    
    public void getOutline(View paramView, Outline paramOutline)
    {
      paramOutline.setOval(0, 0, paramView.getWidth(), paramView.getHeight());
    }
  }
  
  class b
    extends GestureDetector.SimpleOnGestureListener
  {
    b() {}
    
    public boolean onDown(MotionEvent paramMotionEvent)
    {
      a localA = (a)getTag(e.fab_label);
      if (localA != null) {
        localA.d();
      }
      e();
      return super.onDown(paramMotionEvent);
    }
    
    public boolean onSingleTapUp(MotionEvent paramMotionEvent)
    {
      a localA = (a)getTag(e.fab_label);
      if (localA != null) {
        localA.e();
      }
      f();
      return super.onSingleTapUp(paramMotionEvent);
    }
  }
  
  class c
    implements View.OnClickListener
  {
    c() {}
    
    public void onClick(View paramView)
    {
      if (FloatingActionButton.c(FloatingActionButton.this) != null) {
        FloatingActionButton.c(FloatingActionButton.this).onClick(FloatingActionButton.this);
      }
    }
  }
  
  private class d
    extends ShapeDrawable
  {
    private int a;
    private int b;
    
    private d(Shape paramShape)
    {
      super();
      boolean bool = c();
      int j = 0;
      if (bool) {
        i = f + Math.abs(g);
      } else {
        i = 0;
      }
      a = i;
      int i = j;
      if (c())
      {
        i = f;
        i = Math.abs(h) + i;
      }
      b = i;
      if (FloatingActionButton.d(FloatingActionButton.this))
      {
        a += FloatingActionButton.e(FloatingActionButton.this);
        b += FloatingActionButton.e(FloatingActionButton.this);
      }
    }
    
    public void draw(Canvas paramCanvas)
    {
      setBounds(a, b, FloatingActionButton.f(FloatingActionButton.this) - a, FloatingActionButton.g(FloatingActionButton.this) - b);
      super.draw(paramCanvas);
    }
  }
  
  static class e
    extends View.BaseSavedState
  {
    public static final Parcelable.Creator<e> CREATOR = new a();
    float c;
    float d;
    float e;
    int f;
    int g;
    int h;
    int i;
    boolean j;
    boolean k;
    boolean l;
    boolean m;
    boolean n;
    boolean o;
    boolean p;
    
    private e(Parcel paramParcel)
    {
      super();
      c = paramParcel.readFloat();
      d = paramParcel.readFloat();
      int i1 = paramParcel.readInt();
      boolean bool2 = true;
      boolean bool1;
      if (i1 != 0) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      j = bool1;
      e = paramParcel.readFloat();
      f = paramParcel.readInt();
      g = paramParcel.readInt();
      h = paramParcel.readInt();
      i = paramParcel.readInt();
      if (paramParcel.readInt() != 0) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      k = bool1;
      if (paramParcel.readInt() != 0) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      l = bool1;
      if (paramParcel.readInt() != 0) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      m = bool1;
      if (paramParcel.readInt() != 0) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      n = bool1;
      if (paramParcel.readInt() != 0) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      o = bool1;
      if (paramParcel.readInt() != 0) {
        bool1 = bool2;
      } else {
        bool1 = false;
      }
      p = bool1;
    }
    
    e(Parcelable paramParcelable)
    {
      super();
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      throw new Runtime("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.provideAs(TypeTransformer.java:780)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.e1expr(TypeTransformer.java:496)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:713)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.enexpr(TypeTransformer.java:698)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:719)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.s1stmt(TypeTransformer.java:810)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.sxStmt(TypeTransformer.java:840)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:206)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
    }
    
    static final class a
      implements Parcelable.Creator<FloatingActionButton.e>
    {
      a() {}
      
      public FloatingActionButton.e createFromParcel(Parcel paramParcel)
      {
        return new FloatingActionButton.e(paramParcel, null);
      }
      
      public FloatingActionButton.e[] newArray(int paramInt)
      {
        return new FloatingActionButton.e[paramInt];
      }
    }
  }
  
  private class f
    extends Drawable
  {
    private Paint a = new Paint(1);
    private Paint b = new Paint(1);
    private float c;
    
    private f()
    {
      a();
    }
    
    private void a()
    {
      setLayerType(1, null);
      a.setStyle(Paint.Style.FILL);
      a.setColor(FloatingActionButton.h(FloatingActionButton.this));
      b.setXfermode(FloatingActionButton.j());
      if (!isInEditMode())
      {
        Paint localPaint = a;
        FloatingActionButton localFloatingActionButton = FloatingActionButton.this;
        localPaint.setShadowLayer(f, g, h, e);
      }
      c = (FloatingActionButton.i(FloatingActionButton.this) / 2);
      if ((FloatingActionButton.d(FloatingActionButton.this)) && (FloatingActionButton.j(FloatingActionButton.this))) {
        c += FloatingActionButton.e(FloatingActionButton.this);
      }
    }
    
    public void draw(Canvas paramCanvas)
    {
      paramCanvas.drawCircle(FloatingActionButton.a(FloatingActionButton.this), FloatingActionButton.b(FloatingActionButton.this), c, a);
      paramCanvas.drawCircle(FloatingActionButton.a(FloatingActionButton.this), FloatingActionButton.b(FloatingActionButton.this), c, b);
    }
    
    public int getOpacity()
    {
      return 0;
    }
    
    public void setAlpha(int paramInt) {}
    
    public void setColorFilter(ColorFilter paramColorFilter) {}
  }
}
