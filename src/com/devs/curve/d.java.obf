package com.devs.acr;

import android.app.Application;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Environment;
import android.os.Process;
import android.os.StatFs;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Random;
import java.util.Set;

public class a
  implements Thread.UncaughtExceptionHandler
{
  private static String w = "ACR: New Crash Report Generated";
  private static a x;
  private String[] a;
  private String b;
  private String c;
  private String d;
  private String e;
  private String f;
  private String g;
  private String h;
  private String i;
  private String j;
  private String k;
  private String l;
  private String m;
  private String n;
  private String o;
  private String p;
  private String q;
  private long r;
  private String s;
  private String t;
  private HashMap<String, String> u = new HashMap();
  private Application v;
  
  static
  {
    a.class.getSimpleName();
  }
  
  private a(Application paramApplication)
  {
    v = paramApplication;
  }
  
  public static a a(Application paramApplication)
  {
    if (x == null) {
      x = new a(paramApplication);
    }
    return x;
  }
  
  private void a(Context paramContext, String paramString)
  {
    b("====sendErrorMail");
    Intent localIntent = new Intent("android.intent.action.SEND");
    String str = w;
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("\n\n");
    localStringBuilder.append(paramString);
    localStringBuilder.append("\n\n");
    paramString = localStringBuilder.toString();
    localIntent.putExtra("android.intent.extra.EMAIL", a);
    localIntent.putExtra("android.intent.extra.TEXT", paramString);
    localIntent.putExtra("android.intent.extra.SUBJECT", str);
    localIntent.setType("message/rfc822");
    localIntent.setFlags(268435456);
    paramContext.startActivity(Intent.createChooser(localIntent, "Title:"));
  }
  
  private void a(String paramString)
  {
    b("====SaveAsFile");
    try
    {
      int i1 = new Random().nextInt(99999);
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("stack-");
      ((StringBuilder)localObject).append(i1);
      ((StringBuilder)localObject).append(".stacktrace");
      localObject = ((StringBuilder)localObject).toString();
      localObject = v.openFileOutput((String)localObject, 0);
      ((FileOutputStream)localObject).write(paramString.getBytes());
      ((FileOutputStream)localObject).close();
      return;
    }
    catch (Exception paramString) {}
  }
  
  private boolean a()
  {
    return e().length > 0;
  }
  
  private String b()
  {
    String str1 = "";
    Iterator localIterator = u.keySet().iterator();
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      String str2 = (String)u.get(localObject);
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(str1);
      localStringBuilder.append(localObject);
      localStringBuilder.append(" = ");
      localStringBuilder.append(str2);
      localStringBuilder.append("\n");
      str1 = localStringBuilder.toString();
    }
    return str1;
  }
  
  private void b(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 0);
      b = versionName;
      c = packageName;
      e = Build.MODEL;
      f = Build.VERSION.RELEASE;
      g = Build.BOARD;
      h = Build.BRAND;
      i = Build.DEVICE;
      j = Build.DISPLAY;
      k = Build.FINGERPRINT;
      l = Build.HOST;
      m = Build.ID;
      o = Build.MODEL;
      p = Build.PRODUCT;
      n = Build.MANUFACTURER;
      q = Build.TAGS;
      r = Build.TIME;
      s = Build.TYPE;
      t = Build.USER;
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  private void b(String paramString) {}
  
  private String c()
  {
    b(v);
    StringBuilder localStringBuilder1 = new StringBuilder();
    localStringBuilder1.append("\nVERSION\t\t: ");
    localStringBuilder1.append(b);
    localStringBuilder1.append("\nPACKAGE      : ");
    localStringBuilder1.append(c);
    localStringBuilder1.append("\nFILE-PATH    : ");
    localStringBuilder1.append(d);
    localStringBuilder1.append("\nPHONE-MODEL  : ");
    localStringBuilder1.append(e);
    localStringBuilder1.append("\nANDROID_VERS : ");
    localStringBuilder1.append(f);
    localStringBuilder1.append("\nBOARD        : ");
    localStringBuilder1.append(g);
    localStringBuilder1.append("\nBRAND        : ");
    localStringBuilder1.append(h);
    localStringBuilder1.append("\nDEVICE       : ");
    localStringBuilder1.append(i);
    localStringBuilder1.append("\nDISPLAY      : ");
    localStringBuilder1.append(j);
    localStringBuilder1.append("\nFINGER-PRINT : ");
    localStringBuilder1.append(k);
    localStringBuilder1.append("\nHOST         : ");
    localStringBuilder1.append(l);
    localStringBuilder1.append("\nID           : ");
    localStringBuilder1.append(m);
    localStringBuilder1.append("\nMODEL        : ");
    localStringBuilder1.append(o);
    localStringBuilder1.append("\nPRODUCT      : ");
    localStringBuilder1.append(p);
    localStringBuilder1.append("\nMANUFACTURER : ");
    localStringBuilder1.append(n);
    localStringBuilder1.append("\nTAGS         : ");
    localStringBuilder1.append(q);
    localStringBuilder1.append("\nTIME         : ");
    localStringBuilder1.append(r);
    localStringBuilder1.append("\nTYPE         : ");
    localStringBuilder1.append(s);
    localStringBuilder1.append("\nUSER         : ");
    localStringBuilder1.append(t);
    localStringBuilder1.append("\nTOTAL-INTERNAL-MEMORY     : ");
    StringBuilder localStringBuilder2 = new StringBuilder();
    localStringBuilder2.append(f());
    localStringBuilder2.append(" mb");
    localStringBuilder1.append(localStringBuilder2.toString());
    localStringBuilder1.append("\nAVAILABLE-INTERNAL-MEMORY : ");
    localStringBuilder2 = new StringBuilder();
    localStringBuilder2.append(d());
    localStringBuilder2.append(" mb");
    localStringBuilder1.append(localStringBuilder2.toString());
    return localStringBuilder1.toString();
  }
  
  private long d()
  {
    StatFs localStatFs = new StatFs(Environment.getDataDirectory().getPath());
    long l1 = localStatFs.getBlockSize();
    return localStatFs.getAvailableBlocks() * l1 / 1048576L;
  }
  
  private String[] e()
  {
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append(d);
    ((StringBuilder)localObject).append("/");
    localObject = new File(((StringBuilder)localObject).toString());
    ((File)localObject).mkdir();
    return ((File)localObject).list(new a());
  }
  
  private long f()
  {
    StatFs localStatFs = new StatFs(Environment.getDataDirectory().getPath());
    long l1 = localStatFs.getBlockSize();
    return localStatFs.getBlockCount() * l1 / 1048576L;
  }
  
  void a(Context paramContext)
  {
    try
    {
      d = paramContext.getFilesDir().getAbsolutePath();
      if (a())
      {
        StringBuilder localStringBuilder1 = new StringBuilder();
        String[] arrayOfString = e();
        int i1 = 0;
        int i3 = arrayOfString.length;
        int i2 = 0;
        while (i2 < i3)
        {
          String str1 = arrayOfString[i2];
          if (i1 <= 5)
          {
            localStringBuilder1.append("New Trace collected :\n=====================\n");
            localObject = new StringBuilder();
            ((StringBuilder)localObject).append(d);
            ((StringBuilder)localObject).append("/");
            ((StringBuilder)localObject).append(str1);
            localObject = new BufferedReader(new FileReader(((StringBuilder)localObject).toString()));
            for (;;)
            {
              String str2 = ((BufferedReader)localObject).readLine();
              if (str2 == null) {
                break;
              }
              StringBuilder localStringBuilder2 = new StringBuilder();
              localStringBuilder2.append(str2);
              localStringBuilder2.append("\n");
              localStringBuilder1.append(localStringBuilder2.toString());
            }
            ((BufferedReader)localObject).close();
          }
          Object localObject = new StringBuilder();
          ((StringBuilder)localObject).append(d);
          ((StringBuilder)localObject).append("/");
          ((StringBuilder)localObject).append(str1);
          new File(((StringBuilder)localObject).toString()).delete();
          i2 += 1;
          i1 += 1;
        }
        a(paramContext, localStringBuilder1.toString());
      }
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public void uncaughtException(Thread paramThread, Throwable paramThrowable)
  {
    b("====uncaughtException");
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Error Report collected on : ");
    localStringBuilder.append(new Date().toString());
    localStringBuilder.append("\n\nInformations :\n==============");
    localStringBuilder.append(c());
    paramThread = b();
    if (!paramThread.equals(""))
    {
      localStringBuilder.append("\n\nCustom Informations :\n==============\n");
      localStringBuilder.append(paramThread);
    }
    localStringBuilder.append("\n\nStack :\n==============\n");
    StringWriter localStringWriter = new StringWriter();
    PrintWriter localPrintWriter = new PrintWriter(localStringWriter);
    paramThrowable.printStackTrace(localPrintWriter);
    localStringBuilder.append(localStringWriter.toString());
    localStringBuilder.append("\nCause :\n==============");
    for (paramThread = paramThrowable.getCause(); paramThread != null; paramThread = paramThread.getCause())
    {
      paramThread.printStackTrace(localPrintWriter);
      localStringBuilder.append(localStringWriter.toString());
    }
    localPrintWriter.close();
    localStringBuilder.append("\n\n**** End of current Report ***");
    paramThread = new StringBuilder();
    paramThread.append("====uncaughtException \n Report: ");
    paramThread.append(localStringBuilder.toString());
    b(paramThread.toString());
    a(localStringBuilder.toString());
    paramThread = new Intent(v, ErrorReporterActivity.class);
    paramThread.setFlags(268435456);
    v.startActivity(paramThread);
    Process.killProcess(Process.myPid());
    System.exit(10);
  }
  
  class a
    implements FilenameFilter
  {
    a() {}
    
    public boolean accept(File paramFile, String paramString)
    {
      return paramString.endsWith(".stacktrace");
    }
  }
}
