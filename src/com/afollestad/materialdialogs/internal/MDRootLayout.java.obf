package com.afollestad.materialdialogs.internal;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.os.Build.VERSION;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.RecyclerView.o;
import android.support.v7.widget.RecyclerView.t;
import android.util.AttributeSet;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnPreDrawListener;
import android.view.ViewTreeObserver.OnScrollChangedListener;
import android.webkit.WebView;
import android.widget.AdapterView;
import android.widget.ScrollView;
import android.widget.TextView;
import b.a.a.e;
import b.a.a.g;
import b.a.a.i;
import b.a.a.k;
import b.a.a.n;
import b.a.a.o;
import b.a.a.r.a;

public class MDRootLayout
  extends ViewGroup
{
  private final MDButton[] c = new MDButton[3];
  private int d;
  private View e;
  private View f;
  private boolean g = false;
  private boolean h = false;
  private o i = o.d;
  private boolean j = false;
  private boolean k = true;
  private boolean l;
  private boolean m;
  private int n;
  private int o;
  private int p;
  private e q = e.c;
  private int r;
  private Paint s;
  private ViewTreeObserver.OnScrollChangedListener t;
  private ViewTreeObserver.OnScrollChangedListener u;
  private int v;
  
  public MDRootLayout(Context paramContext)
  {
    super(paramContext);
    a(paramContext, null, 0);
  }
  
  public MDRootLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    a(paramContext, paramAttributeSet, 0);
  }
  
  @TargetApi(11)
  public MDRootLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    a(paramContext, paramAttributeSet, paramInt);
  }
  
  @TargetApi(21)
  public MDRootLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt1, int paramInt2)
  {
    super(paramContext, paramAttributeSet, paramInt1, paramInt2);
    a(paramContext, paramAttributeSet, paramInt1);
  }
  
  private static View a(ViewGroup paramViewGroup)
  {
    if ((paramViewGroup != null) && (paramViewGroup.getChildCount() != 0))
    {
      int i1 = paramViewGroup.getChildCount() - 1;
      while (i1 >= 0)
      {
        View localView = paramViewGroup.getChildAt(i1);
        if ((localView.getVisibility() == 0) && (localView.getBottom() == paramViewGroup.getMeasuredHeight())) {
          return localView;
        }
        i1 -= 1;
      }
      return null;
    }
    return null;
  }
  
  private void a(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    Resources localResources = paramContext.getResources();
    paramAttributeSet = paramContext.obtainStyledAttributes(paramAttributeSet, n.MDRootLayout, paramInt, 0);
    l = paramAttributeSet.getBoolean(n.MDRootLayout_md_reduce_padding_no_title_no_buttons, true);
    paramAttributeSet.recycle();
    n = localResources.getDimensionPixelSize(i.md_notitle_vertical_padding);
    o = localResources.getDimensionPixelSize(i.md_button_frame_vertical_padding);
    r = localResources.getDimensionPixelSize(i.md_button_padding_frame_side);
    p = localResources.getDimensionPixelSize(i.md_button_height);
    s = new Paint();
    v = localResources.getDimensionPixelSize(i.md_divider_height);
    s.setColor(a.e(paramContext, g.md_divider_color));
    setWillNotDraw(false);
  }
  
  private void a(final View paramView, final boolean paramBoolean1, final boolean paramBoolean2)
  {
    if (paramView == null) {
      return;
    }
    if ((paramView instanceof ScrollView))
    {
      paramView = (ScrollView)paramView;
      if (a(paramView))
      {
        a(paramView, paramBoolean1, paramBoolean2);
      }
      else
      {
        if (paramBoolean1) {
          g = false;
        }
        if (paramBoolean2) {
          h = false;
        }
      }
      return;
    }
    if ((paramView instanceof AdapterView))
    {
      paramView = (AdapterView)paramView;
      if (a(paramView))
      {
        a(paramView, paramBoolean1, paramBoolean2);
      }
      else
      {
        if (paramBoolean1) {
          g = false;
        }
        if (paramBoolean2) {
          h = false;
        }
      }
      return;
    }
    if ((paramView instanceof WebView))
    {
      paramView.getViewTreeObserver().addOnPreDrawListener(new a(paramView, paramBoolean1, paramBoolean2));
      return;
    }
    if ((paramView instanceof RecyclerView))
    {
      boolean bool = a((RecyclerView)paramView);
      if (paramBoolean1) {
        g = bool;
      }
      if (paramBoolean2) {
        h = bool;
      }
      if (bool) {
        a((ViewGroup)paramView, paramBoolean1, paramBoolean2);
      }
    }
    else if ((paramView instanceof ViewGroup))
    {
      View localView = b((ViewGroup)paramView);
      a(localView, paramBoolean1, paramBoolean2);
      paramView = a((ViewGroup)paramView);
      if (paramView != localView)
      {
        a(paramView, false, true);
        return;
      }
    }
  }
  
  private void a(final ViewGroup paramViewGroup, final boolean paramBoolean1, final boolean paramBoolean2)
  {
    if (((!paramBoolean2) && (t == null)) || ((paramBoolean2) && (u == null)))
    {
      if ((paramViewGroup instanceof RecyclerView))
      {
        localObject = new b(paramViewGroup, paramBoolean1, paramBoolean2);
        ((RecyclerView)paramViewGroup).a((RecyclerView.t)localObject);
        ((b)localObject).a((RecyclerView)paramViewGroup, 0, 0);
        return;
      }
      Object localObject = new c(paramViewGroup, paramBoolean1, paramBoolean2);
      if (!paramBoolean2)
      {
        t = ((ViewTreeObserver.OnScrollChangedListener)localObject);
        paramViewGroup.getViewTreeObserver().addOnScrollChangedListener(t);
      }
      else
      {
        u = ((ViewTreeObserver.OnScrollChangedListener)localObject);
        paramViewGroup.getViewTreeObserver().addOnScrollChangedListener(u);
      }
      ((ViewTreeObserver.OnScrollChangedListener)localObject).onScrollChanged();
    }
  }
  
  private void a(ViewGroup paramViewGroup, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
  {
    boolean bool = true;
    if ((paramBoolean1) && (paramViewGroup.getChildCount() > 0))
    {
      View localView = e;
      if ((localView != null) && (localView.getVisibility() != 8) && (paramViewGroup.getScrollY() + paramViewGroup.getPaddingTop() > paramViewGroup.getChildAt(0).getTop())) {
        paramBoolean1 = true;
      } else {
        paramBoolean1 = false;
      }
      g = paramBoolean1;
    }
    if ((paramBoolean2) && (paramViewGroup.getChildCount() > 0))
    {
      if ((paramBoolean3) && (paramViewGroup.getScrollY() + paramViewGroup.getHeight() - paramViewGroup.getPaddingBottom() < paramViewGroup.getChildAt(paramViewGroup.getChildCount() - 1).getBottom())) {
        paramBoolean1 = bool;
      } else {
        paramBoolean1 = false;
      }
      h = paramBoolean1;
    }
  }
  
  private void a(WebView paramWebView, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
  {
    boolean bool = true;
    if (paramBoolean1)
    {
      View localView = e;
      if ((localView != null) && (localView.getVisibility() != 8) && (paramWebView.getScrollY() + paramWebView.getPaddingTop() > 0)) {
        paramBoolean1 = true;
      } else {
        paramBoolean1 = false;
      }
      g = paramBoolean1;
    }
    if (paramBoolean2)
    {
      if ((paramBoolean3) && (paramWebView.getScrollY() + paramWebView.getMeasuredHeight() - paramWebView.getPaddingBottom() < paramWebView.getContentHeight() * paramWebView.getScale())) {
        paramBoolean1 = bool;
      } else {
        paramBoolean1 = false;
      }
      h = paramBoolean1;
    }
  }
  
  public static boolean a(RecyclerView paramRecyclerView)
  {
    return (paramRecyclerView != null) && (paramRecyclerView.getLayoutManager() != null) && (paramRecyclerView.getLayoutManager().b());
  }
  
  private static boolean a(View paramView)
  {
    boolean bool3 = true;
    boolean bool1;
    if ((paramView != null) && (paramView.getVisibility() != 8)) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    boolean bool2 = bool1;
    if (bool1)
    {
      bool2 = bool1;
      if ((paramView instanceof MDButton))
      {
        if (((MDButton)paramView).getText().toString().trim().length() > 0) {
          bool1 = bool3;
        } else {
          bool1 = false;
        }
        bool2 = bool1;
      }
    }
    return bool2;
  }
  
  private static boolean a(AdapterView paramAdapterView)
  {
    int i1 = paramAdapterView.getLastVisiblePosition();
    boolean bool = false;
    if (i1 == -1) {
      return false;
    }
    if (paramAdapterView.getFirstVisiblePosition() == 0) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    int i2;
    if (paramAdapterView.getLastVisiblePosition() == paramAdapterView.getCount() - 1) {
      i2 = 1;
    } else {
      i2 = 0;
    }
    if ((i1 != 0) && (i2 != 0) && (paramAdapterView.getChildCount() > 0))
    {
      if (paramAdapterView.getChildAt(0).getTop() < paramAdapterView.getPaddingTop()) {
        return true;
      }
      if (paramAdapterView.getChildAt(paramAdapterView.getChildCount() - 1).getBottom() > paramAdapterView.getHeight() - paramAdapterView.getPaddingBottom()) {
        bool = true;
      }
      return bool;
    }
    return true;
  }
  
  private static boolean a(ScrollView paramScrollView)
  {
    int i1 = paramScrollView.getChildCount();
    boolean bool = false;
    if (i1 == 0) {
      return false;
    }
    i1 = paramScrollView.getChildAt(0).getMeasuredHeight();
    if (paramScrollView.getMeasuredHeight() - paramScrollView.getPaddingTop() - paramScrollView.getPaddingBottom() < i1) {
      bool = true;
    }
    return bool;
  }
  
  private static View b(ViewGroup paramViewGroup)
  {
    if ((paramViewGroup != null) && (paramViewGroup.getChildCount() != 0))
    {
      int i1 = paramViewGroup.getChildCount() - 1;
      while (i1 >= 0)
      {
        View localView = paramViewGroup.getChildAt(i1);
        if ((localView.getVisibility() == 0) && (localView.getTop() == 0)) {
          return localView;
        }
        i1 -= 1;
      }
      return null;
    }
    return null;
  }
  
  private void b()
  {
    if (Build.VERSION.SDK_INT < 17) {
      return;
    }
    if (getResources().getConfiguration().getLayoutDirection() == 1)
    {
      int i1 = d.a[q.ordinal()];
      if (i1 != 1)
      {
        if (i1 != 2) {
          return;
        }
        q = e.c;
        return;
      }
      q = e.e;
    }
  }
  
  private static boolean b(WebView paramWebView)
  {
    return paramWebView.getMeasuredHeight() < paramWebView.getContentHeight() * paramWebView.getScale();
  }
  
  public void a()
  {
    m = true;
  }
  
  public void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    View localView = f;
    if (localView != null)
    {
      int i1;
      if (g)
      {
        i1 = localView.getTop();
        paramCanvas.drawRect(0.0F, i1 - v, getMeasuredWidth(), i1, s);
      }
      if (h)
      {
        i1 = f.getBottom();
        paramCanvas.drawRect(0.0F, i1, getMeasuredWidth(), v + i1, s);
      }
    }
  }
  
  public void onFinishInflate()
  {
    super.onFinishInflate();
    int i1 = 0;
    while (i1 < getChildCount())
    {
      View localView = getChildAt(i1);
      if (localView.getId() == k.md_titleFrame) {
        e = localView;
      } else if (localView.getId() == k.md_buttonDefaultNeutral) {
        c[0] = ((MDButton)localView);
      } else if (localView.getId() == k.md_buttonDefaultNegative) {
        c[1] = ((MDButton)localView);
      } else if (localView.getId() == k.md_buttonDefaultPositive) {
        c[2] = ((MDButton)localView);
      } else {
        f = localView;
      }
      i1 += 1;
    }
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i1 = paramInt2;
    if (a(e))
    {
      paramInt2 = e.getMeasuredHeight();
      e.layout(paramInt1, i1, paramInt3, i1 + paramInt2);
      paramInt2 = i1 + paramInt2;
    }
    else
    {
      paramInt2 = i1;
      if (!m)
      {
        paramInt2 = i1;
        if (k) {
          paramInt2 = i1 + n;
        }
      }
    }
    Object localObject;
    if (a(f))
    {
      localObject = f;
      ((View)localObject).layout(paramInt1, paramInt2, paramInt3, ((View)localObject).getMeasuredHeight() + paramInt2);
    }
    paramBoolean = j;
    paramInt2 = 0;
    if (paramBoolean)
    {
      paramInt4 -= o;
      localObject = c;
      i2 = localObject.length;
      while (paramInt2 < i2)
      {
        View localView = localObject[paramInt2];
        i1 = paramInt4;
        if (a(localView))
        {
          localView.layout(paramInt1, paramInt4 - localView.getMeasuredHeight(), paramInt3, paramInt4);
          i1 = paramInt4 - localView.getMeasuredHeight();
        }
        paramInt2 += 1;
        paramInt4 = i1;
      }
    }
    int i3 = paramInt4;
    if (k) {
      i3 = paramInt4 - o;
    }
    int i6 = i3 - p;
    int i4 = r;
    paramInt4 = -1;
    paramInt2 = -1;
    int i2 = i4;
    i1 = paramInt2;
    if (a(c[2]))
    {
      if (q == e.e)
      {
        int i5 = paramInt1 + i4;
        i2 = c[2].getMeasuredWidth() + i5;
        i1 = paramInt2;
        paramInt2 = i5;
      }
      else
      {
        i2 = paramInt3 - i4;
        paramInt2 = i2 - c[2].getMeasuredWidth();
        i1 = paramInt2;
      }
      c[2].layout(paramInt2, i6, i2, i3);
      i2 = i4 + c[2].getMeasuredWidth();
    }
    paramInt2 = paramInt4;
    if (a(c[1]))
    {
      localObject = q;
      if (localObject == e.e)
      {
        i4 = paramInt1 + i2;
        i2 = c[1].getMeasuredWidth() + i4;
        paramInt2 = paramInt4;
        paramInt4 = i4;
      }
      else if (localObject == e.c)
      {
        i2 = paramInt3 - i2;
        i4 = i2 - c[1].getMeasuredWidth();
        paramInt2 = paramInt4;
        paramInt4 = i4;
      }
      else
      {
        paramInt4 = r + paramInt1;
        i2 = c[1].getMeasuredWidth() + paramInt4;
        paramInt2 = i2;
      }
      c[1].layout(paramInt4, i6, i2, i3);
    }
    if (a(c[0]))
    {
      localObject = q;
      if (localObject == e.e)
      {
        paramInt1 = paramInt3 - r;
        paramInt2 = paramInt1 - c[0].getMeasuredWidth();
      }
      else if (localObject == e.c)
      {
        paramInt2 = paramInt1 + r;
        paramInt1 = c[0].getMeasuredWidth() + paramInt2;
      }
      else
      {
        if ((paramInt2 == -1) && (i1 != -1))
        {
          paramInt4 = i1 - c[0].getMeasuredWidth();
          paramInt2 = i1;
        }
        else if ((i1 == -1) && (paramInt2 != -1))
        {
          paramInt1 = c[0].getMeasuredWidth() + paramInt2;
          paramInt4 = paramInt2;
          paramInt2 = paramInt1;
        }
        else
        {
          paramInt4 = paramInt2;
          paramInt2 = i1;
          if (i1 == -1)
          {
            paramInt4 = (paramInt3 - paramInt1) / 2 - c[0].getMeasuredWidth() / 2;
            paramInt2 = c[0].getMeasuredWidth() + paramInt4;
          }
        }
        paramInt1 = paramInt2;
        paramInt2 = paramInt4;
      }
      c[0].layout(paramInt2, i6, paramInt1, i3);
    }
    a(f, true, true);
  }
  
  public void onMeasure(int paramInt1, int paramInt2)
  {
    int i7 = View.MeasureSpec.getSize(paramInt1);
    int i1 = View.MeasureSpec.getSize(paramInt2);
    int i2 = i1;
    if (i1 > d) {
      i2 = d;
    }
    k = true;
    i1 = 0;
    Object localObject = i;
    boolean bool;
    int i5;
    int i8;
    View localView;
    int i6;
    if (localObject == o.c)
    {
      bool = true;
    }
    else if (localObject == o.e)
    {
      bool = false;
    }
    else
    {
      i5 = 0;
      localObject = c;
      i8 = localObject.length;
      i1 = 0;
      i3 = 0;
      while (i3 < i8)
      {
        localView = localObject[i3];
        i6 = i5;
        i4 = i1;
        if (localView != null)
        {
          i6 = i5;
          i4 = i1;
          if (a(localView))
          {
            localView.a(false, false);
            measureChild(localView, paramInt1, paramInt2);
            i6 = i5 + localView.getMeasuredWidth();
            i4 = 1;
          }
        }
        i3 += 1;
        i5 = i6;
        i1 = i4;
      }
      if (i5 > i7 - getContext().getResources().getDimensionPixelSize(i.md_neutral_button_margin) * 2) {
        bool = true;
      } else {
        bool = false;
      }
    }
    int i4 = 0;
    j = bool;
    int i3 = i1;
    if (bool)
    {
      localObject = c;
      i8 = localObject.length;
      i5 = 0;
      i3 = i1;
      i4 = 0;
      for (i1 = i5; i4 < i8; i1 = i5)
      {
        localView = localObject[i4];
        i6 = i3;
        i5 = i1;
        if (localView != null)
        {
          i6 = i3;
          i5 = i1;
          if (a(localView))
          {
            localView.a(true, false);
            measureChild(localView, paramInt1, paramInt2);
            i5 = i1 + localView.getMeasuredHeight();
            i6 = 1;
          }
        }
        i4 += 1;
        i3 = i6;
      }
      i4 = i1;
    }
    paramInt1 = i2;
    i1 = 0;
    if (i3 != 0)
    {
      if (j)
      {
        paramInt1 -= i4;
        i1 = o;
        paramInt2 = 0 + i1 * 2;
        i4 = 0 + i1 * 2;
      }
      else
      {
        paramInt1 -= p;
        paramInt2 = 0 + o * 2;
        i4 = i1;
      }
    }
    else
    {
      paramInt2 = 0 + o * 2;
      i4 = i1;
    }
    if (a(e))
    {
      e.measure(View.MeasureSpec.makeMeasureSpec(i7, 1073741824), 0);
      i1 = paramInt1 - e.getMeasuredHeight();
      i5 = paramInt2;
    }
    else
    {
      i1 = paramInt1;
      i5 = paramInt2;
      if (!m)
      {
        i5 = paramInt2 + n;
        i1 = paramInt1;
      }
    }
    paramInt1 = i1;
    if (a(f))
    {
      f.measure(View.MeasureSpec.makeMeasureSpec(i7, 1073741824), View.MeasureSpec.makeMeasureSpec(i1 - i4, Integer.MIN_VALUE));
      if (f.getMeasuredHeight() <= i1 - i5)
      {
        if ((l) && (!a(e)) && (i3 == 0))
        {
          k = false;
          paramInt1 = i1 - (f.getMeasuredHeight() + i4);
        }
        else
        {
          k = true;
          paramInt1 = i1 - (f.getMeasuredHeight() + i5);
        }
      }
      else
      {
        k = false;
        paramInt1 = 0;
      }
    }
    setMeasuredDimension(i7, i2 - paramInt1);
  }
  
  public void setButtonGravity(e paramE)
  {
    q = paramE;
    b();
  }
  
  public void setButtonStackedGravity(e paramE)
  {
    MDButton[] arrayOfMDButton = c;
    int i2 = arrayOfMDButton.length;
    int i1 = 0;
    while (i1 < i2)
    {
      MDButton localMDButton = arrayOfMDButton[i1];
      if (localMDButton != null) {
        localMDButton.setStackedGravity(paramE);
      }
      i1 += 1;
    }
  }
  
  public void setDividerColor(int paramInt)
  {
    s.setColor(paramInt);
    invalidate();
  }
  
  public void setMaxHeight(int paramInt)
  {
    d = paramInt;
  }
  
  public void setStackingBehavior(o paramO)
  {
    i = paramO;
    invalidate();
  }
  
  class a
    implements ViewTreeObserver.OnPreDrawListener
  {
    a(View paramView, boolean paramBoolean1, boolean paramBoolean2) {}
    
    public boolean onPreDraw()
    {
      if (paramView.getMeasuredHeight() != 0)
      {
        if (!MDRootLayout.a((WebView)paramView))
        {
          if (paramBoolean1) {
            MDRootLayout.a(MDRootLayout.this, false);
          }
          if (paramBoolean2) {
            MDRootLayout.b(MDRootLayout.this, false);
          }
        }
        else
        {
          MDRootLayout.a(MDRootLayout.this, (ViewGroup)paramView, paramBoolean1, paramBoolean2);
        }
        paramView.getViewTreeObserver().removeOnPreDrawListener(this);
      }
      return true;
    }
  }
  
  class b
    extends RecyclerView.t
  {
    b(ViewGroup paramViewGroup, boolean paramBoolean1, boolean paramBoolean2) {}
    
    public void a(RecyclerView paramRecyclerView, int paramInt1, int paramInt2)
    {
      super.a(paramRecyclerView, paramInt1, paramInt2);
      boolean bool2 = false;
      paramRecyclerView = MDRootLayout.a(MDRootLayout.this);
      paramInt2 = paramRecyclerView.length;
      paramInt1 = 0;
      boolean bool1;
      for (;;)
      {
        bool1 = bool2;
        if (paramInt1 >= paramInt2) {
          break;
        }
        Object localObject = paramRecyclerView[paramInt1];
        if ((localObject != null) && (localObject.getVisibility() != 8))
        {
          bool1 = true;
          break;
        }
        paramInt1 += 1;
      }
      MDRootLayout.a(MDRootLayout.this, paramViewGroup, paramBoolean1, paramBoolean2, bool1);
      invalidate();
    }
  }
  
  class c
    implements ViewTreeObserver.OnScrollChangedListener
  {
    c(ViewGroup paramViewGroup, boolean paramBoolean1, boolean paramBoolean2) {}
    
    public void onScrollChanged()
    {
      boolean bool2 = false;
      Object localObject1 = MDRootLayout.a(MDRootLayout.this);
      int j = localObject1.length;
      int i = 0;
      boolean bool1;
      for (;;)
      {
        bool1 = bool2;
        if (i >= j) {
          break;
        }
        Object localObject2 = localObject1[i];
        if ((localObject2 != null) && (localObject2.getVisibility() != 8))
        {
          bool1 = true;
          break;
        }
        i += 1;
      }
      localObject1 = paramViewGroup;
      if ((localObject1 instanceof WebView)) {
        MDRootLayout.a(MDRootLayout.this, (WebView)localObject1, paramBoolean1, paramBoolean2, bool1);
      } else {
        MDRootLayout.a(MDRootLayout.this, (ViewGroup)localObject1, paramBoolean1, paramBoolean2, bool1);
      }
      invalidate();
    }
  }
}
