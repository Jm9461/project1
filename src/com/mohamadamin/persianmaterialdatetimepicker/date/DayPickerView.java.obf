package com.mohamadamin.persianmaterialdatetimepicker.date;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction;
import android.widget.AbsListView;
import android.widget.AbsListView.LayoutParams;
import android.widget.AbsListView.OnScrollListener;
import android.widget.ListView;
import com.mohamadamin.persianmaterialdatetimepicker.i;
import com.mohamadamin.persianmaterialdatetimepicker.j.b;

public abstract class c
  extends ListView
  implements AbsListView.OnScrollListener, b.c
{
  public static int m = -1;
  protected float c = 1.0F;
  protected Handler d;
  protected d.a e = new d.a();
  protected d f;
  protected d.a g = new d.a();
  protected int h = 0;
  protected int i = 0;
  private a j;
  private boolean k;
  protected b l = new b();
  
  public c(Context paramContext, a paramA)
  {
    super(paramContext);
    a(paramContext);
    setController(paramA);
  }
  
  private static String a(d.a paramA)
  {
    b localB = new b();
    localB.a(b, c, d);
    paramA = new StringBuilder();
    paramA.append("");
    paramA.append(localB.e());
    paramA = paramA.toString();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramA);
    localStringBuilder.append(" ");
    paramA = localStringBuilder.toString();
    localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramA);
    localStringBuilder.append(localB.h());
    return localStringBuilder.toString();
  }
  
  private boolean b(d.a paramA)
  {
    if (paramA == null) {
      return false;
    }
    int i1 = getChildCount();
    int n = 0;
    while (n < i1)
    {
      View localView = getChildAt(n);
      if (((localView instanceof e)) && (((e)localView).a(paramA))) {
        return true;
      }
      n += 1;
    }
    return false;
  }
  
  private d.a d()
  {
    int i1 = getChildCount();
    int n = 0;
    while (n < i1)
    {
      View localView = getChildAt(n);
      if ((localView instanceof e))
      {
        d.a localA = ((e)localView).getAccessibilityFocus();
        if (localA != null)
        {
          if (Build.VERSION.SDK_INT == 17) {
            ((e)localView).a();
          }
          return localA;
        }
      }
      n += 1;
    }
    return null;
  }
  
  public abstract d a(Context paramContext, a paramA);
  
  public void a()
  {
    a(j.e(), false, true, true);
  }
  
  public void a(final int paramInt)
  {
    clearFocus();
    post(new a(paramInt));
    onScrollStateChanged(this, 0);
  }
  
  public void a(Context paramContext)
  {
    d = new Handler();
    setLayoutParams(new AbsListView.LayoutParams(-1, -1));
    setDrawSelectorOnTop(false);
    c();
  }
  
  public boolean a(d.a paramA, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
  {
    if (paramBoolean2) {
      e.a(paramA);
    }
    g.a(paramA);
    int i2 = (b - j.a()) * 12 + c;
    int i1;
    for (int n = 0;; n = i1)
    {
      i1 = n + 1;
      paramA = getChildAt(n);
      if (paramA != null)
      {
        n = paramA.getTop();
        if (Log.isLoggable("MonthFragment", 3))
        {
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("child at ");
          localStringBuilder.append(i1 - 1);
          localStringBuilder.append(" has top ");
          localStringBuilder.append(n);
          Log.d("MonthFragment", localStringBuilder.toString());
        }
        if (n < 0) {}
      }
      else
      {
        if (paramA != null) {
          n = getPositionForView(paramA);
        } else {
          n = 0;
        }
        if (paramBoolean2) {
          f.b(e);
        }
        if (Log.isLoggable("MonthFragment", 3))
        {
          paramA = new StringBuilder();
          paramA.append("GoTo position ");
          paramA.append(i2);
          Log.d("MonthFragment", paramA.toString());
        }
        if ((i2 == n) && (!paramBoolean3))
        {
          if (paramBoolean2) {
            setMonthDisplayed(e);
          }
        }
        else
        {
          setMonthDisplayed(g);
          h = 2;
          if (paramBoolean1)
          {
            smoothScrollToPositionFromTop(i2, m, 250);
            return true;
          }
          a(i2);
        }
        return false;
      }
    }
  }
  
  protected void b()
  {
    d localD = f;
    if (localD == null) {
      f = a(getContext(), j);
    } else {
      localD.b(e);
    }
    setAdapter(f);
  }
  
  protected void c()
  {
    setCacheColorHint(0);
    setDivider(null);
    setItemsCanFocus(true);
    setFastScrollEnabled(false);
    setVerticalScrollBarEnabled(false);
    setOnScrollListener(this);
    setFadingEdgeLength(0);
    setFriction(ViewConfiguration.getScrollFriction() * c);
  }
  
  public int getMostVisiblePosition()
  {
    int i6 = getFirstVisiblePosition();
    int i7 = getHeight();
    int i1 = 0;
    int i2 = 0;
    int n = 0;
    int i4;
    for (int i3 = 0; i3 < i7; i3 = i4)
    {
      View localView = getChildAt(n);
      if (localView == null) {
        break;
      }
      i4 = localView.getBottom();
      int i5 = Math.min(i4, i7) - Math.max(0, localView.getTop());
      i3 = i1;
      if (i5 > i1)
      {
        i2 = n;
        i3 = i5;
      }
      n += 1;
      i1 = i3;
    }
    return i6 + i2;
  }
  
  protected void layoutChildren()
  {
    d.a localA = d();
    super.layoutChildren();
    if (k)
    {
      k = false;
      return;
    }
    b(localA);
  }
  
  public void onInitializeAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent)
  {
    super.onInitializeAccessibilityEvent(paramAccessibilityEvent);
    paramAccessibilityEvent.setItemCount(-1);
  }
  
  public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo paramAccessibilityNodeInfo)
  {
    super.onInitializeAccessibilityNodeInfo(paramAccessibilityNodeInfo);
    if (Build.VERSION.SDK_INT >= 21)
    {
      paramAccessibilityNodeInfo.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_BACKWARD);
      paramAccessibilityNodeInfo.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_FORWARD);
      return;
    }
    paramAccessibilityNodeInfo.addAction(4096);
    paramAccessibilityNodeInfo.addAction(8192);
  }
  
  public void onScroll(AbsListView paramAbsListView, int paramInt1, int paramInt2, int paramInt3)
  {
    e localE = (e)paramAbsListView.getChildAt(0);
    if (localE == null) {
      return;
    }
    long l1 = paramAbsListView.getFirstVisiblePosition() * localE.getHeight() - localE.getBottom();
    h = i;
  }
  
  public void onScrollStateChanged(AbsListView paramAbsListView, int paramInt)
  {
    l.a(paramAbsListView, paramInt);
  }
  
  @SuppressLint({"NewApi"})
  public boolean performAccessibilityAction(int paramInt, Bundle paramBundle)
  {
    if ((paramInt != 4096) && (paramInt != 8192)) {
      return super.performAccessibilityAction(paramInt, paramBundle);
    }
    int n = getFirstVisiblePosition();
    paramBundle = new d.a(n / 12 + j.a(), n % 12, 1);
    if (paramInt == 4096)
    {
      c += 1;
      if (c == 12)
      {
        c = 0;
        b += 1;
      }
    }
    else if (paramInt == 8192)
    {
      View localView = getChildAt(0);
      if ((localView != null) && (localView.getTop() >= -1))
      {
        c -= 1;
        if (c == -1)
        {
          c = 11;
          b -= 1;
        }
      }
    }
    i.a(this, com.mohamadamin.persianmaterialdatetimepicker.j.a.b(a(paramBundle)));
    a(paramBundle, true, false, true);
    k = true;
    return true;
  }
  
  public void setController(a paramA)
  {
    j = paramA;
    j.a(this);
    b();
    a();
  }
  
  protected void setMonthDisplayed(d.a paramA)
  {
    int n = c;
    invalidateViews();
  }
  
  class a
    implements Runnable
  {
    a(int paramInt) {}
    
    public void run()
    {
      setSelection(paramInt);
    }
  }
  
  protected class b
    implements Runnable
  {
    private int c;
    
    protected b() {}
    
    public void a(AbsListView paramAbsListView, int paramInt)
    {
      d.removeCallbacks(this);
      c = paramInt;
      d.postDelayed(this, 40L);
    }
    
    public void run()
    {
      c.this.i = c;
      Object localObject;
      if (Log.isLoggable("MonthFragment", 3))
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("new scroll state: ");
        ((StringBuilder)localObject).append(c);
        ((StringBuilder)localObject).append(" old state: ");
        ((StringBuilder)localObject).append(h);
        Log.d("MonthFragment", ((StringBuilder)localObject).toString());
      }
      int i = c;
      if (i == 0)
      {
        localObject = c.this;
        int k = h;
        if (k != 0)
        {
          int j = 1;
          if (k != 1)
          {
            h = i;
            i = 0;
            for (localObject = ((ListView)localObject).getChildAt(0); (localObject != null) && (((View)localObject).getBottom() <= 0); localObject = ((ListView)localObject).getChildAt(i))
            {
              localObject = c.this;
              i += 1;
            }
            if (localObject == null) {
              return;
            }
            i = getFirstVisiblePosition();
            k = getLastVisiblePosition();
            if ((i != 0) && (k != getCount() - 1)) {
              i = j;
            } else {
              i = 0;
            }
            j = ((View)localObject).getTop();
            k = ((View)localObject).getBottom();
            int m = getHeight() / 2;
            if ((i != 0) && (j < c.m)) {
              if (k > m) {
                smoothScrollBy(j, 250);
              } else {
                smoothScrollBy(k, 250);
              }
            }
            return;
          }
        }
      }
      h = c;
    }
  }
}
