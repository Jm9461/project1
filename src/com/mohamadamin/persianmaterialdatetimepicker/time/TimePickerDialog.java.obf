package com.mohamadamin.persianmaterialdatetimepicker.time;

import android.animation.ObjectAnimator;
import android.app.Activity;
import android.app.Dialog;
import android.app.DialogFragment;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnDismissListener;
import android.content.res.Resources;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyCharacterMap;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.Window;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import com.mohamadamin.persianmaterialdatetimepicker.b;
import com.mohamadamin.persianmaterialdatetimepicker.d;
import com.mohamadamin.persianmaterialdatetimepicker.f;
import com.mohamadamin.persianmaterialdatetimepicker.g;
import com.mohamadamin.persianmaterialdatetimepicker.h;
import com.mohamadamin.persianmaterialdatetimepicker.i;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Locale;

public class e
  extends DialogFragment
  implements RadialPickerLayout.c
{
  private String A;
  private boolean B;
  private ArrayList<Integer> C;
  private g D;
  private int E;
  private int F;
  private String G;
  private String H;
  private String I;
  private String J;
  private h c;
  private DialogInterface.OnCancelListener d;
  private DialogInterface.OnDismissListener e;
  private com.mohamadamin.persianmaterialdatetimepicker.a f;
  private Button g;
  private TextView h;
  private TextView i;
  private TextView j;
  private TextView k;
  private TextView l;
  private View m;
  private RadialPickerLayout n;
  private int o;
  private int p;
  private String q;
  private String r;
  private boolean s;
  private int t;
  private int u;
  private boolean v;
  private String w;
  private boolean x;
  private char y;
  private String z;
  
  public e() {}
  
  private void a(int paramInt, boolean paramBoolean)
  {
    if (v)
    {
      localObject = "%02d";
    }
    else
    {
      String str = "%d";
      int i1 = paramInt % 12;
      localObject = str;
      paramInt = i1;
      if (i1 == 0)
      {
        paramInt = 12;
        localObject = str;
      }
    }
    Object localObject = com.mohamadamin.persianmaterialdatetimepicker.j.a.b(String.format((String)localObject, new Object[] { Integer.valueOf(paramInt) }));
    h.setText((CharSequence)localObject);
    i.setText((CharSequence)localObject);
    if (paramBoolean) {
      i.a(n, (CharSequence)localObject);
    }
  }
  
  private void a(int paramInt, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
  {
    n.a(paramInt, paramBoolean1);
    int i1;
    StringBuilder localStringBuilder;
    if (paramInt == 0)
    {
      int i2 = n.getHours();
      i1 = i2;
      if (!v) {
        i1 = i2 % 12;
      }
      localObject = n;
      localStringBuilder = new StringBuilder();
      localStringBuilder.append(G);
      localStringBuilder.append(": ");
      localStringBuilder.append(i1);
      ((FrameLayout)localObject).setContentDescription(localStringBuilder.toString());
      if (paramBoolean3) {
        i.a(n, H);
      }
      localObject = h;
    }
    else
    {
      i1 = n.getMinutes();
      localObject = n;
      localStringBuilder = new StringBuilder();
      localStringBuilder.append(I);
      localStringBuilder.append(": ");
      localStringBuilder.append(i1);
      ((FrameLayout)localObject).setContentDescription(localStringBuilder.toString());
      if (paramBoolean3) {
        i.a(n, J);
      }
      localObject = j;
    }
    if (paramInt == 0) {
      i1 = o;
    } else {
      i1 = p;
    }
    if (paramInt == 1) {
      paramInt = o;
    } else {
      paramInt = p;
    }
    h.setTextColor(i1);
    j.setTextColor(paramInt);
    Object localObject = i.a((View)localObject, 0.85F, 1.1F);
    if (paramBoolean2) {
      ((ObjectAnimator)localObject).setStartDelay(300L);
    }
    ((ObjectAnimator)localObject).start();
  }
  
  private void a(boolean paramBoolean)
  {
    B = false;
    if (!C.isEmpty())
    {
      int[] arrayOfInt = a(null);
      n.a(arrayOfInt[0], arrayOfInt[1]);
      if (!v) {
        n.setAmOrPm(arrayOfInt[2]);
      }
      C.clear();
    }
    if (paramBoolean)
    {
      b(false);
      n.a(true);
    }
  }
  
  private boolean a(int paramInt)
  {
    if (((v) && (C.size() == 4)) || ((!v) && (d()))) {
      return false;
    }
    C.add(Integer.valueOf(paramInt));
    if (!e())
    {
      b();
      return false;
    }
    paramInt = c(paramInt);
    i.a(n, String.format("%d", new Object[] { Integer.valueOf(paramInt) }));
    if (d())
    {
      if ((!v) && (C.size() <= 3))
      {
        ArrayList localArrayList = C;
        localArrayList.add(localArrayList.size() - 1, Integer.valueOf(7));
        localArrayList = C;
        localArrayList.add(localArrayList.size() - 1, Integer.valueOf(7));
      }
      g.setEnabled(true);
    }
    return true;
  }
  
  private int[] a(Boolean[] paramArrayOfBoolean)
  {
    int i1 = -1;
    int i3 = 1;
    boolean bool = v;
    Boolean localBoolean = Boolean.valueOf(true);
    int i4 = i1;
    int i2 = i3;
    ArrayList localArrayList;
    if (!bool)
    {
      i4 = i1;
      i2 = i3;
      if (d())
      {
        localArrayList = C;
        i2 = ((Integer)localArrayList.get(localArrayList.size() - 1)).intValue();
        if (i2 == b(0)) {
          i1 = 0;
        } else if (i2 == b(1)) {
          i1 = 1;
        }
        i2 = 2;
        i4 = i1;
      }
    }
    int i7 = -1;
    int i6 = -1;
    int i5 = i2;
    while (i5 <= C.size())
    {
      localArrayList = C;
      int i8 = c(((Integer)localArrayList.get(localArrayList.size() - i5)).intValue());
      if (i5 == i2)
      {
        i1 = i8;
        i3 = i6;
      }
      else if (i5 == i2 + 1)
      {
        i7 += i8 * 10;
        i1 = i7;
        i3 = i6;
        if (paramArrayOfBoolean != null)
        {
          i1 = i7;
          i3 = i6;
          if (i8 == 0)
          {
            paramArrayOfBoolean[1] = localBoolean;
            i1 = i7;
            i3 = i6;
          }
        }
      }
      else if (i5 == i2 + 2)
      {
        i3 = i8;
        i1 = i7;
      }
      else
      {
        i1 = i7;
        i3 = i6;
        if (i5 == i2 + 3)
        {
          i6 += i8 * 10;
          i1 = i7;
          i3 = i6;
          if (paramArrayOfBoolean != null)
          {
            i1 = i7;
            i3 = i6;
            if (i8 == 0)
            {
              paramArrayOfBoolean[0] = localBoolean;
              i3 = i6;
              i1 = i7;
            }
          }
        }
      }
      i5 += 1;
      i7 = i1;
      i6 = i3;
    }
    return new int[] { i6, i7, i4 };
  }
  
  private int b()
  {
    ArrayList localArrayList = C;
    int i1 = ((Integer)localArrayList.remove(localArrayList.size() - 1)).intValue();
    if (!d()) {
      g.setEnabled(false);
    }
    return i1;
  }
  
  private int b(int paramInt)
  {
    if ((E == -1) || (F == -1))
    {
      Object localObject = KeyCharacterMap.load(-1);
      int i3 = 0;
      while (i3 < Math.max(q.length(), r.length()))
      {
        int i1 = "AM".toLowerCase(Locale.getDefault()).charAt(i3);
        int i2 = "PM".toLowerCase(Locale.getDefault()).charAt(i3);
        if (i1 != i2)
        {
          localObject = ((KeyCharacterMap)localObject).getEvents(new char[] { i1, i2 });
          if ((localObject != null) && (localObject.length == 4))
          {
            E = localObject[0].getKeyCode();
            F = localObject[2].getKeyCode();
            break;
          }
          Log.e("TimePickerDialog", "Unable to find keycodes for AM and PM.");
          break;
        }
        i3 += 1;
      }
    }
    if (paramInt == 0) {
      return E;
    }
    if (paramInt == 1) {
      return F;
    }
    return -1;
  }
  
  public static e b(h paramH, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    e localE = new e();
    localE.a(paramH, paramInt1, paramInt2, paramBoolean);
    return localE;
  }
  
  private void b(boolean paramBoolean)
  {
    int i1 = 0;
    Object localObject = Boolean.valueOf(false);
    if ((!paramBoolean) && (C.isEmpty()))
    {
      int i2 = n.getHours();
      int i3 = n.getMinutes();
      a(i2, true);
      e(i3);
      if (!v)
      {
        if (i2 >= 12) {
          i1 = 1;
        }
        g(i1);
      }
      a(n.getCurrentItemShowing(), true, true, true);
      g.setEnabled(true);
      return;
    }
    Boolean[] arrayOfBoolean = new Boolean[2];
    arrayOfBoolean[0] = localObject;
    arrayOfBoolean[1] = localObject;
    int[] arrayOfInt = a(arrayOfBoolean);
    paramBoolean = arrayOfBoolean[0].booleanValue();
    String str = "%02d";
    if (paramBoolean) {
      localObject = "%02d";
    } else {
      localObject = "%2d";
    }
    if (!arrayOfBoolean[1].booleanValue()) {
      str = "%2d";
    }
    if (arrayOfInt[0] == -1) {
      localObject = z;
    } else {
      localObject = String.format((String)localObject, new Object[] { Integer.valueOf(arrayOfInt[0]) }).replace(' ', y);
    }
    if (arrayOfInt[1] == -1) {
      str = z;
    } else {
      str = String.format(str, new Object[] { Integer.valueOf(arrayOfInt[1]) }).replace(' ', y);
    }
    h.setText(com.mohamadamin.persianmaterialdatetimepicker.j.a.b((String)localObject));
    i.setText(com.mohamadamin.persianmaterialdatetimepicker.j.a.b((String)localObject));
    h.setTextColor(p);
    j.setText(com.mohamadamin.persianmaterialdatetimepicker.j.a.b(str));
    k.setText(com.mohamadamin.persianmaterialdatetimepicker.j.a.b(str));
    j.setTextColor(p);
    if (!v) {
      g(arrayOfInt[2]);
    }
  }
  
  private static int c(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return -1;
    case 16: 
      return 9;
    case 15: 
      return 8;
    case 14: 
      return 7;
    case 13: 
      return 6;
    case 12: 
      return 5;
    case 11: 
      return 4;
    case 10: 
      return 3;
    case 9: 
      return 2;
    case 8: 
      return 1;
    }
    return 0;
  }
  
  private void c()
  {
    D = new g(new int[0]);
    if (v)
    {
      localG1 = new g(new int[] { 7, 8, 9, 10, 11, 12 });
      localG2 = new g(new int[] { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 });
      localG1.a(localG2);
      localG3 = new g(new int[] { 7, 8 });
      D.a(localG3);
      localG4 = new g(new int[] { 7, 8, 9, 10, 11, 12 });
      localG3.a(localG4);
      localG4.a(localG1);
      localG4.a(new g(new int[] { 13, 14, 15, 16 }));
      localG4 = new g(new int[] { 13, 14, 15, 16 });
      localG3.a(localG4);
      localG4.a(localG1);
      localG3 = new g(new int[] { 9 });
      D.a(localG3);
      localG4 = new g(new int[] { 7, 8, 9, 10 });
      localG3.a(localG4);
      localG4.a(localG1);
      localG4 = new g(new int[] { 11, 12 });
      localG3.a(localG4);
      localG4.a(localG2);
      localG2 = new g(new int[] { 10, 11, 12, 13, 14, 15, 16 });
      D.a(localG2);
      localG2.a(localG1);
      return;
    }
    g localG1 = new g(new int[] { b(0), b(1) });
    g localG2 = new g(new int[] { 8 });
    D.a(localG2);
    localG2.a(localG1);
    g localG3 = new g(new int[] { 7, 8, 9 });
    localG2.a(localG3);
    localG3.a(localG1);
    g localG4 = new g(new int[] { 7, 8, 9, 10, 11, 12 });
    localG3.a(localG4);
    localG4.a(localG1);
    g localG5 = new g(new int[] { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 });
    localG4.a(localG5);
    localG5.a(localG1);
    localG4 = new g(new int[] { 13, 14, 15, 16 });
    localG3.a(localG4);
    localG4.a(localG1);
    localG3 = new g(new int[] { 10, 11, 12 });
    localG2.a(localG3);
    localG2 = new g(new int[] { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 });
    localG3.a(localG2);
    localG2.a(localG1);
    localG3 = new g(new int[] { 9, 10, 11, 12, 13, 14, 15, 16 });
    D.a(localG3);
    localG3.a(localG1);
    localG2 = new g(new int[] { 7, 8, 9, 10, 11, 12 });
    localG3.a(localG2);
    localG3 = new g(new int[] { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 });
    localG2.a(localG3);
    localG3.a(localG1);
  }
  
  private boolean d()
  {
    boolean bool3 = v;
    boolean bool1 = false;
    boolean bool2 = false;
    if (bool3)
    {
      int[] arrayOfInt = a(null);
      bool1 = bool2;
      if (arrayOfInt[0] >= 0)
      {
        bool1 = bool2;
        if (arrayOfInt[1] >= 0)
        {
          bool1 = bool2;
          if (arrayOfInt[1] < 60) {
            bool1 = true;
          }
        }
      }
      return bool1;
    }
    if ((C.contains(Integer.valueOf(b(0)))) || (C.contains(Integer.valueOf(b(1))))) {
      bool1 = true;
    }
    return bool1;
  }
  
  private boolean d(int paramInt)
  {
    if ((paramInt != 111) && (paramInt != 4))
    {
      if (paramInt == 61)
      {
        if (B)
        {
          if (d()) {
            a(true);
          }
          return true;
        }
      }
      else
      {
        Object localObject;
        if (paramInt == 66)
        {
          if (B)
          {
            if (!d()) {
              return true;
            }
            a(false);
          }
          localObject = c;
          if (localObject != null)
          {
            RadialPickerLayout localRadialPickerLayout = n;
            ((h)localObject).a(localRadialPickerLayout, localRadialPickerLayout.getHours(), n.getMinutes());
          }
          dismiss();
          return true;
        }
        if (paramInt == 67)
        {
          if ((B) && (!C.isEmpty()))
          {
            paramInt = b();
            if (paramInt == b(0)) {
              localObject = q;
            } else if (paramInt == b(1)) {
              localObject = r;
            } else {
              localObject = String.format("%d", new Object[] { Integer.valueOf(c(paramInt)) });
            }
            i.a(n, String.format(A, new Object[] { localObject }));
            b(true);
            return false;
          }
        }
        else {
          if ((paramInt == 7) || (paramInt == 8) || (paramInt == 9) || (paramInt == 10) || (paramInt == 11) || (paramInt == 12) || (paramInt == 13) || (paramInt == 14) || (paramInt == 15) || (paramInt == 16) || ((!v) && ((paramInt == b(0)) || (paramInt == b(1))))) {
            break label307;
          }
        }
      }
      return false;
      label307:
      if (!B)
      {
        if (n == null)
        {
          Log.e("TimePickerDialog", "Unable to initiate keyboard mode, TimePicker was null.");
          return true;
        }
        C.clear();
        f(paramInt);
        return true;
      }
      if (a(paramInt)) {
        b(false);
      }
      return true;
    }
    if (isCancelable()) {
      dismiss();
    }
    return true;
  }
  
  private void e(int paramInt)
  {
    int i1 = paramInt;
    if (paramInt == 60) {
      i1 = 0;
    }
    String str = com.mohamadamin.persianmaterialdatetimepicker.j.a.b(String.format(Locale.getDefault(), "%02d", new Object[] { Integer.valueOf(i1) }));
    i.a(n, str);
    j.setText(str);
    k.setText(str);
  }
  
  private boolean e()
  {
    g localG = D;
    Iterator localIterator = C.iterator();
    while (localIterator.hasNext())
    {
      localG = localG.a(((Integer)localIterator.next()).intValue());
      if (localG == null) {
        return false;
      }
    }
    return true;
  }
  
  private void f(int paramInt)
  {
    if ((n.a(false)) && ((paramInt == -1) || (a(paramInt))))
    {
      B = true;
      g.setEnabled(false);
      b(false);
    }
  }
  
  private void g(int paramInt)
  {
    if (paramInt == 0)
    {
      l.setText(q);
      i.a(n, q);
      m.setContentDescription(q);
      return;
    }
    if (paramInt == 1)
    {
      l.setText(r);
      i.a(n, r);
      m.setContentDescription(r);
      return;
    }
    l.setText(z);
  }
  
  public void a()
  {
    f.c();
  }
  
  public void a(int paramInt1, int paramInt2, boolean paramBoolean)
  {
    Object localObject1;
    Object localObject2;
    if (paramInt1 == 0)
    {
      a(paramInt2, false);
      localObject1 = String.format("%d", new Object[] { Integer.valueOf(paramInt2) });
      if ((s) && (paramBoolean))
      {
        a(1, true, true, false);
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append((String)localObject1);
        ((StringBuilder)localObject2).append(". ");
        ((StringBuilder)localObject2).append(J);
        localObject1 = ((StringBuilder)localObject2).toString();
      }
      else
      {
        localObject2 = n;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(G);
        localStringBuilder.append(": ");
        localStringBuilder.append(paramInt2);
        ((FrameLayout)localObject2).setContentDescription(localStringBuilder.toString());
      }
      i.a(n, (CharSequence)localObject1);
      return;
    }
    if (paramInt1 == 1)
    {
      e(paramInt2);
      localObject1 = n;
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append(I);
      ((StringBuilder)localObject2).append(": ");
      ((StringBuilder)localObject2).append(paramInt2);
      ((FrameLayout)localObject1).setContentDescription(((StringBuilder)localObject2).toString());
      return;
    }
    if (paramInt1 == 2)
    {
      g(paramInt2);
      return;
    }
    if (paramInt1 == 3)
    {
      if (!d()) {
        C.clear();
      }
      a(true);
    }
  }
  
  public void a(h paramH, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    c = paramH;
    t = paramInt1;
    u = paramInt2;
    v = paramBoolean;
    B = false;
    w = "";
    x = false;
  }
  
  public void onCancel(DialogInterface paramDialogInterface)
  {
    super.onCancel(paramDialogInterface);
    DialogInterface.OnCancelListener localOnCancelListener = d;
    if (localOnCancelListener != null) {
      localOnCancelListener.onCancel(paramDialogInterface);
    }
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    if ((paramBundle != null) && (paramBundle.containsKey("hour_of_day")) && (paramBundle.containsKey("minute")) && (paramBundle.containsKey("is_24_hour_view")))
    {
      t = paramBundle.getInt("hour_of_day");
      u = paramBundle.getInt("minute");
      v = paramBundle.getBoolean("is_24_hour_view");
      B = paramBundle.getBoolean("in_kb_mode");
      w = paramBundle.getString("dialog_title");
      x = paramBundle.getBoolean("dark_theme");
    }
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    getDialog().getWindow().requestFeature(1);
    paramLayoutInflater = paramLayoutInflater.inflate(f.mdtp_time_picker_dialog, null);
    Object localObject = new f(null);
    paramLayoutInflater.findViewById(com.mohamadamin.persianmaterialdatetimepicker.e.time_picker_dialog).setOnKeyListener((View.OnKeyListener)localObject);
    paramViewGroup = getResources();
    G = paramViewGroup.getString(g.mdtp_hour_picker_description);
    H = paramViewGroup.getString(g.mdtp_select_hours);
    I = paramViewGroup.getString(g.mdtp_minute_picker_description);
    J = paramViewGroup.getString(g.mdtp_select_minutes);
    o = paramViewGroup.getColor(b.mdtp_white);
    p = paramViewGroup.getColor(b.mdtp_accent_color_focused);
    h = ((TextView)paramLayoutInflater.findViewById(com.mohamadamin.persianmaterialdatetimepicker.e.hours));
    h.setOnKeyListener((View.OnKeyListener)localObject);
    i = ((TextView)paramLayoutInflater.findViewById(com.mohamadamin.persianmaterialdatetimepicker.e.hour_space));
    k = ((TextView)paramLayoutInflater.findViewById(com.mohamadamin.persianmaterialdatetimepicker.e.minutes_space));
    j = ((TextView)paramLayoutInflater.findViewById(com.mohamadamin.persianmaterialdatetimepicker.e.minutes));
    j.setOnKeyListener((View.OnKeyListener)localObject);
    l = ((TextView)paramLayoutInflater.findViewById(com.mohamadamin.persianmaterialdatetimepicker.e.ampm_label));
    l.setOnKeyListener((View.OnKeyListener)localObject);
    q = "?????????";
    r = "????????";
    f = new com.mohamadamin.persianmaterialdatetimepicker.a(getActivity());
    n = ((RadialPickerLayout)paramLayoutInflater.findViewById(com.mohamadamin.persianmaterialdatetimepicker.e.time_picker));
    n.setOnValueSelectedListener(this);
    n.setOnKeyListener((View.OnKeyListener)localObject);
    n.a(getActivity(), f, t, u, v);
    int i2 = 0;
    int i1 = i2;
    if (paramBundle != null)
    {
      i1 = i2;
      if (paramBundle.containsKey("current_item_showing")) {
        i1 = paramBundle.getInt("current_item_showing");
      }
    }
    a(i1, false, true, true);
    n.invalidate();
    h.setOnClickListener(new a());
    j.setOnClickListener(new b());
    g = ((Button)paramLayoutInflater.findViewById(com.mohamadamin.persianmaterialdatetimepicker.e.ok));
    g.setOnClickListener(new c());
    g.setOnKeyListener((View.OnKeyListener)localObject);
    g.setTypeface(h.a(getDialog().getContext(), "Roboto-Medium"));
    localObject = (Button)paramLayoutInflater.findViewById(com.mohamadamin.persianmaterialdatetimepicker.e.cancel);
    ((Button)localObject).setOnClickListener(new d());
    ((Button)localObject).setTypeface(h.a(getDialog().getContext(), "Roboto-Medium"));
    if (isCancelable()) {
      i1 = 0;
    } else {
      i1 = 8;
    }
    ((Button)localObject).setVisibility(i1);
    m = paramLayoutInflater.findViewById(com.mohamadamin.persianmaterialdatetimepicker.e.ampm_hitspace);
    if (v)
    {
      l.setVisibility(8);
      localObject = new RelativeLayout.LayoutParams(-2, -2);
      ((RelativeLayout.LayoutParams)localObject).addRule(13);
      ((TextView)paramLayoutInflater.findViewById(com.mohamadamin.persianmaterialdatetimepicker.e.separator)).setLayoutParams((ViewGroup.LayoutParams)localObject);
    }
    else
    {
      l.setVisibility(0);
      if (t < 12) {
        i1 = 0;
      } else {
        i1 = 1;
      }
      g(i1);
      m.setOnClickListener(new e());
    }
    s = true;
    a(t, true);
    e(u);
    z = paramViewGroup.getString(g.mdtp_time_placeholder);
    A = paramViewGroup.getString(g.mdtp_deleted_key);
    y = z.charAt(0);
    F = -1;
    E = -1;
    c();
    if (B)
    {
      C = paramBundle.getIntegerArrayList("typed_times");
      f(-1);
      h.invalidate();
    }
    else if (C == null)
    {
      C = new ArrayList();
    }
    paramBundle = (TextView)paramLayoutInflater.findViewById(com.mohamadamin.persianmaterialdatetimepicker.e.time_picker_header);
    if (!w.isEmpty())
    {
      paramBundle.setVisibility(0);
      paramBundle.setText(w);
    }
    n.a(getActivity().getApplicationContext(), x);
    paramViewGroup.getColor(b.mdtp_white);
    paramViewGroup.getColor(b.mdtp_accent_color);
    i1 = paramViewGroup.getColor(b.mdtp_circle_background);
    paramViewGroup.getColor(b.mdtp_line_background);
    paramViewGroup.getColor(b.mdtp_numbers_text_color);
    paramViewGroup.getColorStateList(b.mdtp_done_text_color);
    i2 = d.mdtp_done_background_color;
    i2 = paramViewGroup.getColor(b.mdtp_background_color);
    int i3 = paramViewGroup.getColor(b.mdtp_light_gray);
    paramViewGroup.getColor(b.mdtp_dark_gray);
    int i4 = paramViewGroup.getColor(b.mdtp_light_gray);
    paramViewGroup.getColor(b.mdtp_line_dark);
    paramViewGroup.getColorStateList(b.mdtp_done_text_color_dark);
    int i5 = d.mdtp_done_background_color_dark;
    paramViewGroup = n;
    if (x) {
      i1 = i4;
    }
    paramViewGroup.setBackgroundColor(i1);
    paramViewGroup = paramLayoutInflater.findViewById(com.mohamadamin.persianmaterialdatetimepicker.e.time_picker_dialog);
    if (x) {
      i1 = i3;
    } else {
      i1 = i2;
    }
    paramViewGroup.setBackgroundColor(i1);
    return paramLayoutInflater;
  }
  
  public void onDismiss(DialogInterface paramDialogInterface)
  {
    super.onDismiss(paramDialogInterface);
    DialogInterface.OnDismissListener localOnDismissListener = e;
    if (localOnDismissListener != null) {
      localOnDismissListener.onDismiss(paramDialogInterface);
    }
  }
  
  public void onPause()
  {
    super.onPause();
    f.b();
  }
  
  public void onResume()
  {
    super.onResume();
    f.a();
  }
  
  public void onSaveInstanceState(Bundle paramBundle)
  {
    RadialPickerLayout localRadialPickerLayout = n;
    if (localRadialPickerLayout != null)
    {
      paramBundle.putInt("hour_of_day", localRadialPickerLayout.getHours());
      paramBundle.putInt("minute", n.getMinutes());
      paramBundle.putBoolean("is_24_hour_view", v);
      paramBundle.putInt("current_item_showing", n.getCurrentItemShowing());
      paramBundle.putBoolean("in_kb_mode", B);
      if (B) {
        paramBundle.putIntegerArrayList("typed_times", C);
      }
      paramBundle.putString("dialog_title", w);
      paramBundle.putBoolean("dark_theme", x);
    }
  }
  
  class a
    implements View.OnClickListener
  {
    a() {}
    
    public void onClick(View paramView)
    {
      e.a(e.this, 0, true, false, true);
      a();
    }
  }
  
  class b
    implements View.OnClickListener
  {
    b() {}
    
    public void onClick(View paramView)
    {
      e.a(e.this, 1, true, false, true);
      a();
    }
  }
  
  class c
    implements View.OnClickListener
  {
    c() {}
    
    public void onClick(View paramView)
    {
      if ((e.a(e.this)) && (e.b(e.this))) {
        e.a(e.this, false);
      } else {
        a();
      }
      if (e.c(e.this) != null) {
        e.c(e.this).a(e.d(e.this), e.d(e.this).getHours(), e.d(e.this).getMinutes());
      }
      dismiss();
    }
  }
  
  class d
    implements View.OnClickListener
  {
    d() {}
    
    public void onClick(View paramView)
    {
      a();
      getDialog().cancel();
    }
  }
  
  class e
    implements View.OnClickListener
  {
    e() {}
    
    public void onClick(View paramView)
    {
      a();
      int j = e.d(e.this).getIsCurrentlyAmOrPm();
      int i;
      if (j == 0)
      {
        i = 1;
      }
      else
      {
        i = j;
        if (j == 1) {
          i = 0;
        }
      }
      e.a(e.this, i);
      e.d(e.this).setAmOrPm(i);
    }
  }
  
  private class f
    implements View.OnKeyListener
  {
    private f() {}
    
    public boolean onKey(View paramView, int paramInt, KeyEvent paramKeyEvent)
    {
      if (paramKeyEvent.getAction() == 1) {
        return e.b(e.this, paramInt);
      }
      return false;
    }
  }
  
  private static class g
  {
    private int[] a;
    private ArrayList<g> b;
    
    public g(int... paramVarArgs)
    {
      a = paramVarArgs;
      b = new ArrayList();
    }
    
    public g a(int paramInt)
    {
      Object localObject = b;
      if (localObject == null) {
        return null;
      }
      localObject = ((ArrayList)localObject).iterator();
      while (((Iterator)localObject).hasNext())
      {
        g localG = (g)((Iterator)localObject).next();
        if (localG.b(paramInt)) {
          return localG;
        }
      }
      return null;
    }
    
    public void a(g paramG)
    {
      b.add(paramG);
    }
    
    public boolean b(int paramInt)
    {
      int i = 0;
      for (;;)
      {
        int[] arrayOfInt = a;
        if (i >= arrayOfInt.length) {
          break;
        }
        if (arrayOfInt[i] == paramInt) {
          return true;
        }
        i += 1;
      }
      return false;
    }
  }
  
  public static abstract interface h
  {
    public abstract void a(RadialPickerLayout paramRadialPickerLayout, int paramInt1, int paramInt2);
  }
}
