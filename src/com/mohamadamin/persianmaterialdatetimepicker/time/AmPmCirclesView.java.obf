package com.mohamadamin.persianmaterialdatetimepicker.time;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.graphics.Typeface;
import android.util.Log;
import android.view.View;
import com.mohamadamin.persianmaterialdatetimepicker.b;
import com.mohamadamin.persianmaterialdatetimepicker.g;

public class a
  extends View
{
  private final Paint c = new Paint();
  private int d;
  private int e;
  private int f;
  private int g;
  private int h;
  private int i;
  private float j;
  private float k;
  private String l;
  private String m;
  private boolean n = false;
  private boolean o;
  private int p;
  private int q;
  private int r;
  private int s;
  private int t;
  private int u;
  
  public a(Context paramContext)
  {
    super(paramContext);
  }
  
  public int a(float paramFloat1, float paramFloat2)
  {
    if (!o) {
      return -1;
    }
    int i1 = s;
    i1 = (int)((paramFloat2 - i1) * (paramFloat2 - i1));
    int i2 = q;
    if ((int)Math.sqrt((paramFloat1 - i2) * (paramFloat1 - i2) + i1) <= p) {
      return 0;
    }
    i2 = r;
    if ((int)Math.sqrt((paramFloat1 - i2) * (paramFloat1 - i2) + i1) <= p) {
      return 1;
    }
    return -1;
  }
  
  public void a(Context paramContext, int paramInt)
  {
    if (n)
    {
      Log.e("AmPmCirclesView", "AmPmCirclesView may only be initialized once.");
      return;
    }
    paramContext = paramContext.getResources();
    f = paramContext.getColor(b.mdtp_white);
    i = paramContext.getColor(b.mdtp_accent_color);
    e = paramContext.getColor(b.mdtp_accent_color_dark);
    g = paramContext.getColor(b.mdtp_ampm_text_color);
    h = paramContext.getColor(b.mdtp_white);
    d = 255;
    Typeface localTypeface = Typeface.create(paramContext.getString(g.mdtp_sans_serif), 0);
    c.setTypeface(localTypeface);
    c.setAntiAlias(true);
    c.setTextAlign(Paint.Align.CENTER);
    j = Float.parseFloat(paramContext.getString(g.mdtp_circle_radius_multiplier));
    k = Float.parseFloat(paramContext.getString(g.mdtp_ampm_circle_radius_multiplier));
    l = "?????????";
    m = "????????";
    setAmOrPm(paramInt);
    u = -1;
    n = true;
  }
  
  void a(Context paramContext, boolean paramBoolean)
  {
    paramContext = paramContext.getResources();
    if (paramBoolean)
    {
      f = paramContext.getColor(b.mdtp_circle_background_dark_theme);
      i = paramContext.getColor(b.mdtp_red);
      g = paramContext.getColor(b.mdtp_white);
      d = 255;
      return;
    }
    f = paramContext.getColor(b.mdtp_white);
    i = paramContext.getColor(b.mdtp_accent_color);
    g = paramContext.getColor(b.mdtp_ampm_text_color);
    d = 255;
  }
  
  public void onDraw(Canvas paramCanvas)
  {
    if (getWidth() != 0)
    {
      if (!n) {
        return;
      }
      int i2;
      if (!o)
      {
        i1 = getWidth() / 2;
        i3 = getHeight() / 2;
        i2 = (int)(Math.min(i1, i3) * j);
        p = ((int)(i2 * k));
        double d1 = i3;
        i4 = p;
        double d2 = i4;
        Double.isNaN(d2);
        Double.isNaN(d1);
        i3 = (int)(d1 + d2 * 0.75D);
        i4 = i4 * 3 / 4;
        c.setTextSize(i4);
        i4 = p;
        s = (i3 - i4 / 2 + i2);
        q = (i1 - i2 + i4);
        r = (i1 + i2 - i4);
        o = true;
      }
      int i7 = f;
      int i8 = 255;
      int i9 = g;
      int i4 = f;
      int i3 = 255;
      int i6 = g;
      int i10 = t;
      int i5;
      if (i10 == 0)
      {
        i1 = i;
        i2 = d;
        i5 = h;
      }
      else
      {
        i1 = i7;
        i2 = i8;
        i5 = i9;
        if (i10 == 1)
        {
          i4 = i;
          i3 = d;
          i6 = h;
          i5 = i9;
          i2 = i8;
          i1 = i7;
        }
      }
      i9 = u;
      if (i9 == 0)
      {
        i7 = e;
        i8 = d;
      }
      else
      {
        i7 = i1;
        i8 = i2;
        if (i9 == 1)
        {
          i4 = e;
          i3 = d;
          i8 = i2;
          i7 = i1;
        }
      }
      c.setColor(i7);
      c.setAlpha(i8);
      paramCanvas.drawCircle(q, s, p, c);
      c.setColor(i4);
      c.setAlpha(i3);
      paramCanvas.drawCircle(r, s, p, c);
      c.setColor(i5);
      int i1 = s - (int)(c.descent() + c.ascent()) / 2;
      paramCanvas.drawText(l, q, i1, c);
      c.setColor(i6);
      paramCanvas.drawText(m, r, i1, c);
      return;
    }
  }
  
  public void setAmOrPm(int paramInt)
  {
    t = paramInt;
  }
  
  public void setAmOrPmPressed(int paramInt)
  {
    u = paramInt;
  }
}
