package com.mohamadamin.persianmaterialdatetimepicker.time;

import android.animation.Keyframe;
import android.animation.ObjectAnimator;
import android.animation.PropertyValuesHolder;
import android.animation.ValueAnimator;
import android.animation.ValueAnimator.AnimatorUpdateListener;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.graphics.Typeface;
import android.util.Log;
import android.view.View;
import com.mohamadamin.persianmaterialdatetimepicker.b;
import com.mohamadamin.persianmaterialdatetimepicker.g;
import com.mohamadamin.persianmaterialdatetimepicker.j.a;

public class d
  extends View
{
  private float[] A;
  private float[] B;
  private float[] C;
  private float D;
  private float E;
  private float F;
  ObjectAnimator G;
  ObjectAnimator H;
  private b I;
  private final Paint c = new Paint();
  private final Paint d = new Paint();
  private boolean e;
  private boolean f = false;
  private int g = -1;
  private Typeface h;
  private Typeface i;
  private String[] j;
  private String[] k;
  private boolean l;
  private boolean m;
  private float n;
  private float o;
  private float p;
  private float q;
  private float r;
  private float s;
  private int t;
  private int u;
  private float v;
  private boolean w;
  private float x;
  private float y;
  private float[] z;
  
  public d(Context paramContext)
  {
    super(paramContext);
  }
  
  private void a()
  {
    G = ObjectAnimator.ofPropertyValuesHolder(this, new PropertyValuesHolder[] { PropertyValuesHolder.ofKeyframe("animationRadiusMultiplier", new Keyframe[] { Keyframe.ofFloat(0.0F, 1.0F), Keyframe.ofFloat(0.2F, E), Keyframe.ofFloat(1.0F, F) }), PropertyValuesHolder.ofKeyframe("alpha", new Keyframe[] { Keyframe.ofFloat(0.0F, 1.0F), Keyframe.ofFloat(1.0F, 0.0F) }) }).setDuration('?');
    G.addUpdateListener(I);
    int i1 = (int)('?' * (1.0F + 0.25F));
    float f1 = '?' * 0.25F / i1;
    H = ObjectAnimator.ofPropertyValuesHolder(this, new PropertyValuesHolder[] { PropertyValuesHolder.ofKeyframe("animationRadiusMultiplier", new Keyframe[] { Keyframe.ofFloat(0.0F, F), Keyframe.ofFloat(f1, F), Keyframe.ofFloat(1.0F - (1.0F - f1) * 0.2F, E), Keyframe.ofFloat(1.0F, 1.0F) }), PropertyValuesHolder.ofKeyframe("alpha", new Keyframe[] { Keyframe.ofFloat(0.0F, 0.0F), Keyframe.ofFloat(f1, 0.0F), Keyframe.ofFloat(1.0F, 1.0F) }) }).setDuration(i1);
    H.addUpdateListener(I);
  }
  
  private void a(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, float[] paramArrayOfFloat1, float[] paramArrayOfFloat2)
  {
    float f1 = (float)Math.sqrt(3.0D) * paramFloat1 / 2.0F;
    float f2 = paramFloat1 / 2.0F;
    c.setTextSize(paramFloat4);
    d.setTextSize(paramFloat4);
    paramFloat3 -= (c.descent() + c.ascent()) / 2.0F;
    paramArrayOfFloat1[0] = (paramFloat3 - paramFloat1);
    paramArrayOfFloat2[0] = (paramFloat2 - paramFloat1);
    paramArrayOfFloat1[1] = (paramFloat3 - f1);
    paramArrayOfFloat2[1] = (paramFloat2 - f1);
    paramArrayOfFloat1[2] = (paramFloat3 - f2);
    paramArrayOfFloat2[2] = (paramFloat2 - f2);
    paramArrayOfFloat1[3] = paramFloat3;
    paramArrayOfFloat2[3] = paramFloat2;
    paramArrayOfFloat1[4] = (paramFloat3 + f2);
    paramArrayOfFloat2[4] = (paramFloat2 + f2);
    paramArrayOfFloat1[5] = (paramFloat3 + f1);
    paramArrayOfFloat2[5] = (paramFloat2 + f1);
    paramArrayOfFloat1[6] = (paramFloat3 + paramFloat1);
    paramArrayOfFloat2[6] = (paramFloat2 + paramFloat1);
  }
  
  private void a(Canvas paramCanvas, float paramFloat, Typeface paramTypeface, String[] paramArrayOfString, float[] paramArrayOfFloat1, float[] paramArrayOfFloat2)
  {
    c.setTextSize(paramFloat);
    c.setTypeface(paramTypeface);
    a.a(paramArrayOfString);
    String str = paramArrayOfString[0];
    paramFloat = paramArrayOfFloat1[3];
    float f1 = paramArrayOfFloat2[0];
    if (Integer.parseInt(paramArrayOfString[0]) == g) {
      paramTypeface = d;
    } else {
      paramTypeface = c;
    }
    paramCanvas.drawText(str, paramFloat, f1, paramTypeface);
    str = paramArrayOfString[1];
    paramFloat = paramArrayOfFloat1[4];
    f1 = paramArrayOfFloat2[1];
    if (Integer.parseInt(paramArrayOfString[1]) == g) {
      paramTypeface = d;
    } else {
      paramTypeface = c;
    }
    paramCanvas.drawText(str, paramFloat, f1, paramTypeface);
    str = paramArrayOfString[2];
    paramFloat = paramArrayOfFloat1[5];
    f1 = paramArrayOfFloat2[2];
    if (Integer.parseInt(paramArrayOfString[2]) == g) {
      paramTypeface = d;
    } else {
      paramTypeface = c;
    }
    paramCanvas.drawText(str, paramFloat, f1, paramTypeface);
    str = paramArrayOfString[3];
    paramFloat = paramArrayOfFloat1[6];
    f1 = paramArrayOfFloat2[3];
    if (Integer.parseInt(paramArrayOfString[3]) == g) {
      paramTypeface = d;
    } else {
      paramTypeface = c;
    }
    paramCanvas.drawText(str, paramFloat, f1, paramTypeface);
    str = paramArrayOfString[4];
    paramFloat = paramArrayOfFloat1[5];
    f1 = paramArrayOfFloat2[4];
    if (Integer.parseInt(paramArrayOfString[4]) == g) {
      paramTypeface = d;
    } else {
      paramTypeface = c;
    }
    paramCanvas.drawText(str, paramFloat, f1, paramTypeface);
    str = paramArrayOfString[5];
    paramFloat = paramArrayOfFloat1[4];
    f1 = paramArrayOfFloat2[5];
    if (Integer.parseInt(paramArrayOfString[5]) == g) {
      paramTypeface = d;
    } else {
      paramTypeface = c;
    }
    paramCanvas.drawText(str, paramFloat, f1, paramTypeface);
    str = paramArrayOfString[6];
    paramFloat = paramArrayOfFloat1[3];
    f1 = paramArrayOfFloat2[6];
    if (Integer.parseInt(paramArrayOfString[6]) == g) {
      paramTypeface = d;
    } else {
      paramTypeface = c;
    }
    paramCanvas.drawText(str, paramFloat, f1, paramTypeface);
    str = paramArrayOfString[7];
    paramFloat = paramArrayOfFloat1[2];
    f1 = paramArrayOfFloat2[5];
    if (Integer.parseInt(paramArrayOfString[7]) == g) {
      paramTypeface = d;
    } else {
      paramTypeface = c;
    }
    paramCanvas.drawText(str, paramFloat, f1, paramTypeface);
    str = paramArrayOfString[8];
    paramFloat = paramArrayOfFloat1[1];
    f1 = paramArrayOfFloat2[4];
    if (Integer.parseInt(paramArrayOfString[8]) == g) {
      paramTypeface = d;
    } else {
      paramTypeface = c;
    }
    paramCanvas.drawText(str, paramFloat, f1, paramTypeface);
    str = paramArrayOfString[9];
    paramFloat = paramArrayOfFloat1[0];
    f1 = paramArrayOfFloat2[3];
    if (Integer.parseInt(paramArrayOfString[9]) == g) {
      paramTypeface = d;
    } else {
      paramTypeface = c;
    }
    paramCanvas.drawText(str, paramFloat, f1, paramTypeface);
    str = paramArrayOfString[10];
    paramFloat = paramArrayOfFloat1[1];
    f1 = paramArrayOfFloat2[2];
    if (Integer.parseInt(paramArrayOfString[10]) == g) {
      paramTypeface = d;
    } else {
      paramTypeface = c;
    }
    paramCanvas.drawText(str, paramFloat, f1, paramTypeface);
    str = paramArrayOfString[11];
    paramFloat = paramArrayOfFloat1[2];
    f1 = paramArrayOfFloat2[1];
    if (Integer.parseInt(paramArrayOfString[11]) == g) {
      paramTypeface = d;
    } else {
      paramTypeface = c;
    }
    paramCanvas.drawText(str, paramFloat, f1, paramTypeface);
  }
  
  void a(Context paramContext, boolean paramBoolean)
  {
    paramContext = paramContext.getResources();
    int i1;
    if (paramBoolean) {
      i1 = paramContext.getColor(b.mdtp_white);
    } else {
      i1 = paramContext.getColor(b.mdtp_numbers_text_color);
    }
    c.setColor(i1);
  }
  
  public void a(Resources paramResources, String[] paramArrayOfString1, String[] paramArrayOfString2, boolean paramBoolean1, boolean paramBoolean2)
  {
    if (f)
    {
      Log.e("RadialTextsView", "This RadialTextsView may only be initialized once.");
      return;
    }
    int i1 = paramResources.getColor(b.mdtp_numbers_text_color);
    c.setColor(i1);
    String str = paramResources.getString(g.mdtp_radial_numbers_typeface);
    boolean bool = false;
    h = Typeface.create(str, 0);
    i = Typeface.create(paramResources.getString(g.mdtp_sans_serif), 0);
    c.setAntiAlias(true);
    c.setTextAlign(Paint.Align.CENTER);
    i1 = paramResources.getColor(b.mdtp_white);
    d.setColor(i1);
    d.setAntiAlias(true);
    d.setTextAlign(Paint.Align.CENTER);
    j = paramArrayOfString1;
    k = paramArrayOfString2;
    l = paramBoolean1;
    if (paramArrayOfString2 != null) {
      bool = true;
    }
    m = bool;
    if (paramBoolean1)
    {
      n = Float.parseFloat(paramResources.getString(g.mdtp_circle_radius_multiplier_24HourMode));
    }
    else
    {
      n = Float.parseFloat(paramResources.getString(g.mdtp_circle_radius_multiplier));
      o = Float.parseFloat(paramResources.getString(g.mdtp_ampm_circle_radius_multiplier));
    }
    z = new float[7];
    A = new float[7];
    if (m)
    {
      p = Float.parseFloat(paramResources.getString(g.mdtp_numbers_radius_multiplier_outer));
      r = Float.parseFloat(paramResources.getString(g.mdtp_text_size_multiplier_outer));
      q = Float.parseFloat(paramResources.getString(g.mdtp_numbers_radius_multiplier_inner));
      s = Float.parseFloat(paramResources.getString(g.mdtp_text_size_multiplier_inner));
      B = new float[7];
      C = new float[7];
    }
    else
    {
      p = Float.parseFloat(paramResources.getString(g.mdtp_numbers_radius_multiplier_normal));
      r = Float.parseFloat(paramResources.getString(g.mdtp_text_size_multiplier_normal));
    }
    D = 1.0F;
    int i2 = -1;
    if (paramBoolean2) {
      i1 = -1;
    } else {
      i1 = 1;
    }
    E = (i1 * 0.05F + 1.0F);
    i1 = i2;
    if (paramBoolean2) {
      i1 = 1;
    }
    F = (i1 * 0.3F + 1.0F);
    I = new b(null);
    w = true;
    f = true;
  }
  
  public ObjectAnimator getDisappearAnimator()
  {
    if ((f) && (e))
    {
      ObjectAnimator localObjectAnimator = G;
      if (localObjectAnimator != null) {
        return localObjectAnimator;
      }
    }
    Log.e("RadialTextsView", "RadialTextView was not ready for animation.");
    return null;
  }
  
  public ObjectAnimator getReappearAnimator()
  {
    if ((f) && (e))
    {
      ObjectAnimator localObjectAnimator = H;
      if (localObjectAnimator != null) {
        return localObjectAnimator;
      }
    }
    Log.e("RadialTextsView", "RadialTextView was not ready for animation.");
    return null;
  }
  
  public boolean hasOverlappingRendering()
  {
    return false;
  }
  
  public void onDraw(Canvas paramCanvas)
  {
    if (getWidth() != 0)
    {
      if (!f) {
        return;
      }
      if (!e)
      {
        t = (getWidth() / 2);
        u = (getHeight() / 2);
        v = (Math.min(t, u) * n);
        if (!l)
        {
          f1 = v;
          float f2 = o;
          double d1 = u;
          double d2 = f1 * f2;
          Double.isNaN(d2);
          Double.isNaN(d1);
          u = ((int)(d1 - d2 * 0.75D));
        }
        float f1 = v;
        x = (r * f1);
        if (m) {
          y = (f1 * s);
        }
        a();
        w = true;
        e = true;
      }
      if (w)
      {
        a(v * p * D, t, u, x, z, A);
        if (m) {
          a(v * q * D, t, u, y, B, C);
        }
        w = false;
      }
      a(paramCanvas, x, h, j, A, z);
      if (m) {
        a(paramCanvas, y, i, k, C, B);
      }
      return;
    }
  }
  
  public void setAnimationRadiusMultiplier(float paramFloat)
  {
    D = paramFloat;
    w = true;
  }
  
  protected void setSelection(int paramInt)
  {
    g = paramInt;
  }
  
  private class b
    implements ValueAnimator.AnimatorUpdateListener
  {
    private b() {}
    
    public void onAnimationUpdate(ValueAnimator paramValueAnimator)
    {
      invalidate();
    }
  }
}
