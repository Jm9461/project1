package com.mohamadamin.persianmaterialdatetimepicker.time;

import android.animation.Animator;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.Resources;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Handler;
import android.text.format.DateUtils;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.ViewConfiguration;
import android.view.ViewGroup.LayoutParams;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction;
import android.widget.FrameLayout;
import java.util.Calendar;
import java.util.List;

public class RadialPickerLayout
  extends FrameLayout
  implements View.OnTouchListener
{
  private float A;
  private float B;
  private AccessibilityManager C;
  private AnimatorSet D;
  private Handler E = new Handler();
  private final int c;
  private final int d;
  private int e;
  private com.mohamadamin.persianmaterialdatetimepicker.a f;
  private c g;
  private boolean h;
  private int i;
  private int j;
  private boolean k;
  private boolean l;
  private int m;
  private b n;
  private a o;
  private d p;
  private d q;
  private c r;
  private c s;
  private View t;
  private int[] u;
  private boolean v;
  private int w = -1;
  private boolean x;
  private boolean y;
  private int z;
  
  public RadialPickerLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    setOnTouchListener(this);
    c = ViewConfiguration.get(paramContext).getScaledTouchSlop();
    d = ViewConfiguration.getTapTimeout();
    x = false;
    n = new b(paramContext);
    addView(n);
    o = new a(paramContext);
    addView(o);
    r = new c(paramContext);
    addView(r);
    s = new c(paramContext);
    addView(s);
    p = new d(paramContext);
    addView(p);
    q = new d(paramContext);
    addView(q);
    a();
    e = -1;
    v = true;
    t = new View(paramContext);
    t.setLayoutParams(new ViewGroup.LayoutParams(-1, -1));
    t.setBackgroundColor(getResources().getColor(com.mohamadamin.persianmaterialdatetimepicker.b.mdtp_transparent_black));
    t.setVisibility(4);
    addView(t);
    C = ((AccessibilityManager)paramContext.getSystemService("accessibility"));
    h = false;
  }
  
  private int a(float paramFloat1, float paramFloat2, boolean paramBoolean, Boolean[] paramArrayOfBoolean)
  {
    int i1 = getCurrentItemShowing();
    if (i1 == 0) {
      return r.a(paramFloat1, paramFloat2, paramBoolean, paramArrayOfBoolean);
    }
    if (i1 == 1) {
      return s.a(paramFloat1, paramFloat2, paramBoolean, paramArrayOfBoolean);
    }
    return -1;
  }
  
  private int a(int paramInt, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
  {
    if (paramInt == -1) {
      return -1;
    }
    int i3 = getCurrentItemShowing();
    if ((!paramBoolean2) && (i3 == 1)) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    if (i1 != 0) {
      i1 = b(paramInt);
    } else {
      i1 = d(paramInt, 0);
    }
    c localC;
    if (i3 == 0)
    {
      localC = r;
      i2 = 30;
    }
    else
    {
      localC = s;
      i2 = 6;
    }
    localC.a(i1, paramBoolean1, paramBoolean3);
    localC.invalidate();
    if (i3 == 0)
    {
      if (k)
      {
        if ((i1 == 0) && (paramBoolean1))
        {
          paramInt = 360;
        }
        else
        {
          paramInt = i1;
          if (i1 == 360)
          {
            paramInt = i1;
            if (!paramBoolean1) {
              paramInt = 0;
            }
          }
        }
      }
      else
      {
        paramInt = i1;
        if (i1 == 0) {
          paramInt = 360;
        }
      }
    }
    else
    {
      paramInt = i1;
      if (i1 == 360)
      {
        paramInt = i1;
        if (i3 == 1) {
          paramInt = 0;
        }
      }
    }
    int i2 = paramInt / i2;
    int i1 = i2;
    if (i3 == 0)
    {
      i1 = i2;
      if (k)
      {
        i1 = i2;
        if (!paramBoolean1)
        {
          i1 = i2;
          if (paramInt != 0) {
            i1 = i2 + 12;
          }
        }
      }
    }
    if (getCurrentItemShowing() == 0)
    {
      p.setSelection(i1);
      p.invalidate();
      return i1;
    }
    if (getCurrentItemShowing() == 1)
    {
      q.setSelection(i1);
      q.invalidate();
    }
    return i1;
  }
  
  private void a()
  {
    u = new int['?'];
    int i1 = 0;
    int i5 = 1;
    int i2 = 8;
    int i3 = 0;
    while (i3 < 361)
    {
      u[i3] = i1;
      int i4;
      if (i5 == i2)
      {
        i5 = i1 + 6;
        if (i5 == 360) {
          i1 = 7;
        } else if (i5 % 30 == 0) {
          i1 = 14;
        } else {
          i1 = 4;
        }
        i2 = 1;
        i4 = i1;
      }
      else
      {
        i5 += 1;
        i4 = i2;
        i2 = i5;
        i5 = i1;
      }
      i3 += 1;
      i1 = i5;
      i5 = i2;
      i2 = i4;
    }
  }
  
  private boolean a(int paramInt)
  {
    return (k) && (paramInt <= 12) && (paramInt != 0);
  }
  
  private int b(int paramInt)
  {
    int[] arrayOfInt = u;
    if (arrayOfInt == null) {
      return -1;
    }
    return arrayOfInt[paramInt];
  }
  
  private void b(int paramInt1, int paramInt2)
  {
    if (paramInt1 == 0)
    {
      c(0, paramInt2);
      r.a(paramInt2 % 12 * 30, a(paramInt2), false);
      r.invalidate();
      p.setSelection(paramInt2);
      p.invalidate();
    }
    else if (paramInt1 == 1)
    {
      c(1, paramInt2);
      s.a(paramInt2 * 6, false, false);
      s.invalidate();
      q.setSelection(paramInt2);
      p.invalidate();
      return;
    }
  }
  
  private void c(int paramInt1, int paramInt2)
  {
    if (paramInt1 == 0)
    {
      i = paramInt2;
      return;
    }
    if (paramInt1 == 1)
    {
      j = paramInt2;
      return;
    }
    if (paramInt1 == 2)
    {
      if (paramInt2 == 0)
      {
        i %= 12;
        return;
      }
      if (paramInt2 == 1) {
        i = (i % 12 + 12);
      }
    }
  }
  
  private static int d(int paramInt1, int paramInt2)
  {
    int i1 = paramInt1 / 30 * 30;
    int i2 = i1 + 30;
    if (paramInt2 == 1) {
      return i2;
    }
    if (paramInt2 == -1)
    {
      paramInt2 = i1;
      if (paramInt1 == i1) {
        paramInt2 = i1 - 30;
      }
      return paramInt2;
    }
    if (paramInt1 - i1 < i2 - paramInt1) {
      return i1;
    }
    return i2;
  }
  
  private int getCurrentlyShowingValue()
  {
    int i1 = getCurrentItemShowing();
    if (i1 == 0) {
      return i;
    }
    if (i1 == 1) {
      return j;
    }
    return -1;
  }
  
  public void a(int paramInt1, int paramInt2)
  {
    b(0, paramInt1);
    b(1, paramInt2);
  }
  
  public void a(int paramInt, boolean paramBoolean)
  {
    Object localObject;
    if ((paramInt != 0) && (paramInt != 1))
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("TimePicker does not support view at index ");
      ((StringBuilder)localObject).append(paramInt);
      Log.e("RadialPickerLayout", ((StringBuilder)localObject).toString());
      return;
    }
    int i1 = getCurrentItemShowing();
    m = paramInt;
    int i2 = 0;
    if ((paramBoolean) && (paramInt != i1))
    {
      localObject = new ObjectAnimator[4];
      if (paramInt == 1)
      {
        localObject[0] = p.getDisappearAnimator();
        localObject[1] = r.getDisappearAnimator();
        localObject[2] = q.getReappearAnimator();
        localObject[3] = s.getReappearAnimator();
      }
      else if (paramInt == 0)
      {
        localObject[0] = p.getReappearAnimator();
        localObject[1] = r.getReappearAnimator();
        localObject[2] = q.getDisappearAnimator();
        localObject[3] = s.getDisappearAnimator();
      }
      AnimatorSet localAnimatorSet = D;
      if ((localAnimatorSet != null) && (localAnimatorSet.isRunning())) {
        D.end();
      }
      D = new AnimatorSet();
      D.playTogether((Animator[])localObject);
      D.start();
      return;
    }
    if (paramInt == 0) {
      i1 = 255;
    } else {
      i1 = 0;
    }
    if (paramInt == 1) {
      i2 = 255;
    }
    p.setAlpha(i1);
    r.setAlpha(i1);
    q.setAlpha(i2);
    s.setAlpha(i2);
  }
  
  public void a(Context paramContext, com.mohamadamin.persianmaterialdatetimepicker.a paramA, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    if (h)
    {
      Log.e("RadialPickerLayout", "Time has already been initialized.");
      return;
    }
    f = paramA;
    k = paramBoolean;
    boolean bool;
    if ((!C.isTouchExplorationEnabled()) && (!k)) {
      bool = false;
    } else {
      bool = true;
    }
    l = bool;
    n.a(paramContext, l);
    n.invalidate();
    if (!l)
    {
      paramA = o;
      if (paramInt1 < 12) {
        i1 = 0;
      } else {
        i1 = 1;
      }
      paramA.a(paramContext, i1);
      o.invalidate();
    }
    Resources localResources = paramContext.getResources();
    Object localObject = new int[12];
    Object tmp137_135 = localObject;
    tmp137_135[0] = 12;
    Object tmp142_137 = tmp137_135;
    tmp142_137[1] = 1;
    Object tmp146_142 = tmp142_137;
    tmp146_142[2] = 2;
    Object tmp150_146 = tmp146_142;
    tmp150_146[3] = 3;
    Object tmp154_150 = tmp150_146;
    tmp154_150[4] = 4;
    Object tmp158_154 = tmp154_150;
    tmp158_154[5] = 5;
    Object tmp162_158 = tmp158_154;
    tmp162_158[6] = 6;
    Object tmp168_162 = tmp162_158;
    tmp168_162[7] = 7;
    Object tmp174_168 = tmp168_162;
    tmp174_168[8] = 8;
    Object tmp180_174 = tmp174_168;
    tmp180_174[9] = 9;
    Object tmp186_180 = tmp180_174;
    tmp186_180[10] = 10;
    Object tmp192_186 = tmp186_180;
    tmp192_186[11] = 11;
    tmp192_186;
    String[] arrayOfString3 = new String[12];
    String[] arrayOfString1 = new String[12];
    String[] arrayOfString2 = new String[12];
    int i1 = 0;
    while (i1 < 12)
    {
      paramA = new Object[1];
      if (paramBoolean)
      {
        paramA[0] = Integer.valueOf(new int[] { 0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }[i1]);
        paramA = String.format("%02d", paramA);
      }
      else
      {
        paramA[0] = Integer.valueOf(localObject[i1]);
        paramA = String.format("%d", paramA);
      }
      arrayOfString3[i1] = com.mohamadamin.persianmaterialdatetimepicker.j.a.b(paramA);
      arrayOfString1[i1] = com.mohamadamin.persianmaterialdatetimepicker.j.a.b(String.format("%d", new Object[] { Integer.valueOf(localObject[i1]) }));
      arrayOfString2[i1] = com.mohamadamin.persianmaterialdatetimepicker.j.a.b(String.format("%02d", new Object[] { Integer.valueOf(new int[] { 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55 }[i1]) }));
      i1 += 1;
    }
    localObject = p;
    if (paramBoolean) {
      paramA = arrayOfString1;
    } else {
      paramA = null;
    }
    ((d)localObject).a(localResources, arrayOfString3, paramA, l, true);
    paramA = p;
    if (paramBoolean) {
      i1 = paramInt1;
    } else {
      i1 = paramInt1 % 12;
    }
    paramA.setSelection(i1);
    p.invalidate();
    q.a(localResources, arrayOfString2, null, l, false);
    q.setSelection(paramInt2);
    q.invalidate();
    c(0, paramInt1);
    c(1, paramInt2);
    r.a(paramContext, l, paramBoolean, true, paramInt1 % 12 * 30, a(paramInt1));
    s.a(paramContext, l, false, false, paramInt2 * 6, false);
    h = true;
  }
  
  void a(Context paramContext, boolean paramBoolean)
  {
    n.b(paramContext, paramBoolean);
    o.a(paramContext, paramBoolean);
    p.a(paramContext, paramBoolean);
    q.a(paramContext, paramBoolean);
    r.a(paramContext, paramBoolean);
    s.a(paramContext, paramBoolean);
  }
  
  public boolean a(boolean paramBoolean)
  {
    boolean bool = y;
    int i1 = 0;
    if ((bool) && (!paramBoolean)) {
      return false;
    }
    v = paramBoolean;
    View localView = t;
    if (paramBoolean) {
      i1 = 4;
    }
    localView.setVisibility(i1);
    return true;
  }
  
  public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent)
  {
    if (paramAccessibilityEvent.getEventType() == 32)
    {
      paramAccessibilityEvent.getText().clear();
      Object localObject = Calendar.getInstance();
      ((Calendar)localObject).set(10, getHours());
      ((Calendar)localObject).set(12, getMinutes());
      long l1 = ((Calendar)localObject).getTimeInMillis();
      int i1 = 1;
      if (k) {
        i1 = 0x1 | 0x80;
      }
      localObject = com.mohamadamin.persianmaterialdatetimepicker.j.a.b(DateUtils.formatDateTime(getContext(), l1, i1));
      paramAccessibilityEvent.getText().add(localObject);
      return true;
    }
    return super.dispatchPopulateAccessibilityEvent(paramAccessibilityEvent);
  }
  
  public int getCurrentItemShowing()
  {
    int i1 = m;
    if ((i1 != 0) && (i1 != 1))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Current item showing was unfortunately set to ");
      localStringBuilder.append(m);
      Log.e("RadialPickerLayout", localStringBuilder.toString());
      return -1;
    }
    return m;
  }
  
  public int getHours()
  {
    return i;
  }
  
  public int getIsCurrentlyAmOrPm()
  {
    int i1 = i;
    if (i1 < 12) {
      return 0;
    }
    if (i1 < 24) {
      return 1;
    }
    return -1;
  }
  
  public int getMinutes()
  {
    return j;
  }
  
  public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo paramAccessibilityNodeInfo)
  {
    super.onInitializeAccessibilityNodeInfo(paramAccessibilityNodeInfo);
    if (Build.VERSION.SDK_INT >= 21)
    {
      paramAccessibilityNodeInfo.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_BACKWARD);
      paramAccessibilityNodeInfo.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_FORWARD);
      return;
    }
    paramAccessibilityNodeInfo.addAction(4096);
    paramAccessibilityNodeInfo.addAction(8192);
  }
  
  public boolean onTouch(final View paramView, MotionEvent paramMotionEvent)
  {
    float f1 = paramMotionEvent.getX();
    float f2 = paramMotionEvent.getY();
    paramView = new Boolean[1];
    paramView[0] = Boolean.valueOf(false);
    int i1 = paramMotionEvent.getAction();
    if (i1 != 0)
    {
      if (i1 != 1)
      {
        if (i1 != 2) {
          return false;
        }
        if (!v)
        {
          Log.e("RadialPickerLayout", "Input was disabled, but received ACTION_MOVE.");
          return true;
        }
        float f3 = Math.abs(f2 - B);
        float f4 = Math.abs(f1 - A);
        if (!x)
        {
          i1 = c;
          if ((f4 <= i1) && (f3 <= i1)) {
            return false;
          }
        }
        i1 = w;
        if ((i1 != 0) && (i1 != 1))
        {
          if (z == -1) {
            return false;
          }
          x = true;
          E.removeCallbacksAndMessages(null);
          i1 = a(f1, f2, true, paramView);
          if (i1 != -1)
          {
            i1 = a(i1, paramView[0].booleanValue(), false, true);
            if (i1 != e)
            {
              f.c();
              e = i1;
              g.a(getCurrentItemShowing(), i1, false);
            }
          }
          return true;
        }
        E.removeCallbacksAndMessages(null);
        if (o.a(f1, f2) != w)
        {
          o.setAmOrPmPressed(-1);
          o.invalidate();
          w = -1;
          return false;
        }
      }
      else
      {
        if (!v)
        {
          Log.d("RadialPickerLayout", "Input was disabled, but received ACTION_UP.");
          g.a(3, 1, false);
          return true;
        }
        E.removeCallbacksAndMessages(null);
        y = false;
        i1 = w;
        if ((i1 != 0) && (i1 != 1))
        {
          if (z != -1)
          {
            i1 = a(f1, f2, x, paramView);
            if (i1 != -1)
            {
              int i2 = a(i1, paramView[0].booleanValue(), x ^ true, false);
              i1 = i2;
              if (getCurrentItemShowing() == 0)
              {
                i1 = i2;
                if (!k)
                {
                  int i3 = getIsCurrentlyAmOrPm();
                  if ((i3 == 0) && (i2 == 12))
                  {
                    i1 = 0;
                  }
                  else
                  {
                    i1 = i2;
                    if (i3 == 1)
                    {
                      i1 = i2;
                      if (i2 != 12) {
                        i1 = i2 + 12;
                      }
                    }
                  }
                }
              }
              c(getCurrentItemShowing(), i1);
              g.a(getCurrentItemShowing(), i1, true);
            }
          }
          x = false;
          return true;
        }
        i1 = o.a(f1, f2);
        o.setAmOrPmPressed(-1);
        o.invalidate();
        if (i1 == w)
        {
          o.setAmOrPm(i1);
          if (getIsCurrentlyAmOrPm() != i1)
          {
            g.a(2, w, false);
            c(2, i1);
          }
        }
        w = -1;
      }
      return false;
    }
    if (!v) {
      return true;
    }
    A = f1;
    B = f2;
    e = -1;
    x = false;
    y = true;
    if (!l) {
      w = o.a(f1, f2);
    } else {
      w = -1;
    }
    i1 = w;
    if ((i1 != 0) && (i1 != 1))
    {
      z = a(f1, f2, C.isTouchExplorationEnabled(), paramView);
      if (z != -1)
      {
        f.c();
        E.postDelayed(new b(paramView), d);
        return true;
      }
    }
    else
    {
      f.c();
      z = -1;
      E.postDelayed(new a(), d);
    }
    return true;
  }
  
  @SuppressLint({"NewApi"})
  public boolean performAccessibilityAction(int paramInt, Bundle paramBundle)
  {
    if (super.performAccessibilityAction(paramInt, paramBundle)) {
      return true;
    }
    int i1 = 0;
    if (paramInt == 4096) {
      i1 = 1;
    } else if (paramInt == 8192) {
      i1 = -1;
    }
    if (i1 != 0)
    {
      int i3 = getCurrentlyShowingValue();
      paramInt = 0;
      int i4 = getCurrentItemShowing();
      int i2;
      if (i4 == 0)
      {
        paramInt = 30;
        i2 = i3 % 12;
      }
      else
      {
        i2 = i3;
        if (i4 == 1)
        {
          paramInt = 6;
          i2 = i3;
        }
      }
      i3 = d(i2 * paramInt, i1) / paramInt;
      i1 = 0;
      if (i4 == 0)
      {
        if (k)
        {
          paramInt = 23;
        }
        else
        {
          paramInt = 12;
          i1 = 1;
        }
      }
      else {
        paramInt = 55;
      }
      if (i3 > paramInt)
      {
        i2 = i1;
      }
      else
      {
        i2 = i3;
        if (i3 < i1) {
          i2 = paramInt;
        }
      }
      b(i4, i2);
      g.a(i4, i2, false);
      return true;
    }
    return false;
  }
  
  public void setAmOrPm(int paramInt)
  {
    o.setAmOrPm(paramInt);
    o.invalidate();
    c(2, paramInt);
  }
  
  public void setOnValueSelectedListener(c paramC)
  {
    g = paramC;
  }
  
  class a
    implements Runnable
  {
    a() {}
    
    public void run()
    {
      RadialPickerLayout.b(RadialPickerLayout.this).setAmOrPmPressed(RadialPickerLayout.a(RadialPickerLayout.this));
      RadialPickerLayout.b(RadialPickerLayout.this).invalidate();
    }
  }
  
  class b
    implements Runnable
  {
    b(Boolean[] paramArrayOfBoolean) {}
    
    public void run()
    {
      RadialPickerLayout.a(RadialPickerLayout.this, true);
      RadialPickerLayout localRadialPickerLayout = RadialPickerLayout.this;
      int i = RadialPickerLayout.a(localRadialPickerLayout, RadialPickerLayout.c(localRadialPickerLayout), paramView[0].booleanValue(), false, true);
      RadialPickerLayout.a(RadialPickerLayout.this, i);
      RadialPickerLayout.d(RadialPickerLayout.this).a(getCurrentItemShowing(), i, false);
    }
  }
  
  public static abstract interface c
  {
    public abstract void a(int paramInt1, int paramInt2, boolean paramBoolean);
  }
}
