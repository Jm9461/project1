package com.mohamadamin.persianmaterialdatetimepicker.time;

import android.animation.Keyframe;
import android.animation.ObjectAnimator;
import android.animation.PropertyValuesHolder;
import android.animation.ValueAnimator;
import android.animation.ValueAnimator.AnimatorUpdateListener;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.util.Log;
import android.view.View;
import com.mohamadamin.persianmaterialdatetimepicker.b;
import com.mohamadamin.persianmaterialdatetimepicker.g;

public class c
  extends View
{
  private final Paint c = new Paint();
  private boolean d = false;
  private boolean e;
  private float f;
  private float g;
  private float h;
  private float i;
  private float j;
  private float k;
  private float l;
  private boolean m;
  private boolean n;
  private int o;
  private int p;
  private int q;
  private int r;
  private float s;
  private float t;
  private int u;
  private int v;
  private b w;
  private int x;
  private double y;
  private boolean z;
  
  public c(Context paramContext)
  {
    super(paramContext);
  }
  
  public int a(float paramFloat1, float paramFloat2, boolean paramBoolean, Boolean[] paramArrayOfBoolean)
  {
    if (!e) {
      return -1;
    }
    int i1 = q;
    float f1 = i1;
    float f2 = i1;
    i1 = p;
    double d1 = Math.sqrt((paramFloat2 - f1) * (paramFloat2 - f2) + (paramFloat1 - i1) * (paramFloat1 - i1));
    boolean bool = n;
    int i2 = 1;
    if (bool)
    {
      if (paramBoolean)
      {
        d2 = (int)(r * h);
        Double.isNaN(d2);
        i1 = (int)Math.abs(d1 - d2);
        d2 = (int)(r * i);
        Double.isNaN(d2);
        if (i1 <= (int)Math.abs(d1 - d2)) {
          paramBoolean = true;
        } else {
          paramBoolean = false;
        }
        paramArrayOfBoolean[0] = Boolean.valueOf(paramBoolean);
      }
      else
      {
        int i5 = r;
        f2 = i5;
        f1 = h;
        i1 = (int)(f2 * f1);
        i3 = v;
        f2 = i5;
        float f3 = i;
        i4 = (int)(f2 * f3);
        i5 = (int)(i5 * ((f3 + f1) / 2.0F));
        if ((d1 >= i1 - i3) && (d1 <= i5))
        {
          paramArrayOfBoolean[0] = Boolean.valueOf(true);
        }
        else
        {
          if ((d1 > i4 + i3) || (d1 < i5)) {
            break label287;
          }
          paramArrayOfBoolean[0] = Boolean.valueOf(false);
        }
        break label333;
        label287:
        return -1;
      }
    }
    else if (!paramBoolean)
    {
      d2 = u;
      Double.isNaN(d2);
      if ((int)Math.abs(d1 - d2) > (int)(r * (1.0F - j))) {
        return -1;
      }
    }
    label333:
    double d2 = Math.abs(paramFloat2 - q);
    Double.isNaN(d2);
    int i4 = (int)(180.0D * Math.asin(d2 / d1) / 3.141592653589793D);
    if (paramFloat1 > p) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    if (paramFloat2 >= q) {
      i2 = 0;
    }
    if ((i1 != 0) && (i2 != 0)) {
      return 90 - i4;
    }
    if ((i1 != 0) && (i2 == 0)) {
      return i4 + 90;
    }
    if ((i1 == 0) && (i2 == 0)) {
      return 270 - i4;
    }
    int i3 = i4;
    if (i1 == 0)
    {
      i3 = i4;
      if (i2 != 0) {
        i3 = i4 + 270;
      }
    }
    return i3;
  }
  
  public void a(int paramInt, boolean paramBoolean1, boolean paramBoolean2)
  {
    x = paramInt;
    double d1 = paramInt;
    Double.isNaN(d1);
    y = (d1 * 3.141592653589793D / 180.0D);
    z = paramBoolean2;
    if (n)
    {
      if (paramBoolean1)
      {
        j = h;
        return;
      }
      j = i;
    }
  }
  
  void a(Context paramContext, boolean paramBoolean)
  {
    paramContext = paramContext.getResources();
    int i1;
    if (paramBoolean)
    {
      i1 = paramContext.getColor(b.mdtp_red);
      o = 255;
    }
    else
    {
      i1 = paramContext.getColor(b.mdtp_accent_color);
      o = 255;
    }
    c.setColor(i1);
  }
  
  public void a(Context paramContext, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, int paramInt, boolean paramBoolean4)
  {
    if (d)
    {
      Log.e("RadialSelectorView", "This RadialSelectorView may only be initialized once.");
      return;
    }
    paramContext = paramContext.getResources();
    int i1 = paramContext.getColor(b.mdtp_accent_color);
    c.setColor(i1);
    c.setAntiAlias(true);
    o = 255;
    m = paramBoolean1;
    if (paramBoolean1)
    {
      f = Float.parseFloat(paramContext.getString(g.mdtp_circle_radius_multiplier_24HourMode));
    }
    else
    {
      f = Float.parseFloat(paramContext.getString(g.mdtp_circle_radius_multiplier));
      g = Float.parseFloat(paramContext.getString(g.mdtp_ampm_circle_radius_multiplier));
    }
    n = paramBoolean2;
    if (paramBoolean2)
    {
      h = Float.parseFloat(paramContext.getString(g.mdtp_numbers_radius_multiplier_inner));
      i = Float.parseFloat(paramContext.getString(g.mdtp_numbers_radius_multiplier_outer));
    }
    else
    {
      j = Float.parseFloat(paramContext.getString(g.mdtp_numbers_radius_multiplier_normal));
    }
    k = Float.parseFloat(paramContext.getString(g.mdtp_selection_radius_multiplier));
    l = 1.0F;
    int i2 = -1;
    if (paramBoolean3) {
      i1 = -1;
    } else {
      i1 = 1;
    }
    s = (i1 * 0.05F + 1.0F);
    i1 = i2;
    if (paramBoolean3) {
      i1 = 1;
    }
    t = (i1 * 0.3F + 1.0F);
    w = new b(null);
    a(paramInt, paramBoolean4, false);
    d = true;
  }
  
  public ObjectAnimator getDisappearAnimator()
  {
    if ((d) && (e))
    {
      ObjectAnimator localObjectAnimator = ObjectAnimator.ofPropertyValuesHolder(this, new PropertyValuesHolder[] { PropertyValuesHolder.ofKeyframe("animationRadiusMultiplier", new Keyframe[] { Keyframe.ofFloat(0.0F, 1.0F), Keyframe.ofFloat(0.2F, s), Keyframe.ofFloat(1.0F, t) }), PropertyValuesHolder.ofKeyframe("alpha", new Keyframe[] { Keyframe.ofFloat(0.0F, 1.0F), Keyframe.ofFloat(1.0F, 0.0F) }) }).setDuration('?');
      localObjectAnimator.addUpdateListener(w);
      return localObjectAnimator;
    }
    Log.e("RadialSelectorView", "RadialSelectorView was not ready for animation.");
    return null;
  }
  
  public ObjectAnimator getReappearAnimator()
  {
    if ((d) && (e))
    {
      int i1 = (int)('?' * (1.0F + 0.25F));
      float f1 = '?' * 0.25F / i1;
      ObjectAnimator localObjectAnimator = ObjectAnimator.ofPropertyValuesHolder(this, new PropertyValuesHolder[] { PropertyValuesHolder.ofKeyframe("animationRadiusMultiplier", new Keyframe[] { Keyframe.ofFloat(0.0F, t), Keyframe.ofFloat(f1, t), Keyframe.ofFloat(1.0F - (1.0F - f1) * 0.2F, s), Keyframe.ofFloat(1.0F, 1.0F) }), PropertyValuesHolder.ofKeyframe("alpha", new Keyframe[] { Keyframe.ofFloat(0.0F, 0.0F), Keyframe.ofFloat(f1, 0.0F), Keyframe.ofFloat(1.0F, 1.0F) }) }).setDuration(i1);
      localObjectAnimator.addUpdateListener(w);
      return localObjectAnimator;
    }
    Log.e("RadialSelectorView", "RadialSelectorView was not ready for animation.");
    return null;
  }
  
  public boolean hasOverlappingRendering()
  {
    return false;
  }
  
  public void onDraw(Canvas paramCanvas)
  {
    if (getWidth() != 0)
    {
      if (!d) {
        return;
      }
      boolean bool2 = e;
      boolean bool1 = true;
      if (!bool2)
      {
        p = (getWidth() / 2);
        q = (getHeight() / 2);
        r = ((int)(Math.min(p, q) * f));
        if (!m)
        {
          i2 = (int)(r * g);
          d1 = q;
          d2 = i2;
          Double.isNaN(d2);
          Double.isNaN(d1);
          q = ((int)(d1 - d2 * 0.75D));
        }
        v = ((int)(r * k));
        e = true;
      }
      u = ((int)(r * j * l));
      int i2 = p;
      double d1 = u;
      double d2 = Math.sin(y);
      Double.isNaN(d1);
      i2 += (int)(d1 * d2);
      int i3 = q;
      d1 = u;
      d2 = Math.cos(y);
      Double.isNaN(d1);
      i3 -= (int)(d1 * d2);
      c.setAlpha(o);
      paramCanvas.drawCircle(i2, i3, v, c);
      bool2 = z;
      if (x % 30 == 0) {
        bool1 = false;
      }
      int i1;
      if ((bool1 | bool2))
      {
        c.setAlpha(255);
        paramCanvas.drawCircle(i2, i3, v * 2 / 7, c);
        bool1 = i2;
        i2 = i3;
      }
      else
      {
        i2 = u - v;
        i1 = p;
        d1 = i2;
        d2 = Math.sin(y);
        Double.isNaN(d1);
        i1 += (int)(d1 * d2);
        i3 = q;
        d1 = i2;
        d2 = Math.cos(y);
        Double.isNaN(d1);
        i2 = i3 - (int)(d1 * d2);
      }
      c.setAlpha(255);
      c.setStrokeWidth(1.0F);
      paramCanvas.drawLine(p, q, i1, i2, c);
      return;
    }
  }
  
  public void setAnimationRadiusMultiplier(float paramFloat)
  {
    l = paramFloat;
  }
  
  private class b
    implements ValueAnimator.AnimatorUpdateListener
  {
    private b() {}
    
    public void onAnimationUpdate(ValueAnimator paramValueAnimator)
    {
      invalidate();
    }
  }
}
