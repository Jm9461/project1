package com.shawnlin.numberpicker;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.graphics.Paint.FontMetrics;
import android.graphics.Typeface;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.SparseArray;
import android.util.TypedValue;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View.MeasureSpec;
import android.view.View.OnClickListener;
import android.view.ViewConfiguration;
import android.view.ViewParent;
import android.view.accessibility.AccessibilityEvent;
import android.view.animation.DecelerateInterpolator;
import android.widget.EditText;
import android.widget.LinearLayout;
import java.text.DecimalFormatSymbols;
import java.util.Formatter;
import java.util.Locale;

public class NumberPicker
  extends LinearLayout
{
  private static final g s0 = new g();
  private final SparseArray<String> A = new SparseArray();
  private int B = 3;
  private int C = 3;
  private int D;
  private int[] E;
  private final Paint F;
  private int G;
  private int H;
  private int I;
  private final e J;
  private final e K;
  private int L;
  private int M;
  private f N;
  private b O;
  private float P;
  private float Q;
  private float R;
  private float S;
  private VelocityTracker T;
  private int U;
  private int V;
  private int W;
  private boolean a0;
  private Drawable b0;
  private final EditText c;
  private int c0;
  private float d;
  private int d0;
  private float e;
  private int e0;
  private int f;
  private int f0;
  private int g;
  private int g0;
  private int h;
  private int h0;
  private int i;
  private int i0;
  private final boolean j;
  private int j0;
  private int k = -16777216;
  private int k0;
  private int l = -16777216;
  private float l0;
  private float m = 25.0F;
  private float m0;
  private float n = 25.0F;
  private int n0;
  private Typeface o;
  private int o0;
  private int p;
  private boolean p0;
  private int q;
  private boolean q0;
  private String[] r;
  private Context r0;
  private int s = 1;
  private int t = 100;
  private int u;
  private View.OnClickListener v;
  private e w;
  private d x;
  private c y;
  private long z = 300L;
  
  public NumberPicker(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public NumberPicker(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public NumberPicker(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet);
    int i1 = B;
    D = (i1 / 2);
    E = new int[i1];
    H = Integer.MIN_VALUE;
    c0 = -16777216;
    f0 = 0;
    k0 = -1;
    p0 = true;
    q0 = true;
    r0 = paramContext;
    paramAttributeSet = paramContext.obtainStyledAttributes(paramAttributeSet, d.NumberPicker, paramInt, 0);
    b0 = android.support.v4.content.a.c(paramContext, a.np_numberpicker_selection_divider);
    c0 = paramAttributeSet.getColor(d.NumberPicker_np_dividerColor, c0);
    paramInt = (int)TypedValue.applyDimension(1, 48.0F, getResources().getDisplayMetrics());
    d0 = paramAttributeSet.getDimensionPixelSize(d.NumberPicker_np_dividerDistance, paramInt);
    paramInt = (int)TypedValue.applyDimension(1, 2.0F, getResources().getDisplayMetrics());
    e0 = paramAttributeSet.getDimensionPixelSize(d.NumberPicker_np_dividerThickness, paramInt);
    o0 = paramAttributeSet.getInt(d.NumberPicker_np_order, 0);
    n0 = paramAttributeSet.getInt(d.NumberPicker_np_orientation, 1);
    l0 = paramAttributeSet.getDimensionPixelSize(d.NumberPicker_np_width, -1);
    m0 = paramAttributeSet.getDimensionPixelSize(d.NumberPicker_np_height, -1);
    j();
    j = true;
    u = paramAttributeSet.getInt(d.NumberPicker_np_value, u);
    t = paramAttributeSet.getInt(d.NumberPicker_np_max, t);
    s = paramAttributeSet.getInt(d.NumberPicker_np_min, s);
    k = paramAttributeSet.getColor(d.NumberPicker_np_selectedTextColor, k);
    n = paramAttributeSet.getDimension(d.NumberPicker_np_selectedTextSize, d(n));
    l = paramAttributeSet.getColor(d.NumberPicker_np_textColor, l);
    m = paramAttributeSet.getDimension(d.NumberPicker_np_textSize, d(m));
    o = Typeface.create(paramAttributeSet.getString(d.NumberPicker_np_typeface), 0);
    y = a(paramAttributeSet.getString(d.NumberPicker_np_formatter));
    p0 = paramAttributeSet.getBoolean(d.NumberPicker_np_fadingEdgeEnabled, p0);
    q0 = paramAttributeSet.getBoolean(d.NumberPicker_np_scrollerEnabled, q0);
    B = paramAttributeSet.getInt(d.NumberPicker_np_wheelItemCount, B);
    setWillNotDraw(false);
    ((LayoutInflater)paramContext.getSystemService("layout_inflater")).inflate(c.number_picker_with_selector_wheel, this, true);
    c = ((EditText)findViewById(b.np__numberpicker_input));
    c.setEnabled(false);
    c.setFocusable(false);
    c.setImeOptions(1);
    Object localObject = new Paint();
    ((Paint)localObject).setAntiAlias(true);
    ((Paint)localObject).setTextAlign(Paint.Align.CENTER);
    F = ((Paint)localObject);
    setSelectedTextColor(k);
    setTextColor(l);
    setTextSize(m);
    setSelectedTextSize(n);
    setTypeface(o);
    setFormatter(y);
    l();
    setValue(u);
    setMaxValue(t);
    setMinValue(s);
    setDividerColor(c0);
    setWheelItemCount(B);
    a0 = paramAttributeSet.getBoolean(d.NumberPicker_np_wrapSelectorWheel, a0);
    setWrapSelectorWheel(a0);
    float f1 = l0;
    if ((f1 != -1.0F) && (m0 != -1.0F))
    {
      setScaleX(f1 / h);
      setScaleY(m0 / g);
    }
    else
    {
      f1 = l0;
      if (f1 != -1.0F)
      {
        setScaleX(f1 / h);
        setScaleY(l0 / h);
      }
      else
      {
        f1 = m0;
        if (f1 != -1.0F)
        {
          setScaleX(f1 / g);
          setScaleY(m0 / g);
        }
      }
    }
    localObject = ViewConfiguration.get(paramContext);
    U = ((ViewConfiguration)localObject).getScaledTouchSlop();
    V = ((ViewConfiguration)localObject).getScaledMinimumFlingVelocity();
    W = (((ViewConfiguration)localObject).getScaledMaximumFlingVelocity() / 8);
    J = new e(paramContext, null, true);
    K = new e(paramContext, new DecelerateInterpolator(2.5F));
    if ((Build.VERSION.SDK_INT >= 16) && (getImportantForAccessibility() == 0)) {
      setImportantForAccessibility(1);
    }
    paramAttributeSet.recycle();
  }
  
  private float a(float paramFloat)
  {
    return getResourcesgetDisplayMetricsdensity * paramFloat;
  }
  
  private float a(Paint.FontMetrics paramFontMetrics)
  {
    if (paramFontMetrics == null) {
      return 0.0F;
    }
    return Math.abs(top + bottom) / 2.0F;
  }
  
  private int a(int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramInt1 != -1) {
      return resolveSizeAndState(Math.max(paramInt1, paramInt2), paramInt3, 0);
    }
    return paramInt2;
  }
  
  private c a(final String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return null;
    }
    return new a(paramString);
  }
  
  private void a(int paramInt)
  {
    SparseArray localSparseArray = A;
    if ((String)localSparseArray.get(paramInt) != null) {
      return;
    }
    int i1 = s;
    Object localObject;
    if ((paramInt >= i1) && (paramInt <= t))
    {
      localObject = r;
      if (localObject != null) {
        localObject = localObject[(paramInt - i1)];
      } else {
        localObject = c(paramInt);
      }
    }
    else
    {
      localObject = "";
    }
    localSparseArray.put(paramInt, localObject);
  }
  
  private void a(int paramInt, boolean paramBoolean)
  {
    if (u == paramInt) {
      return;
    }
    if (a0) {
      paramInt = e(paramInt);
    } else {
      paramInt = Math.min(Math.max(paramInt, s), t);
    }
    int i1 = u;
    u = paramInt;
    l();
    if (paramBoolean) {
      c(i1, paramInt);
    }
    g();
    invalidate();
  }
  
  private void a(boolean paramBoolean)
  {
    c.setVisibility(4);
    if (!a(J)) {
      a(K);
    }
    if (b())
    {
      L = 0;
      if (paramBoolean) {
        J.a(0, 0, -G, 0, 300);
      } else {
        J.a(0, 0, G, 0, 300);
      }
    }
    else
    {
      M = 0;
      if (paramBoolean) {
        J.a(0, 0, 0, -G, 300);
      } else {
        J.a(0, 0, 0, G, 300);
      }
    }
    invalidate();
  }
  
  private void a(boolean paramBoolean, long paramLong)
  {
    b localB = O;
    if (localB == null) {
      O = new b();
    } else {
      removeCallbacks(localB);
    }
    b.a(O, paramBoolean);
    postDelayed(O, paramLong);
  }
  
  private void a(int[] paramArrayOfInt)
  {
    int i1 = paramArrayOfInt.length - 1;
    while (i1 > 0)
    {
      paramArrayOfInt[i1] = paramArrayOfInt[(i1 - 1)];
      i1 -= 1;
    }
    int i2 = paramArrayOfInt[1] - 1;
    i1 = i2;
    if (a0)
    {
      i1 = i2;
      if (i2 < s) {
        i1 = t;
      }
    }
    paramArrayOfInt[0] = i1;
    a(i1);
  }
  
  private boolean a(e paramE)
  {
    paramE.a(true);
    int i4;
    int i5;
    if (b())
    {
      i3 = paramE.e() - paramE.c();
      i1 = I;
      i2 = G;
      i2 = H - (i1 + i3) % i2;
      if (i2 != 0)
      {
        i4 = Math.abs(i2);
        i5 = G;
        i1 = i2;
        if (i4 > i5 / 2) {
          if (i2 > 0) {
            i1 = i2 - i5;
          } else {
            i1 = i2 + i5;
          }
        }
        scrollBy(i3 + i1, 0);
        return true;
      }
      return false;
    }
    int i3 = paramE.f() - paramE.d();
    int i1 = I;
    int i2 = G;
    i2 = H - (i1 + i3) % i2;
    if (i2 != 0)
    {
      i4 = Math.abs(i2);
      i5 = G;
      i1 = i2;
      if (i4 > i5 / 2) {
        if (i2 > 0) {
          i1 = i2 - i5;
        } else {
          i1 = i2 + i5;
        }
      }
      scrollBy(0, i3 + i1);
      return true;
    }
    return false;
  }
  
  private float b(float paramFloat)
  {
    return paramFloat / getResourcesgetDisplayMetricsdensity;
  }
  
  private int b(int paramInt1, int paramInt2)
  {
    if (paramInt2 == -1) {
      return paramInt1;
    }
    int i1 = View.MeasureSpec.getSize(paramInt1);
    int i2 = View.MeasureSpec.getMode(paramInt1);
    if (i2 != Integer.MIN_VALUE)
    {
      if (i2 != 0)
      {
        if (i2 == 1073741824) {
          return paramInt1;
        }
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Unknown measure mode: ");
        localStringBuilder.append(i2);
        throw new IllegalArgumentException(localStringBuilder.toString());
      }
      return View.MeasureSpec.makeMeasureSpec(paramInt2, 1073741824);
    }
    return View.MeasureSpec.makeMeasureSpec(Math.min(i1, paramInt2), 1073741824);
  }
  
  private void b(int paramInt)
  {
    if (b())
    {
      L = 0;
      if (paramInt > 0) {
        J.a(0, 0, paramInt, 0, 0, Integer.MAX_VALUE, 0, 0);
      } else {
        J.a(Integer.MAX_VALUE, 0, paramInt, 0, 0, Integer.MAX_VALUE, 0, 0);
      }
    }
    else
    {
      M = 0;
      if (paramInt > 0) {
        J.a(0, 0, 0, paramInt, 0, 0, 0, Integer.MAX_VALUE);
      } else {
        J.a(0, Integer.MAX_VALUE, 0, paramInt, 0, 0, 0, Integer.MAX_VALUE);
      }
    }
    invalidate();
  }
  
  private void b(e paramE)
  {
    if (paramE == J)
    {
      if (!d()) {
        l();
      }
      f(0);
      return;
    }
    if (f0 != 1) {
      l();
    }
  }
  
  private void b(int[] paramArrayOfInt)
  {
    int i1 = 0;
    while (i1 < paramArrayOfInt.length - 1)
    {
      paramArrayOfInt[i1] = paramArrayOfInt[(i1 + 1)];
      i1 += 1;
    }
    int i2 = paramArrayOfInt[(paramArrayOfInt.length - 2)] + 1;
    i1 = i2;
    if (a0)
    {
      i1 = i2;
      if (i2 > t) {
        i1 = s;
      }
    }
    paramArrayOfInt[(paramArrayOfInt.length - 1)] = i1;
    a(i1);
  }
  
  private float c(float paramFloat)
  {
    return paramFloat / getResourcesgetDisplayMetricsscaledDensity;
  }
  
  private String c(int paramInt)
  {
    c localC = y;
    if (localC != null) {
      return localC.a(paramInt);
    }
    return d(paramInt);
  }
  
  private void c(int paramInt1, int paramInt2)
  {
    e localE = w;
    if (localE != null) {
      localE.a(this, paramInt1, u);
    }
  }
  
  private float d(float paramFloat)
  {
    return TypedValue.applyDimension(2, paramFloat, getResources().getDisplayMetrics());
  }
  
  private String d(int paramInt)
  {
    return String.format(Locale.getDefault(), "%d", new Object[] { Integer.valueOf(paramInt) });
  }
  
  private boolean d()
  {
    int i2 = H - I;
    if (i2 != 0)
    {
      int i4 = Math.abs(i2);
      int i3 = G;
      int i1 = i2;
      if (i4 > i3 / 2)
      {
        i1 = i3;
        if (i2 > 0) {
          i1 = -i3;
        }
        i1 = i2 + i1;
      }
      if (b())
      {
        L = 0;
        K.a(0, 0, i1, 0, 800);
      }
      else
      {
        M = 0;
        K.a(0, 0, 0, i1, 800);
      }
      invalidate();
      return true;
    }
    return false;
  }
  
  private int e(int paramInt)
  {
    int i1 = t;
    if (paramInt > i1)
    {
      i2 = s;
      return i2 + (paramInt - i1) % (i1 - i2) - 1;
    }
    int i2 = s;
    if (paramInt < i2) {
      return i1 - (i2 - paramInt) % (i1 - i2) + 1;
    }
    return paramInt;
  }
  
  private void e()
  {
    if (b())
    {
      setHorizontalFadingEdgeEnabled(true);
      setFadingEdgeLength((getRight() - getLeft() - (int)m) / 2);
      return;
    }
    setVerticalFadingEdgeEnabled(true);
    setFadingEdgeLength((getBottom() - getTop() - (int)m) / 2);
  }
  
  private void f()
  {
    g();
    int[] arrayOfInt = getSelectorIndices();
    int i1 = (arrayOfInt.length - 1) * (int)m + (int)n;
    float f1 = arrayOfInt.length;
    if (b())
    {
      p = ((int)((getRight() - getLeft() - i1) / f1));
      G = ((int)getMaxTextSize() + p);
      H = ((int)d - G * D);
    }
    else
    {
      q = ((int)((getBottom() - getTop() - i1) / f1));
      G = ((int)getMaxTextSize() + q);
      H = ((int)e - G * D);
    }
    I = H;
    l();
  }
  
  private void f(int paramInt)
  {
    if (f0 == paramInt) {
      return;
    }
    f0 = paramInt;
    d localD = x;
    if (localD != null) {
      localD.a(this, paramInt);
    }
  }
  
  private void g()
  {
    A.clear();
    int[] arrayOfInt = getSelectorIndices();
    int i4 = getValue();
    int i1 = 0;
    while (i1 < E.length)
    {
      int i3 = i1 - D + i4;
      int i2 = i3;
      if (a0) {
        i2 = e(i3);
      }
      arrayOfInt[i1] = i2;
      a(arrayOfInt[i1]);
      i1 += 1;
    }
  }
  
  private float getMaxTextSize()
  {
    return Math.max(m, n);
  }
  
  private int[] getSelectorIndices()
  {
    return E;
  }
  
  public static final c getTwoDigitFormatter()
  {
    return s0;
  }
  
  private void h()
  {
    Object localObject = O;
    if (localObject != null) {
      removeCallbacks((Runnable)localObject);
    }
    localObject = N;
    if (localObject != null) {
      removeCallbacks((Runnable)localObject);
    }
  }
  
  private void i()
  {
    b localB = O;
    if (localB != null) {
      removeCallbacks(localB);
    }
  }
  
  private void j()
  {
    if (b())
    {
      f = -1;
      g = ((int)a(64.0F));
      h = ((int)a(180.0F));
      i = -1;
      return;
    }
    f = -1;
    g = ((int)a(180.0F));
    h = ((int)a(64.0F));
    i = -1;
  }
  
  private void k()
  {
    if (!j) {
      return;
    }
    F.setTextSize(getMaxTextSize());
    int i1 = 0;
    String[] arrayOfString = r;
    float f1;
    int i2;
    int i3;
    if (arrayOfString == null)
    {
      f1 = 0.0F;
      i1 = 0;
      while (i1 <= 9)
      {
        float f3 = F.measureText(d(i1));
        float f2 = f1;
        if (f3 > f1) {
          f2 = f3;
        }
        i1 += 1;
        f1 = f2;
      }
      i2 = 0;
      i1 = t;
      while (i1 > 0)
      {
        i2 += 1;
        i1 /= 10;
      }
      i3 = (int)(i2 * f1);
    }
    else
    {
      int i4 = arrayOfString.length;
      i2 = 0;
      for (;;)
      {
        i3 = i1;
        if (i2 >= i4) {
          break;
        }
        f1 = F.measureText(r[i2]);
        i3 = i1;
        if (f1 > i1) {
          i3 = (int)f1;
        }
        i2 += 1;
        i1 = i3;
      }
    }
    i1 = i3 + (c.getPaddingLeft() + c.getPaddingRight());
    if (i != i1)
    {
      i2 = h;
      if (i1 > i2) {
        i = i1;
      } else {
        i = i2;
      }
      invalidate();
    }
  }
  
  private boolean l()
  {
    Object localObject = r;
    if (localObject == null) {
      localObject = c(u);
    } else {
      localObject = localObject[(u - s)];
    }
    if ((!TextUtils.isEmpty((CharSequence)localObject)) && (!((String)localObject).equals(c.getText().toString())))
    {
      c.setText((CharSequence)localObject);
      return true;
    }
    return false;
  }
  
  public static int resolveSizeAndState(int paramInt1, int paramInt2, int paramInt3)
  {
    int i1 = paramInt1;
    int i2 = View.MeasureSpec.getMode(paramInt2);
    paramInt2 = View.MeasureSpec.getSize(paramInt2);
    if (i2 != Integer.MIN_VALUE)
    {
      if (i2 != 0) {
        if (i2 != 1073741824) {
          paramInt1 = i1;
        } else {
          paramInt1 = paramInt2;
        }
      }
    }
    else if (paramInt2 < paramInt1) {
      paramInt1 = paramInt2 | 0x1000000;
    }
    return 0xFF000000 & paramInt3 | paramInt1;
  }
  
  public void a(int paramInt1, int paramInt2)
  {
    a(getResources().getString(paramInt1), paramInt2);
  }
  
  public void a(String paramString, int paramInt)
  {
    if (TextUtils.isEmpty(paramString)) {
      return;
    }
    setTypeface(Typeface.create(paramString, paramInt));
  }
  
  public boolean a()
  {
    return getOrder() == 0;
  }
  
  public boolean b()
  {
    return getOrientation() == 0;
  }
  
  public boolean c()
  {
    return q0;
  }
  
  public void computeScroll()
  {
    if (!c()) {
      return;
    }
    e localE2 = J;
    e localE1 = localE2;
    if (localE2.i())
    {
      localE2 = K;
      localE1 = localE2;
      if (localE2.i()) {
        return;
      }
    }
    localE1.a();
    int i1;
    if (b())
    {
      i1 = localE1.c();
      if (L == 0) {
        L = localE1.g();
      }
      scrollBy(i1 - L, 0);
      L = i1;
    }
    else
    {
      i1 = localE1.d();
      if (M == 0) {
        M = localE1.h();
      }
      scrollBy(0, i1 - M);
      M = i1;
    }
    if (localE1.i())
    {
      b(localE1);
      return;
    }
    postInvalidate();
  }
  
  public boolean dispatchKeyEvent(KeyEvent paramKeyEvent)
  {
    int i1 = paramKeyEvent.getKeyCode();
    if ((i1 != 19) && (i1 != 20))
    {
      if ((i1 == 23) || (i1 == 66)) {
        h();
      }
    }
    else
    {
      int i2 = paramKeyEvent.getAction();
      if (i2 != 0)
      {
        if ((i2 == 1) && (k0 == i1))
        {
          k0 = -1;
          return true;
        }
      }
      else if ((!a0) && (i1 != 20) ? getValue() > getMinValue() : getValue() < getMaxValue())
      {
        requestFocus();
        k0 = i1;
        h();
        if (J.i())
        {
          boolean bool;
          if (i1 == 20) {
            bool = true;
          } else {
            bool = false;
          }
          a(bool);
        }
        return true;
      }
    }
    return super.dispatchKeyEvent(paramKeyEvent);
  }
  
  public boolean dispatchTouchEvent(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getAction() & 0xFF;
    if ((i1 == 1) || (i1 == 3)) {
      h();
    }
    return super.dispatchTouchEvent(paramMotionEvent);
  }
  
  public boolean dispatchTrackballEvent(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getAction() & 0xFF;
    if ((i1 == 1) || (i1 == 3)) {
      h();
    }
    return super.dispatchTrackballEvent(paramMotionEvent);
  }
  
  protected float getBottomFadingEdgeStrength()
  {
    if ((!b()) && (p0)) {
      return 0.9F;
    }
    return 0.0F;
  }
  
  public String[] getDisplayedValues()
  {
    return r;
  }
  
  public int getDividerColor()
  {
    return c0;
  }
  
  public float getDividerDistance()
  {
    return b(d0);
  }
  
  public float getDividerThickness()
  {
    return b(e0);
  }
  
  public c getFormatter()
  {
    return y;
  }
  
  protected float getLeftFadingEdgeStrength()
  {
    if ((b()) && (p0)) {
      return 0.9F;
    }
    return 0.0F;
  }
  
  public int getMaxValue()
  {
    return t;
  }
  
  public int getMinValue()
  {
    return s;
  }
  
  public int getOrder()
  {
    return o0;
  }
  
  public int getOrientation()
  {
    return n0;
  }
  
  protected float getRightFadingEdgeStrength()
  {
    if ((b()) && (p0)) {
      return 0.9F;
    }
    return 0.0F;
  }
  
  public int getSelectedTextColor()
  {
    return k;
  }
  
  public float getSelectedTextSize()
  {
    return n;
  }
  
  public int getTextColor()
  {
    return l;
  }
  
  public float getTextSize()
  {
    return d(m);
  }
  
  protected float getTopFadingEdgeStrength()
  {
    if ((!b()) && (p0)) {
      return 0.9F;
    }
    return 0.0F;
  }
  
  public Typeface getTypeface()
  {
    return o;
  }
  
  public int getValue()
  {
    return u;
  }
  
  public int getWheelItemCount()
  {
    return B;
  }
  
  public boolean getWrapSelectorWheel()
  {
    return a0;
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    h();
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    paramCanvas.save();
    float f3;
    float f4;
    float f1;
    float f2;
    if (b())
    {
      f3 = I;
      f4 = c.getBaseline() + c.getTop();
      f1 = f3;
      f2 = f4;
      if (C < 3)
      {
        paramCanvas.clipRect(i0, 0, j0, getBottom());
        f1 = f3;
        f2 = f4;
      }
    }
    else
    {
      f3 = (getRight() - getLeft()) / 2;
      f4 = I;
      f1 = f3;
      f2 = f4;
      if (C < 3)
      {
        paramCanvas.clipRect(0, g0, getRight(), h0);
        f2 = f4;
        f1 = f3;
      }
    }
    int[] arrayOfInt = getSelectorIndices();
    int i1 = 0;
    int i2;
    while (i1 < arrayOfInt.length)
    {
      if (i1 == D)
      {
        F.setTextSize(n);
        F.setColor(k);
      }
      else
      {
        F.setTextSize(m);
        F.setColor(l);
      }
      if (a()) {
        i2 = i1;
      } else {
        i2 = arrayOfInt.length - i1 - 1;
      }
      i2 = arrayOfInt[i2];
      String str = (String)A.get(i2);
      if ((i1 != D) || (c.getVisibility() != 0)) {
        if (b()) {
          paramCanvas.drawText(str, f1, f2, F);
        } else {
          paramCanvas.drawText(str, f1, a(F.getFontMetrics()) + f2, F);
        }
      }
      if (b()) {
        f1 += G;
      } else {
        f2 += G;
      }
      i1 += 1;
    }
    paramCanvas.restore();
    if (b0 != null)
    {
      if (b())
      {
        i1 = i0;
        i2 = e0;
        b0.setBounds(i1, 0, i2 + i1, getBottom());
        b0.draw(paramCanvas);
        i1 = j0;
        i2 = e0;
        b0.setBounds(i1 - i2, 0, i1, getBottom());
        b0.draw(paramCanvas);
        return;
      }
      i1 = g0;
      i2 = e0;
      b0.setBounds(0, i1, getRight(), i2 + i1);
      b0.draw(paramCanvas);
      i1 = h0;
      i2 = e0;
      b0.setBounds(0, i1 - i2, getRight(), i1);
      b0.draw(paramCanvas);
    }
  }
  
  public void onInitializeAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent)
  {
    super.onInitializeAccessibilityEvent(paramAccessibilityEvent);
    paramAccessibilityEvent.setClassName(NumberPicker.class.getName());
    paramAccessibilityEvent.setScrollable(c());
    int i1 = s;
    int i3 = u;
    int i2 = G;
    i3 = (i3 + i1) * i2;
    i1 = (t - i1) * i2;
    if (b())
    {
      paramAccessibilityEvent.setScrollX(i3);
      paramAccessibilityEvent.setMaxScrollX(i1);
      return;
    }
    paramAccessibilityEvent.setScrollY(i3);
    paramAccessibilityEvent.setMaxScrollY(i1);
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    if (!isEnabled()) {
      return false;
    }
    if ((paramMotionEvent.getAction() & 0xFF) != 0) {
      return false;
    }
    h();
    c.setVisibility(4);
    if (b())
    {
      f1 = paramMotionEvent.getX();
      P = f1;
      R = f1;
      getParent().requestDisallowInterceptTouchEvent(true);
      if (!J.i())
      {
        J.a(true);
        K.a(true);
        f(0);
        return true;
      }
      if (!K.i())
      {
        J.a(true);
        K.a(true);
        return true;
      }
      f1 = P;
      if ((f1 >= i0) && (f1 <= j0))
      {
        paramMotionEvent = v;
        if (paramMotionEvent != null)
        {
          paramMotionEvent.onClick(this);
          return true;
        }
      }
      else
      {
        f1 = P;
        if (f1 < i0)
        {
          a(false, ViewConfiguration.getLongPressTimeout());
          return true;
        }
        if (f1 > j0) {
          a(true, ViewConfiguration.getLongPressTimeout());
        }
      }
      return true;
    }
    float f1 = paramMotionEvent.getY();
    Q = f1;
    S = f1;
    getParent().requestDisallowInterceptTouchEvent(true);
    if (!J.i())
    {
      J.a(true);
      K.a(true);
      f(0);
      return true;
    }
    if (!K.i())
    {
      J.a(true);
      K.a(true);
      return true;
    }
    f1 = Q;
    if ((f1 >= g0) && (f1 <= h0))
    {
      paramMotionEvent = v;
      if (paramMotionEvent != null)
      {
        paramMotionEvent.onClick(this);
        return true;
      }
    }
    else
    {
      f1 = Q;
      if (f1 < g0)
      {
        a(false, ViewConfiguration.getLongPressTimeout());
        return true;
      }
      if (f1 > h0) {
        a(true, ViewConfiguration.getLongPressTimeout());
      }
    }
    return true;
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramInt4 = getMeasuredWidth();
    paramInt3 = getMeasuredHeight();
    paramInt1 = c.getMeasuredWidth();
    paramInt2 = c.getMeasuredHeight();
    paramInt4 = (paramInt4 - paramInt1) / 2;
    paramInt3 = (paramInt3 - paramInt2) / 2;
    c.layout(paramInt4, paramInt3, paramInt4 + paramInt1, paramInt3 + paramInt2);
    d = (c.getX() + c.getMeasuredWidth() / 2);
    e = (c.getY() + c.getMeasuredHeight() / 2);
    if (paramBoolean)
    {
      f();
      e();
      if (b())
      {
        paramInt2 = getWidth();
        paramInt1 = d0;
        paramInt2 = (paramInt2 - paramInt1) / 2;
        paramInt3 = e0;
        i0 = (paramInt2 - paramInt3);
        j0 = (i0 + paramInt3 * 2 + paramInt1);
        return;
      }
      paramInt2 = getHeight();
      paramInt1 = d0;
      paramInt2 = (paramInt2 - paramInt1) / 2;
      paramInt3 = e0;
      g0 = (paramInt2 - paramInt3);
      h0 = (g0 + paramInt3 * 2 + paramInt1);
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    super.onMeasure(b(paramInt1, i), b(paramInt2, g));
    setMeasuredDimension(a(h, getMeasuredWidth(), paramInt1), a(f, getMeasuredHeight(), paramInt2));
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if (!isEnabled()) {
      return false;
    }
    if (!c()) {
      return false;
    }
    if (T == null) {
      T = VelocityTracker.obtain();
    }
    T.addMovement(paramMotionEvent);
    int i1 = paramMotionEvent.getAction() & 0xFF;
    if (i1 != 1)
    {
      if (i1 != 2) {
        return true;
      }
      if (b())
      {
        f1 = paramMotionEvent.getX();
        if (f0 != 1)
        {
          if ((int)Math.abs(f1 - P) > U)
          {
            h();
            f(1);
          }
        }
        else
        {
          scrollBy((int)(f1 - R), 0);
          invalidate();
        }
        R = f1;
        return true;
      }
      float f1 = paramMotionEvent.getY();
      if (f0 != 1)
      {
        if ((int)Math.abs(f1 - Q) > U)
        {
          h();
          f(1);
        }
      }
      else
      {
        scrollBy(0, (int)(f1 - S));
        invalidate();
      }
      S = f1;
      return true;
    }
    i();
    VelocityTracker localVelocityTracker = T;
    localVelocityTracker.computeCurrentVelocity(1000, W);
    if (b())
    {
      i1 = (int)localVelocityTracker.getXVelocity();
      if (Math.abs(i1) > V)
      {
        b(i1);
        f(2);
      }
      else
      {
        i1 = (int)paramMotionEvent.getX();
        if ((int)Math.abs(i1 - P) <= U)
        {
          i1 = i1 / G - D;
          if (i1 > 0) {
            a(true);
          } else if (i1 < 0) {
            a(false);
          } else {
            d();
          }
        }
        else
        {
          d();
        }
        f(0);
      }
    }
    else
    {
      i1 = (int)localVelocityTracker.getYVelocity();
      if (Math.abs(i1) > V)
      {
        b(i1);
        f(2);
      }
      else
      {
        i1 = (int)paramMotionEvent.getY();
        if ((int)Math.abs(i1 - Q) <= U)
        {
          i1 = i1 / G - D;
          if (i1 > 0) {
            a(true);
          } else if (i1 < 0) {
            a(false);
          } else {
            d();
          }
        }
        else
        {
          d();
        }
        f(0);
      }
    }
    T.recycle();
    T = null;
    return true;
  }
  
  public void scrollBy(int paramInt1, int paramInt2)
  {
    if (!c()) {
      return;
    }
    int[] arrayOfInt = getSelectorIndices();
    if (b())
    {
      if (a())
      {
        if ((!a0) && (paramInt1 > 0) && (arrayOfInt[D] <= s))
        {
          I = H;
          return;
        }
        if ((!a0) && (paramInt1 < 0) && (arrayOfInt[D] >= t)) {
          I = H;
        }
      }
      else
      {
        if ((!a0) && (paramInt1 > 0) && (arrayOfInt[D] >= t))
        {
          I = H;
          return;
        }
        if ((!a0) && (paramInt1 < 0) && (arrayOfInt[D] <= s))
        {
          I = H;
          return;
        }
      }
      I += paramInt1;
      paramInt1 = p;
    }
    else
    {
      if (a())
      {
        if ((!a0) && (paramInt2 > 0) && (arrayOfInt[D] <= s))
        {
          I = H;
          return;
        }
        if ((!a0) && (paramInt2 < 0) && (arrayOfInt[D] >= t)) {
          I = H;
        }
      }
      else
      {
        if ((!a0) && (paramInt2 > 0) && (arrayOfInt[D] >= t))
        {
          I = H;
          return;
        }
        if ((!a0) && (paramInt2 < 0) && (arrayOfInt[D] <= s))
        {
          I = H;
          return;
        }
      }
      I += paramInt2;
      paramInt1 = q;
    }
    for (;;)
    {
      paramInt2 = I;
      if (paramInt2 - H <= paramInt1) {
        break;
      }
      I = (paramInt2 - G);
      if (a()) {
        a(arrayOfInt);
      } else {
        b(arrayOfInt);
      }
      a(arrayOfInt[D], true);
      if ((!a0) && (arrayOfInt[D] < s)) {
        I = H;
      }
    }
    for (;;)
    {
      paramInt2 = I;
      if (paramInt2 - H >= -paramInt1) {
        break;
      }
      I = (paramInt2 + G);
      if (a()) {
        b(arrayOfInt);
      } else {
        a(arrayOfInt);
      }
      a(arrayOfInt[D], true);
      if ((!a0) && (arrayOfInt[D] > t)) {
        I = H;
      }
    }
  }
  
  public void setDisplayedValues(String[] paramArrayOfString)
  {
    if (r == paramArrayOfString) {
      return;
    }
    r = paramArrayOfString;
    if (r != null) {
      c.setRawInputType(524289);
    } else {
      c.setRawInputType(2);
    }
    l();
    g();
    k();
  }
  
  public void setDividerColor(int paramInt)
  {
    c0 = paramInt;
    b0 = new ColorDrawable(paramInt);
  }
  
  public void setDividerColorResource(int paramInt)
  {
    setDividerColor(android.support.v4.content.a.a(r0, paramInt));
  }
  
  public void setDividerDistance(int paramInt)
  {
    d0 = ((int)a(paramInt));
  }
  
  public void setDividerThickness(int paramInt)
  {
    e0 = ((int)a(paramInt));
  }
  
  public void setEnabled(boolean paramBoolean)
  {
    super.setEnabled(paramBoolean);
    c.setEnabled(paramBoolean);
  }
  
  public void setFadingEdgeEnabled(boolean paramBoolean)
  {
    p0 = paramBoolean;
  }
  
  public void setFormatter(int paramInt)
  {
    setFormatter(getResources().getString(paramInt));
  }
  
  public void setFormatter(c paramC)
  {
    if (paramC == y) {
      return;
    }
    y = paramC;
    g();
    l();
  }
  
  public void setFormatter(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return;
    }
    setFormatter(a(paramString));
  }
  
  public void setMaxValue(int paramInt)
  {
    if (paramInt >= 0)
    {
      t = paramInt;
      paramInt = t;
      if (paramInt < u) {
        u = paramInt;
      }
      boolean bool;
      if (t - s > E.length) {
        bool = true;
      } else {
        bool = false;
      }
      setWrapSelectorWheel(bool);
      g();
      l();
      k();
      invalidate();
      return;
    }
    throw new IllegalArgumentException("maxValue must be >= 0");
  }
  
  public void setMinValue(int paramInt)
  {
    s = paramInt;
    paramInt = s;
    if (paramInt > u) {
      u = paramInt;
    }
    boolean bool;
    if (t - s > E.length) {
      bool = true;
    } else {
      bool = false;
    }
    setWrapSelectorWheel(bool);
    g();
    l();
    k();
    invalidate();
  }
  
  public void setOnClickListener(View.OnClickListener paramOnClickListener)
  {
    v = paramOnClickListener;
  }
  
  public void setOnLongPressUpdateInterval(long paramLong)
  {
    z = paramLong;
  }
  
  public void setOnScrollListener(d paramD)
  {
    x = paramD;
  }
  
  public void setOnValueChangedListener(e paramE)
  {
    w = paramE;
  }
  
  public void setOrder(int paramInt)
  {
    o0 = paramInt;
  }
  
  public void setOrientation(int paramInt)
  {
    n0 = paramInt;
    j();
  }
  
  public void setScrollerEnabled(boolean paramBoolean)
  {
    q0 = paramBoolean;
  }
  
  public void setSelectedTextColor(int paramInt)
  {
    k = paramInt;
    c.setTextColor(k);
  }
  
  public void setSelectedTextColorResource(int paramInt)
  {
    setSelectedTextColor(android.support.v4.content.a.a(r0, paramInt));
  }
  
  public void setSelectedTextSize(float paramFloat)
  {
    n = paramFloat;
    c.setTextSize(c(n));
  }
  
  public void setSelectedTextSize(int paramInt)
  {
    setSelectedTextSize(getResources().getDimension(paramInt));
  }
  
  public void setTextColor(int paramInt)
  {
    l = paramInt;
    F.setColor(l);
  }
  
  public void setTextColorResource(int paramInt)
  {
    setTextColor(android.support.v4.content.a.a(r0, paramInt));
  }
  
  public void setTextSize(float paramFloat)
  {
    m = paramFloat;
    F.setTextSize(m);
  }
  
  public void setTextSize(int paramInt)
  {
    setTextSize(getResources().getDimension(paramInt));
  }
  
  public void setTypeface(int paramInt)
  {
    a(paramInt, 0);
  }
  
  public void setTypeface(Typeface paramTypeface)
  {
    o = paramTypeface;
    paramTypeface = o;
    if (paramTypeface != null)
    {
      c.setTypeface(paramTypeface);
      F.setTypeface(o);
      return;
    }
    c.setTypeface(Typeface.MONOSPACE);
    F.setTypeface(Typeface.MONOSPACE);
  }
  
  public void setTypeface(String paramString)
  {
    a(paramString, 0);
  }
  
  public void setValue(int paramInt)
  {
    a(paramInt, false);
  }
  
  public void setWheelItemCount(int paramInt)
  {
    if (paramInt >= 1)
    {
      C = paramInt;
      int i1 = 3;
      if (paramInt < 3) {
        paramInt = i1;
      }
      B = paramInt;
      paramInt = B;
      D = (paramInt / 2);
      E = new int[paramInt];
      return;
    }
    throw new IllegalArgumentException("Wheel item count must be >= 1");
  }
  
  public void setWrapSelectorWheel(boolean paramBoolean)
  {
    int i1;
    if (t - s >= E.length) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    if (((!paramBoolean) || (i1 != 0)) && (paramBoolean != a0)) {
      a0 = paramBoolean;
    }
  }
  
  class a
    implements NumberPicker.c
  {
    a(String paramString) {}
    
    public String a(int paramInt)
    {
      return String.format(Locale.getDefault(), paramString, new Object[] { Integer.valueOf(paramInt) });
    }
  }
  
  class b
    implements Runnable
  {
    private boolean c;
    
    b() {}
    
    private void a(boolean paramBoolean)
    {
      c = paramBoolean;
    }
    
    public void run()
    {
      NumberPicker.a(NumberPicker.this, c);
      NumberPicker localNumberPicker = NumberPicker.this;
      localNumberPicker.postDelayed(this, NumberPicker.a(localNumberPicker));
    }
  }
  
  public static abstract interface c
  {
    public abstract String a(int paramInt);
  }
  
  public static abstract interface d
  {
    public abstract void a(NumberPicker paramNumberPicker, int paramInt);
  }
  
  public static abstract interface e
  {
    public abstract void a(NumberPicker paramNumberPicker, int paramInt1, int paramInt2);
  }
  
  class f
    implements Runnable
  {}
  
  private static class g
    implements NumberPicker.c
  {
    final StringBuilder a = new StringBuilder();
    char b;
    Formatter c;
    final Object[] d = new Object[1];
    
    g()
    {
      c(Locale.getDefault());
    }
    
    private Formatter a(Locale paramLocale)
    {
      return new Formatter(a, paramLocale);
    }
    
    private static char b(Locale paramLocale)
    {
      return new DecimalFormatSymbols(paramLocale).getZeroDigit();
    }
    
    private void c(Locale paramLocale)
    {
      c = a(paramLocale);
      b = b(paramLocale);
    }
    
    public String a(int paramInt)
    {
      Object localObject = Locale.getDefault();
      if (b != b((Locale)localObject)) {
        c((Locale)localObject);
      }
      d[0] = Integer.valueOf(paramInt);
      localObject = a;
      ((StringBuilder)localObject).delete(0, ((StringBuilder)localObject).length());
      c.format("%02d", d);
      return c.toString();
    }
  }
}
