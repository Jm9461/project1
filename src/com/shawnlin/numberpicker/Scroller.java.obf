package com.shawnlin.numberpicker;

import android.content.Context;
import android.content.res.Resources;
import android.util.DisplayMetrics;
import android.view.ViewConfiguration;
import android.view.animation.AnimationUtils;
import android.view.animation.Interpolator;

public class e
{
  private static final float[] A;
  private static float B;
  private static float C = 1.0F / b(1.0F);
  private static float w = (float)(Math.log(0.75D) / Math.log(0.9D));
  private static float x = 800.0F;
  private static float y = 0.4F;
  private static float z = 1.0F - y;
  private int a;
  private int b;
  private int c;
  private int d;
  private int e;
  private int f;
  private int g;
  private int h;
  private int i;
  private int j;
  private int k;
  private long l;
  private int m;
  private float n;
  private float o;
  private float p;
  private boolean q = true;
  private Interpolator r;
  private boolean s;
  private float t;
  private float u;
  private final float v;
  
  static
  {
    A = new float[101];
    float f2 = 0.0F;
    int i1 = 0;
    if (i1 <= 100)
    {
      float f4 = i1 / 100.0F;
      float f1 = 1.0F;
      for (;;)
      {
        float f3 = (f1 - f2) / 2.0F + f2;
        float f5 = 3.0F * f3 * (1.0F - f3);
        float f6 = ((1.0F - f3) * y + z * f3) * f5 + f3 * f3 * f3;
        if (Math.abs(f6 - f4) < 1.0E-5D)
        {
          A[i1] = (f3 * f3 * f3 + f5);
          i1 += 1;
          break;
        }
        if (f6 > f4) {
          f1 = f3;
        } else {
          f2 = f3;
        }
      }
    }
    A[100] = 1.0F;
    B = 8.0F;
    C = 1.0F;
  }
  
  public e(Context paramContext, Interpolator paramInterpolator)
  {
    this(paramContext, paramInterpolator, true);
  }
  
  public e(Context paramContext, Interpolator paramInterpolator, boolean paramBoolean)
  {
    r = paramInterpolator;
    v = (getResourcesgetDisplayMetricsdensity * 160.0F);
    u = a(ViewConfiguration.getScrollFriction());
    s = paramBoolean;
  }
  
  private float a(float paramFloat)
  {
    return v * 386.0878F * paramFloat;
  }
  
  static float b(float paramFloat)
  {
    paramFloat *= B;
    if (paramFloat < 1.0F) {
      paramFloat -= 1.0F - (float)Math.exp(-paramFloat);
    } else {
      paramFloat = 0.36787945F + (1.0F - 0.36787945F) * (1.0F - (float)Math.exp(1.0F - paramFloat));
    }
    return paramFloat * C;
  }
  
  public void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    a = 0;
    q = false;
    m = paramInt5;
    l = AnimationUtils.currentAnimationTimeMillis();
    b = paramInt1;
    c = paramInt2;
    d = (paramInt1 + paramInt3);
    e = (paramInt2 + paramInt4);
    o = paramInt3;
    p = paramInt4;
    n = (1.0F / m);
  }
  
  public void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8)
  {
    int i2 = paramInt3;
    int i1 = paramInt4;
    float f1;
    if (s)
    {
      i2 = paramInt3;
      i1 = paramInt4;
      if (!q)
      {
        f1 = b();
        float f4 = d - b;
        f2 = e - c;
        f3 = (float)Math.sqrt(f4 * f4 + f2 * f2);
        f4 /= f3;
        f2 /= f3;
        f3 = f4 * f1;
        f1 = f2 * f1;
        i2 = paramInt3;
        i1 = paramInt4;
        if (Math.signum(paramInt3) == Math.signum(f3))
        {
          i2 = paramInt3;
          i1 = paramInt4;
          if (Math.signum(paramInt4) == Math.signum(f1))
          {
            i2 = (int)(paramInt3 + f3);
            i1 = (int)(paramInt4 + f1);
          }
        }
      }
    }
    a = 1;
    q = false;
    float f3 = (float)Math.sqrt(i2 * i2 + i1 * i1);
    t = f3;
    double d1 = Math.log(y * f3 / x);
    double d2 = w;
    Double.isNaN(d2);
    m = ((int)(Math.exp(d1 / (d2 - 1.0D)) * 1000.0D));
    l = AnimationUtils.currentAnimationTimeMillis();
    b = paramInt1;
    c = paramInt2;
    float f2 = 1.0F;
    if (f3 == 0.0F) {
      f1 = 1.0F;
    } else {
      f1 = i2 / f3;
    }
    if (f3 != 0.0F) {
      f2 = i1 / f3;
    }
    d2 = x;
    f3 = w;
    double d3 = f3;
    double d4 = f3;
    Double.isNaN(d4);
    Double.isNaN(d3);
    d1 = Math.exp(d3 / (d4 - 1.0D) * d1);
    Double.isNaN(d2);
    paramInt3 = (int)(d2 * d1);
    f = paramInt5;
    g = paramInt6;
    h = paramInt7;
    i = paramInt8;
    d = (Math.round(paramInt3 * f1) + paramInt1);
    d = Math.min(d, g);
    d = Math.max(d, f);
    e = (Math.round(paramInt3 * f2) + paramInt2);
    e = Math.min(e, i);
    e = Math.max(e, h);
  }
  
  public final void a(boolean paramBoolean)
  {
    q = paramBoolean;
  }
  
  public boolean a()
  {
    if (q) {
      return false;
    }
    int i1 = (int)(AnimationUtils.currentAnimationTimeMillis() - l);
    int i2 = m;
    if (i1 < i2)
    {
      int i3 = a;
      float f1;
      Object localObject;
      if (i3 != 0)
      {
        if (i3 == 1)
        {
          f1 = i1 / i2;
          i1 = (int)(f1 * 100.0F);
          float f2 = i1 / 100.0F;
          float f3 = (i1 + 1) / 100.0F;
          localObject = A;
          float f4 = localObject[i1];
          float f5 = localObject[(i1 + 1)];
          f1 = (f1 - f2) / (f3 - f2) * (f5 - f4) + f4;
          i1 = b;
          j = (i1 + Math.round((d - i1) * f1));
          j = Math.min(j, g);
          j = Math.max(j, f);
          i1 = c;
          k = (i1 + Math.round((e - i1) * f1));
          k = Math.min(k, i);
          k = Math.max(k, h);
          if ((j == d) && (k == e)) {
            q = true;
          }
        }
      }
      else
      {
        f1 = i1 * n;
        localObject = r;
        if (localObject == null) {
          f1 = b(f1);
        } else {
          f1 = ((Interpolator)localObject).getInterpolation(f1);
        }
        j = (b + Math.round(o * f1));
        k = (c + Math.round(p * f1));
      }
      return true;
    }
    j = d;
    k = e;
    q = true;
    return true;
  }
  
  public float b()
  {
    return t - u * j() / 2000.0F;
  }
  
  public final int c()
  {
    return j;
  }
  
  public final int d()
  {
    return k;
  }
  
  public final int e()
  {
    return d;
  }
  
  public final int f()
  {
    return e;
  }
  
  public final int g()
  {
    return b;
  }
  
  public final int h()
  {
    return c;
  }
  
  public final boolean i()
  {
    return q;
  }
  
  public int j()
  {
    return (int)(AnimationUtils.currentAnimationTimeMillis() - l);
  }
}
