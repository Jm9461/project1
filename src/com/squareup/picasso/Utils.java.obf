package com.squareup.picasso;

import android.annotation.TargetApi;
import android.app.ActivityManager;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.os.Process;
import android.os.StatFs;
import android.provider.Settings.Global;
import android.provider.Settings.System;
import android.util.Log;
import f.e;
import f.f;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.List;
import java.util.concurrent.ThreadFactory;

final class d0
{
  static final StringBuilder a = new StringBuilder();
  private static final f b = f.d("RIFF");
  private static final f c = f.d("WEBP");
  
  static int a(Context paramContext)
  {
    ActivityManager localActivityManager = (ActivityManager)a(paramContext, "activity");
    int i;
    if ((getApplicationInfoflags & 0x100000) != 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0) {
      i = localActivityManager.getLargeMemoryClass();
    } else {
      i = localActivityManager.getMemoryClass();
    }
    return (int)(i * 1048576L / 7L);
  }
  
  static int a(Resources paramResources, w paramW)
  {
    if (e == 0)
    {
      Object localObject = d;
      if (localObject != null)
      {
        localObject = ((Uri)localObject).getAuthority();
        if (localObject != null)
        {
          List localList = d.getPathSegments();
          if ((localList != null) && (!localList.isEmpty()))
          {
            if (localList.size() == 1) {
              try
              {
                int i = Integer.parseInt((String)localList.get(0));
                return i;
              }
              catch (NumberFormatException paramResources)
              {
                paramResources = new StringBuilder();
                paramResources.append("Last path segment is not a resource ID: ");
                paramResources.append(d);
                throw new FileNotFoundException(paramResources.toString());
              }
            }
            if (localList.size() == 2)
            {
              paramW = (String)localList.get(0);
              return paramResources.getIdentifier((String)localList.get(1), paramW, (String)localObject);
            }
            paramResources = new StringBuilder();
            paramResources.append("More than two path segments: ");
            paramResources.append(d);
            throw new FileNotFoundException(paramResources.toString());
          }
          paramResources = new StringBuilder();
          paramResources.append("No path segments: ");
          paramResources.append(d);
          throw new FileNotFoundException(paramResources.toString());
        }
        paramResources = new StringBuilder();
        paramResources.append("No package provided: ");
        paramResources.append(d);
        throw new FileNotFoundException(paramResources.toString());
      }
    }
    return e;
  }
  
  static int a(Bitmap paramBitmap)
  {
    int i;
    if (Build.VERSION.SDK_INT >= 19) {
      i = paramBitmap.getAllocationByteCount();
    } else {
      i = paramBitmap.getByteCount();
    }
    if (i >= 0) {
      return i;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Negative size: ");
    localStringBuilder.append(paramBitmap);
    throw new IllegalStateException(localStringBuilder.toString());
  }
  
  @TargetApi(18)
  static long a(File paramFile)
  {
    long l3 = 5242880L;
    long l1;
    try
    {
      paramFile = new StatFs(paramFile.getAbsolutePath());
      if (Build.VERSION.SDK_INT < 18) {
        l1 = paramFile.getBlockCount();
      } else {
        l1 = paramFile.getBlockCountLong();
      }
      long l2;
      if (Build.VERSION.SDK_INT < 18) {
        l2 = paramFile.getBlockSize();
      } else {
        l2 = paramFile.getBlockSizeLong();
      }
      l1 = l1 * l2 / 50L;
    }
    catch (IllegalArgumentException paramFile)
    {
      l1 = l3;
    }
    return Math.max(Math.min(l1, 52428800L), 5242880L);
  }
  
  static Resources a(Context paramContext, w paramW)
  {
    if (e == 0)
    {
      Object localObject = d;
      if (localObject != null)
      {
        localObject = ((Uri)localObject).getAuthority();
        if (localObject != null) {
          try
          {
            paramContext = paramContext.getPackageManager().getResourcesForApplication((String)localObject);
            return paramContext;
          }
          catch (PackageManager.NameNotFoundException paramContext)
          {
            paramContext = new StringBuilder();
            paramContext.append("Unable to obtain resources for package: ");
            paramContext.append(d);
            throw new FileNotFoundException(paramContext.toString());
          }
        }
        paramContext = new StringBuilder();
        paramContext.append("No package provided: ");
        paramContext.append(d);
        throw new FileNotFoundException(paramContext.toString());
      }
    }
    return paramContext.getResources();
  }
  
  static <T> T a(Context paramContext, String paramString)
  {
    return paramContext.getSystemService(paramString);
  }
  
  static <T> T a(T paramT, String paramString)
  {
    if (paramT != null) {
      return paramT;
    }
    throw new NullPointerException(paramString);
  }
  
  static String a(c paramC)
  {
    return a(paramC, "");
  }
  
  static String a(c paramC, String paramString)
  {
    paramString = new StringBuilder(paramString);
    a localA = paramC.b();
    if (localA != null) {
      paramString.append(b.d());
    }
    paramC = paramC.c();
    if (paramC != null)
    {
      int i = 0;
      int j = paramC.size();
      while (i < j)
      {
        if ((i > 0) || (localA != null)) {
          paramString.append(", ");
        }
        paramString.append(getb.d());
        i += 1;
      }
    }
    return paramString.toString();
  }
  
  static String a(w paramW)
  {
    paramW = a(paramW, a);
    a.setLength(0);
    return paramW;
  }
  
  static String a(w paramW, StringBuilder paramStringBuilder)
  {
    Object localObject = f;
    if (localObject != null)
    {
      paramStringBuilder.ensureCapacity(((String)localObject).length() + 50);
      paramStringBuilder.append(f);
    }
    else
    {
      localObject = d;
      if (localObject != null)
      {
        localObject = ((Uri)localObject).toString();
        paramStringBuilder.ensureCapacity(((String)localObject).length() + 50);
        paramStringBuilder.append((String)localObject);
      }
      else
      {
        paramStringBuilder.ensureCapacity(50);
        paramStringBuilder.append(e);
      }
    }
    paramStringBuilder.append('\n');
    if (n != 0.0F)
    {
      paramStringBuilder.append("rotation:");
      paramStringBuilder.append(n);
      if (q)
      {
        paramStringBuilder.append('@');
        paramStringBuilder.append(o);
        paramStringBuilder.append('x');
        paramStringBuilder.append(p);
      }
      paramStringBuilder.append('\n');
    }
    if (paramW.c())
    {
      paramStringBuilder.append("resize:");
      paramStringBuilder.append(h);
      paramStringBuilder.append('x');
      paramStringBuilder.append(paramW.i);
      paramStringBuilder.append('\n');
    }
    if (paramW.j)
    {
      paramStringBuilder.append("centerCrop:");
      paramStringBuilder.append(k);
      paramStringBuilder.append('\n');
    }
    else if (l)
    {
      paramStringBuilder.append("centerInside");
      paramStringBuilder.append('\n');
    }
    localObject = g;
    if (localObject != null)
    {
      int i = 0;
      int j = ((List)localObject).size();
      while (i < j)
      {
        paramStringBuilder.append(((c0)g.get(i)).a());
        paramStringBuilder.append('\n');
        i += 1;
      }
    }
    return paramStringBuilder.toString();
  }
  
  static void a()
  {
    if (b()) {
      return;
    }
    throw new IllegalStateException("Method call should happen from the main thread.");
  }
  
  static void a(Looper paramLooper)
  {
    paramLooper = new a(paramLooper);
    paramLooper.sendMessageDelayed(paramLooper.obtainMessage(), 1000L);
  }
  
  static void a(String paramString1, String paramString2, String paramString3)
  {
    a(paramString1, paramString2, paramString3, "");
  }
  
  static void a(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    Log.d("Picasso", String.format("%1$-11s %2$-12s %3$s %4$s", new Object[] { paramString1, paramString2, paramString3, paramString4 }));
  }
  
  static boolean a(e paramE)
  {
    return (paramE.a(0L, b)) && (paramE.a(8L, c));
  }
  
  static File b(Context paramContext)
  {
    paramContext = new File(paramContext.getApplicationContext().getCacheDir(), "picasso-cache");
    if (!paramContext.exists()) {
      paramContext.mkdirs();
    }
    return paramContext;
  }
  
  static boolean b()
  {
    return Looper.getMainLooper().getThread() == Thread.currentThread();
  }
  
  static boolean b(Context paramContext, String paramString)
  {
    return paramContext.checkCallingOrSelfPermission(paramString) == 0;
  }
  
  static boolean c(Context paramContext)
  {
    paramContext = paramContext.getContentResolver();
    boolean bool = false;
    try
    {
      int i = Build.VERSION.SDK_INT;
      if (i < 17)
      {
        if (Settings.System.getInt(paramContext, "airplane_mode_on", 0) != 0) {
          return true;
        }
      }
      else
      {
        i = Settings.Global.getInt(paramContext, "airplane_mode_on", 0);
        if (i != 0) {
          bool = true;
        }
        return bool;
      }
    }
    catch (SecurityException paramContext)
    {
      return false;
    }
    catch (NullPointerException paramContext)
    {
      return false;
    }
    return false;
  }
  
  static final class a
    extends Handler
  {
    a(Looper paramLooper)
    {
      super();
    }
    
    public void handleMessage(Message paramMessage)
    {
      sendMessageDelayed(obtainMessage(), 1000L);
    }
  }
  
  private static class b
    extends Thread
  {
    b(Runnable paramRunnable)
    {
      super();
    }
    
    public void run()
    {
      Process.setThreadPriority(10);
      super.run();
    }
  }
  
  static class c
    implements ThreadFactory
  {
    c() {}
    
    public Thread newThread(Runnable paramRunnable)
    {
      return new d0.b(paramRunnable);
    }
  }
}
