package com.squareup.picasso;

import android.annotation.SuppressLint;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.Message;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;

class i
{
  final b a = new b();
  final Context b;
  final ExecutorService c;
  final j d;
  final Map<String, c> e;
  final Map<Object, a> f;
  final Map<Object, a> g;
  final Set<Object> h;
  final Handler i;
  final Handler j;
  final d k;
  final a0 l;
  final List<c> m;
  final c n;
  final boolean o;
  boolean p;
  
  i(Context paramContext, ExecutorService paramExecutorService, Handler paramHandler, j paramJ, d paramD, a0 paramA0)
  {
    a.start();
    d0.a(a.getLooper());
    b = paramContext;
    c = paramExecutorService;
    e = new LinkedHashMap();
    f = new WeakHashMap();
    g = new WeakHashMap();
    h = new LinkedHashSet();
    i = new a(a.getLooper(), this);
    d = paramJ;
    j = paramHandler;
    k = paramD;
    l = paramA0;
    m = new ArrayList(4);
    p = d0.c(b);
    o = d0.b(paramContext, "android.permission.ACCESS_NETWORK_STATE");
    n = new c(this);
    n.a();
  }
  
  private void a(List<c> paramList)
  {
    if (paramList != null)
    {
      if (paramList.isEmpty()) {
        return;
      }
      if (get0in)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        paramList = paramList.iterator();
        while (paramList.hasNext())
        {
          c localC = (c)paramList.next();
          if (localStringBuilder.length() > 0) {
            localStringBuilder.append(", ");
          }
          localStringBuilder.append(d0.a(localC));
        }
        d0.a("Dispatcher", "delivered", localStringBuilder.toString());
      }
      return;
    }
  }
  
  private void b()
  {
    if (!f.isEmpty())
    {
      Iterator localIterator = f.values().iterator();
      while (localIterator.hasNext())
      {
        a localA = (a)localIterator.next();
        localIterator.remove();
        if (en) {
          d0.a("Dispatcher", "replaying", localA.g().d());
        }
        a(localA, false);
      }
    }
  }
  
  private void e(a paramA)
  {
    Object localObject = paramA.i();
    if (localObject != null)
    {
      k = true;
      f.put(localObject, paramA);
    }
  }
  
  private void f(c paramC)
  {
    if (paramC.m()) {
      return;
    }
    Bitmap localBitmap = o;
    if (localBitmap != null) {
      localBitmap.prepareToDraw();
    }
    m.add(paramC);
    if (!i.hasMessages(7)) {
      i.sendEmptyMessageDelayed(7, 200L);
    }
  }
  
  private void g(c paramC)
  {
    a localA = paramC.b();
    if (localA != null) {
      e(localA);
    }
    paramC = paramC.c();
    if (paramC != null)
    {
      int i1 = 0;
      int i2 = paramC.size();
      while (i1 < i2)
      {
        e((a)paramC.get(i1));
        i1 += 1;
      }
    }
  }
  
  void a()
  {
    ArrayList localArrayList = new ArrayList(m);
    m.clear();
    Handler localHandler = j;
    localHandler.sendMessage(localHandler.obtainMessage(8, localArrayList));
    a(localArrayList);
  }
  
  void a(NetworkInfo paramNetworkInfo)
  {
    Handler localHandler = i;
    localHandler.sendMessage(localHandler.obtainMessage(9, paramNetworkInfo));
  }
  
  void a(a paramA)
  {
    Handler localHandler = i;
    localHandler.sendMessage(localHandler.obtainMessage(2, paramA));
  }
  
  void a(a paramA, boolean paramBoolean)
  {
    if (h.contains(paramA.h()))
    {
      g.put(paramA.i(), paramA);
      if (en)
      {
        localObject = b.d();
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("because tag '");
        localStringBuilder.append(paramA.h());
        localStringBuilder.append("' is paused");
        d0.a("Dispatcher", "paused", (String)localObject, localStringBuilder.toString());
      }
      return;
    }
    Object localObject = (c)e.get(paramA.b());
    if (localObject != null)
    {
      ((c)localObject).a(paramA);
      return;
    }
    if (c.isShutdown())
    {
      if (en) {
        d0.a("Dispatcher", "ignored", b.d(), "because shut down");
      }
      return;
    }
    localObject = c.a(paramA.e(), this, k, l, paramA);
    p = c.submit((Runnable)localObject);
    e.put(paramA.b(), localObject);
    if (paramBoolean) {
      f.remove(paramA.i());
    }
    if (en) {
      d0.a("Dispatcher", "enqueued", b.d());
    }
  }
  
  void a(c paramC)
  {
    Handler localHandler = i;
    localHandler.sendMessage(localHandler.obtainMessage(4, paramC));
  }
  
  void a(c paramC, boolean paramBoolean)
  {
    if (in)
    {
      String str2 = d0.a(paramC);
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("for error");
      String str1;
      if (paramBoolean) {
        str1 = " (will replay)";
      } else {
        str1 = "";
      }
      localStringBuilder.append(str1);
      d0.a("Dispatcher", "batched", str2, localStringBuilder.toString());
    }
    e.remove(paramC.f());
    f(paramC);
  }
  
  void a(Object paramObject)
  {
    if (!h.add(paramObject)) {
      return;
    }
    Iterator localIterator = e.values().iterator();
    while (localIterator.hasNext())
    {
      c localC = (c)localIterator.next();
      boolean bool = in;
      Object localObject = localC.b();
      List localList = localC.c();
      int i1;
      if ((localList != null) && (!localList.isEmpty())) {
        i1 = 1;
      } else {
        i1 = 0;
      }
      if ((localObject != null) || (i1 != 0))
      {
        StringBuilder localStringBuilder;
        if ((localObject != null) && (((a)localObject).h().equals(paramObject)))
        {
          localC.b((a)localObject);
          g.put(((a)localObject).i(), localObject);
          if (bool)
          {
            localObject = b.d();
            localStringBuilder = new StringBuilder();
            localStringBuilder.append("because tag '");
            localStringBuilder.append(paramObject);
            localStringBuilder.append("' was paused");
            d0.a("Dispatcher", "paused", (String)localObject, localStringBuilder.toString());
          }
        }
        if (i1 != 0)
        {
          i1 = localList.size() - 1;
          while (i1 >= 0)
          {
            localObject = (a)localList.get(i1);
            if (((a)localObject).h().equals(paramObject))
            {
              localC.b((a)localObject);
              g.put(((a)localObject).i(), localObject);
              if (bool)
              {
                localObject = b.d();
                localStringBuilder = new StringBuilder();
                localStringBuilder.append("because tag '");
                localStringBuilder.append(paramObject);
                localStringBuilder.append("' was paused");
                d0.a("Dispatcher", "paused", (String)localObject, localStringBuilder.toString());
              }
            }
            i1 -= 1;
          }
        }
        if (localC.a())
        {
          localIterator.remove();
          if (bool) {
            d0.a("Dispatcher", "canceled", d0.a(localC), "all actions paused");
          }
        }
      }
    }
  }
  
  void a(boolean paramBoolean)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
  }
  
  void b(NetworkInfo paramNetworkInfo)
  {
    ExecutorService localExecutorService = c;
    if ((localExecutorService instanceof v)) {
      ((v)localExecutorService).a(paramNetworkInfo);
    }
    if ((paramNetworkInfo != null) && (paramNetworkInfo.isConnected())) {
      b();
    }
  }
  
  void b(a paramA)
  {
    Handler localHandler = i;
    localHandler.sendMessage(localHandler.obtainMessage(1, paramA));
  }
  
  void b(c paramC)
  {
    Handler localHandler = i;
    localHandler.sendMessage(localHandler.obtainMessage(6, paramC));
  }
  
  void b(Object paramObject)
  {
    if (!h.remove(paramObject)) {
      return;
    }
    Object localObject1 = null;
    Iterator localIterator = g.values().iterator();
    while (localIterator.hasNext())
    {
      a localA = (a)localIterator.next();
      Object localObject2 = localObject1;
      if (localA.h().equals(paramObject))
      {
        localObject2 = localObject1;
        if (localObject1 == null) {
          localObject2 = new ArrayList();
        }
        ((List)localObject2).add(localA);
        localIterator.remove();
      }
      localObject1 = localObject2;
    }
    if (localObject1 != null)
    {
      paramObject = j;
      paramObject.sendMessage(paramObject.obtainMessage(13, localObject1));
    }
  }
  
  void b(boolean paramBoolean)
  {
    p = paramBoolean;
  }
  
  void c(a paramA)
  {
    String str = paramA.b();
    c localC = (c)e.get(str);
    if (localC != null)
    {
      localC.b(paramA);
      if (localC.a())
      {
        e.remove(str);
        if (en) {
          d0.a("Dispatcher", "canceled", paramA.g().d());
        }
      }
    }
    if (h.contains(paramA.h()))
    {
      g.remove(paramA.i());
      if (en) {
        d0.a("Dispatcher", "canceled", paramA.g().d(), "because paused request got canceled");
      }
    }
    paramA = (a)f.remove(paramA.i());
    if ((paramA != null) && (en)) {
      d0.a("Dispatcher", "canceled", paramA.g().d(), "from replaying");
    }
  }
  
  void c(c paramC)
  {
    Handler localHandler = i;
    localHandler.sendMessageDelayed(localHandler.obtainMessage(5, paramC), 500L);
  }
  
  void d(a paramA)
  {
    a(paramA, true);
  }
  
  void d(c paramC)
  {
    if (p.b(paramC.h())) {
      k.a(paramC.f(), paramC.k());
    }
    e.remove(paramC.f());
    f(paramC);
    if (in) {
      d0.a("Dispatcher", "batched", d0.a(paramC), "for completion");
    }
  }
  
  @SuppressLint({"MissingPermission"})
  void e(c paramC)
  {
    if (paramC.m()) {
      return;
    }
    boolean bool1 = c.isShutdown();
    boolean bool2 = false;
    if (bool1)
    {
      a(paramC, false);
      return;
    }
    NetworkInfo localNetworkInfo = null;
    if (o) {
      localNetworkInfo = ((ConnectivityManager)d0.a(b, "connectivity")).getActiveNetworkInfo();
    }
    if (paramC.a(p, localNetworkInfo))
    {
      if (in) {
        d0.a("Dispatcher", "retrying", d0.a(paramC));
      }
      if ((paramC.e() instanceof r.a)) {
        k |= dc;
      }
      p = c.submit(paramC);
      return;
    }
    bool1 = bool2;
    if (o)
    {
      bool1 = bool2;
      if (paramC.n()) {
        bool1 = true;
      }
    }
    a(paramC, bool1);
    if (bool1) {
      g(paramC);
    }
  }
  
  private static class a
    extends Handler
  {
    private final i a;
    
    a(Looper paramLooper, i paramI)
    {
      super();
      a = paramI;
    }
    
    public void handleMessage(final Message paramMessage)
    {
      int i = what;
      boolean bool = false;
      switch (i)
      {
      case 3: 
      case 8: 
      default: 
        t.p.post(new a(paramMessage));
        return;
      case 12: 
        paramMessage = obj;
        a.b(paramMessage);
        return;
      case 11: 
        paramMessage = obj;
        a.a(paramMessage);
        return;
      case 10: 
        i localI = a;
        if (arg1 == 1) {
          bool = true;
        }
        localI.b(bool);
        return;
      case 9: 
        paramMessage = (NetworkInfo)obj;
        a.b(paramMessage);
        return;
      case 7: 
        a.a();
        return;
      case 6: 
        paramMessage = (c)obj;
        a.a(paramMessage, false);
        return;
      case 5: 
        paramMessage = (c)obj;
        a.e(paramMessage);
        return;
      case 4: 
        paramMessage = (c)obj;
        a.d(paramMessage);
        return;
      case 2: 
        paramMessage = (a)obj;
        a.c(paramMessage);
        return;
      }
      paramMessage = (a)obj;
      a.d(paramMessage);
    }
    
    class a
      implements Runnable
    {
      a(Message paramMessage) {}
      
      public void run()
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Unknown handler message received: ");
        localStringBuilder.append(paramMessagewhat);
        throw new AssertionError(localStringBuilder.toString());
      }
    }
  }
  
  static class b
    extends HandlerThread
  {
    b()
    {
      super(10);
    }
  }
  
  static class c
    extends BroadcastReceiver
  {
    private final i a;
    
    c(i paramI)
    {
      a = paramI;
    }
    
    void a()
    {
      IntentFilter localIntentFilter = new IntentFilter();
      localIntentFilter.addAction("android.intent.action.AIRPLANE_MODE");
      if (a.o) {
        localIntentFilter.addAction("android.net.conn.CONNECTIVITY_CHANGE");
      }
      a.b.registerReceiver(this, localIntentFilter);
    }
    
    @SuppressLint({"MissingPermission"})
    public void onReceive(Context paramContext, Intent paramIntent)
    {
      if (paramIntent == null) {
        return;
      }
      String str = paramIntent.getAction();
      if ("android.intent.action.AIRPLANE_MODE".equals(str))
      {
        if (!paramIntent.hasExtra("state")) {
          return;
        }
        a.a(paramIntent.getBooleanExtra("state", false));
        return;
      }
      if ("android.net.conn.CONNECTIVITY_CHANGE".equals(str))
      {
        paramContext = (ConnectivityManager)d0.a(paramContext, "connectivity");
        a.a(paramContext.getActiveNetworkInfo());
      }
    }
  }
}
