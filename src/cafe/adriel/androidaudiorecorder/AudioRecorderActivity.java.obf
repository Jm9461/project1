package cafe.adriel.androidaudiorecorder;

import android.app.Activity;
import android.content.Intent;
import android.graphics.PorterDuff.Mode;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.opengl.GLSurfaceView;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.widget.ImageButton;
import android.widget.RelativeLayout;
import android.widget.TextView;
import b.d.a.b.c;
import b.d.a.c.c;
import b.d.a.c.d;
import g.e.b;
import g.e.c;
import java.io.File;
import java.util.Timer;
import java.util.TimerTask;

public class AudioRecorderActivity
  extends android.support.v7.app.e
  implements e.c, MediaPlayer.OnCompletionListener
{
  private i A;
  private Timer B;
  private MenuItem C;
  private int D;
  private int E;
  private boolean F;
  private RelativeLayout G;
  private b.d.a.c H;
  private TextView I;
  private TextView J;
  private ImageButton K;
  private ImageButton L;
  private ImageButton M;
  private String r;
  private cafe.adriel.androidaudiorecorder.j.c s;
  private cafe.adriel.androidaudiorecorder.j.a t;
  private cafe.adriel.androidaudiorecorder.j.b u;
  private int v;
  private boolean w;
  private boolean x;
  private MediaPlayer y;
  private g.f z;
  
  public AudioRecorderActivity() {}
  
  private boolean m()
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    try
    {
      if (y != null)
      {
        bool1 = bool2;
        if (y.isPlaying())
        {
          boolean bool3 = F;
          bool1 = bool2;
          if (!bool3) {
            bool1 = true;
          }
        }
      }
      return bool1;
    }
    catch (Exception localException) {}
    return false;
  }
  
  private void n()
  {
    F = false;
    if (!isFinishing()) {
      C.setVisible(true);
    }
    I.setText(g.aar_paused);
    I.setVisibility(0);
    K.setVisibility(0);
    M.setVisibility(0);
    L.setImageResource(c.aar_ic_rec);
    M.setImageResource(c.aar_ic_play);
    H.c();
    Object localObject = A;
    if (localObject != null) {
      ((i)localObject).g();
    }
    localObject = z;
    if (localObject != null) {
      ((g.f)localObject).b();
    }
    u();
  }
  
  private void o()
  {
    F = true;
    C.setVisible(false);
    I.setText(g.aar_recording);
    I.setVisibility(0);
    K.setVisibility(4);
    M.setVisibility(4);
    L.setImageResource(c.aar_ic_pause);
    M.setImageResource(c.aar_ic_play);
    A = new i();
    H.a(A);
    if (z == null)
    {
      J.setText("00:00:00");
      z = g.d.a(new e.b(h.a(s, t, u), this), new File(r));
    }
    z.c();
    r();
  }
  
  private void p()
  {
    t();
    setResult(-1);
    finish();
  }
  
  private void q()
  {
    try
    {
      t();
      y = new MediaPlayer();
      y.setDataSource(r);
      y.prepare();
      y.start();
      H.a(b.c.a(this, y));
      H.post(new c());
      J.setText("00:00:00");
      I.setText(g.aar_playing);
      I.setVisibility(0);
      M.setImageResource(c.aar_ic_stop);
      E = 0;
      r();
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  private void r()
  {
    u();
    B = new Timer();
    B.scheduleAtFixedRate(new d(), 0L, 1000L);
  }
  
  private void s()
  {
    I.setText("");
    I.setVisibility(4);
    M.setImageResource(c.aar_ic_play);
    H.c();
    Object localObject = A;
    if (localObject != null) {
      ((i)localObject).g();
    }
    localObject = y;
    if (localObject != null) {
      try
      {
        ((MediaPlayer)localObject).stop();
        y.reset();
      }
      catch (Exception localException) {}
    }
    u();
  }
  
  private void t()
  {
    H.c();
    Object localObject = A;
    if (localObject != null) {
      ((i)localObject).g();
    }
    D = 0;
    localObject = z;
    if (localObject != null)
    {
      ((g.f)localObject).a();
      z = null;
    }
    u();
  }
  
  private void u()
  {
    Timer localTimer = B;
    if (localTimer != null)
    {
      localTimer.cancel();
      B.purge();
      B = null;
    }
  }
  
  private void v()
  {
    runOnUiThread(new e());
  }
  
  public void a(g.b paramB)
  {
    float f;
    if (F) {
      f = (float)paramB.a();
    } else {
      f = 0.0F;
    }
    A.a(Float.valueOf(f));
  }
  
  public void onCompletion(MediaPlayer paramMediaPlayer)
  {
    s();
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setContentView(e.aar_activity_audio_recorder);
    if (paramBundle != null)
    {
      r = paramBundle.getString("filePath");
      s = ((cafe.adriel.androidaudiorecorder.j.c)paramBundle.getSerializable("source"));
      t = ((cafe.adriel.androidaudiorecorder.j.a)paramBundle.getSerializable("channel"));
      u = ((cafe.adriel.androidaudiorecorder.j.b)paramBundle.getSerializable("sampleRate"));
      v = paramBundle.getInt("color");
      w = paramBundle.getBoolean("autoStart");
      x = paramBundle.getBoolean("keepDisplayOn");
    }
    else
    {
      r = getIntent().getStringExtra("filePath");
      s = ((cafe.adriel.androidaudiorecorder.j.c)getIntent().getSerializableExtra("source"));
      t = ((cafe.adriel.androidaudiorecorder.j.a)getIntent().getSerializableExtra("channel"));
      u = ((cafe.adriel.androidaudiorecorder.j.b)getIntent().getSerializableExtra("sampleRate"));
      v = getIntent().getIntExtra("color", -16777216);
      w = getIntent().getBooleanExtra("autoStart", false);
      x = getIntent().getBooleanExtra("keepDisplayOn", false);
    }
    if (x) {
      getWindow().addFlags(128);
    }
    if (j() != null)
    {
      j().f(true);
      j().d(true);
      j().e(false);
      j().a(0.0F);
      j().a(new ColorDrawable(h.b(v)));
      j().b(android.support.v4.content.a.c(this, c.aar_ic_clear));
    }
    paramBundle = new c.c(this);
    paramBundle.d(1);
    paramBundle.e(6);
    paramBundle.g(b.aar_wave_height);
    paramBundle.f(b.aar_footer_height);
    paramBundle.b(20);
    paramBundle.c(b.aar_bubble_size);
    paramBundle.a(true);
    H = ((c.c)((c.c)paramBundle.a(h.b(v))).a(new int[] { v })).d();
    G = ((RelativeLayout)findViewById(d.content));
    I = ((TextView)findViewById(d.status));
    J = ((TextView)findViewById(d.timer));
    K = ((ImageButton)findViewById(d.restart));
    L = ((ImageButton)findViewById(d.record));
    M = ((ImageButton)findViewById(d.play));
    G.setBackgroundColor(h.b(v));
    G.addView(H, 0);
    K.setVisibility(4);
    M.setVisibility(4);
    if (h.d(v))
    {
      android.support.v4.content.a.c(this, c.aar_ic_clear).setColorFilter(-16777216, PorterDuff.Mode.SRC_ATOP);
      android.support.v4.content.a.c(this, c.aar_ic_check).setColorFilter(-16777216, PorterDuff.Mode.SRC_ATOP);
      I.setTextColor(-16777216);
      J.setTextColor(-16777216);
      K.setColorFilter(-16777216);
      L.setColorFilter(-16777216);
      M.setColorFilter(-16777216);
    }
  }
  
  public boolean onCreateOptionsMenu(Menu paramMenu)
  {
    getMenuInflater().inflate(f.aar_audio_recorder, paramMenu);
    C = paramMenu.findItem(d.action_save);
    C.setIcon(android.support.v4.content.a.c(this, c.aar_ic_check));
    return super.onCreateOptionsMenu(paramMenu);
  }
  
  protected void onDestroy()
  {
    restartRecording(null);
    setResult(0);
    try
    {
      H.c();
    }
    catch (Exception localException) {}
    super.onDestroy();
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    int i = paramMenuItem.getItemId();
    if (i == 16908332) {
      finish();
    } else if (i == d.action_save) {
      p();
    }
    return super.onOptionsItemSelected(paramMenuItem);
  }
  
  protected void onPause()
  {
    restartRecording(null);
    try
    {
      H.onPause();
    }
    catch (Exception localException) {}
    super.onPause();
  }
  
  public void onPostCreate(Bundle paramBundle)
  {
    super.onPostCreate(paramBundle);
    if ((w) && (!F)) {
      toggleRecording(null);
    }
  }
  
  public void onResume()
  {
    super.onResume();
    try
    {
      H.onResume();
      return;
    }
    catch (Exception localException) {}
  }
  
  protected void onSaveInstanceState(Bundle paramBundle)
  {
    paramBundle.putString("filePath", r);
    paramBundle.putInt("color", v);
    super.onSaveInstanceState(paramBundle);
  }
  
  public void restartRecording(View paramView)
  {
    if (F)
    {
      t();
    }
    else if (m())
    {
      s();
    }
    else
    {
      A = new i();
      H.a(A);
      H.c();
      paramView = A;
      if (paramView != null) {
        paramView.g();
      }
    }
    C.setVisible(false);
    I.setVisibility(4);
    K.setVisibility(4);
    M.setVisibility(4);
    L.setImageResource(c.aar_ic_rec);
    J.setText("00:00:00");
    D = 0;
    E = 0;
  }
  
  public void togglePlaying(View paramView)
  {
    n();
    h.a(100, new b());
  }
  
  public void toggleRecording(View paramView)
  {
    s();
    h.a(100, new a());
  }
  
  class a
    implements Runnable
  {
    a() {}
    
    public void run()
    {
      if (AudioRecorderActivity.a(AudioRecorderActivity.this))
      {
        AudioRecorderActivity.b(AudioRecorderActivity.this);
        return;
      }
      AudioRecorderActivity.e(AudioRecorderActivity.this);
    }
  }
  
  class b
    implements Runnable
  {
    b() {}
    
    public void run()
    {
      if (AudioRecorderActivity.f(AudioRecorderActivity.this))
      {
        AudioRecorderActivity.g(AudioRecorderActivity.this);
        return;
      }
      AudioRecorderActivity.h(AudioRecorderActivity.this);
    }
  }
  
  class c
    implements Runnable
  {
    c() {}
    
    public void run()
    {
      AudioRecorderActivity.i(AudioRecorderActivity.this).setOnCompletionListener(AudioRecorderActivity.this);
    }
  }
  
  class d
    extends TimerTask
  {
    d() {}
    
    public void run()
    {
      AudioRecorderActivity.j(AudioRecorderActivity.this);
    }
  }
  
  class e
    implements Runnable
  {
    e() {}
    
    public void run()
    {
      if (AudioRecorderActivity.a(AudioRecorderActivity.this))
      {
        AudioRecorderActivity.l(AudioRecorderActivity.this);
        AudioRecorderActivity.m(AudioRecorderActivity.this).setText(h.a(AudioRecorderActivity.k(AudioRecorderActivity.this)));
        return;
      }
      if (AudioRecorderActivity.f(AudioRecorderActivity.this))
      {
        AudioRecorderActivity.d(AudioRecorderActivity.this);
        AudioRecorderActivity.m(AudioRecorderActivity.this).setText(h.a(AudioRecorderActivity.c(AudioRecorderActivity.this)));
      }
    }
  }
}
