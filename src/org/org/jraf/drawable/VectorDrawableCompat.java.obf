package a.b.d.a;

import a.b.g.a.b.b;
import a.b.g.g.n;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Paint.Cap;
import android.graphics.Paint.Join;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Path.FillType;
import android.graphics.PathMeasure;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffColorFilter;
import android.graphics.Rect;
import android.graphics.Shader;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Drawable.ConstantState;
import android.graphics.drawable.VectorDrawable;
import android.os.Build.VERSION;
import android.support.v4.content.e.f;
import android.support.v4.content.e.g;
import android.util.AttributeSet;
import android.util.Log;
import android.util.Xml;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

public class i
  extends h
{
  static final PorterDuff.Mode l = PorterDuff.Mode.SRC_IN;
  private h d;
  private PorterDuffColorFilter e;
  private ColorFilter f;
  private boolean g;
  private boolean h = true;
  private final float[] i = new float[9];
  private final Matrix j = new Matrix();
  private final Rect k = new Rect();
  
  i()
  {
    d = new h();
  }
  
  i(h paramH)
  {
    d = paramH;
    e = a(e, c, d);
  }
  
  static int a(int paramInt, float paramFloat)
  {
    return paramInt & 0xFFFFFF | (int)(Color.alpha(paramInt) * paramFloat) << 24;
  }
  
  public static i a(Resources paramResources, int paramInt, Resources.Theme paramTheme)
  {
    Object localObject;
    if (Build.VERSION.SDK_INT >= 24)
    {
      localObject = new i();
      c = f.a(paramResources, paramInt, paramTheme);
      new i(c.getConstantState());
      return localObject;
    }
    try
    {
      localObject = paramResources.getXml(paramInt);
      AttributeSet localAttributeSet = Xml.asAttributeSet((XmlPullParser)localObject);
      do
      {
        paramInt = ((XmlPullParser)localObject).next();
      } while ((paramInt != 2) && (paramInt != 1));
      if (paramInt == 2) {
        return createFromXmlInner(paramResources, (XmlPullParser)localObject, localAttributeSet, paramTheme);
      }
      throw new XmlPullParserException("No start tag found");
    }
    catch (IOException paramResources)
    {
      Log.e("VectorDrawableCompat", "parser error", paramResources);
    }
    catch (XmlPullParserException paramResources)
    {
      Log.e("VectorDrawableCompat", "parser error", paramResources);
    }
    return null;
  }
  
  private static PorterDuff.Mode a(int paramInt, PorterDuff.Mode paramMode)
  {
    if (paramInt != 3)
    {
      if (paramInt != 5)
      {
        if (paramInt != 9)
        {
          switch (paramInt)
          {
          default: 
            return paramMode;
          case 16: 
            return PorterDuff.Mode.ADD;
          case 15: 
            return PorterDuff.Mode.SCREEN;
          }
          return PorterDuff.Mode.MULTIPLY;
        }
        return PorterDuff.Mode.SRC_ATOP;
      }
      return PorterDuff.Mode.SRC_IN;
    }
    return PorterDuff.Mode.SRC_OVER;
  }
  
  private void a(Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme)
  {
    h localH = d;
    g localG = b;
    int m = 1;
    ArrayDeque localArrayDeque = new ArrayDeque();
    localArrayDeque.push(h);
    int i1 = paramXmlPullParser.getEventType();
    int i2 = paramXmlPullParser.getDepth();
    while ((i1 != 1) && ((paramXmlPullParser.getDepth() >= i2 + 1) || (i1 != 3)))
    {
      int n;
      if (i1 == 2)
      {
        Object localObject = paramXmlPullParser.getName();
        d localD = (d)localArrayDeque.peek();
        if ("path".equals(localObject))
        {
          localObject = new c();
          ((c)localObject).a(paramResources, paramAttributeSet, paramTheme, paramXmlPullParser);
          b.add(localObject);
          if (((f)localObject).getPathName() != null) {
            p.put(((f)localObject).getPathName(), localObject);
          }
          n = 0;
          a |= c;
        }
        else
        {
          if ("clip-path".equals(localObject))
          {
            localObject = new b();
            ((b)localObject).a(paramResources, paramAttributeSet, paramTheme, paramXmlPullParser);
            b.add(localObject);
            if (((f)localObject).getPathName() != null) {
              p.put(((f)localObject).getPathName(), localObject);
            }
            a |= c;
          }
          else if ("group".equals(localObject))
          {
            localObject = new d();
            ((d)localObject).a(paramResources, paramAttributeSet, paramTheme, paramXmlPullParser);
            b.add(localObject);
            localArrayDeque.push(localObject);
            if (((d)localObject).getGroupName() != null) {
              p.put(((d)localObject).getGroupName(), localObject);
            }
            a |= k;
            n = m;
            break label367;
          }
          n = m;
        }
      }
      for (;;)
      {
        label367:
        break;
        n = m;
        if (i1 == 3)
        {
          n = m;
          if ("group".equals(paramXmlPullParser.getName()))
          {
            localArrayDeque.pop();
            n = m;
          }
        }
      }
      i1 = paramXmlPullParser.next();
      m = n;
    }
    if (m == 0) {
      return;
    }
    paramResources = new XmlPullParserException("no path defined");
    for (;;)
    {
      throw paramResources;
    }
  }
  
  private void a(TypedArray paramTypedArray, XmlPullParser paramXmlPullParser)
  {
    h localH = d;
    g localG = b;
    d = a(g.b(paramTypedArray, paramXmlPullParser, "tintMode", 6, -1), PorterDuff.Mode.SRC_IN);
    ColorStateList localColorStateList = paramTypedArray.getColorStateList(1);
    if (localColorStateList != null) {
      c = localColorStateList;
    }
    e = g.a(paramTypedArray, paramXmlPullParser, "autoMirrored", 5, e);
    k = g.a(paramTypedArray, paramXmlPullParser, "viewportWidth", 7, k);
    l = g.a(paramTypedArray, paramXmlPullParser, "viewportHeight", 8, l);
    if (k > 0.0F)
    {
      if (l > 0.0F)
      {
        i = paramTypedArray.getDimension(3, i);
        j = paramTypedArray.getDimension(2, j);
        if (i > 0.0F)
        {
          if (j > 0.0F)
          {
            localG.setAlpha(g.a(paramTypedArray, paramXmlPullParser, "alpha", 4, localG.getAlpha()));
            paramTypedArray = paramTypedArray.getString(0);
            if (paramTypedArray != null)
            {
              n = paramTypedArray;
              p.put(paramTypedArray, localG);
            }
            return;
          }
          paramXmlPullParser = new StringBuilder();
          paramXmlPullParser.append(paramTypedArray.getPositionDescription());
          paramXmlPullParser.append("<vector> tag requires height > 0");
          throw new XmlPullParserException(paramXmlPullParser.toString());
        }
        paramXmlPullParser = new StringBuilder();
        paramXmlPullParser.append(paramTypedArray.getPositionDescription());
        paramXmlPullParser.append("<vector> tag requires width > 0");
        throw new XmlPullParserException(paramXmlPullParser.toString());
      }
      paramXmlPullParser = new StringBuilder();
      paramXmlPullParser.append(paramTypedArray.getPositionDescription());
      paramXmlPullParser.append("<vector> tag requires viewportHeight > 0");
      throw new XmlPullParserException(paramXmlPullParser.toString());
    }
    paramXmlPullParser = new StringBuilder();
    paramXmlPullParser.append(paramTypedArray.getPositionDescription());
    paramXmlPullParser.append("<vector> tag requires viewportWidth > 0");
    throw new XmlPullParserException(paramXmlPullParser.toString());
  }
  
  private boolean a()
  {
    if (Build.VERSION.SDK_INT >= 17) {
      return (isAutoMirrored()) && (android.support.v4.graphics.drawable.a.e(this) == 1);
    }
    return false;
  }
  
  public static i createFromXmlInner(Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme)
  {
    i localI = new i();
    localI.inflate(paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
    return localI;
  }
  
  PorterDuffColorFilter a(PorterDuffColorFilter paramPorterDuffColorFilter, ColorStateList paramColorStateList, PorterDuff.Mode paramMode)
  {
    if ((paramColorStateList != null) && (paramMode != null)) {
      return new PorterDuffColorFilter(paramColorStateList.getColorForState(getState(), 0), paramMode);
    }
    return null;
  }
  
  Object a(String paramString)
  {
    return d.b.p.get(paramString);
  }
  
  void a(boolean paramBoolean)
  {
    h = paramBoolean;
  }
  
  public boolean canApplyTheme()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      android.support.v4.graphics.drawable.a.a(localDrawable);
    }
    return false;
  }
  
  public void draw(Canvas paramCanvas)
  {
    Object localObject1 = c;
    if (localObject1 != null)
    {
      ((Drawable)localObject1).draw(paramCanvas);
      return;
    }
    copyBounds(k);
    if (k.width() > 0)
    {
      if (k.height() <= 0) {
        return;
      }
      Object localObject2 = f;
      localObject1 = localObject2;
      if (localObject2 == null) {
        localObject1 = e;
      }
      paramCanvas.getMatrix(j);
      j.getValues(i);
      float f1 = Math.abs(i[0]);
      float f2 = Math.abs(i[4]);
      float f4 = Math.abs(i[1]);
      float f3 = Math.abs(i[3]);
      if ((f4 != 0.0F) || (f3 != 0.0F))
      {
        f1 = 1.0F;
        f2 = 1.0F;
      }
      int m = (int)(k.width() * f1);
      int n = (int)(k.height() * f2);
      m = Math.min(2048, m);
      n = Math.min(2048, n);
      if (m > 0)
      {
        if (n <= 0) {
          return;
        }
        int i1 = paramCanvas.save();
        localObject2 = k;
        paramCanvas.translate(left, top);
        if (a())
        {
          paramCanvas.translate(k.width(), 0.0F);
          paramCanvas.scale(-1.0F, 1.0F);
        }
        k.offsetTo(0, 0);
        d.b(m, n);
        if (!h)
        {
          d.c(m, n);
        }
        else if (!d.a())
        {
          d.c(m, n);
          d.d();
        }
        d.a(paramCanvas, (ColorFilter)localObject1, k);
        paramCanvas.restoreToCount(i1);
        return;
      }
      return;
    }
  }
  
  public int getAlpha()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return android.support.v4.graphics.drawable.a.c(localDrawable);
    }
    return d.b.getRootAlpha();
  }
  
  public int getChangingConfigurations()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return localDrawable.getChangingConfigurations();
    }
    return super.getChangingConfigurations() | d.getChangingConfigurations();
  }
  
  public Drawable.ConstantState getConstantState()
  {
    Drawable localDrawable = c;
    if ((localDrawable != null) && (Build.VERSION.SDK_INT >= 24)) {
      return new i(localDrawable.getConstantState());
    }
    d.a = getChangingConfigurations();
    return d;
  }
  
  public int getIntrinsicHeight()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return localDrawable.getIntrinsicHeight();
    }
    return (int)d.b.j;
  }
  
  public int getIntrinsicWidth()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return localDrawable.getIntrinsicWidth();
    }
    return (int)d.b.i;
  }
  
  public int getOpacity()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return localDrawable.getOpacity();
    }
    return -3;
  }
  
  public void inflate(Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      localDrawable.inflate(paramResources, paramXmlPullParser, paramAttributeSet);
      return;
    }
    inflate(paramResources, paramXmlPullParser, paramAttributeSet, null);
  }
  
  public void inflate(Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme)
  {
    Object localObject = c;
    if (localObject != null)
    {
      android.support.v4.graphics.drawable.a.a((Drawable)localObject, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
      return;
    }
    localObject = d;
    b = new g();
    TypedArray localTypedArray = g.a(paramResources, paramTheme, paramAttributeSet, a.a);
    a(localTypedArray, paramXmlPullParser);
    localTypedArray.recycle();
    a = getChangingConfigurations();
    k = true;
    a(paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
    e = a(e, c, d);
  }
  
  public void invalidateSelf()
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      localDrawable.invalidateSelf();
      return;
    }
    super.invalidateSelf();
  }
  
  public boolean isAutoMirrored()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return android.support.v4.graphics.drawable.a.f(localDrawable);
    }
    return d.e;
  }
  
  public boolean isStateful()
  {
    Object localObject = c;
    if (localObject != null) {
      return ((Drawable)localObject).isStateful();
    }
    if (!super.isStateful())
    {
      localObject = d;
      if (localObject != null)
      {
        if (!((h)localObject).c())
        {
          localObject = d.c;
          if ((localObject != null) && (((ColorStateList)localObject).isStateful())) {}
        }
      }
      else {
        return false;
      }
    }
    return true;
  }
  
  public Drawable mutate()
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      localDrawable.mutate();
      return this;
    }
    if ((!g) && (super.mutate() == this))
    {
      d = new h(d);
      g = true;
    }
    return this;
  }
  
  protected void onBoundsChange(Rect paramRect)
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      localDrawable.setBounds(paramRect);
    }
  }
  
  protected boolean onStateChange(int[] paramArrayOfInt)
  {
    Object localObject = c;
    if (localObject != null) {
      return ((Drawable)localObject).setState(paramArrayOfInt);
    }
    boolean bool2 = false;
    localObject = d;
    ColorStateList localColorStateList = c;
    boolean bool1 = bool2;
    if (localColorStateList != null)
    {
      PorterDuff.Mode localMode = d;
      bool1 = bool2;
      if (localMode != null)
      {
        e = a(e, localColorStateList, localMode);
        invalidateSelf();
        bool1 = true;
      }
    }
    bool2 = bool1;
    if (((h)localObject).c())
    {
      bool2 = bool1;
      if (((h)localObject).a(paramArrayOfInt))
      {
        invalidateSelf();
        bool2 = true;
      }
    }
    return bool2;
  }
  
  public void scheduleSelf(Runnable paramRunnable, long paramLong)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      localDrawable.scheduleSelf(paramRunnable, paramLong);
      return;
    }
    super.scheduleSelf(paramRunnable, paramLong);
  }
  
  public void setAlpha(int paramInt)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      localDrawable.setAlpha(paramInt);
      return;
    }
    if (d.b.getRootAlpha() != paramInt)
    {
      d.b.setRootAlpha(paramInt);
      invalidateSelf();
    }
  }
  
  public void setAutoMirrored(boolean paramBoolean)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      android.support.v4.graphics.drawable.a.a(localDrawable, paramBoolean);
      return;
    }
    d.e = paramBoolean;
  }
  
  public void setColorFilter(ColorFilter paramColorFilter)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      localDrawable.setColorFilter(paramColorFilter);
      return;
    }
    f = paramColorFilter;
    invalidateSelf();
  }
  
  public void setTint(int paramInt)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      android.support.v4.graphics.drawable.a.b(localDrawable, paramInt);
      return;
    }
    setTintList(ColorStateList.valueOf(paramInt));
  }
  
  public void setTintList(ColorStateList paramColorStateList)
  {
    Object localObject = c;
    if (localObject != null)
    {
      android.support.v4.graphics.drawable.a.a((Drawable)localObject, paramColorStateList);
      return;
    }
    localObject = d;
    if (c != paramColorStateList)
    {
      c = paramColorStateList;
      e = a(e, paramColorStateList, d);
      invalidateSelf();
    }
  }
  
  public void setTintMode(PorterDuff.Mode paramMode)
  {
    Object localObject = c;
    if (localObject != null)
    {
      android.support.v4.graphics.drawable.a.a((Drawable)localObject, paramMode);
      return;
    }
    localObject = d;
    if (d != paramMode)
    {
      d = paramMode;
      e = a(e, c, paramMode);
      invalidateSelf();
    }
  }
  
  public boolean setVisible(boolean paramBoolean1, boolean paramBoolean2)
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return localDrawable.setVisible(paramBoolean1, paramBoolean2);
    }
    return super.setVisible(paramBoolean1, paramBoolean2);
  }
  
  public void unscheduleSelf(Runnable paramRunnable)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      localDrawable.unscheduleSelf(paramRunnable);
      return;
    }
    super.unscheduleSelf(paramRunnable);
  }
  
  private static class b
    extends i.f
  {
    public b() {}
    
    public b(b paramB)
    {
      super();
    }
    
    private void a(TypedArray paramTypedArray)
    {
      String str = paramTypedArray.getString(0);
      if (str != null) {
        b = str;
      }
      paramTypedArray = paramTypedArray.getString(1);
      if (paramTypedArray != null) {
        a = a.b.g.a.b.a(paramTypedArray);
      }
    }
    
    public void a(Resources paramResources, AttributeSet paramAttributeSet, Resources.Theme paramTheme, XmlPullParser paramXmlPullParser)
    {
      if (!g.a(paramXmlPullParser, "pathData")) {
        return;
      }
      paramResources = g.a(paramResources, paramTheme, paramAttributeSet, a.d);
      a(paramResources);
      paramResources.recycle();
    }
    
    public boolean b()
    {
      return true;
    }
  }
  
  private static class c
    extends i.f
  {
    private int[] d;
    android.support.v4.content.e.b e;
    float f = 0.0F;
    android.support.v4.content.e.b g;
    float h = 1.0F;
    int i = 0;
    float j = 1.0F;
    float k = 0.0F;
    float l = 1.0F;
    float m = 0.0F;
    Paint.Cap n = Paint.Cap.BUTT;
    Paint.Join o = Paint.Join.MITER;
    float p = 4.0F;
    
    public c() {}
    
    public c(c paramC)
    {
      super();
      d = d;
      e = e;
      f = f;
      h = h;
      g = g;
      i = i;
      j = j;
      k = k;
      l = l;
      m = m;
      n = n;
      o = o;
      p = p;
    }
    
    private Paint.Cap a(int paramInt, Paint.Cap paramCap)
    {
      if (paramInt != 0)
      {
        if (paramInt != 1)
        {
          if (paramInt != 2) {
            return paramCap;
          }
          return Paint.Cap.SQUARE;
        }
        return Paint.Cap.ROUND;
      }
      return Paint.Cap.BUTT;
    }
    
    private Paint.Join a(int paramInt, Paint.Join paramJoin)
    {
      if (paramInt != 0)
      {
        if (paramInt != 1)
        {
          if (paramInt != 2) {
            return paramJoin;
          }
          return Paint.Join.BEVEL;
        }
        return Paint.Join.ROUND;
      }
      return Paint.Join.MITER;
    }
    
    private void a(TypedArray paramTypedArray, XmlPullParser paramXmlPullParser, Resources.Theme paramTheme)
    {
      d = null;
      if (!g.a(paramXmlPullParser, "pathData")) {
        return;
      }
      String str = paramTypedArray.getString(0);
      if (str != null) {
        b = str;
      }
      str = paramTypedArray.getString(2);
      if (str != null) {
        a = a.b.g.a.b.a(str);
      }
      g = g.a(paramTypedArray, paramXmlPullParser, paramTheme, "fillColor", 1, 0);
      j = g.a(paramTypedArray, paramXmlPullParser, "fillAlpha", 12, j);
      n = a(g.b(paramTypedArray, paramXmlPullParser, "strokeLineCap", 8, -1), n);
      o = a(g.b(paramTypedArray, paramXmlPullParser, "strokeLineJoin", 9, -1), o);
      p = g.a(paramTypedArray, paramXmlPullParser, "strokeMiterLimit", 10, p);
      e = g.a(paramTypedArray, paramXmlPullParser, paramTheme, "strokeColor", 3, 0);
      h = g.a(paramTypedArray, paramXmlPullParser, "strokeAlpha", 11, h);
      f = g.a(paramTypedArray, paramXmlPullParser, "strokeWidth", 4, f);
      l = g.a(paramTypedArray, paramXmlPullParser, "trimPathEnd", 6, l);
      m = g.a(paramTypedArray, paramXmlPullParser, "trimPathOffset", 7, m);
      k = g.a(paramTypedArray, paramXmlPullParser, "trimPathStart", 5, k);
      i = g.b(paramTypedArray, paramXmlPullParser, "fillType", 13, i);
    }
    
    public void a(Resources paramResources, AttributeSet paramAttributeSet, Resources.Theme paramTheme, XmlPullParser paramXmlPullParser)
    {
      paramResources = g.a(paramResources, paramTheme, paramAttributeSet, a.c);
      a(paramResources, paramXmlPullParser, paramTheme);
      paramResources.recycle();
    }
    
    public boolean a()
    {
      return (g.d()) || (e.d());
    }
    
    public boolean a(int[] paramArrayOfInt)
    {
      return g.a(paramArrayOfInt) | e.a(paramArrayOfInt);
    }
    
    float getFillAlpha()
    {
      return j;
    }
    
    int getFillColor()
    {
      return g.a();
    }
    
    float getStrokeAlpha()
    {
      return h;
    }
    
    int getStrokeColor()
    {
      return e.a();
    }
    
    float getStrokeWidth()
    {
      return f;
    }
    
    float getTrimPathEnd()
    {
      return l;
    }
    
    float getTrimPathOffset()
    {
      return m;
    }
    
    float getTrimPathStart()
    {
      return k;
    }
    
    void setFillAlpha(float paramFloat)
    {
      j = paramFloat;
    }
    
    void setFillColor(int paramInt)
    {
      g.a(paramInt);
    }
    
    void setStrokeAlpha(float paramFloat)
    {
      h = paramFloat;
    }
    
    void setStrokeColor(int paramInt)
    {
      e.a(paramInt);
    }
    
    void setStrokeWidth(float paramFloat)
    {
      f = paramFloat;
    }
    
    void setTrimPathEnd(float paramFloat)
    {
      l = paramFloat;
    }
    
    void setTrimPathOffset(float paramFloat)
    {
      m = paramFloat;
    }
    
    void setTrimPathStart(float paramFloat)
    {
      k = paramFloat;
    }
  }
  
  private static class d
    extends i.e
  {
    final Matrix a = new Matrix();
    final ArrayList<i.e> b = new ArrayList();
    float c = 0.0F;
    private float d = 0.0F;
    private float e = 0.0F;
    private float f = 1.0F;
    private float g = 1.0F;
    private float h = 0.0F;
    private float i = 0.0F;
    final Matrix j = new Matrix();
    int k;
    private int[] l;
    private String m = null;
    
    public d()
    {
      super();
    }
    
    public d(d paramD, a.b.g.g.a<String, Object> paramA)
    {
      super();
      c = c;
      d = d;
      e = e;
      f = f;
      g = g;
      h = h;
      i = i;
      l = l;
      m = m;
      k = k;
      Object localObject = m;
      if (localObject != null) {
        paramA.put(localObject, this);
      }
      j.set(j);
      localObject = b;
      int n = 0;
      while (n < ((ArrayList)localObject).size())
      {
        paramD = ((ArrayList)localObject).get(n);
        if ((paramD instanceof d))
        {
          paramD = (d)paramD;
          b.add(new d(paramD, paramA));
        }
        else
        {
          if ((paramD instanceof i.c))
          {
            paramD = new i.c((i.c)paramD);
          }
          else
          {
            if (!(paramD instanceof i.b)) {
              break label320;
            }
            paramD = new i.b((i.b)paramD);
          }
          b.add(paramD);
          String str = b;
          if (str != null) {
            paramA.put(str, paramD);
          }
        }
        n += 1;
        continue;
        label320:
        throw new IllegalStateException("Unknown object in the tree!");
      }
    }
    
    private void a(TypedArray paramTypedArray, XmlPullParser paramXmlPullParser)
    {
      l = null;
      c = g.a(paramTypedArray, paramXmlPullParser, "rotation", 5, c);
      d = paramTypedArray.getFloat(1, d);
      e = paramTypedArray.getFloat(2, e);
      f = g.a(paramTypedArray, paramXmlPullParser, "scaleX", 3, f);
      g = g.a(paramTypedArray, paramXmlPullParser, "scaleY", 4, g);
      h = g.a(paramTypedArray, paramXmlPullParser, "translateX", 6, h);
      i = g.a(paramTypedArray, paramXmlPullParser, "translateY", 7, i);
      paramTypedArray = paramTypedArray.getString(0);
      if (paramTypedArray != null) {
        m = paramTypedArray;
      }
      b();
    }
    
    private void b()
    {
      j.reset();
      j.postTranslate(-d, -e);
      j.postScale(f, g);
      j.postRotate(c, 0.0F, 0.0F);
      j.postTranslate(h + d, i + e);
    }
    
    public void a(Resources paramResources, AttributeSet paramAttributeSet, Resources.Theme paramTheme, XmlPullParser paramXmlPullParser)
    {
      paramResources = g.a(paramResources, paramTheme, paramAttributeSet, a.b);
      a(paramResources, paramXmlPullParser);
      paramResources.recycle();
    }
    
    public boolean a()
    {
      int n = 0;
      while (n < b.size())
      {
        if (((i.e)b.get(n)).a()) {
          return true;
        }
        n += 1;
      }
      return false;
    }
    
    public boolean a(int[] paramArrayOfInt)
    {
      boolean bool = false;
      int n = 0;
      while (n < b.size())
      {
        bool |= ((i.e)b.get(n)).a(paramArrayOfInt);
        n += 1;
      }
      return bool;
    }
    
    public String getGroupName()
    {
      return m;
    }
    
    public Matrix getLocalMatrix()
    {
      return j;
    }
    
    public float getPivotX()
    {
      return d;
    }
    
    public float getPivotY()
    {
      return e;
    }
    
    public float getRotation()
    {
      return c;
    }
    
    public float getScaleX()
    {
      return f;
    }
    
    public float getScaleY()
    {
      return g;
    }
    
    public float getTranslateX()
    {
      return h;
    }
    
    public float getTranslateY()
    {
      return i;
    }
    
    public void setPivotX(float paramFloat)
    {
      if (paramFloat != d)
      {
        d = paramFloat;
        b();
      }
    }
    
    public void setPivotY(float paramFloat)
    {
      if (paramFloat != e)
      {
        e = paramFloat;
        b();
      }
    }
    
    public void setRotation(float paramFloat)
    {
      if (paramFloat != c)
      {
        c = paramFloat;
        b();
      }
    }
    
    public void setScaleX(float paramFloat)
    {
      if (paramFloat != f)
      {
        f = paramFloat;
        b();
      }
    }
    
    public void setScaleY(float paramFloat)
    {
      if (paramFloat != g)
      {
        g = paramFloat;
        b();
      }
    }
    
    public void setTranslateX(float paramFloat)
    {
      if (paramFloat != h)
      {
        h = paramFloat;
        b();
      }
    }
    
    public void setTranslateY(float paramFloat)
    {
      if (paramFloat != i)
      {
        i = paramFloat;
        b();
      }
    }
  }
  
  private static abstract class e
  {
    private e() {}
    
    public boolean a()
    {
      return false;
    }
    
    public boolean a(int[] paramArrayOfInt)
    {
      return false;
    }
  }
  
  private static abstract class f
    extends i.e
  {
    protected b.b[] a = null;
    String b;
    int c;
    
    public f()
    {
      super();
    }
    
    public f(f paramF)
    {
      super();
      b = b;
      c = c;
      a = a.b.g.a.b.a(a);
    }
    
    public void a(Path paramPath)
    {
      paramPath.reset();
      b.b[] arrayOfB = a;
      if (arrayOfB != null) {
        b.b.a(arrayOfB, paramPath);
      }
    }
    
    public boolean b()
    {
      return false;
    }
    
    public b.b[] getPathData()
    {
      return a;
    }
    
    public String getPathName()
    {
      return b;
    }
    
    public void setPathData(b.b[] paramArrayOfB)
    {
      if (!a.b.g.a.b.a(a, paramArrayOfB))
      {
        a = a.b.g.a.b.a(paramArrayOfB);
        return;
      }
      a.b.g.a.b.b(a, paramArrayOfB);
    }
  }
  
  private static class g
  {
    private static final Matrix q = new Matrix();
    private final Path a;
    private final Path b;
    private final Matrix c = new Matrix();
    Paint d;
    Paint e;
    private PathMeasure f;
    private int g;
    final i.d h;
    float i = 0.0F;
    float j = 0.0F;
    float k = 0.0F;
    float l = 0.0F;
    int m = 255;
    String n = null;
    Boolean o = null;
    final a.b.g.g.a<String, Object> p = new a.b.g.g.a();
    
    public g()
    {
      h = new i.d();
      a = new Path();
      b = new Path();
    }
    
    public g(g paramG)
    {
      h = new i.d(h, p);
      a = new Path(a);
      b = new Path(b);
      i = i;
      j = j;
      k = k;
      l = l;
      g = g;
      m = m;
      n = n;
      String str = n;
      if (str != null) {
        p.put(str, this);
      }
      o = o;
    }
    
    private static float a(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
    {
      return paramFloat1 * paramFloat4 - paramFloat2 * paramFloat3;
    }
    
    private float a(Matrix paramMatrix)
    {
      float[] arrayOfFloat = new float[4];
      float[] tmp7_5 = arrayOfFloat;
      tmp7_5[0] = 0.0F;
      float[] tmp11_7 = tmp7_5;
      tmp11_7[1] = 1.0F;
      float[] tmp15_11 = tmp11_7;
      tmp15_11[2] = 1.0F;
      float[] tmp19_15 = tmp15_11;
      tmp19_15[3] = 0.0F;
      tmp19_15;
      paramMatrix.mapVectors(arrayOfFloat);
      float f1 = (float)Math.hypot(arrayOfFloat[0], arrayOfFloat[1]);
      float f3 = (float)Math.hypot(arrayOfFloat[2], arrayOfFloat[3]);
      float f2 = a(arrayOfFloat[0], arrayOfFloat[1], arrayOfFloat[2], arrayOfFloat[3]);
      f3 = Math.max(f1, f3);
      f1 = 0.0F;
      if (f3 > 0.0F) {
        f1 = Math.abs(f2) / f3;
      }
      return f1;
    }
    
    private void a(i.d paramD, i.f paramF, Canvas paramCanvas, int paramInt1, int paramInt2, ColorFilter paramColorFilter)
    {
      float f2 = paramInt1 / k;
      float f3 = paramInt2 / l;
      float f1 = Math.min(f2, f3);
      paramD = a;
      c.set(paramD);
      c.postScale(f2, f3);
      f2 = a(paramD);
      if (f2 == 0.0F) {
        return;
      }
      paramF.a(a);
      paramD = a;
      b.reset();
      if (paramF.b())
      {
        b.addPath(paramD, c);
        paramCanvas.clipPath(b);
        return;
      }
      paramF = (i.c)paramF;
      if ((k == 0.0F) && (l == 1.0F)) {
        break label290;
      }
      float f6 = k;
      float f4 = m;
      float f5 = l;
      if (f == null) {
        f = new PathMeasure();
      }
      f.setPath(a, false);
      f3 = f.getLength();
      f6 = (f6 + f4) % 1.0F * f3;
      f4 = (f5 + f4) % 1.0F * f3;
      paramD.reset();
      if (f6 > f4)
      {
        f.getSegment(f6, f3, paramD, true);
        f.getSegment(0.0F, f4, paramD, true);
      }
      else
      {
        f.getSegment(f6, f4, paramD, true);
      }
      paramD.rLineTo(0.0F, 0.0F);
      label290:
      b.addPath(paramD, c);
      Object localObject1;
      Object localObject2;
      if (g.e())
      {
        paramD = g;
        if (e == null)
        {
          e = new Paint(1);
          e.setStyle(Paint.Style.FILL);
        }
        localObject1 = e;
        if (paramD.c())
        {
          paramD = paramD.b();
          paramD.setLocalMatrix(c);
          ((Paint)localObject1).setShader(paramD);
          ((Paint)localObject1).setAlpha(Math.round(j * 255.0F));
        }
        else
        {
          ((Paint)localObject1).setColor(i.a(paramD.a(), j));
        }
        ((Paint)localObject1).setColorFilter(paramColorFilter);
        localObject2 = b;
        if (i == 0) {
          paramD = Path.FillType.WINDING;
        } else {
          paramD = Path.FillType.EVEN_ODD;
        }
        ((Path)localObject2).setFillType(paramD);
        paramCanvas.drawPath(b, (Paint)localObject1);
      }
      if (e.e())
      {
        localObject1 = e;
        if (d == null)
        {
          d = new Paint(1);
          d.setStyle(Paint.Style.STROKE);
        }
        paramD = d;
        localObject2 = o;
        if (localObject2 != null) {
          paramD.setStrokeJoin((Paint.Join)localObject2);
        }
        localObject2 = n;
        if (localObject2 != null) {
          paramD.setStrokeCap((Paint.Cap)localObject2);
        }
        paramD.setStrokeMiter(p);
        if (((android.support.v4.content.e.b)localObject1).c())
        {
          localObject1 = ((android.support.v4.content.e.b)localObject1).b();
          ((Shader)localObject1).setLocalMatrix(c);
          paramD.setShader((Shader)localObject1);
          paramD.setAlpha(Math.round(h * 255.0F));
        }
        else
        {
          paramD.setColor(i.a(((android.support.v4.content.e.b)localObject1).a(), h));
        }
        paramD.setColorFilter(paramColorFilter);
        paramD.setStrokeWidth(f * (f1 * f2));
        paramCanvas.drawPath(b, paramD);
      }
    }
    
    private void a(i.d paramD, Matrix paramMatrix, Canvas paramCanvas, int paramInt1, int paramInt2, ColorFilter paramColorFilter)
    {
      a.set(paramMatrix);
      a.preConcat(j);
      paramCanvas.save();
      int i1 = 0;
      while (i1 < b.size())
      {
        paramMatrix = (i.e)b.get(i1);
        if ((paramMatrix instanceof i.d)) {
          a((i.d)paramMatrix, a, paramCanvas, paramInt1, paramInt2, paramColorFilter);
        } else if ((paramMatrix instanceof i.f)) {
          a(paramD, (i.f)paramMatrix, paramCanvas, paramInt1, paramInt2, paramColorFilter);
        }
        i1 += 1;
      }
      paramCanvas.restore();
    }
    
    public void a(Canvas paramCanvas, int paramInt1, int paramInt2, ColorFilter paramColorFilter)
    {
      a(h, q, paramCanvas, paramInt1, paramInt2, paramColorFilter);
    }
    
    public boolean a()
    {
      if (o == null) {
        o = Boolean.valueOf(h.a());
      }
      return o.booleanValue();
    }
    
    public boolean a(int[] paramArrayOfInt)
    {
      return h.a(paramArrayOfInt);
    }
    
    public float getAlpha()
    {
      return getRootAlpha() / 255.0F;
    }
    
    public int getRootAlpha()
    {
      return m;
    }
    
    public void setAlpha(float paramFloat)
    {
      setRootAlpha((int)(255.0F * paramFloat));
    }
    
    public void setRootAlpha(int paramInt)
    {
      m = paramInt;
    }
  }
  
  private static class h
    extends Drawable.ConstantState
  {
    int a;
    i.g b;
    ColorStateList c = null;
    PorterDuff.Mode d = i.l;
    boolean e;
    Bitmap f;
    ColorStateList g;
    PorterDuff.Mode h;
    int i;
    boolean j;
    boolean k;
    Paint l;
    
    public h()
    {
      b = new i.g();
    }
    
    public h(h paramH)
    {
      if (paramH != null)
      {
        a = a;
        b = new i.g(b);
        Paint localPaint = b.e;
        if (localPaint != null) {
          b.e = new Paint(localPaint);
        }
        localPaint = b.d;
        if (localPaint != null) {
          b.d = new Paint(localPaint);
        }
        c = c;
        d = d;
        e = e;
      }
    }
    
    public Paint a(ColorFilter paramColorFilter)
    {
      if ((!b()) && (paramColorFilter == null)) {
        return null;
      }
      if (l == null)
      {
        l = new Paint();
        l.setFilterBitmap(true);
      }
      l.setAlpha(b.getRootAlpha());
      l.setColorFilter(paramColorFilter);
      return l;
    }
    
    public void a(Canvas paramCanvas, ColorFilter paramColorFilter, Rect paramRect)
    {
      paramColorFilter = a(paramColorFilter);
      paramCanvas.drawBitmap(f, null, paramRect, paramColorFilter);
    }
    
    public boolean a()
    {
      return (!k) && (g == c) && (h == d) && (j == e) && (i == b.getRootAlpha());
    }
    
    public boolean a(int paramInt1, int paramInt2)
    {
      return (paramInt1 == f.getWidth()) && (paramInt2 == f.getHeight());
    }
    
    public boolean a(int[] paramArrayOfInt)
    {
      boolean bool = b.a(paramArrayOfInt);
      k |= bool;
      return bool;
    }
    
    public void b(int paramInt1, int paramInt2)
    {
      if ((f == null) || (!a(paramInt1, paramInt2)))
      {
        f = Bitmap.createBitmap(paramInt1, paramInt2, Bitmap.Config.ARGB_8888);
        k = true;
      }
    }
    
    public boolean b()
    {
      return b.getRootAlpha() < 255;
    }
    
    public void c(int paramInt1, int paramInt2)
    {
      f.eraseColor(0);
      Canvas localCanvas = new Canvas(f);
      b.a(localCanvas, paramInt1, paramInt2, null);
    }
    
    public boolean c()
    {
      return b.a();
    }
    
    public void d()
    {
      g = c;
      h = d;
      i = b.getRootAlpha();
      j = e;
      k = false;
    }
    
    public int getChangingConfigurations()
    {
      return a;
    }
    
    public Drawable newDrawable()
    {
      return new i(this);
    }
    
    public Drawable newDrawable(Resources paramResources)
    {
      return new i(this);
    }
  }
  
  private static class i
    extends Drawable.ConstantState
  {
    private final Drawable.ConstantState a;
    
    public i(Drawable.ConstantState paramConstantState)
    {
      a = paramConstantState;
    }
    
    public boolean canApplyTheme()
    {
      return a.canApplyTheme();
    }
    
    public int getChangingConfigurations()
    {
      return a.getChangingConfigurations();
    }
    
    public Drawable newDrawable()
    {
      i localI = new i();
      c = ((VectorDrawable)a.newDrawable());
      return localI;
    }
    
    public Drawable newDrawable(Resources paramResources)
    {
      i localI = new i();
      c = ((VectorDrawable)a.newDrawable(paramResources));
      return localI;
    }
    
    public Drawable newDrawable(Resources paramResources, Resources.Theme paramTheme)
    {
      i localI = new i();
      c = ((VectorDrawable)a.newDrawable(paramResources, paramTheme));
      return localI;
    }
  }
}
