package a.b.d.a;

import a.b.g.g.n;
import android.animation.Animator;
import android.animation.AnimatorSet;
import android.animation.ArgbEvaluator;
import android.animation.ObjectAnimator;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.PorterDuff.Mode;
import android.graphics.Rect;
import android.graphics.drawable.AnimatedVectorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Drawable.Callback;
import android.graphics.drawable.Drawable.ConstantState;
import android.os.Build.VERSION;
import android.support.v4.content.e.g;
import android.util.AttributeSet;
import java.util.ArrayList;
import java.util.List;
import org.xmlpull.v1.XmlPullParser;

public class c
  extends h
  implements b
{
  private b d;
  private Context e;
  private ArgbEvaluator f = null;
  final Drawable.Callback g = new a();
  
  c()
  {
    this(null, null, null);
  }
  
  private c(Context paramContext)
  {
    this(paramContext, null, null);
  }
  
  private c(Context paramContext, b paramB, Resources paramResources)
  {
    e = paramContext;
    if (paramB != null)
    {
      d = paramB;
      return;
    }
    d = new b(paramContext, paramB, g, paramResources);
  }
  
  public static c a(Context paramContext, Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme)
  {
    paramContext = new c(paramContext);
    paramContext.inflate(paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
    return paramContext;
  }
  
  private void a(Animator paramAnimator)
  {
    Object localObject;
    if ((paramAnimator instanceof AnimatorSet))
    {
      localObject = ((AnimatorSet)paramAnimator).getChildAnimations();
      if (localObject != null)
      {
        int i = 0;
        while (i < ((List)localObject).size())
        {
          a((Animator)((List)localObject).get(i));
          i += 1;
        }
      }
    }
    if ((paramAnimator instanceof ObjectAnimator))
    {
      paramAnimator = (ObjectAnimator)paramAnimator;
      localObject = paramAnimator.getPropertyName();
      if (("fillColor".equals(localObject)) || ("strokeColor".equals(localObject)))
      {
        if (f == null) {
          f = new ArgbEvaluator();
        }
        paramAnimator.setEvaluator(f);
      }
    }
  }
  
  private void a(String paramString, Animator paramAnimator)
  {
    paramAnimator.setTarget(d.b.a(paramString));
    if (Build.VERSION.SDK_INT < 21) {
      a(paramAnimator);
    }
    b localB = d;
    if (d == null)
    {
      d = new ArrayList();
      d.e = new a.b.g.g.a();
    }
    d.d.add(paramAnimator);
    d.e.put(paramAnimator, paramString);
  }
  
  public void applyTheme(Resources.Theme paramTheme)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      android.support.v4.graphics.drawable.a.a(localDrawable, paramTheme);
      return;
    }
  }
  
  public boolean canApplyTheme()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return android.support.v4.graphics.drawable.a.a(localDrawable);
    }
    return false;
  }
  
  public void draw(Canvas paramCanvas)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      localDrawable.draw(paramCanvas);
      return;
    }
    d.b.draw(paramCanvas);
    if (d.c.isStarted()) {
      invalidateSelf();
    }
  }
  
  public int getAlpha()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return android.support.v4.graphics.drawable.a.c(localDrawable);
    }
    return d.b.getAlpha();
  }
  
  public int getChangingConfigurations()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return localDrawable.getChangingConfigurations();
    }
    return super.getChangingConfigurations() | d.a;
  }
  
  public Drawable.ConstantState getConstantState()
  {
    Drawable localDrawable = c;
    if ((localDrawable != null) && (Build.VERSION.SDK_INT >= 24)) {
      return new c(localDrawable.getConstantState());
    }
    return null;
  }
  
  public int getIntrinsicHeight()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return localDrawable.getIntrinsicHeight();
    }
    return d.b.getIntrinsicHeight();
  }
  
  public int getIntrinsicWidth()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return localDrawable.getIntrinsicWidth();
    }
    return d.b.getIntrinsicWidth();
  }
  
  public int getOpacity()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return localDrawable.getOpacity();
    }
    return d.b.getOpacity();
  }
  
  public void inflate(Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet)
  {
    inflate(paramResources, paramXmlPullParser, paramAttributeSet, null);
  }
  
  public void inflate(Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme)
  {
    Object localObject1 = c;
    if (localObject1 != null)
    {
      android.support.v4.graphics.drawable.a.a((Drawable)localObject1, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
      return;
    }
    int i = paramXmlPullParser.getEventType();
    int j = paramXmlPullParser.getDepth();
    while ((i != 1) && ((paramXmlPullParser.getDepth() >= j + 1) || (i != 3)))
    {
      if (i == 2)
      {
        localObject1 = paramXmlPullParser.getName();
        Object localObject2;
        Object localObject3;
        if ("animated-vector".equals(localObject1))
        {
          localObject1 = g.a(paramResources, paramTheme, paramAttributeSet, a.e);
          i = ((TypedArray)localObject1).getResourceId(0, 0);
          if (i != 0)
          {
            localObject2 = i.a(paramResources, i, paramTheme);
            ((i)localObject2).a(false);
            ((Drawable)localObject2).setCallback(g);
            localObject3 = d.b;
            if (localObject3 != null) {
              ((Drawable)localObject3).setCallback(null);
            }
            d.b = ((i)localObject2);
          }
          ((TypedArray)localObject1).recycle();
        }
        else if ("target".equals(localObject1))
        {
          localObject1 = paramResources.obtainAttributes(paramAttributeSet, a.f);
          localObject2 = ((TypedArray)localObject1).getString(0);
          i = ((TypedArray)localObject1).getResourceId(1, 0);
          if (i != 0)
          {
            localObject3 = e;
            if (localObject3 != null)
            {
              a((String)localObject2, e.a((Context)localObject3, i));
            }
            else
            {
              ((TypedArray)localObject1).recycle();
              throw new IllegalStateException("Context can't be null when inflating animators");
            }
          }
          ((TypedArray)localObject1).recycle();
        }
      }
      i = paramXmlPullParser.next();
    }
    d.a();
  }
  
  public boolean isAutoMirrored()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return android.support.v4.graphics.drawable.a.f(localDrawable);
    }
    return d.b.isAutoMirrored();
  }
  
  public boolean isRunning()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return ((AnimatedVectorDrawable)localDrawable).isRunning();
    }
    return d.c.isRunning();
  }
  
  public boolean isStateful()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return localDrawable.isStateful();
    }
    return d.b.isStateful();
  }
  
  public Drawable mutate()
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      localDrawable.mutate();
    }
    return this;
  }
  
  protected void onBoundsChange(Rect paramRect)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      localDrawable.setBounds(paramRect);
      return;
    }
    d.b.setBounds(paramRect);
  }
  
  protected boolean onLevelChange(int paramInt)
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return localDrawable.setLevel(paramInt);
    }
    return d.b.setLevel(paramInt);
  }
  
  protected boolean onStateChange(int[] paramArrayOfInt)
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return localDrawable.setState(paramArrayOfInt);
    }
    return d.b.setState(paramArrayOfInt);
  }
  
  public void setAlpha(int paramInt)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      localDrawable.setAlpha(paramInt);
      return;
    }
    d.b.setAlpha(paramInt);
  }
  
  public void setAutoMirrored(boolean paramBoolean)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      android.support.v4.graphics.drawable.a.a(localDrawable, paramBoolean);
      return;
    }
    d.b.setAutoMirrored(paramBoolean);
  }
  
  public void setColorFilter(ColorFilter paramColorFilter)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      localDrawable.setColorFilter(paramColorFilter);
      return;
    }
    d.b.setColorFilter(paramColorFilter);
  }
  
  public void setTint(int paramInt)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      android.support.v4.graphics.drawable.a.b(localDrawable, paramInt);
      return;
    }
    d.b.setTint(paramInt);
  }
  
  public void setTintList(ColorStateList paramColorStateList)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      android.support.v4.graphics.drawable.a.a(localDrawable, paramColorStateList);
      return;
    }
    d.b.setTintList(paramColorStateList);
  }
  
  public void setTintMode(PorterDuff.Mode paramMode)
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      android.support.v4.graphics.drawable.a.a(localDrawable, paramMode);
      return;
    }
    d.b.setTintMode(paramMode);
  }
  
  public boolean setVisible(boolean paramBoolean1, boolean paramBoolean2)
  {
    Drawable localDrawable = c;
    if (localDrawable != null) {
      return localDrawable.setVisible(paramBoolean1, paramBoolean2);
    }
    d.b.setVisible(paramBoolean1, paramBoolean2);
    return super.setVisible(paramBoolean1, paramBoolean2);
  }
  
  public void start()
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      ((AnimatedVectorDrawable)localDrawable).start();
      return;
    }
    if (d.c.isStarted()) {
      return;
    }
    d.c.start();
    invalidateSelf();
  }
  
  public void stop()
  {
    Drawable localDrawable = c;
    if (localDrawable != null)
    {
      ((AnimatedVectorDrawable)localDrawable).stop();
      return;
    }
    d.c.end();
  }
  
  class a
    implements Drawable.Callback
  {
    a() {}
    
    public void invalidateDrawable(Drawable paramDrawable)
    {
      invalidateSelf();
    }
    
    public void scheduleDrawable(Drawable paramDrawable, Runnable paramRunnable, long paramLong)
    {
      scheduleSelf(paramRunnable, paramLong);
    }
    
    public void unscheduleDrawable(Drawable paramDrawable, Runnable paramRunnable)
    {
      unscheduleSelf(paramRunnable);
    }
  }
  
  private static class b
    extends Drawable.ConstantState
  {
    int a;
    i b;
    AnimatorSet c;
    ArrayList<Animator> d;
    a.b.g.g.a<Animator, String> e;
    
    public b(Context paramContext, b paramB, Drawable.Callback paramCallback, Resources paramResources)
    {
      if (paramB != null)
      {
        a = a;
        paramContext = b;
        if (paramContext != null)
        {
          paramContext = paramContext.getConstantState();
          if (paramResources != null) {
            b = ((i)paramContext.newDrawable(paramResources));
          } else {
            b = ((i)paramContext.newDrawable());
          }
          paramContext = b;
          paramContext.mutate();
          b = ((i)paramContext);
          b.setCallback(paramCallback);
          b.setBounds(b.getBounds());
          b.a(false);
        }
        paramContext = d;
        if (paramContext != null)
        {
          int j = paramContext.size();
          d = new ArrayList(j);
          e = new a.b.g.g.a(j);
          int i = 0;
          while (i < j)
          {
            paramCallback = (Animator)d.get(i);
            paramContext = paramCallback.clone();
            paramCallback = (String)e.get(paramCallback);
            paramContext.setTarget(b.a(paramCallback));
            d.add(paramContext);
            e.put(paramContext, paramCallback);
            i += 1;
          }
          a();
        }
      }
    }
    
    public void a()
    {
      if (c == null) {
        c = new AnimatorSet();
      }
      c.playTogether(d);
    }
    
    public int getChangingConfigurations()
    {
      return a;
    }
    
    public Drawable newDrawable()
    {
      throw new IllegalStateException("No constant state support for SDK < 24.");
    }
    
    public Drawable newDrawable(Resources paramResources)
    {
      throw new IllegalStateException("No constant state support for SDK < 24.");
    }
  }
  
  private static class c
    extends Drawable.ConstantState
  {
    private final Drawable.ConstantState a;
    
    public c(Drawable.ConstantState paramConstantState)
    {
      a = paramConstantState;
    }
    
    public boolean canApplyTheme()
    {
      return a.canApplyTheme();
    }
    
    public int getChangingConfigurations()
    {
      return a.getChangingConfigurations();
    }
    
    public Drawable newDrawable()
    {
      c localC = new c();
      c = a.newDrawable();
      c.setCallback(g);
      return localC;
    }
    
    public Drawable newDrawable(Resources paramResources)
    {
      c localC = new c();
      c = a.newDrawable(paramResources);
      c.setCallback(g);
      return localC;
    }
    
    public Drawable newDrawable(Resources paramResources, Resources.Theme paramTheme)
    {
      c localC = new c();
      c = a.newDrawable(paramResources, paramTheme);
      c.setCallback(g);
      return localC;
    }
  }
}
