package a.b.g.e;

import android.os.Handler;
import android.os.Handler.Callback;
import android.os.HandlerThread;
import android.os.Message;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class c
{
  private final Object a = new Object();
  private HandlerThread b;
  private Handler c;
  private int d;
  private Handler.Callback e = new a();
  private final int f;
  private final int g;
  private final String h;
  
  public c(String paramString, int paramInt1, int paramInt2)
  {
    h = paramString;
    g = paramInt1;
    f = paramInt2;
    d = 0;
  }
  
  private void b(Runnable paramRunnable)
  {
    synchronized (a)
    {
      if (b == null)
      {
        b = new HandlerThread(h, g);
        b.start();
        c = new Handler(b.getLooper(), e);
        d += 1;
      }
      c.removeMessages(0);
      c.sendMessage(c.obtainMessage(1, paramRunnable));
      return;
    }
  }
  
  public <T> T a(final Callable<T> paramCallable, int paramInt)
  {
    final ReentrantLock localReentrantLock = new ReentrantLock();
    final Condition localCondition = localReentrantLock.newCondition();
    final AtomicReference localAtomicReference = new AtomicReference();
    final AtomicBoolean localAtomicBoolean = new AtomicBoolean(true);
    b(new c(localAtomicReference, paramCallable, localReentrantLock, localAtomicBoolean, localCondition));
    localReentrantLock.lock();
    try
    {
      if (!localAtomicBoolean.get())
      {
        paramCallable = localAtomicReference.get();
        localReentrantLock.unlock();
        return paramCallable;
      }
      long l1 = TimeUnit.MILLISECONDS.toNanos(paramInt);
      do
      {
        try
        {
          long l2 = localCondition.awaitNanos(l1);
          l1 = l2;
        }
        catch (InterruptedException paramCallable) {}
        if (!localAtomicBoolean.get())
        {
          paramCallable = localAtomicReference.get();
          localReentrantLock.unlock();
          return paramCallable;
        }
      } while (l1 > 0L);
      throw new InterruptedException("timeout");
    }
    finally
    {
      localReentrantLock.unlock();
    }
    for (;;)
    {
      throw paramCallable;
    }
  }
  
  void a()
  {
    synchronized (a)
    {
      if (c.hasMessages(1)) {
        return;
      }
      b.quit();
      b = null;
      c = null;
      return;
    }
  }
  
  void a(Runnable arg1)
  {
    ???.run();
    synchronized (a)
    {
      c.removeMessages(0);
      c.sendMessageDelayed(c.obtainMessage(0), f);
      return;
    }
  }
  
  public <T> void a(final Callable<T> paramCallable, final d<T> paramD)
  {
    b(new b(paramCallable, new Handler(), paramD));
  }
  
  class a
    implements Handler.Callback
  {
    a() {}
    
    public boolean handleMessage(Message paramMessage)
    {
      int i = what;
      if (i != 0)
      {
        if (i != 1) {
          return true;
        }
        a((Runnable)obj);
        return true;
      }
      a();
      return true;
    }
  }
  
  class b
    implements Runnable
  {
    b(Callable paramCallable, Handler paramHandler, c.d paramD) {}
    
    public void run()
    {
      final Object localObject2;
      try
      {
        Object localObject1 = paramCallable.call();
      }
      catch (Exception localException)
      {
        localObject2 = null;
      }
      d.post(new a(localObject2));
    }
    
    class a
      implements Runnable
    {
      a(Object paramObject) {}
      
      public void run()
      {
        e.a(localObject2);
      }
    }
  }
  
  class c
    implements Runnable
  {
    c(AtomicReference paramAtomicReference, Callable paramCallable, ReentrantLock paramReentrantLock, AtomicBoolean paramAtomicBoolean, Condition paramCondition) {}
    
    public void run()
    {
      try
      {
        localAtomicReference.set(paramCallable.call());
      }
      catch (Exception localException) {}
      localReentrantLock.lock();
      try
      {
        localAtomicBoolean.set(false);
        localCondition.signal();
        return;
      }
      finally
      {
        localReentrantLock.unlock();
      }
    }
  }
  
  public static abstract interface d<T>
  {
    public abstract void a(T paramT);
  }
}
