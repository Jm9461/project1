package a.b.g.g;

import java.util.ConcurrentModificationException;
import java.util.Map;

public class n<K, V>
{
  static Object[] f;
  static int g;
  static Object[] h;
  static int i;
  int[] c;
  Object[] d;
  int e;
  
  public n()
  {
    c = c.a;
    d = c.c;
    e = 0;
  }
  
  public n(int paramInt)
  {
    if (paramInt == 0)
    {
      c = c.a;
      d = c.c;
    }
    else
    {
      e(paramInt);
    }
    e = 0;
  }
  
  public n(n<K, V> paramN)
  {
    this();
    if (paramN != null) {
      a(paramN);
    }
  }
  
  private static int a(int[] paramArrayOfInt, int paramInt1, int paramInt2)
  {
    try
    {
      paramInt1 = c.a(paramArrayOfInt, paramInt1, paramInt2);
      return paramInt1;
    }
    catch (ArrayIndexOutOfBoundsException paramArrayOfInt)
    {
      throw new ConcurrentModificationException();
    }
  }
  
  private static void a(int[] paramArrayOfInt, Object[] paramArrayOfObject, int paramInt)
  {
    if (paramArrayOfInt.length == 8) {
      try
      {
        if (i < 10)
        {
          paramArrayOfObject[0] = h;
          paramArrayOfObject[1] = paramArrayOfInt;
          paramInt = (paramInt << 1) - 1;
          break label118;
          h = paramArrayOfObject;
          i += 1;
        }
        return;
      }
      finally {}
    }
    if (paramArrayOfInt.length == 4) {}
    for (;;)
    {
      try
      {
        if (g < 10)
        {
          paramArrayOfObject[0] = f;
          paramArrayOfObject[1] = paramArrayOfInt;
          paramInt = (paramInt << 1) - 1;
          break label134;
          f = paramArrayOfObject;
          g += 1;
        }
        return;
      }
      finally {}
      return;
      label118:
      while (paramInt >= 2)
      {
        paramArrayOfObject[paramInt] = null;
        paramInt -= 1;
      }
      break;
      label134:
      while (paramInt >= 2)
      {
        paramArrayOfObject[paramInt] = null;
        paramInt -= 1;
      }
    }
  }
  
  private void e(int paramInt)
  {
    if (paramInt == 8) {
      try
      {
        if (h != null)
        {
          Object[] arrayOfObject1 = h;
          d = arrayOfObject1;
          h = (Object[])arrayOfObject1[0];
          c = ((int[])arrayOfObject1[1]);
          arrayOfObject1[1] = null;
          arrayOfObject1[0] = null;
          i -= 1;
          return;
        }
      }
      finally {}
    }
    if (paramInt == 4) {
      try
      {
        if (f != null)
        {
          Object[] arrayOfObject2 = f;
          d = arrayOfObject2;
          f = (Object[])arrayOfObject2[0];
          c = ((int[])arrayOfObject2[1]);
          arrayOfObject2[1] = null;
          arrayOfObject2[0] = null;
          g -= 1;
          return;
        }
      }
      finally {}
    }
    c = new int[paramInt];
    d = new Object[paramInt << 1];
  }
  
  int a()
  {
    int k = e;
    if (k == 0) {
      return -1;
    }
    int m = a(c, k, 0);
    if (m < 0) {
      return m;
    }
    if (d[(m << 1)] == null) {
      return m;
    }
    int j = m + 1;
    while ((j < k) && (c[j] == 0))
    {
      if (d[(j << 1)] == null) {
        return j;
      }
      j += 1;
    }
    k = m - 1;
    while ((k >= 0) && (c[k] == 0))
    {
      if (d[(k << 1)] == null) {
        return k;
      }
      k -= 1;
    }
    return j ^ 0xFFFFFFFF;
  }
  
  public int a(Object paramObject)
  {
    if (paramObject == null) {
      return a();
    }
    return a(paramObject, paramObject.hashCode());
  }
  
  int a(Object paramObject, int paramInt)
  {
    int k = e;
    if (k == 0) {
      return -1;
    }
    int m = a(c, k, paramInt);
    if (m < 0) {
      return m;
    }
    if (paramObject.equals(d[(m << 1)])) {
      return m;
    }
    int j = m + 1;
    while ((j < k) && (c[j] == paramInt))
    {
      if (paramObject.equals(d[(j << 1)])) {
        return j;
      }
      j += 1;
    }
    k = m - 1;
    while ((k >= 0) && (c[k] == paramInt))
    {
      if (paramObject.equals(d[(k << 1)])) {
        return k;
      }
      k -= 1;
    }
    return j ^ 0xFFFFFFFF;
  }
  
  public V a(int paramInt, V paramV)
  {
    paramInt = (paramInt << 1) + 1;
    Object[] arrayOfObject = d;
    Object localObject = arrayOfObject[paramInt];
    arrayOfObject[paramInt] = paramV;
    return localObject;
  }
  
  public void a(int paramInt)
  {
    int j = e;
    if (c.length < paramInt)
    {
      int[] arrayOfInt = c;
      Object[] arrayOfObject = d;
      e(paramInt);
      if (e > 0)
      {
        System.arraycopy(arrayOfInt, 0, c, 0, j);
        System.arraycopy(arrayOfObject, 0, d, 0, j << 1);
      }
      a(arrayOfInt, arrayOfObject, j);
    }
    if (e == j) {
      return;
    }
    throw new ConcurrentModificationException();
  }
  
  public void a(n<? extends K, ? extends V> paramN)
  {
    int k = e;
    a(e + k);
    if (e == 0)
    {
      if (k > 0)
      {
        System.arraycopy(c, 0, c, 0, k);
        System.arraycopy(d, 0, d, 0, k << 1);
        e = k;
      }
    }
    else
    {
      int j = 0;
      while (j < k)
      {
        put(paramN.b(j), paramN.d(j));
        j += 1;
      }
    }
  }
  
  int b(Object paramObject)
  {
    int k = e * 2;
    Object[] arrayOfObject = d;
    int j;
    if (paramObject == null)
    {
      j = 1;
      while (j < k)
      {
        if (arrayOfObject[j] == null) {
          return j >> 1;
        }
        j += 2;
      }
    }
    else
    {
      j = 1;
      while (j < k)
      {
        if (paramObject.equals(arrayOfObject[j])) {
          return j >> 1;
        }
        j += 2;
      }
    }
    return -1;
  }
  
  public K b(int paramInt)
  {
    return d[(paramInt << 1)];
  }
  
  public V c(int paramInt)
  {
    Object localObject = d;
    V ? = localObject[((paramInt << 1) + 1)];
    int m = e;
    if (m <= 1)
    {
      a(c, (Object[])localObject, m);
      c = c.a;
      d = c.c;
      paramInt = 0;
    }
    else
    {
      int k = m - 1;
      localObject = c;
      int n = localObject.length;
      int j = 8;
      if ((n > 8) && (e < localObject.length / 3))
      {
        if (m > 8) {
          j = m + (m >> 1);
        }
        localObject = c;
        Object[] arrayOfObject = d;
        e(j);
        if (m == e)
        {
          if (paramInt > 0)
          {
            System.arraycopy(localObject, 0, c, 0, paramInt);
            System.arraycopy(arrayOfObject, 0, d, 0, paramInt << 1);
          }
          if (paramInt < k)
          {
            System.arraycopy(localObject, paramInt + 1, c, paramInt, k - paramInt);
            System.arraycopy(arrayOfObject, paramInt + 1 << 1, d, paramInt << 1, k - paramInt << 1);
          }
          paramInt = k;
        }
        else
        {
          throw new ConcurrentModificationException();
        }
      }
      else
      {
        if (paramInt < k)
        {
          localObject = c;
          System.arraycopy(localObject, paramInt + 1, localObject, paramInt, k - paramInt);
          localObject = d;
          System.arraycopy(localObject, paramInt + 1 << 1, localObject, paramInt << 1, k - paramInt << 1);
        }
        localObject = d;
        localObject[(k << 1)] = null;
        localObject[((k << 1) + 1)] = null;
        paramInt = k;
      }
    }
    if (m == e)
    {
      e = paramInt;
      return ?;
    }
    throw new ConcurrentModificationException();
  }
  
  public void clear()
  {
    if (e > 0)
    {
      int[] arrayOfInt = c;
      Object[] arrayOfObject = d;
      int j = e;
      c = c.a;
      d = c.c;
      e = 0;
      a(arrayOfInt, arrayOfObject, j);
    }
    if (e <= 0) {
      return;
    }
    throw new ConcurrentModificationException();
  }
  
  public boolean containsKey(Object paramObject)
  {
    return a(paramObject) >= 0;
  }
  
  public boolean containsValue(Object paramObject)
  {
    return b(paramObject) >= 0;
  }
  
  public V d(int paramInt)
  {
    return d[((paramInt << 1) + 1)];
  }
  
  public boolean equals(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    int j;
    Object localObject1;
    Object localObject2;
    Object localObject3;
    boolean bool;
    if ((paramObject instanceof n))
    {
      paramObject = (n)paramObject;
      if (size() != paramObject.size()) {
        return false;
      }
      j = 0;
      try
      {
        while (j < e)
        {
          localObject1 = b(j);
          localObject2 = d(j);
          localObject3 = paramObject.get(localObject1);
          if (localObject2 == null)
          {
            if (localObject3 != null) {
              break label229;
            }
            if (!paramObject.containsKey(localObject1)) {
              return false;
            }
          }
          else
          {
            bool = localObject2.equals(localObject3);
            if (!bool) {
              return false;
            }
          }
          j += 1;
        }
        return true;
      }
      catch (ClassCastException paramObject)
      {
        return false;
      }
      catch (NullPointerException paramObject)
      {
        return false;
      }
    }
    if ((paramObject instanceof Map))
    {
      paramObject = (Map)paramObject;
      if (size() != paramObject.size()) {
        return false;
      }
      j = 0;
      try
      {
        while (j < e)
        {
          localObject1 = b(j);
          localObject2 = d(j);
          localObject3 = paramObject.get(localObject1);
          if (localObject2 == null)
          {
            if (localObject3 != null) {
              break label231;
            }
            if (!paramObject.containsKey(localObject1)) {
              return false;
            }
          }
          else
          {
            bool = localObject2.equals(localObject3);
            if (!bool) {
              return false;
            }
          }
          j += 1;
        }
        return true;
      }
      catch (ClassCastException paramObject)
      {
        return false;
      }
      catch (NullPointerException paramObject)
      {
        return false;
      }
    }
    return false;
    label229:
    return false;
    label231:
    return false;
  }
  
  public V get(Object paramObject)
  {
    int j = a(paramObject);
    if (j >= 0) {
      return d[((j << 1) + 1)];
    }
    return null;
  }
  
  public int hashCode()
  {
    int[] arrayOfInt = c;
    Object[] arrayOfObject = d;
    int m = 0;
    int k = 0;
    int j = 1;
    int i1 = e;
    while (k < i1)
    {
      Object localObject = arrayOfObject[j];
      int i2 = arrayOfInt[k];
      int n;
      if (localObject == null) {
        n = 0;
      } else {
        n = localObject.hashCode();
      }
      m += (i2 ^ n);
      k += 1;
      j += 2;
    }
    return m;
  }
  
  public boolean isEmpty()
  {
    return e <= 0;
  }
  
  public V put(K paramK, V paramV)
  {
    int m = e;
    int k;
    if (paramK == null)
    {
      k = 0;
      j = a();
    }
    else
    {
      k = paramK.hashCode();
      j = a(paramK, k);
    }
    Object localObject;
    if (j >= 0)
    {
      j = (j << 1) + 1;
      paramK = d;
      localObject = paramK[j];
      paramK[j] = paramV;
      return localObject;
    }
    int n = j ^ 0xFFFFFFFF;
    if (m >= c.length)
    {
      j = 4;
      if (m >= 8) {
        j = (m >> 1) + m;
      } else if (m >= 4) {
        j = 8;
      }
      localObject = c;
      Object[] arrayOfObject = d;
      e(j);
      if (m == e)
      {
        int[] arrayOfInt = c;
        if (arrayOfInt.length > 0)
        {
          System.arraycopy(localObject, 0, arrayOfInt, 0, localObject.length);
          System.arraycopy(arrayOfObject, 0, d, 0, arrayOfObject.length);
        }
        a((int[])localObject, arrayOfObject, m);
      }
      else
      {
        throw new ConcurrentModificationException();
      }
    }
    if (n < m)
    {
      localObject = c;
      System.arraycopy(localObject, n, localObject, n + 1, m - n);
      localObject = d;
      System.arraycopy(localObject, n << 1, localObject, n + 1 << 1, e - n << 1);
    }
    int j = e;
    if (m == j)
    {
      localObject = c;
      if (n < localObject.length)
      {
        localObject[n] = k;
        localObject = d;
        localObject[(n << 1)] = paramK;
        localObject[((n << 1) + 1)] = paramV;
        e = (j + 1);
        return null;
      }
    }
    throw new ConcurrentModificationException();
  }
  
  public V remove(Object paramObject)
  {
    int j = a(paramObject);
    if (j >= 0) {
      return c(j);
    }
    return null;
  }
  
  public int size()
  {
    return e;
  }
  
  public String toString()
  {
    if (isEmpty()) {
      return "{}";
    }
    StringBuilder localStringBuilder = new StringBuilder(e * 28);
    localStringBuilder.append('{');
    int j = 0;
    while (j < e)
    {
      if (j > 0) {
        localStringBuilder.append(", ");
      }
      Object localObject = b(j);
      if (localObject != this) {
        localStringBuilder.append(localObject);
      } else {
        localStringBuilder.append("(this Map)");
      }
      localStringBuilder.append('=');
      localObject = d(j);
      if (localObject != this) {
        localStringBuilder.append(localObject);
      } else {
        localStringBuilder.append("(this Map)");
      }
      j += 1;
    }
    localStringBuilder.append('}');
    return localStringBuilder.toString();
  }
}
