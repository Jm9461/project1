package a.b.g.g;

public class f<E>
  implements Cloneable
{
  private static final Object g = new Object();
  private boolean c = false;
  private long[] d;
  private Object[] e;
  private int f;
  
  public f()
  {
    this(10);
  }
  
  public f(int paramInt)
  {
    if (paramInt == 0)
    {
      d = c.b;
      e = c.c;
    }
    else
    {
      paramInt = c.c(paramInt);
      d = new long[paramInt];
      e = new Object[paramInt];
    }
    f = 0;
  }
  
  private void c()
  {
    int m = f;
    int j = 0;
    long[] arrayOfLong = d;
    Object[] arrayOfObject = e;
    int i = 0;
    while (i < m)
    {
      Object localObject = arrayOfObject[i];
      int k = j;
      if (localObject != g)
      {
        if (i != j)
        {
          arrayOfLong[j] = arrayOfLong[i];
          arrayOfObject[j] = localObject;
          arrayOfObject[i] = null;
        }
        k = j + 1;
      }
      i += 1;
      j = k;
    }
    c = false;
    f = j;
  }
  
  public long a(int paramInt)
  {
    if (c) {
      c();
    }
    return d[paramInt];
  }
  
  public void a()
  {
    int j = f;
    Object[] arrayOfObject = e;
    int i = 0;
    while (i < j)
    {
      arrayOfObject[i] = null;
      i += 1;
    }
    f = 0;
    c = false;
  }
  
  public void a(long paramLong)
  {
    int i = c.a(d, f, paramLong);
    if (i >= 0)
    {
      Object[] arrayOfObject = e;
      Object localObject1 = arrayOfObject[i];
      Object localObject2 = g;
      if (localObject1 != localObject2)
      {
        arrayOfObject[i] = localObject2;
        c = true;
      }
    }
  }
  
  public void a(long paramLong, E paramE)
  {
    int i = f;
    if ((i != 0) && (paramLong <= d[(i - 1)]))
    {
      c(paramLong, paramE);
      return;
    }
    if ((c) && (f >= d.length)) {
      c();
    }
    i = f;
    if (i >= d.length)
    {
      int j = c.c(i + 1);
      long[] arrayOfLong = new long[j];
      Object[] arrayOfObject = new Object[j];
      Object localObject = d;
      System.arraycopy(localObject, 0, arrayOfLong, 0, localObject.length);
      localObject = e;
      System.arraycopy(localObject, 0, arrayOfObject, 0, localObject.length);
      d = arrayOfLong;
      e = arrayOfObject;
    }
    d[i] = paramLong;
    e[i] = paramE;
    f = (i + 1);
  }
  
  public int b()
  {
    if (c) {
      c();
    }
    return f;
  }
  
  public E b(long paramLong)
  {
    return b(paramLong, null);
  }
  
  public E b(long paramLong, E paramE)
  {
    int i = c.a(d, f, paramLong);
    if (i >= 0)
    {
      Object[] arrayOfObject = e;
      if (arrayOfObject[i] == g) {
        return paramE;
      }
      return arrayOfObject[i];
    }
    return paramE;
  }
  
  public void b(int paramInt)
  {
    Object[] arrayOfObject = e;
    Object localObject1 = arrayOfObject[paramInt];
    Object localObject2 = g;
    if (localObject1 != localObject2)
    {
      arrayOfObject[paramInt] = localObject2;
      c = true;
    }
  }
  
  public int c(long paramLong)
  {
    if (c) {
      c();
    }
    return c.a(d, f, paramLong);
  }
  
  public E c(int paramInt)
  {
    if (c) {
      c();
    }
    return e[paramInt];
  }
  
  public void c(long paramLong, E paramE)
  {
    int i = c.a(d, f, paramLong);
    if (i >= 0)
    {
      e[i] = paramE;
      return;
    }
    int j = i ^ 0xFFFFFFFF;
    Object localObject1;
    if (j < f)
    {
      localObject1 = e;
      if (localObject1[j] == g)
      {
        d[j] = paramLong;
        localObject1[j] = paramE;
        return;
      }
    }
    i = j;
    if (c)
    {
      i = j;
      if (f >= d.length)
      {
        c();
        i = c.a(d, f, paramLong) ^ 0xFFFFFFFF;
      }
    }
    j = f;
    if (j >= d.length)
    {
      j = c.c(j + 1);
      localObject1 = new long[j];
      Object[] arrayOfObject = new Object[j];
      Object localObject2 = d;
      System.arraycopy(localObject2, 0, localObject1, 0, localObject2.length);
      localObject2 = e;
      System.arraycopy(localObject2, 0, arrayOfObject, 0, localObject2.length);
      d = ((long[])localObject1);
      e = arrayOfObject;
    }
    j = f;
    if (j - i != 0)
    {
      localObject1 = d;
      System.arraycopy(localObject1, i, localObject1, i + 1, j - i);
      localObject1 = e;
      System.arraycopy(localObject1, i, localObject1, i + 1, f - i);
    }
    d[i] = paramLong;
    e[i] = paramE;
    f += 1;
  }
  
  public f<E> clone()
  {
    try
    {
      f localF = (f)super.clone();
      d = ((long[])d.clone());
      e = ((Object[])e.clone());
      return localF;
    }
    catch (CloneNotSupportedException localCloneNotSupportedException)
    {
      throw new AssertionError(localCloneNotSupportedException);
    }
  }
  
  public String toString()
  {
    if (b() <= 0) {
      return "{}";
    }
    StringBuilder localStringBuilder = new StringBuilder(f * 28);
    localStringBuilder.append('{');
    int i = 0;
    while (i < f)
    {
      if (i > 0) {
        localStringBuilder.append(", ");
      }
      localStringBuilder.append(a(i));
      localStringBuilder.append('=');
      Object localObject = c(i);
      if (localObject != this) {
        localStringBuilder.append(localObject);
      } else {
        localStringBuilder.append("(this Map)");
      }
      i += 1;
    }
    localStringBuilder.append('}');
    return localStringBuilder.toString();
  }
}
