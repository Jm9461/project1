package a.b.g.g;

import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class b<E>
  implements Collection<E>, Set<E>
{
  private static final int[] g = new int[0];
  private static final Object[] h = new Object[0];
  private static Object[] i;
  private static int j;
  private static Object[] k;
  private static int l;
  private int[] c;
  Object[] d;
  int e;
  private h<E, E> f;
  
  public b()
  {
    this(0);
  }
  
  public b(int paramInt)
  {
    if (paramInt == 0)
    {
      c = g;
      d = h;
    }
    else
    {
      d(paramInt);
    }
    e = 0;
  }
  
  private int a(Object paramObject, int paramInt)
  {
    int n = e;
    if (n == 0) {
      return -1;
    }
    int i1 = c.a(c, n, paramInt);
    if (i1 < 0) {
      return i1;
    }
    if (paramObject.equals(d[i1])) {
      return i1;
    }
    int m = i1 + 1;
    while ((m < n) && (c[m] == paramInt))
    {
      if (paramObject.equals(d[m])) {
        return m;
      }
      m += 1;
    }
    n = i1 - 1;
    while ((n >= 0) && (c[n] == paramInt))
    {
      if (paramObject.equals(d[n])) {
        return n;
      }
      n -= 1;
    }
    return m ^ 0xFFFFFFFF;
  }
  
  private h<E, E> a()
  {
    if (f == null) {
      f = new a();
    }
    return f;
  }
  
  private static void a(int[] paramArrayOfInt, Object[] paramArrayOfObject, int paramInt)
  {
    if (paramArrayOfInt.length == 8) {
      try
      {
        if (l < 10)
        {
          paramArrayOfObject[0] = k;
          paramArrayOfObject[1] = paramArrayOfInt;
          paramInt -= 1;
          break label114;
          k = paramArrayOfObject;
          l += 1;
        }
        return;
      }
      finally {}
    }
    if (paramArrayOfInt.length == 4) {}
    for (;;)
    {
      try
      {
        if (j < 10)
        {
          paramArrayOfObject[0] = i;
          paramArrayOfObject[1] = paramArrayOfInt;
          paramInt -= 1;
          break label130;
          i = paramArrayOfObject;
          j += 1;
        }
        return;
      }
      finally {}
      return;
      label114:
      while (paramInt >= 2)
      {
        paramArrayOfObject[paramInt] = null;
        paramInt -= 1;
      }
      break;
      label130:
      while (paramInt >= 2)
      {
        paramArrayOfObject[paramInt] = null;
        paramInt -= 1;
      }
    }
  }
  
  private int b()
  {
    int n = e;
    if (n == 0) {
      return -1;
    }
    int i1 = c.a(c, n, 0);
    if (i1 < 0) {
      return i1;
    }
    if (d[i1] == null) {
      return i1;
    }
    int m = i1 + 1;
    while ((m < n) && (c[m] == 0))
    {
      if (d[m] == null) {
        return m;
      }
      m += 1;
    }
    n = i1 - 1;
    while ((n >= 0) && (c[n] == 0))
    {
      if (d[n] == null) {
        return n;
      }
      n -= 1;
    }
    return m ^ 0xFFFFFFFF;
  }
  
  private void d(int paramInt)
  {
    if (paramInt == 8) {
      try
      {
        if (k != null)
        {
          Object[] arrayOfObject1 = k;
          d = arrayOfObject1;
          k = (Object[])arrayOfObject1[0];
          c = ((int[])arrayOfObject1[1]);
          arrayOfObject1[1] = null;
          arrayOfObject1[0] = null;
          l -= 1;
          return;
        }
      }
      finally {}
    }
    if (paramInt == 4) {
      try
      {
        if (i != null)
        {
          Object[] arrayOfObject2 = i;
          d = arrayOfObject2;
          i = (Object[])arrayOfObject2[0];
          c = ((int[])arrayOfObject2[1]);
          arrayOfObject2[1] = null;
          arrayOfObject2[0] = null;
          j -= 1;
          return;
        }
      }
      finally {}
    }
    c = new int[paramInt];
    d = new Object[paramInt];
  }
  
  public int a(Object paramObject)
  {
    if (paramObject == null) {
      return b();
    }
    return a(paramObject, paramObject.hashCode());
  }
  
  public void a(int paramInt)
  {
    if (c.length < paramInt)
    {
      int[] arrayOfInt = c;
      Object[] arrayOfObject = d;
      d(paramInt);
      paramInt = e;
      if (paramInt > 0)
      {
        System.arraycopy(arrayOfInt, 0, c, 0, paramInt);
        System.arraycopy(arrayOfObject, 0, d, 0, e);
      }
      a(arrayOfInt, arrayOfObject, e);
    }
  }
  
  public boolean add(E paramE)
  {
    int n;
    if (paramE == null)
    {
      n = 0;
      m = b();
    }
    else
    {
      n = paramE.hashCode();
      m = a(paramE, n);
    }
    if (m >= 0) {
      return false;
    }
    int i1 = m ^ 0xFFFFFFFF;
    int i2 = e;
    Object localObject;
    if (i2 >= c.length)
    {
      m = 4;
      if (i2 >= 8) {
        m = (i2 >> 1) + i2;
      } else if (i2 >= 4) {
        m = 8;
      }
      localObject = c;
      Object[] arrayOfObject = d;
      d(m);
      int[] arrayOfInt = c;
      if (arrayOfInt.length > 0)
      {
        System.arraycopy(localObject, 0, arrayOfInt, 0, localObject.length);
        System.arraycopy(arrayOfObject, 0, d, 0, arrayOfObject.length);
      }
      a((int[])localObject, arrayOfObject, e);
    }
    int m = e;
    if (i1 < m)
    {
      localObject = c;
      System.arraycopy(localObject, i1, localObject, i1 + 1, m - i1);
      localObject = d;
      System.arraycopy(localObject, i1, localObject, i1 + 1, e - i1);
    }
    c[i1] = n;
    d[i1] = paramE;
    e += 1;
    return true;
  }
  
  public boolean addAll(Collection<? extends E> paramCollection)
  {
    a(e + paramCollection.size());
    boolean bool = false;
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext()) {
      bool |= add(paramCollection.next());
    }
    return bool;
  }
  
  public E b(int paramInt)
  {
    Object localObject = d;
    E ? = localObject[paramInt];
    int n = e;
    if (n <= 1)
    {
      a(c, (Object[])localObject, n);
      c = g;
      d = h;
      e = 0;
      return ?;
    }
    localObject = c;
    int i1 = localObject.length;
    int m = 8;
    if ((i1 > 8) && (n < localObject.length / 3))
    {
      if (n > 8) {
        m = n + (n >> 1);
      }
      localObject = c;
      Object[] arrayOfObject = d;
      d(m);
      e -= 1;
      if (paramInt > 0)
      {
        System.arraycopy(localObject, 0, c, 0, paramInt);
        System.arraycopy(arrayOfObject, 0, d, 0, paramInt);
      }
      m = e;
      if (paramInt < m)
      {
        System.arraycopy(localObject, paramInt + 1, c, paramInt, m - paramInt);
        System.arraycopy(arrayOfObject, paramInt + 1, d, paramInt, e - paramInt);
      }
      return ?;
    }
    e -= 1;
    m = e;
    if (paramInt < m)
    {
      localObject = c;
      System.arraycopy(localObject, paramInt + 1, localObject, paramInt, m - paramInt);
      localObject = d;
      System.arraycopy(localObject, paramInt + 1, localObject, paramInt, e - paramInt);
    }
    d[e] = null;
    return ?;
  }
  
  public E c(int paramInt)
  {
    return d[paramInt];
  }
  
  public void clear()
  {
    int m = e;
    if (m != 0)
    {
      a(c, d, m);
      c = g;
      d = h;
      e = 0;
    }
  }
  
  public boolean contains(Object paramObject)
  {
    return a(paramObject) >= 0;
  }
  
  public boolean containsAll(Collection<?> paramCollection)
  {
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext()) {
      if (!contains(paramCollection.next())) {
        return false;
      }
    }
    return true;
  }
  
  public boolean equals(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    if ((paramObject instanceof Set))
    {
      paramObject = (Set)paramObject;
      if (size() != paramObject.size()) {
        return false;
      }
      int m = 0;
      try
      {
        while (m < e)
        {
          boolean bool = paramObject.contains(c(m));
          if (!bool) {
            return false;
          }
          m += 1;
        }
        return true;
      }
      catch (ClassCastException paramObject)
      {
        return false;
      }
      catch (NullPointerException paramObject)
      {
        return false;
      }
    }
    return false;
  }
  
  public int hashCode()
  {
    int[] arrayOfInt = c;
    int n = 0;
    int m = 0;
    int i1 = e;
    while (m < i1)
    {
      n += arrayOfInt[m];
      m += 1;
    }
    return n;
  }
  
  public boolean isEmpty()
  {
    return e <= 0;
  }
  
  public Iterator<E> iterator()
  {
    return a().e().iterator();
  }
  
  public boolean remove(Object paramObject)
  {
    int m = a(paramObject);
    if (m >= 0)
    {
      b(m);
      return true;
    }
    return false;
  }
  
  public boolean removeAll(Collection<?> paramCollection)
  {
    boolean bool = false;
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext()) {
      bool |= remove(paramCollection.next());
    }
    return bool;
  }
  
  public boolean retainAll(Collection<?> paramCollection)
  {
    boolean bool = false;
    int m = e - 1;
    while (m >= 0)
    {
      if (!paramCollection.contains(d[m]))
      {
        b(m);
        bool = true;
      }
      m -= 1;
    }
    return bool;
  }
  
  public int size()
  {
    return e;
  }
  
  public Object[] toArray()
  {
    int m = e;
    Object[] arrayOfObject = new Object[m];
    System.arraycopy(d, 0, arrayOfObject, 0, m);
    return arrayOfObject;
  }
  
  public <T> T[] toArray(T[] paramArrayOfT)
  {
    Object localObject = paramArrayOfT;
    if (paramArrayOfT.length < e) {
      localObject = (Object[])Array.newInstance(paramArrayOfT.getClass().getComponentType(), e);
    }
    System.arraycopy(d, 0, localObject, 0, e);
    int m = localObject.length;
    int n = e;
    if (m > n) {
      localObject[n] = null;
    }
    return localObject;
  }
  
  public String toString()
  {
    if (isEmpty()) {
      return "{}";
    }
    StringBuilder localStringBuilder = new StringBuilder(e * 14);
    localStringBuilder.append('{');
    int m = 0;
    while (m < e)
    {
      if (m > 0) {
        localStringBuilder.append(", ");
      }
      Object localObject = c(m);
      if (localObject != this) {
        localStringBuilder.append(localObject);
      } else {
        localStringBuilder.append("(this Set)");
      }
      m += 1;
    }
    localStringBuilder.append('}');
    return localStringBuilder.toString();
  }
  
  class a
    extends h<E, E>
  {
    a() {}
    
    protected int a(Object paramObject)
    {
      return b.this.a(paramObject);
    }
    
    protected Object a(int paramInt1, int paramInt2)
    {
      return d[paramInt1];
    }
    
    protected E a(int paramInt, E paramE)
    {
      throw new UnsupportedOperationException("not a map");
    }
    
    protected void a()
    {
      clear();
    }
    
    protected void a(int paramInt)
    {
      b(paramInt);
    }
    
    protected void a(E paramE1, E paramE2)
    {
      add(paramE1);
    }
    
    protected int b(Object paramObject)
    {
      return b.this.a(paramObject);
    }
    
    protected Map<E, E> b()
    {
      throw new UnsupportedOperationException("not a map");
    }
    
    protected int c()
    {
      return e;
    }
  }
}
