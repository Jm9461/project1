package a.b.g.g;

import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.NoSuchElementException;
import java.util.Set;

abstract class h<K, V>
{
  h<K, V>.b a;
  h<K, V>.c b;
  h<K, V>.e c;
  
  h() {}
  
  public static <K, V> boolean a(Map<K, V> paramMap, Collection<?> paramCollection)
  {
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext()) {
      if (!paramMap.containsKey(paramCollection.next())) {
        return false;
      }
    }
    return true;
  }
  
  public static <T> boolean a(Set<T> paramSet, Object paramObject)
  {
    if (paramSet == paramObject) {
      return true;
    }
    if ((paramObject instanceof Set))
    {
      paramObject = (Set)paramObject;
      try
      {
        if (paramSet.size() == paramObject.size())
        {
          boolean bool = paramSet.containsAll(paramObject);
          if (bool) {
            return true;
          }
        }
        return false;
      }
      catch (ClassCastException paramSet)
      {
        return false;
      }
      catch (NullPointerException paramSet)
      {
        return false;
      }
    }
    return false;
  }
  
  public static <K, V> boolean b(Map<K, V> paramMap, Collection<?> paramCollection)
  {
    int i = paramMap.size();
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext()) {
      paramMap.remove(paramCollection.next());
    }
    return i != paramMap.size();
  }
  
  public static <K, V> boolean c(Map<K, V> paramMap, Collection<?> paramCollection)
  {
    int i = paramMap.size();
    Iterator localIterator = paramMap.keySet().iterator();
    while (localIterator.hasNext()) {
      if (!paramCollection.contains(localIterator.next())) {
        localIterator.remove();
      }
    }
    return i != paramMap.size();
  }
  
  protected abstract int a(Object paramObject);
  
  protected abstract Object a(int paramInt1, int paramInt2);
  
  protected abstract V a(int paramInt, V paramV);
  
  protected abstract void a();
  
  protected abstract void a(int paramInt);
  
  protected abstract void a(K paramK, V paramV);
  
  public <T> T[] a(T[] paramArrayOfT, int paramInt)
  {
    int j = c();
    Object localObject = paramArrayOfT;
    if (paramArrayOfT.length < j) {
      localObject = (Object[])Array.newInstance(paramArrayOfT.getClass().getComponentType(), j);
    }
    int i = 0;
    while (i < j)
    {
      localObject[i] = a(i, paramInt);
      i += 1;
    }
    if (localObject.length > j) {
      localObject[j] = null;
    }
    return localObject;
  }
  
  protected abstract int b(Object paramObject);
  
  protected abstract Map<K, V> b();
  
  public Object[] b(int paramInt)
  {
    int j = c();
    Object[] arrayOfObject = new Object[j];
    int i = 0;
    while (i < j)
    {
      arrayOfObject[i] = a(i, paramInt);
      i += 1;
    }
    return arrayOfObject;
  }
  
  protected abstract int c();
  
  public Set<Map.Entry<K, V>> d()
  {
    if (a == null) {
      a = new b();
    }
    return a;
  }
  
  public Set<K> e()
  {
    if (b == null) {
      b = new c();
    }
    return b;
  }
  
  public Collection<V> f()
  {
    if (c == null) {
      c = new e();
    }
    return c;
  }
  
  final class a<T>
    implements Iterator<T>
  {
    final int c;
    int d;
    int e;
    boolean f = false;
    
    a(int paramInt)
    {
      c = paramInt;
      d = c();
    }
    
    public boolean hasNext()
    {
      return e < d;
    }
    
    public T next()
    {
      if (hasNext())
      {
        Object localObject = a(e, c);
        e += 1;
        f = true;
        return localObject;
      }
      throw new NoSuchElementException();
    }
    
    public void remove()
    {
      if (f)
      {
        e -= 1;
        d -= 1;
        f = false;
        a(e);
        return;
      }
      throw new IllegalStateException();
    }
  }
  
  final class b
    implements Set<Map.Entry<K, V>>
  {
    b() {}
    
    public boolean a(Map.Entry<K, V> paramEntry)
    {
      throw new UnsupportedOperationException();
    }
    
    public boolean addAll(Collection<? extends Map.Entry<K, V>> paramCollection)
    {
      int i = c();
      paramCollection = paramCollection.iterator();
      while (paramCollection.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)paramCollection.next();
        a(localEntry.getKey(), localEntry.getValue());
      }
      return i != c();
    }
    
    public void clear()
    {
      a();
    }
    
    public boolean contains(Object paramObject)
    {
      if (!(paramObject instanceof Map.Entry)) {
        return false;
      }
      paramObject = (Map.Entry)paramObject;
      int i = a(paramObject.getKey());
      if (i < 0) {
        return false;
      }
      return c.a(a(i, 1), paramObject.getValue());
    }
    
    public boolean containsAll(Collection<?> paramCollection)
    {
      paramCollection = paramCollection.iterator();
      while (paramCollection.hasNext()) {
        if (!contains(paramCollection.next())) {
          return false;
        }
      }
      return true;
    }
    
    public boolean equals(Object paramObject)
    {
      return h.a(this, paramObject);
    }
    
    public int hashCode()
    {
      int j = 0;
      int i = c() - 1;
      while (i >= 0)
      {
        Object localObject1 = h.this;
        int m = 0;
        localObject1 = ((h)localObject1).a(i, 0);
        Object localObject2 = a(i, 1);
        int k;
        if (localObject1 == null) {
          k = 0;
        } else {
          k = localObject1.hashCode();
        }
        if (localObject2 != null) {
          m = localObject2.hashCode();
        }
        j += (m ^ k);
        i -= 1;
      }
      return j;
    }
    
    public boolean isEmpty()
    {
      return c() == 0;
    }
    
    public Iterator<Map.Entry<K, V>> iterator()
    {
      return new h.d(h.this);
    }
    
    public boolean remove(Object paramObject)
    {
      throw new UnsupportedOperationException();
    }
    
    public boolean removeAll(Collection<?> paramCollection)
    {
      throw new UnsupportedOperationException();
    }
    
    public boolean retainAll(Collection<?> paramCollection)
    {
      throw new UnsupportedOperationException();
    }
    
    public int size()
    {
      return c();
    }
    
    public Object[] toArray()
    {
      throw new UnsupportedOperationException();
    }
    
    public <T> T[] toArray(T[] paramArrayOfT)
    {
      throw new UnsupportedOperationException();
    }
  }
  
  final class c
    implements Set<K>
  {
    c() {}
    
    public boolean add(K paramK)
    {
      throw new UnsupportedOperationException();
    }
    
    public boolean addAll(Collection<? extends K> paramCollection)
    {
      throw new UnsupportedOperationException();
    }
    
    public void clear()
    {
      a();
    }
    
    public boolean contains(Object paramObject)
    {
      return a(paramObject) >= 0;
    }
    
    public boolean containsAll(Collection<?> paramCollection)
    {
      return h.a(b(), paramCollection);
    }
    
    public boolean equals(Object paramObject)
    {
      return h.a(this, paramObject);
    }
    
    public int hashCode()
    {
      int j = 0;
      int i = c() - 1;
      while (i >= 0)
      {
        Object localObject = h.this;
        int k = 0;
        localObject = ((h)localObject).a(i, 0);
        if (localObject != null) {
          k = localObject.hashCode();
        }
        j += k;
        i -= 1;
      }
      return j;
    }
    
    public boolean isEmpty()
    {
      return c() == 0;
    }
    
    public Iterator<K> iterator()
    {
      return new h.a(h.this, 0);
    }
    
    public boolean remove(Object paramObject)
    {
      int i = a(paramObject);
      if (i >= 0)
      {
        a(i);
        return true;
      }
      return false;
    }
    
    public boolean removeAll(Collection<?> paramCollection)
    {
      return h.b(b(), paramCollection);
    }
    
    public boolean retainAll(Collection<?> paramCollection)
    {
      return h.c(b(), paramCollection);
    }
    
    public int size()
    {
      return c();
    }
    
    public Object[] toArray()
    {
      return b(0);
    }
    
    public <T> T[] toArray(T[] paramArrayOfT)
    {
      return a(paramArrayOfT, 0);
    }
  }
  
  final class d
    implements Iterator<Map.Entry<K, V>>, Map.Entry<K, V>
  {
    int c = c() - 1;
    int d = -1;
    boolean e = false;
    
    d() {}
    
    public boolean equals(Object paramObject)
    {
      if (e)
      {
        if (!(paramObject instanceof Map.Entry)) {
          return false;
        }
        paramObject = (Map.Entry)paramObject;
        return (c.a(paramObject.getKey(), a(d, 0))) && (c.a(paramObject.getValue(), a(d, 1)));
      }
      throw new IllegalStateException("This container does not support retaining Map.Entry objects");
    }
    
    public K getKey()
    {
      if (e) {
        return a(d, 0);
      }
      throw new IllegalStateException("This container does not support retaining Map.Entry objects");
    }
    
    public V getValue()
    {
      if (e) {
        return a(d, 1);
      }
      throw new IllegalStateException("This container does not support retaining Map.Entry objects");
    }
    
    public boolean hasNext()
    {
      return d < c;
    }
    
    public int hashCode()
    {
      if (e)
      {
        Object localObject1 = h.this;
        int i = d;
        int j = 0;
        localObject1 = ((h)localObject1).a(i, 0);
        Object localObject2 = a(d, 1);
        if (localObject1 == null) {
          i = 0;
        } else {
          i = localObject1.hashCode();
        }
        if (localObject2 != null) {
          j = localObject2.hashCode();
        }
        return j ^ i;
      }
      throw new IllegalStateException("This container does not support retaining Map.Entry objects");
    }
    
    public Map.Entry<K, V> next()
    {
      if (hasNext())
      {
        d += 1;
        e = true;
        return this;
      }
      throw new NoSuchElementException();
    }
    
    public void remove()
    {
      if (e)
      {
        a(d);
        d -= 1;
        c -= 1;
        e = false;
        return;
      }
      throw new IllegalStateException();
    }
    
    public V setValue(V paramV)
    {
      if (e) {
        return a(d, paramV);
      }
      throw new IllegalStateException("This container does not support retaining Map.Entry objects");
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(getKey());
      localStringBuilder.append("=");
      localStringBuilder.append(getValue());
      return localStringBuilder.toString();
    }
  }
  
  final class e
    implements Collection<V>
  {
    e() {}
    
    public boolean add(V paramV)
    {
      throw new UnsupportedOperationException();
    }
    
    public boolean addAll(Collection<? extends V> paramCollection)
    {
      throw new UnsupportedOperationException();
    }
    
    public void clear()
    {
      a();
    }
    
    public boolean contains(Object paramObject)
    {
      return b(paramObject) >= 0;
    }
    
    public boolean containsAll(Collection<?> paramCollection)
    {
      paramCollection = paramCollection.iterator();
      while (paramCollection.hasNext()) {
        if (!contains(paramCollection.next())) {
          return false;
        }
      }
      return true;
    }
    
    public boolean isEmpty()
    {
      return c() == 0;
    }
    
    public Iterator<V> iterator()
    {
      return new h.a(h.this, 1);
    }
    
    public boolean remove(Object paramObject)
    {
      int i = b(paramObject);
      if (i >= 0)
      {
        a(i);
        return true;
      }
      return false;
    }
    
    public boolean removeAll(Collection<?> paramCollection)
    {
      int j = c();
      boolean bool = false;
      int i = 0;
      while (i < j)
      {
        int k = j;
        int m = i;
        if (paramCollection.contains(a(i, 1)))
        {
          a(i);
          m = i - 1;
          k = j - 1;
          bool = true;
        }
        i = m + 1;
        j = k;
      }
      return bool;
    }
    
    public boolean retainAll(Collection<?> paramCollection)
    {
      int j = c();
      boolean bool = false;
      int i = 0;
      while (i < j)
      {
        int k = j;
        int m = i;
        if (!paramCollection.contains(a(i, 1)))
        {
          a(i);
          m = i - 1;
          k = j - 1;
          bool = true;
        }
        i = m + 1;
        j = k;
      }
      return bool;
    }
    
    public int size()
    {
      return c();
    }
    
    public Object[] toArray()
    {
      return b(1);
    }
    
    public <T> T[] toArray(T[] paramArrayOfT)
    {
      return a(paramArrayOfT, 1);
    }
  }
}
