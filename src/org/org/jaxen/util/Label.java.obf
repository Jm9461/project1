package a.b.g.g;

import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class a<K, V>
  extends n<K, V>
  implements Map<K, V>
{
  h<K, V> j;
  
  public a() {}
  
  public a(int paramInt)
  {
    super(paramInt);
  }
  
  public a(n paramN)
  {
    super(paramN);
  }
  
  private h<K, V> b()
  {
    if (j == null) {
      j = new a();
    }
    return j;
  }
  
  public boolean a(Collection<?> paramCollection)
  {
    return h.c(this, paramCollection);
  }
  
  public Set<Map.Entry<K, V>> entrySet()
  {
    return b().d();
  }
  
  public Set<K> keySet()
  {
    return b().e();
  }
  
  public void putAll(Map<? extends K, ? extends V> paramMap)
  {
    a(e + paramMap.size());
    paramMap = paramMap.entrySet().iterator();
    while (paramMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      put(localEntry.getKey(), localEntry.getValue());
    }
  }
  
  public Collection<V> values()
  {
    return b().f();
  }
  
  class a
    extends h<K, V>
  {
    a() {}
    
    protected int a(Object paramObject)
    {
      return a.this.a(paramObject);
    }
    
    protected Object a(int paramInt1, int paramInt2)
    {
      return d[((paramInt1 << 1) + paramInt2)];
    }
    
    protected V a(int paramInt, V paramV)
    {
      return a.this.a(paramInt, paramV);
    }
    
    protected void a()
    {
      clear();
    }
    
    protected void a(int paramInt)
    {
      c(paramInt);
    }
    
    protected void a(K paramK, V paramV)
    {
      put(paramK, paramV);
    }
    
    protected int b(Object paramObject)
    {
      return a.this.b(paramObject);
    }
    
    protected Map<K, V> b()
    {
      return a.this;
    }
    
    protected int c()
    {
      return e;
    }
  }
}
