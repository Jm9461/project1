package a.b.h.d.a;

import a.b.h.a.i;
import a.b.h.a.j;
import android.content.Context;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;
import android.graphics.Paint.Cap;
import android.graphics.Paint.Join;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;

public class d
  extends Drawable
{
  private static final float m = (float)Math.toRadians(45.0D);
  private final Paint a = new Paint();
  private float b;
  private float c;
  private float d;
  private float e;
  private boolean f;
  private final Path g = new Path();
  private final int h;
  private boolean i = false;
  private float j;
  private float k;
  private int l = 2;
  
  public d(Context paramContext)
  {
    a.setStyle(Paint.Style.STROKE);
    a.setStrokeJoin(Paint.Join.MITER);
    a.setStrokeCap(Paint.Cap.BUTT);
    a.setAntiAlias(true);
    paramContext = paramContext.getTheme().obtainStyledAttributes(null, j.DrawerArrowToggle, a.b.h.a.a.drawerArrowStyle, i.Base_Widget_AppCompat_DrawerArrowToggle);
    a(paramContext.getColor(j.DrawerArrowToggle_color, 0));
    a(paramContext.getDimension(j.DrawerArrowToggle_thickness, 0.0F));
    a(paramContext.getBoolean(j.DrawerArrowToggle_spinBars, true));
    b(Math.round(paramContext.getDimension(j.DrawerArrowToggle_gapBetweenBars, 0.0F)));
    h = paramContext.getDimensionPixelSize(j.DrawerArrowToggle_drawableSize, 0);
    c = Math.round(paramContext.getDimension(j.DrawerArrowToggle_barLength, 0.0F));
    b = Math.round(paramContext.getDimension(j.DrawerArrowToggle_arrowHeadLength, 0.0F));
    d = paramContext.getDimension(j.DrawerArrowToggle_arrowShaftLength, 0.0F);
    paramContext.recycle();
  }
  
  private static float a(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    return (paramFloat2 - paramFloat1) * paramFloat3 + paramFloat1;
  }
  
  public void a(float paramFloat)
  {
    if (a.getStrokeWidth() != paramFloat)
    {
      a.setStrokeWidth(paramFloat);
      double d1 = paramFloat / 2.0F;
      double d2 = Math.cos(m);
      Double.isNaN(d1);
      k = ((float)(d1 * d2));
      invalidateSelf();
    }
  }
  
  public void a(int paramInt)
  {
    if (paramInt != a.getColor())
    {
      a.setColor(paramInt);
      invalidateSelf();
    }
  }
  
  public void a(boolean paramBoolean)
  {
    if (f != paramBoolean)
    {
      f = paramBoolean;
      invalidateSelf();
    }
  }
  
  public void b(float paramFloat)
  {
    if (paramFloat != e)
    {
      e = paramFloat;
      invalidateSelf();
    }
  }
  
  public void b(boolean paramBoolean)
  {
    if (i != paramBoolean)
    {
      i = paramBoolean;
      invalidateSelf();
    }
  }
  
  public void c(float paramFloat)
  {
    if (j != paramFloat)
    {
      j = paramFloat;
      invalidateSelf();
    }
  }
  
  public void draw(Canvas paramCanvas)
  {
    Rect localRect = getBounds();
    int i2 = l;
    int n;
    if (i2 != 0)
    {
      if (i2 != 1)
      {
        int i1 = 0;
        n = 0;
        if (i2 != 3)
        {
          if (android.support.v4.graphics.drawable.a.e(this) == 1) {
            n = 1;
          }
        }
        else
        {
          n = i1;
          if (android.support.v4.graphics.drawable.a.e(this) == 0) {
            n = 1;
          }
        }
      }
      else
      {
        n = 1;
      }
    }
    else {
      n = 0;
    }
    float f1 = b;
    f1 = (float)Math.sqrt(f1 * f1 * 2.0F);
    float f5 = a(c, f1, j);
    float f3 = a(c, d, j);
    float f4 = Math.round(a(0.0F, k, j));
    float f6 = a(0.0F, m, j);
    if (n != 0) {
      f1 = 0.0F;
    } else {
      f1 = -180.0F;
    }
    if (n != 0) {
      f2 = 180.0F;
    } else {
      f2 = 0.0F;
    }
    f1 = a(f1, f2, j);
    double d1 = f5;
    double d2 = Math.cos(f6);
    Double.isNaN(d1);
    float f2 = (float)Math.round(d1 * d2);
    d1 = f5;
    d2 = Math.sin(f6);
    Double.isNaN(d1);
    f5 = (float)Math.round(d1 * d2);
    g.rewind();
    f6 = a(e + a.getStrokeWidth(), -k, j);
    float f7 = -f3 / 2.0F;
    g.moveTo(f7 + f4, 0.0F);
    g.rLineTo(f3 - f4 * 2.0F, 0.0F);
    g.moveTo(f7, f6);
    g.rLineTo(f2, f5);
    g.moveTo(f7, -f6);
    g.rLineTo(f2, -f5);
    g.close();
    paramCanvas.save();
    f2 = a.getStrokeWidth();
    f4 = localRect.height();
    f3 = e;
    f4 = (int)(f4 - 3.0F * f2 - 2.0F * f3) / 4 * 2;
    paramCanvas.translate(localRect.centerX(), f4 + (1.5F * f2 + f3));
    if (f)
    {
      if ((i ^ n)) {
        n = -1;
      } else {
        n = 1;
      }
      paramCanvas.rotate(n * f1);
    }
    else if (n != 0)
    {
      paramCanvas.rotate(180.0F);
    }
    paramCanvas.drawPath(g, a);
    paramCanvas.restore();
  }
  
  public int getIntrinsicHeight()
  {
    return h;
  }
  
  public int getIntrinsicWidth()
  {
    return h;
  }
  
  public int getOpacity()
  {
    return -3;
  }
  
  public void setAlpha(int paramInt)
  {
    if (paramInt != a.getAlpha())
    {
      a.setAlpha(paramInt);
      invalidateSelf();
    }
  }
  
  public void setColorFilter(ColorFilter paramColorFilter)
  {
    a.setColorFilter(paramColorFilter);
    invalidateSelf();
  }
}
