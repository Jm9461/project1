package a.b.e;

import android.content.res.AssetManager.AssetInputStream;
import android.util.Log;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.TimeZone;
import java.util.regex.Pattern;

public class a
{
  private static final d[] A;
  private static final d[] B;
  private static final d[] C;
  private static final d[] D;
  static final d[][] E;
  private static final d[] F;
  private static final HashMap<Integer, d>[] G;
  private static final HashMap<String, d>[] H;
  private static final HashSet<String> I;
  private static final HashMap<Integer, Integer> J;
  private static final Charset K;
  static final byte[] L;
  public static final int[] l;
  public static final int[] m;
  static final byte[] n;
  private static final byte[] o;
  private static final byte[] p;
  private static SimpleDateFormat q;
  static final String[] r;
  static final int[] s;
  private static final byte[] t;
  private static final d[] u;
  private static final d[] v;
  private static final d[] w;
  private static final d[] x;
  private static final d[] y;
  private static final d z;
  private final String a;
  private final AssetManager.AssetInputStream b;
  private int c;
  private final HashMap<String, c>[] d = new HashMap[E.length];
  private ByteOrder e = ByteOrder.BIG_ENDIAN;
  private int f;
  private int g;
  private int h;
  private int i;
  private int j;
  private int k;
  
  static
  {
    Integer localInteger1 = Integer.valueOf(1);
    Integer localInteger2 = Integer.valueOf(3);
    Integer localInteger3 = Integer.valueOf(2);
    Integer localInteger4 = Integer.valueOf(8);
    Arrays.asList(new Integer[] { localInteger1, Integer.valueOf(6), localInteger2, localInteger4 });
    Integer localInteger5 = Integer.valueOf(7);
    Integer localInteger6 = Integer.valueOf(5);
    Arrays.asList(new Integer[] { localInteger3, localInteger5, Integer.valueOf(4), localInteger6 });
    l = new int[] { 8, 8, 8 };
    m = new int[] { 8 };
    n = new byte[] { -1, -40, -1 };
    o = new byte[] { 79, 76, 89, 77, 80, 0 };
    p = new byte[] { 79, 76, 89, 77, 80, 85, 83, 0, 73, 73 };
    r = new String[] { "", "BYTE", "STRING", "USHORT", "ULONG", "URATIONAL", "SBYTE", "UNDEFINED", "SSHORT", "SLONG", "SRATIONAL", "SINGLE", "DOUBLE" };
    s = new int[] { 0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8, 1 };
    t = new byte[] { 65, 83, 67, 73, 73, 0, 0, 0 };
    u = new d[] { new d("NewSubfileType", 254, 4, null), new d("SubfileType", 255, 4, null), new d("ImageWidth", 256, 3, 4, null), new d("ImageLength", 257, 3, 4, null), new d("BitsPerSample", 258, 3, null), new d("Compression", 259, 3, null), new d("PhotometricInterpretation", 262, 3, null), new d("ImageDescription", 270, 2, null), new d("Make", 271, 2, null), new d("Model", 272, 2, null), new d("StripOffsets", 273, 3, 4, null), new d("Orientation", 274, 3, null), new d("SamplesPerPixel", 277, 3, null), new d("RowsPerStrip", 278, 3, 4, null), new d("StripByteCounts", 279, 3, 4, null), new d("XResolution", 282, 5, null), new d("YResolution", 283, 5, null), new d("PlanarConfiguration", 284, 3, null), new d("ResolutionUnit", 296, 3, null), new d("TransferFunction", 301, 3, null), new d("Software", 305, 2, null), new d("DateTime", 306, 2, null), new d("Artist", 315, 2, null), new d("WhitePoint", 318, 5, null), new d("PrimaryChromaticities", 319, 5, null), new d("SubIFDPointer", 330, 4, null), new d("JPEGInterchangeFormat", 513, 4, null), new d("JPEGInterchangeFormatLength", 514, 4, null), new d("YCbCrCoefficients", 529, 5, null), new d("YCbCrSubSampling", 530, 3, null), new d("YCbCrPositioning", 531, 3, null), new d("ReferenceBlackWhite", 532, 5, null), new d("Copyright", 33432, 2, null), new d("ExifIFDPointer", 34665, 4, null), new d("GPSInfoIFDPointer", 34853, 4, null), new d("SensorTopBorder", 4, 4, null), new d("SensorLeftBorder", 5, 4, null), new d("SensorBottomBorder", 6, 4, null), new d("SensorRightBorder", 7, 4, null), new d("ISO", 23, 3, null), new d("JpgFromRaw", 46, 7, null) };
    v = new d[] { new d("ExposureTime", 33434, 5, null), new d("FNumber", 33437, 5, null), new d("ExposureProgram", 34850, 3, null), new d("SpectralSensitivity", 34852, 2, null), new d("PhotographicSensitivity", 34855, 3, null), new d("OECF", 34856, 7, null), new d("ExifVersion", 36864, 2, null), new d("DateTimeOriginal", 36867, 2, null), new d("DateTimeDigitized", 36868, 2, null), new d("ComponentsConfiguration", 37121, 7, null), new d("CompressedBitsPerPixel", 37122, 5, null), new d("ShutterSpeedValue", 37377, 10, null), new d("ApertureValue", 37378, 5, null), new d("BrightnessValue", 37379, 10, null), new d("ExposureBiasValue", 37380, 10, null), new d("MaxApertureValue", 37381, 5, null), new d("SubjectDistance", 37382, 5, null), new d("MeteringMode", 37383, 3, null), new d("LightSource", 37384, 3, null), new d("Flash", 37385, 3, null), new d("FocalLength", 37386, 5, null), new d("SubjectArea", 37396, 3, null), new d("MakerNote", 37500, 7, null), new d("UserComment", 37510, 7, null), new d("SubSecTime", 37520, 2, null), new d("SubSecTimeOriginal", 37521, 2, null), new d("SubSecTimeDigitized", 37522, 2, null), new d("FlashpixVersion", 40960, 7, null), new d("ColorSpace", 40961, 3, null), new d("PixelXDimension", 40962, 3, 4, null), new d("PixelYDimension", 40963, 3, 4, null), new d("RelatedSoundFile", 40964, 2, null), new d("InteroperabilityIFDPointer", 40965, 4, null), new d("FlashEnergy", 41483, 5, null), new d("SpatialFrequencyResponse", 41484, 7, null), new d("FocalPlaneXResolution", 41486, 5, null), new d("FocalPlaneYResolution", 41487, 5, null), new d("FocalPlaneResolutionUnit", 41488, 3, null), new d("SubjectLocation", 41492, 3, null), new d("ExposureIndex", 41493, 5, null), new d("SensingMethod", 41495, 3, null), new d("FileSource", 41728, 7, null), new d("SceneType", 41729, 7, null), new d("CFAPattern", 41730, 7, null), new d("CustomRendered", 41985, 3, null), new d("ExposureMode", 41986, 3, null), new d("WhiteBalance", 41987, 3, null), new d("DigitalZoomRatio", 41988, 5, null), new d("FocalLengthIn35mmFilm", 41989, 3, null), new d("SceneCaptureType", 41990, 3, null), new d("GainControl", 41991, 3, null), new d("Contrast", 41992, 3, null), new d("Saturation", 41993, 3, null), new d("Sharpness", 41994, 3, null), new d("DeviceSettingDescription", 41995, 7, null), new d("SubjectDistanceRange", 41996, 3, null), new d("ImageUniqueID", 42016, 2, null), new d("DNGVersion", 50706, 1, null), new d("DefaultCropSize", 50720, 3, 4, null) };
    w = new d[] { new d("GPSVersionID", 0, 1, null), new d("GPSLatitudeRef", 1, 2, null), new d("GPSLatitude", 2, 5, null), new d("GPSLongitudeRef", 3, 2, null), new d("GPSLongitude", 4, 5, null), new d("GPSAltitudeRef", 5, 1, null), new d("GPSAltitude", 6, 5, null), new d("GPSTimeStamp", 7, 5, null), new d("GPSSatellites", 8, 2, null), new d("GPSStatus", 9, 2, null), new d("GPSMeasureMode", 10, 2, null), new d("GPSDOP", 11, 5, null), new d("GPSSpeedRef", 12, 2, null), new d("GPSSpeed", 13, 5, null), new d("GPSTrackRef", 14, 2, null), new d("GPSTrack", 15, 5, null), new d("GPSImgDirectionRef", 16, 2, null), new d("GPSImgDirection", 17, 5, null), new d("GPSMapDatum", 18, 2, null), new d("GPSDestLatitudeRef", 19, 2, null), new d("GPSDestLatitude", 20, 5, null), new d("GPSDestLongitudeRef", 21, 2, null), new d("GPSDestLongitude", 22, 5, null), new d("GPSDestBearingRef", 23, 2, null), new d("GPSDestBearing", 24, 5, null), new d("GPSDestDistanceRef", 25, 2, null), new d("GPSDestDistance", 26, 5, null), new d("GPSProcessingMethod", 27, 7, null), new d("GPSAreaInformation", 28, 7, null), new d("GPSDateStamp", 29, 2, null), new d("GPSDifferential", 30, 3, null) };
    x = new d[] { new d("InteroperabilityIndex", 1, 2, null) };
    y = new d[] { new d("NewSubfileType", 254, 4, null), new d("SubfileType", 255, 4, null), new d("ThumbnailImageWidth", 256, 3, 4, null), new d("ThumbnailImageLength", 257, 3, 4, null), new d("BitsPerSample", 258, 3, null), new d("Compression", 259, 3, null), new d("PhotometricInterpretation", 262, 3, null), new d("ImageDescription", 270, 2, null), new d("Make", 271, 2, null), new d("Model", 272, 2, null), new d("StripOffsets", 273, 3, 4, null), new d("Orientation", 274, 3, null), new d("SamplesPerPixel", 277, 3, null), new d("RowsPerStrip", 278, 3, 4, null), new d("StripByteCounts", 279, 3, 4, null), new d("XResolution", 282, 5, null), new d("YResolution", 283, 5, null), new d("PlanarConfiguration", 284, 3, null), new d("ResolutionUnit", 296, 3, null), new d("TransferFunction", 301, 3, null), new d("Software", 305, 2, null), new d("DateTime", 306, 2, null), new d("Artist", 315, 2, null), new d("WhitePoint", 318, 5, null), new d("PrimaryChromaticities", 319, 5, null), new d("SubIFDPointer", 330, 4, null), new d("JPEGInterchangeFormat", 513, 4, null), new d("JPEGInterchangeFormatLength", 514, 4, null), new d("YCbCrCoefficients", 529, 5, null), new d("YCbCrSubSampling", 530, 3, null), new d("YCbCrPositioning", 531, 3, null), new d("ReferenceBlackWhite", 532, 5, null), new d("Copyright", 33432, 2, null), new d("ExifIFDPointer", 34665, 4, null), new d("GPSInfoIFDPointer", 34853, 4, null), new d("DNGVersion", 50706, 1, null), new d("DefaultCropSize", 50720, 3, 4, null) };
    z = new d("StripOffsets", 273, 3, null);
    A = new d[] { new d("ThumbnailImage", 256, 7, null), new d("CameraSettingsIFDPointer", 8224, 4, null), new d("ImageProcessingIFDPointer", 8256, 4, null) };
    B = new d[] { new d("PreviewImageStart", 257, 4, null), new d("PreviewImageLength", 258, 4, null) };
    C = new d[] { new d("AspectFrame", 4371, 3, null) };
    D = new d[] { new d("ColorSpace", 55, 3, null) };
    Object localObject1 = u;
    E = new d[][] { localObject1, v, w, x, y, localObject1, A, B, C, D };
    F = new d[] { new d("SubIFDPointer", 330, 4, null), new d("ExifIFDPointer", 34665, 4, null), new d("GPSInfoIFDPointer", 34853, 4, null), new d("InteroperabilityIFDPointer", 40965, 4, null), new d("CameraSettingsIFDPointer", 8224, 1, null), new d("ImageProcessingIFDPointer", 8256, 1, null) };
    new d("JPEGInterchangeFormat", 513, 4, null);
    new d("JPEGInterchangeFormatLength", 514, 4, null);
    localObject1 = E;
    G = new HashMap[localObject1.length];
    H = new HashMap[localObject1.length];
    I = new HashSet(Arrays.asList(new String[] { "FNumber", "DigitalZoomRatio", "ExposureTime", "SubjectDistance", "GPSTimeStamp" }));
    J = new HashMap();
    K = Charset.forName("US-ASCII");
    L = "Exif\000\000".getBytes(K);
    q = new SimpleDateFormat("yyyy:MM:dd HH:mm:ss");
    q.setTimeZone(TimeZone.getTimeZone("UTC"));
    int i1 = 0;
    while (i1 < E.length)
    {
      G[i1] = new HashMap();
      H[i1] = new HashMap();
      localObject1 = E[i1];
      int i3 = localObject1.length;
      int i2 = 0;
      while (i2 < i3)
      {
        Object localObject2 = localObject1[i2];
        G[i1].put(Integer.valueOf(a), localObject2);
        H[i1].put(b, localObject2);
        i2 += 1;
      }
      i1 += 1;
    }
    J.put(Integer.valueOf(F0a), localInteger6);
    J.put(Integer.valueOf(F1a), localInteger1);
    J.put(Integer.valueOf(F2a), localInteger3);
    J.put(Integer.valueOf(F3a), localInteger2);
    J.put(Integer.valueOf(F4a), localInteger5);
    J.put(Integer.valueOf(F5a), localInteger4);
    Pattern.compile(".*[1-9].*");
    Pattern.compile("^([0-9][0-9]):([0-9][0-9]):([0-9][0-9])$");
  }
  
  public a(String paramString)
  {
    if (paramString != null)
    {
      String str = null;
      b = null;
      a = paramString;
      try
      {
        paramString = new FileInputStream(paramString);
        str = paramString;
        a(paramString);
        return;
      }
      finally
      {
        a(str);
      }
    }
    throw new IllegalArgumentException("filename cannot be null");
  }
  
  private int a(BufferedInputStream paramBufferedInputStream)
  {
    paramBufferedInputStream.mark(5000);
    byte[] arrayOfByte = new byte['?'];
    paramBufferedInputStream.read(arrayOfByte);
    paramBufferedInputStream.reset();
    if (a(arrayOfByte)) {
      return 4;
    }
    if (c(arrayOfByte)) {
      return 9;
    }
    if (b(arrayOfByte)) {
      return 7;
    }
    if (d(arrayOfByte)) {
      return 10;
    }
    return 0;
  }
  
  private void a(int paramInt1, int paramInt2)
  {
    if (!d[paramInt1].isEmpty())
    {
      if (d[paramInt2].isEmpty()) {
        return;
      }
      Object localObject = (c)d[paramInt1].get("ImageLength");
      c localC1 = (c)d[paramInt1].get("ImageWidth");
      c localC2 = (c)d[paramInt2].get("ImageLength");
      c localC3 = (c)d[paramInt2].get("ImageWidth");
      if (localObject != null)
      {
        if (localC1 == null) {
          return;
        }
        if (localC2 != null)
        {
          if (localC3 == null) {
            return;
          }
          int i1 = ((c)localObject).b(e);
          int i2 = localC1.b(e);
          int i3 = localC2.b(e);
          int i4 = localC3.b(e);
          if ((i1 < i3) && (i2 < i4))
          {
            localObject = d;
            localC1 = localObject[paramInt1];
            localObject[paramInt1] = localObject[paramInt2];
            localObject[paramInt2] = localC1;
          }
        }
      }
      return;
    }
  }
  
  private void a(b paramB)
  {
    c(paramB);
    paramB = (c)d[1].get("MakerNote");
    if (paramB != null)
    {
      paramB = new b(c);
      paramB.a(e);
      Object localObject = new byte[o.length];
      paramB.readFully((byte[])localObject);
      paramB.g(0L);
      byte[] arrayOfByte = new byte[p.length];
      paramB.readFully(arrayOfByte);
      if (Arrays.equals((byte[])localObject, o)) {
        paramB.g(8L);
      } else if (Arrays.equals(arrayOfByte, p)) {
        paramB.g(12L);
      }
      b(paramB, 6);
      paramB = (c)d[7].get("PreviewImageStart");
      localObject = (c)d[7].get("PreviewImageLength");
      if ((paramB != null) && (localObject != null))
      {
        d[5].put("JPEGInterchangeFormat", paramB);
        d[5].put("JPEGInterchangeFormatLength", localObject);
      }
      paramB = (c)d[8].get("AspectFrame");
      if (paramB != null)
      {
        paramB = (int[])c.a(paramB, e);
        if ((paramB != null) && (paramB.length == 4))
        {
          if ((paramB[2] > paramB[0]) && (paramB[3] > paramB[1]))
          {
            int i4 = paramB[2] - paramB[0] + 1;
            int i3 = paramB[3] - paramB[1] + 1;
            int i2 = i4;
            int i1 = i3;
            if (i4 < i3)
            {
              i2 = i4 + i3;
              i1 = i2 - i3;
              i2 -= i1;
            }
            paramB = c.a(i2, e);
            localObject = c.a(i1, e);
            d[0].put("ImageWidth", paramB);
            d[0].put("ImageLength", localObject);
          }
        }
        else
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("Invalid aspect frame values. frame=");
          ((StringBuilder)localObject).append(Arrays.toString(paramB));
          Log.w("ExifInterface", ((StringBuilder)localObject).toString());
          return;
        }
      }
    }
  }
  
  private void a(b paramB, int paramInt)
  {
    e = e(paramB);
    paramB.a(e);
    int i1 = paramB.readUnsignedShort();
    int i2 = c;
    if ((i2 != 7) && (i2 != 10) && (i1 != 42))
    {
      paramB = new StringBuilder();
      paramB.append("Invalid start code: ");
      paramB.append(Integer.toHexString(i1));
      throw new IOException(paramB.toString());
    }
    i1 = paramB.readInt();
    if ((i1 >= 8) && (i1 < paramInt))
    {
      paramInt = i1 - 8;
      if (paramInt > 0)
      {
        if (paramB.skipBytes(paramInt) == paramInt) {
          return;
        }
        paramB = new StringBuilder();
        paramB.append("Couldn't jump to first Ifd: ");
        paramB.append(paramInt);
        throw new IOException(paramB.toString());
      }
      return;
    }
    paramB = new StringBuilder();
    paramB.append("Invalid first Ifd offset: ");
    paramB.append(i1);
    throw new IOException(paramB.toString());
  }
  
  private void a(b paramB, int paramInt1, int paramInt2)
  {
    paramB.a(ByteOrder.BIG_ENDIAN);
    paramB.g(paramInt1);
    int i1 = paramB.readByte();
    if (i1 == -1)
    {
      if (paramB.readByte() == -40)
      {
        for (paramInt1 = paramInt1 + 1 + 1;; paramInt1 = i1 + paramInt1)
        {
          i1 = paramB.readByte();
          if (i1 != -1) {
            break label601;
          }
          i1 = paramB.readByte();
          if ((i1 == -39) || (i1 == -38)) {
            break label592;
          }
          int i3 = paramB.readUnsignedShort() - 2;
          int i2 = paramInt1 + 1 + 1 + 2;
          if (i3 < 0) {
            break label581;
          }
          byte[] arrayOfByte;
          if (i1 != -31)
          {
            if (i1 != -2)
            {
              switch (i1)
              {
              default: 
                switch (i1)
                {
                default: 
                  switch (i1)
                  {
                  default: 
                    switch (i1)
                    {
                    default: 
                      i1 = i2;
                      paramInt1 = i3;
                    }
                    break;
                  }
                  break;
                }
                break;
              case -64: 
              case -63: 
              case -62: 
              case -61: 
                if (paramB.skipBytes(1) == 1)
                {
                  d[paramInt2].put("ImageLength", c.a(paramB.readUnsignedShort(), e));
                  d[paramInt2].put("ImageWidth", c.a(paramB.readUnsignedShort(), e));
                  paramInt1 = i3 - 5;
                  i1 = i2;
                  break;
                }
                throw new IOException("Invalid SOFx");
              }
            }
            else
            {
              arrayOfByte = new byte[i3];
              if (paramB.read(arrayOfByte) == i3)
              {
                i3 = 0;
                i1 = i2;
                paramInt1 = i3;
                if (a("UserComment") == null)
                {
                  d[1].put("UserComment", c.a(new String(arrayOfByte, K)));
                  i1 = i2;
                  paramInt1 = i3;
                }
              }
              else
              {
                throw new IOException("Invalid exif");
              }
            }
          }
          else if (i3 < 6)
          {
            i1 = i2;
            paramInt1 = i3;
          }
          else
          {
            arrayOfByte = new byte[6];
            if (paramB.read(arrayOfByte) != 6) {
              break label570;
            }
            i1 = i2 + 6;
            paramInt1 = i3 - 6;
            if (Arrays.equals(arrayOfByte, L))
            {
              if (paramInt1 <= 0) {
                break label559;
              }
              g = i1;
              arrayOfByte = new byte[paramInt1];
              if (paramB.read(arrayOfByte) != paramInt1) {
                break label548;
              }
              i1 += paramInt1;
              paramInt1 = 0;
              a(arrayOfByte, paramInt2);
            }
          }
          if (paramInt1 < 0) {
            break label537;
          }
          if (paramB.skipBytes(paramInt1) != paramInt1) {
            break;
          }
        }
        throw new IOException("Invalid JPEG segment");
        label537:
        throw new IOException("Invalid length");
        label548:
        throw new IOException("Invalid exif");
        label559:
        throw new IOException("Invalid exif");
        label570:
        throw new IOException("Invalid exif");
        label581:
        throw new IOException("Invalid length");
        label592:
        paramB.a(e);
        return;
        label601:
        paramB = new StringBuilder();
        paramB.append("Invalid marker:");
        paramB.append(Integer.toHexString(i1 & 0xFF));
        throw new IOException(paramB.toString());
      }
      paramB = new StringBuilder();
      paramB.append("Invalid marker: ");
      paramB.append(Integer.toHexString(i1 & 0xFF));
      throw new IOException(paramB.toString());
    }
    paramB = new StringBuilder();
    paramB.append("Invalid marker: ");
    paramB.append(Integer.toHexString(i1 & 0xFF));
    paramB = new IOException(paramB.toString());
    for (;;)
    {
      throw paramB;
    }
  }
  
  private void a(b paramB, HashMap paramHashMap)
  {
    c localC = (c)paramHashMap.get("JPEGInterchangeFormat");
    paramHashMap = (c)paramHashMap.get("JPEGInterchangeFormatLength");
    if ((localC != null) && (paramHashMap != null))
    {
      int i2 = localC.b(e);
      int i3 = Math.min(paramHashMap.b(e), paramB.available() - i2);
      int i4 = c;
      int i1;
      if ((i4 != 4) && (i4 != 9) && (i4 != 10))
      {
        i1 = i2;
        if (i4 == 7) {
          i1 = i2 + h;
        }
      }
      else
      {
        i1 = i2 + g;
      }
      if ((i1 > 0) && (i3 > 0) && (a == null) && (b == null))
      {
        paramHashMap = new byte[i3];
        paramB.g(i1);
        paramB.readFully(paramHashMap);
      }
    }
  }
  
  private static void a(Closeable paramCloseable)
  {
    if (paramCloseable != null) {
      try
      {
        paramCloseable.close();
        return;
      }
      catch (Exception paramCloseable) {}catch (RuntimeException paramCloseable)
      {
        throw paramCloseable;
      }
    }
  }
  
  /* Error */
  private void a(InputStream paramInputStream)
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore_2
    //   2: iload_2
    //   3: getstatic 514	a/b/e/a:E	[[La/b/e/a$d;
    //   6: arraylength
    //   7: if_icmpge +23 -> 30
    //   10: aload_0
    //   11: getfield 594	a/b/e/a:d	[Ljava/util/HashMap;
    //   14: iload_2
    //   15: new 518	java/util/HashMap
    //   18: dup
    //   19: invokespecial 531	java/util/HashMap:<init>	()V
    //   22: aastore
    //   23: iload_2
    //   24: iconst_1
    //   25: iadd
    //   26: istore_2
    //   27: goto -25 -> 2
    //   30: new 622	java/io/BufferedInputStream
    //   33: dup
    //   34: aload_1
    //   35: sipush 5000
    //   38: invokespecial 806	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;I)V
    //   41: astore_1
    //   42: aload_0
    //   43: aload_0
    //   44: aload_1
    //   45: invokespecial 808	a/b/e/a:a	(Ljava/io/BufferedInputStream;)I
    //   48: putfield 722	a/b/e/a:c	I
    //   51: new 8	a/b/e/a$b
    //   54: dup
    //   55: aload_1
    //   56: invokespecial 810	a/b/e/a$b:<init>	(Ljava/io/InputStream;)V
    //   59: astore_1
    //   60: aload_0
    //   61: getfield 722	a/b/e/a:c	I
    //   64: tableswitch	default:+124->188, 0:+98->162, 1:+98->162, 2:+98->162, 3:+98->162, 4:+88->152, 5:+98->162, 6:+98->162, 7:+80->144, 8:+98->162, 9:+72->136, 10:+64->128, 11:+98->162
    //   128: aload_0
    //   129: aload_1
    //   130: invokespecial 812	a/b/e/a:d	(La/b/e/a$b;)V
    //   133: goto +34 -> 167
    //   136: aload_0
    //   137: aload_1
    //   138: invokespecial 814	a/b/e/a:b	(La/b/e/a$b;)V
    //   141: goto +26 -> 167
    //   144: aload_0
    //   145: aload_1
    //   146: invokespecial 816	a/b/e/a:a	(La/b/e/a$b;)V
    //   149: goto +18 -> 167
    //   152: aload_0
    //   153: aload_1
    //   154: iconst_0
    //   155: iconst_0
    //   156: invokespecial 818	a/b/e/a:a	(La/b/e/a$b;II)V
    //   159: goto +8 -> 167
    //   162: aload_0
    //   163: aload_1
    //   164: invokespecial 658	a/b/e/a:c	(La/b/e/a$b;)V
    //   167: aload_0
    //   168: aload_1
    //   169: invokespecial 820	a/b/e/a:f	(La/b/e/a$b;)V
    //   172: goto +11 -> 183
    //   175: astore_1
    //   176: aload_0
    //   177: invokespecial 822	a/b/e/a:c	()V
    //   180: aload_1
    //   181: athrow
    //   182: astore_1
    //   183: aload_0
    //   184: invokespecial 822	a/b/e/a:c	()V
    //   187: return
    //   188: goto -21 -> 167
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	191	0	this	a
    //   0	191	1	paramInputStream	InputStream
    //   1	26	2	i1	int
    // Exception table:
    //   from	to	target	type
    //   2	23	175	finally
    //   30	128	175	finally
    //   128	133	175	finally
    //   136	141	175	finally
    //   144	149	175	finally
    //   152	159	175	finally
    //   162	167	175	finally
    //   167	172	175	finally
    //   2	23	182	java/io/IOException
    //   30	128	182	java/io/IOException
    //   128	133	182	java/io/IOException
    //   136	141	182	java/io/IOException
    //   144	149	182	java/io/IOException
    //   152	159	182	java/io/IOException
    //   162	167	182	java/io/IOException
    //   167	172	182	java/io/IOException
  }
  
  private void a(byte[] paramArrayOfByte, int paramInt)
  {
    b localB = new b(paramArrayOfByte);
    a(localB, paramArrayOfByte.length);
    b(localB, paramInt);
  }
  
  private boolean a(HashMap paramHashMap)
  {
    Object localObject = (c)paramHashMap.get("BitsPerSample");
    if (localObject != null)
    {
      localObject = (int[])c.a((c)localObject, e);
      if (Arrays.equals(l, (int[])localObject)) {
        return true;
      }
      if (c == 3)
      {
        paramHashMap = (c)paramHashMap.get("PhotometricInterpretation");
        if (paramHashMap != null)
        {
          int i1 = paramHashMap.b(e);
          if (((i1 == 1) && (Arrays.equals((int[])localObject, m))) || ((i1 == 6) && (Arrays.equals((int[])localObject, l)))) {
            return true;
          }
        }
      }
    }
    return false;
  }
  
  private static boolean a(byte[] paramArrayOfByte)
  {
    int i1 = 0;
    for (;;)
    {
      byte[] arrayOfByte = n;
      if (i1 >= arrayOfByte.length) {
        break;
      }
      if (paramArrayOfByte[i1] != arrayOfByte[i1]) {
        return false;
      }
      i1 += 1;
    }
    return true;
  }
  
  private static long[] a(Object paramObject)
  {
    if ((paramObject instanceof int[]))
    {
      paramObject = (int[])paramObject;
      long[] arrayOfLong = new long[paramObject.length];
      int i1 = 0;
      while (i1 < paramObject.length)
      {
        arrayOfLong[i1] = paramObject[i1];
        i1 += 1;
      }
      return arrayOfLong;
    }
    if ((paramObject instanceof long[])) {
      return (long[])paramObject;
    }
    return null;
  }
  
  private c b(String paramString)
  {
    String str = paramString;
    if ("ISOSpeedRatings".equals(paramString)) {
      str = "PhotographicSensitivity";
    }
    int i1 = 0;
    while (i1 < E.length)
    {
      paramString = (c)d[i1].get(str);
      if (paramString != null) {
        return paramString;
      }
      i1 += 1;
    }
    return null;
  }
  
  private void b(b paramB)
  {
    paramB.skipBytes(84);
    Object localObject = new byte[4];
    byte[] arrayOfByte = new byte[4];
    paramB.read((byte[])localObject);
    paramB.skipBytes(4);
    paramB.read(arrayOfByte);
    int i1 = ByteBuffer.wrap((byte[])localObject).getInt();
    int i2 = ByteBuffer.wrap(arrayOfByte).getInt();
    a(paramB, i1, 5);
    paramB.g(i2);
    paramB.a(ByteOrder.BIG_ENDIAN);
    i2 = paramB.readInt();
    i1 = 0;
    while (i1 < i2)
    {
      int i3 = paramB.readUnsignedShort();
      int i4 = paramB.readUnsignedShort();
      if (i3 == za)
      {
        i1 = paramB.readShort();
        i2 = paramB.readShort();
        paramB = c.a(i1, e);
        localObject = c.a(i2, e);
        d[0].put("ImageLength", paramB);
        d[0].put("ImageWidth", localObject);
        return;
      }
      paramB.skipBytes(i4);
      i1 += 1;
    }
  }
  
  private void b(b paramB, int paramInt)
  {
    if (b.a(paramB) + 2 > b.b(paramB)) {
      return;
    }
    int i2 = paramB.readShort();
    if (b.a(paramB) + i2 * 12 > b.b(paramB)) {
      return;
    }
    for (int i3 = 0;; i3 = (short)(i3 + 1))
    {
      int i6 = paramInt;
      if (i3 >= i2) {
        break;
      }
      int i7 = paramB.readUnsignedShort();
      int i4 = paramB.readUnsignedShort();
      int i8 = paramB.readInt();
      long l2 = paramB.l() + 4L;
      Object localObject1 = (d)G[i6].get(Integer.valueOf(i7));
      int i5 = 0;
      Object localObject2;
      if (localObject1 == null)
      {
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("Skip the tag entry since tag number is not defined: ");
        ((StringBuilder)localObject2).append(i7);
        Log.w("ExifInterface", ((StringBuilder)localObject2).toString());
      }
      else if ((i4 > 0) && (i4 < s.length))
      {
        if (!d.a((d)localObject1, i4))
        {
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append("Skip the tag entry since data format (");
          ((StringBuilder)localObject2).append(r[i4]);
          ((StringBuilder)localObject2).append(") is unexpected for tag: ");
          ((StringBuilder)localObject2).append(b);
          Log.w("ExifInterface", ((StringBuilder)localObject2).toString());
        }
        else
        {
          i1 = i4;
          if (i4 == 7) {
            i1 = c;
          }
          l1 = i8 * s[i1];
          if ((l1 >= 0L) && (l1 <= 2147483647L))
          {
            i5 = 1;
            break label378;
          }
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append("Skip the tag entry since the number of components is invalid: ");
          ((StringBuilder)localObject2).append(i8);
          Log.w("ExifInterface", ((StringBuilder)localObject2).toString());
          break label378;
        }
      }
      else
      {
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("Skip the tag entry since data format is invalid: ");
        ((StringBuilder)localObject2).append(i4);
        Log.w("ExifInterface", ((StringBuilder)localObject2).toString());
      }
      long l1 = 0L;
      int i1 = i4;
      label378:
      if (i5 == 0)
      {
        paramB.g(l2);
      }
      else
      {
        if (l1 > 4L)
        {
          i4 = paramB.readInt();
          i5 = c;
          if (i5 == 7)
          {
            if ("MakerNote".equals(b)) {
              h = i4;
            } else if (i6 == 6) {
              if ("ThumbnailImage".equals(b))
              {
                i = i4;
                j = i8;
                localObject2 = c.a(6, e);
                c localC1 = c.a(i, e);
                c localC2 = c.a(j, e);
                d[4].put("Compression", localObject2);
                d[4].put("JPEGInterchangeFormat", localC1);
                d[4].put("JPEGInterchangeFormatLength", localC2);
                break label592;
              }
            }
          }
          else if ((i5 == 10) && ("JpgFromRaw".equals(b))) {
            k = i4;
          }
          label592:
          if (i4 + l1 <= b.b(paramB))
          {
            paramB.g(i4);
          }
          else
          {
            localObject1 = new StringBuilder();
            ((StringBuilder)localObject1).append("Skip the tag entry since data offset is invalid: ");
            ((StringBuilder)localObject1).append(i4);
            Log.w("ExifInterface", ((StringBuilder)localObject1).toString());
            paramB.g(l2);
            continue;
          }
        }
        localObject2 = (Integer)J.get(Integer.valueOf(i7));
        if (localObject2 != null)
        {
          l1 = -1L;
          if (i1 != 3)
          {
            if (i1 != 4)
            {
              if (i1 != 8)
              {
                if ((i1 == 9) || (i1 == 13)) {
                  l1 = paramB.readInt();
                }
              }
              else {
                l1 = paramB.readShort();
              }
            }
            else {
              l1 = paramB.m();
            }
          }
          else {
            l1 = paramB.readUnsignedShort();
          }
          if ((l1 > 0L) && (l1 < b.b(paramB)))
          {
            paramB.g(l1);
            b(paramB, ((Integer)localObject2).intValue());
          }
          else
          {
            localObject1 = new StringBuilder();
            ((StringBuilder)localObject1).append("Skip jump into the IFD since its offset is invalid: ");
            ((StringBuilder)localObject1).append(l1);
            Log.w("ExifInterface", ((StringBuilder)localObject1).toString());
          }
          paramB.g(l2);
        }
        else
        {
          localObject2 = new byte[(int)l1];
          paramB.readFully((byte[])localObject2);
          localObject2 = new c(i1, i8, (byte[])localObject2, null);
          d[i6].put(b, localObject2);
          if ("DNGVersion".equals(b)) {
            c = 3;
          }
          if (((!"Make".equals(b)) && (!"Model".equals(b))) || ((((c)localObject2).c(e).contains("PENTAX")) || (("Compression".equals(b)) && (((c)localObject2).b(e) == 65535)))) {
            c = 8;
          }
          if (paramB.l() != l2) {
            paramB.g(l2);
          }
        }
      }
    }
    if (paramB.l() + 4 <= b.b(paramB))
    {
      paramInt = paramB.readInt();
      if ((paramInt > 8) && (paramInt < b.b(paramB)))
      {
        paramB.g(paramInt);
        if (d[4].isEmpty())
        {
          b(paramB, 4);
          return;
        }
        if (d[5].isEmpty()) {
          b(paramB, 5);
        }
      }
    }
  }
  
  private void b(b paramB, HashMap paramHashMap)
  {
    c localC2 = (c)paramHashMap.get("StripOffsets");
    c localC1 = (c)paramHashMap.get("StripByteCounts");
    if ((localC2 != null) && (localC1 != null))
    {
      paramHashMap = a(c.a(localC2, e));
      long[] arrayOfLong = a(c.a(localC1, e));
      if (paramHashMap == null)
      {
        Log.w("ExifInterface", "stripOffsets should not be null.");
        return;
      }
      if (arrayOfLong == null)
      {
        Log.w("ExifInterface", "stripByteCounts should not be null.");
        return;
      }
      int i2 = arrayOfLong.length;
      long l1 = 0L;
      int i1 = 0;
      while (i1 < i2)
      {
        l1 += arrayOfLong[i1];
        i1 += 1;
      }
      byte[] arrayOfByte1 = new byte[(int)l1];
      int i3 = 0;
      i2 = 0;
      i1 = 0;
      while (i1 < paramHashMap.length)
      {
        int i5 = (int)paramHashMap[i1];
        int i4 = (int)arrayOfLong[i1];
        i5 -= i3;
        if (i5 < 0) {
          Log.d("ExifInterface", "Invalid strip offset value");
        }
        paramB.g(i5);
        byte[] arrayOfByte2 = new byte[i4];
        paramB.read(arrayOfByte2);
        i3 = i3 + i5 + i4;
        System.arraycopy(arrayOfByte2, 0, arrayOfByte1, i2, arrayOfByte2.length);
        i2 += arrayOfByte2.length;
        i1 += 1;
      }
      return;
    }
  }
  
  private void b(InputStream paramInputStream)
  {
    a(0, 5);
    a(0, 4);
    a(5, 4);
    paramInputStream = (c)d[1].get("PixelXDimension");
    c localC = (c)d[1].get("PixelYDimension");
    if ((paramInputStream != null) && (localC != null))
    {
      d[0].put("ImageWidth", paramInputStream);
      d[0].put("ImageLength", localC);
    }
    if ((d[4].isEmpty()) && (b(d[5])))
    {
      paramInputStream = d;
      paramInputStream[4] = paramInputStream[5];
      paramInputStream[5] = new HashMap();
    }
    if (!b(d[4])) {
      Log.d("ExifInterface", "No image meets the size requirements of a thumbnail image.");
    }
  }
  
  private boolean b(HashMap paramHashMap)
  {
    c localC = (c)paramHashMap.get("ImageLength");
    paramHashMap = (c)paramHashMap.get("ImageWidth");
    if ((localC != null) && (paramHashMap != null))
    {
      int i1 = localC.b(e);
      int i2 = paramHashMap.b(e);
      if ((i1 <= 512) && (i2 <= 512)) {
        return true;
      }
    }
    return false;
  }
  
  private boolean b(byte[] paramArrayOfByte)
  {
    paramArrayOfByte = new b(paramArrayOfByte);
    e = e(paramArrayOfByte);
    paramArrayOfByte.a(e);
    int i1 = paramArrayOfByte.readShort();
    paramArrayOfByte.close();
    return (i1 == 20306) || (i1 == 21330);
  }
  
  private void c()
  {
    String str = a("DateTimeOriginal");
    if ((str != null) && (a("DateTime") == null)) {
      d[0].put("DateTime", c.a(str));
    }
    if (a("ImageWidth") == null) {
      d[0].put("ImageWidth", c.a(0L, e));
    }
    if (a("ImageLength") == null) {
      d[0].put("ImageLength", c.a(0L, e));
    }
    if (a("Orientation") == null) {
      d[0].put("Orientation", c.a(0L, e));
    }
    if (a("LightSource") == null) {
      d[1].put("LightSource", c.a(0L, e));
    }
  }
  
  private void c(b paramB)
  {
    a(paramB, paramB.available());
    b(paramB, 0);
    d(paramB, 0);
    d(paramB, 5);
    d(paramB, 4);
    b(paramB);
    if (c == 8)
    {
      paramB = (c)d[1].get("MakerNote");
      if (paramB != null)
      {
        paramB = new b(c);
        paramB.a(e);
        paramB.g(6L);
        b(paramB, 9);
        paramB = (c)d[9].get("ColorSpace");
        if (paramB != null) {
          d[1].put("ColorSpace", paramB);
        }
      }
    }
  }
  
  private void c(b paramB, int paramInt)
  {
    c localC1 = (c)d[paramInt].get("ImageLength");
    c localC2 = (c)d[paramInt].get("ImageWidth");
    if ((localC1 == null) || (localC2 == null))
    {
      localC1 = (c)d[paramInt].get("JPEGInterchangeFormat");
      if (localC1 != null) {
        a(paramB, localC1.b(e), paramInt);
      }
    }
  }
  
  private boolean c(byte[] paramArrayOfByte)
  {
    byte[] arrayOfByte = "FUJIFILMCCD-RAW".getBytes(Charset.defaultCharset());
    int i1 = 0;
    while (i1 < arrayOfByte.length)
    {
      if (paramArrayOfByte[i1] != arrayOfByte[i1]) {
        return false;
      }
      i1 += 1;
    }
    return true;
  }
  
  private void d(b paramB)
  {
    c(paramB);
    if ((c)d[0].get("JpgFromRaw") != null) {
      a(paramB, k, 5);
    }
    paramB = (c)d[0].get("ISO");
    c localC = (c)d[1].get("PhotographicSensitivity");
    if ((paramB != null) && (localC == null)) {
      d[1].put("PhotographicSensitivity", paramB);
    }
  }
  
  private void d(b paramB, int paramInt)
  {
    Object localObject = (c)d[paramInt].get("DefaultCropSize");
    c localC1 = (c)d[paramInt].get("SensorTopBorder");
    c localC2 = (c)d[paramInt].get("SensorLeftBorder");
    c localC3 = (c)d[paramInt].get("SensorBottomBorder");
    c localC4 = (c)d[paramInt].get("SensorRightBorder");
    if (localObject != null)
    {
      if (a == 5)
      {
        paramB = (e[])c.a((c)localObject, e);
        if ((paramB != null) && (paramB.length == 2))
        {
          localObject = c.a(paramB[0], e);
          paramB = c.a(paramB[1], e);
        }
        else
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("Invalid crop size values. cropSize=");
          ((StringBuilder)localObject).append(Arrays.toString(paramB));
          Log.w("ExifInterface", ((StringBuilder)localObject).toString());
        }
      }
      else
      {
        paramB = (int[])c.a((c)localObject, e);
        if ((paramB == null) || (paramB.length != 2)) {
          break label265;
        }
        localObject = c.a(paramB[0], e);
        paramB = c.a(paramB[1], e);
      }
      d[paramInt].put("ImageWidth", localObject);
      d[paramInt].put("ImageLength", paramB);
      return;
      label265:
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Invalid crop size values. cropSize=");
      ((StringBuilder)localObject).append(Arrays.toString(paramB));
      Log.w("ExifInterface", ((StringBuilder)localObject).toString());
      return;
    }
    if ((localC1 != null) && (localC2 != null) && (localC3 != null) && (localC4 != null))
    {
      int i1 = localC1.b(e);
      int i2 = localC3.b(e);
      int i3 = localC4.b(e);
      int i4 = localC2.b(e);
      if ((i2 > i1) && (i3 > i4))
      {
        paramB = c.a(i2 - i1, e);
        localObject = c.a(i3 - i4, e);
        d[paramInt].put("ImageLength", paramB);
        d[paramInt].put("ImageWidth", localObject);
      }
      return;
    }
    c(paramB, paramInt);
  }
  
  private boolean d(byte[] paramArrayOfByte)
  {
    paramArrayOfByte = new b(paramArrayOfByte);
    e = e(paramArrayOfByte);
    paramArrayOfByte.a(e);
    int i1 = paramArrayOfByte.readShort();
    paramArrayOfByte.close();
    return i1 == 85;
  }
  
  private ByteOrder e(b paramB)
  {
    int i1 = paramB.readShort();
    if (i1 != 18761)
    {
      if (i1 == 19789) {
        return ByteOrder.BIG_ENDIAN;
      }
      paramB = new StringBuilder();
      paramB.append("Invalid byte order: ");
      paramB.append(Integer.toHexString(i1));
      throw new IOException(paramB.toString());
    }
    return ByteOrder.LITTLE_ENDIAN;
  }
  
  private void f(b paramB)
  {
    HashMap localHashMap = d[4];
    c localC = (c)localHashMap.get("Compression");
    if (localC != null)
    {
      f = localC.b(e);
      int i1 = f;
      if (i1 != 1) {
        if (i1 != 6)
        {
          if (i1 != 7) {
            break label84;
          }
        }
        else
        {
          a(paramB, localHashMap);
          break label84;
        }
      }
      if (a(localHashMap)) {
        b(paramB, localHashMap);
      }
      label84:
      return;
    }
    f = 6;
    a(paramB, localHashMap);
  }
  
  public int a(String paramString, int paramInt)
  {
    paramString = b(paramString);
    if (paramString == null) {
      return paramInt;
    }
    try
    {
      int i1 = paramString.b(e);
      return i1;
    }
    catch (NumberFormatException paramString) {}
    return paramInt;
  }
  
  public String a(String paramString)
  {
    Object localObject = b(paramString);
    if (localObject != null)
    {
      if (!I.contains(paramString)) {
        return ((c)localObject).c(e);
      }
      if (paramString.equals("GPSTimeStamp"))
      {
        int i1 = a;
        if ((i1 != 5) && (i1 != 10))
        {
          paramString = new StringBuilder();
          paramString.append("GPS Timestamp format is not rational. format=");
          paramString.append(a);
          Log.w("ExifInterface", paramString.toString());
          return null;
        }
        paramString = (e[])c.a((c)localObject, e);
        if ((paramString != null) && (paramString.length == 3)) {
          return String.format("%02d:%02d:%02d", new Object[] { Integer.valueOf((int)((float)0a / (float)0b)), Integer.valueOf((int)((float)1a / (float)1b)), Integer.valueOf((int)((float)2a / (float)2b)) });
        }
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("Invalid GPS Timestamp array. array=");
        ((StringBuilder)localObject).append(Arrays.toString(paramString));
        Log.w("ExifInterface", ((StringBuilder)localObject).toString());
        return null;
      }
      try
      {
        paramString = Double.toString(((c)localObject).a(e));
        return paramString;
      }
      catch (NumberFormatException paramString)
      {
        return null;
      }
    }
    return null;
  }
  
  private static class b
    extends InputStream
    implements DataInput
  {
    private static final ByteOrder g = ByteOrder.LITTLE_ENDIAN;
    private static final ByteOrder h = ByteOrder.BIG_ENDIAN;
    private DataInputStream c;
    private ByteOrder d = ByteOrder.BIG_ENDIAN;
    private final int e;
    private int f;
    
    public b(InputStream paramInputStream)
    {
      c = new DataInputStream(paramInputStream);
      e = c.available();
      f = 0;
      c.mark(e);
    }
    
    public b(byte[] paramArrayOfByte)
    {
      this(new ByteArrayInputStream(paramArrayOfByte));
    }
    
    public void a(ByteOrder paramByteOrder)
    {
      d = paramByteOrder;
    }
    
    public int available()
    {
      return c.available();
    }
    
    public void g(long paramLong)
    {
      int i = f;
      if (i > paramLong)
      {
        f = 0;
        c.reset();
        c.mark(e);
      }
      else
      {
        paramLong -= i;
      }
      if (skipBytes((int)paramLong) == (int)paramLong) {
        return;
      }
      throw new IOException("Couldn't seek up to the byteCount");
    }
    
    public int l()
    {
      return f;
    }
    
    public long m()
    {
      return readInt() & 0xFFFFFFFF;
    }
    
    public int read()
    {
      f += 1;
      return c.read();
    }
    
    public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    {
      paramInt1 = c.read(paramArrayOfByte, paramInt1, paramInt2);
      f += paramInt1;
      return paramInt1;
    }
    
    public boolean readBoolean()
    {
      f += 1;
      return c.readBoolean();
    }
    
    public byte readByte()
    {
      f += 1;
      if (f <= e)
      {
        int i = c.read();
        if (i >= 0) {
          return (byte)i;
        }
        throw new EOFException();
      }
      throw new EOFException();
    }
    
    public char readChar()
    {
      f += 2;
      return c.readChar();
    }
    
    public double readDouble()
    {
      return Double.longBitsToDouble(readLong());
    }
    
    public float readFloat()
    {
      return Float.intBitsToFloat(readInt());
    }
    
    public void readFully(byte[] paramArrayOfByte)
    {
      f += paramArrayOfByte.length;
      if (f <= e)
      {
        if (c.read(paramArrayOfByte, 0, paramArrayOfByte.length) == paramArrayOfByte.length) {
          return;
        }
        throw new IOException("Couldn't read up to the length of buffer");
      }
      throw new EOFException();
    }
    
    public void readFully(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    {
      f += paramInt2;
      if (f <= e)
      {
        if (c.read(paramArrayOfByte, paramInt1, paramInt2) == paramInt2) {
          return;
        }
        throw new IOException("Couldn't read up to the length of buffer");
      }
      throw new EOFException();
    }
    
    public int readInt()
    {
      f += 4;
      if (f <= e)
      {
        int i = c.read();
        int j = c.read();
        int k = c.read();
        int m = c.read();
        if ((i | j | k | m) >= 0)
        {
          Object localObject = d;
          if (localObject == g) {
            return (m << 24) + (k << 16) + (j << 8) + i;
          }
          if (localObject == h) {
            return (i << 24) + (j << 16) + (k << 8) + m;
          }
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("Invalid byte order: ");
          ((StringBuilder)localObject).append(d);
          throw new IOException(((StringBuilder)localObject).toString());
        }
        throw new EOFException();
      }
      throw new EOFException();
    }
    
    public String readLine()
    {
      Log.d("ExifInterface", "Currently unsupported");
      return null;
    }
    
    public long readLong()
    {
      f += 8;
      if (f <= e)
      {
        int i = c.read();
        int j = c.read();
        int k = c.read();
        int m = c.read();
        int n = c.read();
        int i1 = c.read();
        int i2 = c.read();
        int i3 = c.read();
        if ((i | j | k | m | n | i1 | i2 | i3) >= 0)
        {
          Object localObject = d;
          if (localObject == g) {
            return (i3 << 56) + (i2 << 48) + (i1 << 40) + (n << 32) + (m << 24) + (k << 16) + (j << 8) + i;
          }
          if (localObject == h) {
            return (i << 56) + (j << 48) + (k << 40) + (m << 32) + (n << 24) + (i1 << 16) + (i2 << 8) + i3;
          }
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("Invalid byte order: ");
          ((StringBuilder)localObject).append(d);
          throw new IOException(((StringBuilder)localObject).toString());
        }
        throw new EOFException();
      }
      throw new EOFException();
    }
    
    public short readShort()
    {
      f += 2;
      if (f <= e)
      {
        int i = c.read();
        int j = c.read();
        if ((i | j) >= 0)
        {
          Object localObject = d;
          if (localObject == g) {
            return (short)((j << 8) + i);
          }
          if (localObject == h) {
            return (short)((i << 8) + j);
          }
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("Invalid byte order: ");
          ((StringBuilder)localObject).append(d);
          throw new IOException(((StringBuilder)localObject).toString());
        }
        throw new EOFException();
      }
      throw new EOFException();
    }
    
    public String readUTF()
    {
      f += 2;
      return c.readUTF();
    }
    
    public int readUnsignedByte()
    {
      f += 1;
      return c.readUnsignedByte();
    }
    
    public int readUnsignedShort()
    {
      f += 2;
      if (f <= e)
      {
        int i = c.read();
        int j = c.read();
        if ((i | j) >= 0)
        {
          Object localObject = d;
          if (localObject == g) {
            return (j << 8) + i;
          }
          if (localObject == h) {
            return (i << 8) + j;
          }
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("Invalid byte order: ");
          ((StringBuilder)localObject).append(d);
          throw new IOException(((StringBuilder)localObject).toString());
        }
        throw new EOFException();
      }
      throw new EOFException();
    }
    
    public int skipBytes(int paramInt)
    {
      int i = Math.min(paramInt, e - f);
      paramInt = 0;
      while (paramInt < i) {
        paramInt += c.skipBytes(i - paramInt);
      }
      f += paramInt;
      return paramInt;
    }
  }
  
  private static class c
  {
    public final int a;
    public final int b;
    public final byte[] c;
    
    private c(int paramInt1, int paramInt2, byte[] paramArrayOfByte)
    {
      a = paramInt1;
      b = paramInt2;
      c = paramArrayOfByte;
    }
    
    public static c a(int paramInt, ByteOrder paramByteOrder)
    {
      return a(new int[] { paramInt }, paramByteOrder);
    }
    
    public static c a(long paramLong, ByteOrder paramByteOrder)
    {
      return a(new long[] { paramLong }, paramByteOrder);
    }
    
    public static c a(a.e paramE, ByteOrder paramByteOrder)
    {
      return a(new a.e[] { paramE }, paramByteOrder);
    }
    
    public static c a(String paramString)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramString);
      localStringBuilder.append('\000');
      paramString = localStringBuilder.toString().getBytes(a.a());
      return new c(2, paramString.length, paramString);
    }
    
    public static c a(int[] paramArrayOfInt, ByteOrder paramByteOrder)
    {
      ByteBuffer localByteBuffer = ByteBuffer.wrap(new byte[a.s[3] * paramArrayOfInt.length]);
      localByteBuffer.order(paramByteOrder);
      int j = paramArrayOfInt.length;
      int i = 0;
      while (i < j)
      {
        localByteBuffer.putShort((short)paramArrayOfInt[i]);
        i += 1;
      }
      return new c(3, paramArrayOfInt.length, localByteBuffer.array());
    }
    
    public static c a(long[] paramArrayOfLong, ByteOrder paramByteOrder)
    {
      ByteBuffer localByteBuffer = ByteBuffer.wrap(new byte[a.s[4] * paramArrayOfLong.length]);
      localByteBuffer.order(paramByteOrder);
      int j = paramArrayOfLong.length;
      int i = 0;
      while (i < j)
      {
        localByteBuffer.putInt((int)paramArrayOfLong[i]);
        i += 1;
      }
      return new c(4, paramArrayOfLong.length, localByteBuffer.array());
    }
    
    public static c a(a.e[] paramArrayOfE, ByteOrder paramByteOrder)
    {
      ByteBuffer localByteBuffer = ByteBuffer.wrap(new byte[a.s[5] * paramArrayOfE.length]);
      localByteBuffer.order(paramByteOrder);
      int j = paramArrayOfE.length;
      int i = 0;
      while (i < j)
      {
        paramByteOrder = paramArrayOfE[i];
        localByteBuffer.putInt((int)a);
        localByteBuffer.putInt((int)b);
        i += 1;
      }
      return new c(5, paramArrayOfE.length, localByteBuffer.array());
    }
    
    /* Error */
    private Object d(ByteOrder paramByteOrder)
    {
      // Byte code:
      //   0: aconst_null
      //   1: astore 7
      //   3: aconst_null
      //   4: astore 6
      //   6: new 104	a/b/e/a$b
      //   9: dup
      //   10: aload_0
      //   11: getfield 22	a/b/e/a$c:c	[B
      //   14: invokespecial 107	a/b/e/a$b:<init>	([B)V
      //   17: astore 8
      //   19: aload 8
      //   21: astore 7
      //   23: aload 7
      //   25: astore 6
      //   27: aload 7
      //   29: aload_1
      //   30: invokevirtual 110	a/b/e/a$b:a	(Ljava/nio/ByteOrder;)V
      //   33: aload 7
      //   35: astore 6
      //   37: aload_0
      //   38: getfield 18	a/b/e/a$c:a	I
      //   41: istore_2
      //   42: iconst_0
      //   43: istore_3
      //   44: iload_2
      //   45: tableswitch	default:+1031->1076, 1:+800->845, 2:+614->659, 3:+549->594, 4:+484->529, 5:+405->450, 6:+800->845, 7:+614->659, 8:+340->385, 9:+275->320, 10:+194->239, 11:+128->173, 12:+63->108
      //   108: aload 7
      //   110: astore 6
      //   112: aload_0
      //   113: getfield 20	a/b/e/a$c:b	I
      //   116: newarray double
      //   118: astore_1
      //   119: iconst_0
      //   120: istore_2
      //   121: aload 7
      //   123: astore 6
      //   125: iload_2
      //   126: aload_0
      //   127: getfield 20	a/b/e/a$c:b	I
      //   130: if_icmpge +22 -> 152
      //   133: aload 7
      //   135: astore 6
      //   137: aload_1
      //   138: iload_2
      //   139: aload 7
      //   141: invokevirtual 114	a/b/e/a$b:readDouble	()D
      //   144: dastore
      //   145: iload_2
      //   146: iconst_1
      //   147: iadd
      //   148: istore_2
      //   149: goto -28 -> 121
      //   152: aload 7
      //   154: invokevirtual 119	java/io/InputStream:close	()V
      //   157: aload_1
      //   158: areturn
      //   159: astore 6
      //   161: ldc 121
      //   163: ldc 123
      //   165: aload 6
      //   167: invokestatic 129	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   170: pop
      //   171: aload_1
      //   172: areturn
      //   173: aload 7
      //   175: astore 6
      //   177: aload_0
      //   178: getfield 20	a/b/e/a$c:b	I
      //   181: newarray double
      //   183: astore_1
      //   184: iconst_0
      //   185: istore_2
      //   186: aload 7
      //   188: astore 6
      //   190: iload_2
      //   191: aload_0
      //   192: getfield 20	a/b/e/a$c:b	I
      //   195: if_icmpge +23 -> 218
      //   198: aload 7
      //   200: astore 6
      //   202: aload_1
      //   203: iload_2
      //   204: aload 7
      //   206: invokevirtual 133	a/b/e/a$b:readFloat	()F
      //   209: f2d
      //   210: dastore
      //   211: iload_2
      //   212: iconst_1
      //   213: iadd
      //   214: istore_2
      //   215: goto -29 -> 186
      //   218: aload 7
      //   220: invokevirtual 119	java/io/InputStream:close	()V
      //   223: aload_1
      //   224: areturn
      //   225: astore 6
      //   227: ldc 121
      //   229: ldc 123
      //   231: aload 6
      //   233: invokestatic 129	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   236: pop
      //   237: aload_1
      //   238: areturn
      //   239: aload 7
      //   241: astore 6
      //   243: aload_0
      //   244: getfield 20	a/b/e/a$c:b	I
      //   247: anewarray 37	a/b/e/a$e
      //   250: astore_1
      //   251: iconst_0
      //   252: istore_2
      //   253: aload 7
      //   255: astore 6
      //   257: iload_2
      //   258: aload_0
      //   259: getfield 20	a/b/e/a$c:b	I
      //   262: if_icmpge +37 -> 299
      //   265: aload 7
      //   267: astore 6
      //   269: aload_1
      //   270: iload_2
      //   271: new 37	a/b/e/a$e
      //   274: dup
      //   275: aload 7
      //   277: invokevirtual 137	a/b/e/a$b:readInt	()I
      //   280: i2l
      //   281: aload 7
      //   283: invokevirtual 137	a/b/e/a$b:readInt	()I
      //   286: i2l
      //   287: aconst_null
      //   288: invokespecial 140	a/b/e/a$e:<init>	(JJLa/b/e/a$a;)V
      //   291: aastore
      //   292: iload_2
      //   293: iconst_1
      //   294: iadd
      //   295: istore_2
      //   296: goto -43 -> 253
      //   299: aload 7
      //   301: invokevirtual 119	java/io/InputStream:close	()V
      //   304: aload_1
      //   305: areturn
      //   306: astore 6
      //   308: ldc 121
      //   310: ldc 123
      //   312: aload 6
      //   314: invokestatic 129	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   317: pop
      //   318: aload_1
      //   319: areturn
      //   320: aload 7
      //   322: astore 6
      //   324: aload_0
      //   325: getfield 20	a/b/e/a$c:b	I
      //   328: newarray int
      //   330: astore_1
      //   331: iconst_0
      //   332: istore_2
      //   333: aload 7
      //   335: astore 6
      //   337: iload_2
      //   338: aload_0
      //   339: getfield 20	a/b/e/a$c:b	I
      //   342: if_icmpge +22 -> 364
      //   345: aload 7
      //   347: astore 6
      //   349: aload_1
      //   350: iload_2
      //   351: aload 7
      //   353: invokevirtual 137	a/b/e/a$b:readInt	()I
      //   356: iastore
      //   357: iload_2
      //   358: iconst_1
      //   359: iadd
      //   360: istore_2
      //   361: goto -28 -> 333
      //   364: aload 7
      //   366: invokevirtual 119	java/io/InputStream:close	()V
      //   369: aload_1
      //   370: areturn
      //   371: astore 6
      //   373: ldc 121
      //   375: ldc 123
      //   377: aload 6
      //   379: invokestatic 129	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   382: pop
      //   383: aload_1
      //   384: areturn
      //   385: aload 7
      //   387: astore 6
      //   389: aload_0
      //   390: getfield 20	a/b/e/a$c:b	I
      //   393: newarray int
      //   395: astore_1
      //   396: iconst_0
      //   397: istore_2
      //   398: aload 7
      //   400: astore 6
      //   402: iload_2
      //   403: aload_0
      //   404: getfield 20	a/b/e/a$c:b	I
      //   407: if_icmpge +22 -> 429
      //   410: aload 7
      //   412: astore 6
      //   414: aload_1
      //   415: iload_2
      //   416: aload 7
      //   418: invokevirtual 144	a/b/e/a$b:readShort	()S
      //   421: iastore
      //   422: iload_2
      //   423: iconst_1
      //   424: iadd
      //   425: istore_2
      //   426: goto -28 -> 398
      //   429: aload 7
      //   431: invokevirtual 119	java/io/InputStream:close	()V
      //   434: aload_1
      //   435: areturn
      //   436: astore 6
      //   438: ldc 121
      //   440: ldc 123
      //   442: aload 6
      //   444: invokestatic 129	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   447: pop
      //   448: aload_1
      //   449: areturn
      //   450: aload 7
      //   452: astore 6
      //   454: aload_0
      //   455: getfield 20	a/b/e/a$c:b	I
      //   458: anewarray 37	a/b/e/a$e
      //   461: astore_1
      //   462: iconst_0
      //   463: istore_2
      //   464: aload 7
      //   466: astore 6
      //   468: iload_2
      //   469: aload_0
      //   470: getfield 20	a/b/e/a$c:b	I
      //   473: if_icmpge +35 -> 508
      //   476: aload 7
      //   478: astore 6
      //   480: aload_1
      //   481: iload_2
      //   482: new 37	a/b/e/a$e
      //   485: dup
      //   486: aload 7
      //   488: invokevirtual 148	a/b/e/a$b:m	()J
      //   491: aload 7
      //   493: invokevirtual 148	a/b/e/a$b:m	()J
      //   496: aconst_null
      //   497: invokespecial 140	a/b/e/a$e:<init>	(JJLa/b/e/a$a;)V
      //   500: aastore
      //   501: iload_2
      //   502: iconst_1
      //   503: iadd
      //   504: istore_2
      //   505: goto -41 -> 464
      //   508: aload 7
      //   510: invokevirtual 119	java/io/InputStream:close	()V
      //   513: aload_1
      //   514: areturn
      //   515: astore 6
      //   517: ldc 121
      //   519: ldc 123
      //   521: aload 6
      //   523: invokestatic 129	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   526: pop
      //   527: aload_1
      //   528: areturn
      //   529: aload 7
      //   531: astore 6
      //   533: aload_0
      //   534: getfield 20	a/b/e/a$c:b	I
      //   537: newarray long
      //   539: astore_1
      //   540: iconst_0
      //   541: istore_2
      //   542: aload 7
      //   544: astore 6
      //   546: iload_2
      //   547: aload_0
      //   548: getfield 20	a/b/e/a$c:b	I
      //   551: if_icmpge +22 -> 573
      //   554: aload 7
      //   556: astore 6
      //   558: aload_1
      //   559: iload_2
      //   560: aload 7
      //   562: invokevirtual 148	a/b/e/a$b:m	()J
      //   565: lastore
      //   566: iload_2
      //   567: iconst_1
      //   568: iadd
      //   569: istore_2
      //   570: goto -28 -> 542
      //   573: aload 7
      //   575: invokevirtual 119	java/io/InputStream:close	()V
      //   578: aload_1
      //   579: areturn
      //   580: astore 6
      //   582: ldc 121
      //   584: ldc 123
      //   586: aload 6
      //   588: invokestatic 129	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   591: pop
      //   592: aload_1
      //   593: areturn
      //   594: aload 7
      //   596: astore 6
      //   598: aload_0
      //   599: getfield 20	a/b/e/a$c:b	I
      //   602: newarray int
      //   604: astore_1
      //   605: iconst_0
      //   606: istore_2
      //   607: aload 7
      //   609: astore 6
      //   611: iload_2
      //   612: aload_0
      //   613: getfield 20	a/b/e/a$c:b	I
      //   616: if_icmpge +22 -> 638
      //   619: aload 7
      //   621: astore 6
      //   623: aload_1
      //   624: iload_2
      //   625: aload 7
      //   627: invokevirtual 151	a/b/e/a$b:readUnsignedShort	()I
      //   630: iastore
      //   631: iload_2
      //   632: iconst_1
      //   633: iadd
      //   634: istore_2
      //   635: goto -28 -> 607
      //   638: aload 7
      //   640: invokevirtual 119	java/io/InputStream:close	()V
      //   643: aload_1
      //   644: areturn
      //   645: astore 6
      //   647: ldc 121
      //   649: ldc 123
      //   651: aload 6
      //   653: invokestatic 129	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   656: pop
      //   657: aload_1
      //   658: areturn
      //   659: iconst_0
      //   660: istore 4
      //   662: iload 4
      //   664: istore_2
      //   665: aload 7
      //   667: astore 6
      //   669: aload_0
      //   670: getfield 20	a/b/e/a$c:b	I
      //   673: invokestatic 153	a/b/e/a:b	()[B
      //   676: arraylength
      //   677: if_icmplt +62 -> 739
      //   680: iconst_1
      //   681: istore 5
      //   683: iload_3
      //   684: istore_2
      //   685: iload 5
      //   687: istore_3
      //   688: aload 7
      //   690: astore 6
      //   692: iload_2
      //   693: invokestatic 153	a/b/e/a:b	()[B
      //   696: arraylength
      //   697: if_icmpge +26 -> 723
      //   700: aload 7
      //   702: astore 6
      //   704: aload_0
      //   705: getfield 22	a/b/e/a$c:c	[B
      //   708: iload_2
      //   709: baload
      //   710: invokestatic 153	a/b/e/a:b	()[B
      //   713: iload_2
      //   714: baload
      //   715: if_icmpeq +364 -> 1079
      //   718: iconst_0
      //   719: istore_3
      //   720: goto +3 -> 723
      //   723: iload 4
      //   725: istore_2
      //   726: iload_3
      //   727: ifeq +12 -> 739
      //   730: aload 7
      //   732: astore 6
      //   734: invokestatic 153	a/b/e/a:b	()[B
      //   737: arraylength
      //   738: istore_2
      //   739: aload 7
      //   741: astore 6
      //   743: new 43	java/lang/StringBuilder
      //   746: dup
      //   747: invokespecial 44	java/lang/StringBuilder:<init>	()V
      //   750: astore_1
      //   751: aload 7
      //   753: astore 6
      //   755: iload_2
      //   756: aload_0
      //   757: getfield 20	a/b/e/a$c:b	I
      //   760: if_icmpge +55 -> 815
      //   763: aload 7
      //   765: astore 6
      //   767: aload_0
      //   768: getfield 22	a/b/e/a$c:c	[B
      //   771: iload_2
      //   772: baload
      //   773: istore_3
      //   774: iload_3
      //   775: ifne +6 -> 781
      //   778: goto +37 -> 815
      //   781: iload_3
      //   782: bipush 32
      //   784: if_icmplt +17 -> 801
      //   787: aload 7
      //   789: astore 6
      //   791: aload_1
      //   792: iload_3
      //   793: i2c
      //   794: invokevirtual 51	java/lang/StringBuilder:append	(C)Ljava/lang/StringBuilder;
      //   797: pop
      //   798: goto +288 -> 1086
      //   801: aload 7
      //   803: astore 6
      //   805: aload_1
      //   806: bipush 63
      //   808: invokevirtual 51	java/lang/StringBuilder:append	(C)Ljava/lang/StringBuilder;
      //   811: pop
      //   812: goto +274 -> 1086
      //   815: aload 7
      //   817: astore 6
      //   819: aload_1
      //   820: invokevirtual 55	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   823: astore_1
      //   824: aload 7
      //   826: invokevirtual 119	java/io/InputStream:close	()V
      //   829: aload_1
      //   830: areturn
      //   831: astore 6
      //   833: ldc 121
      //   835: ldc 123
      //   837: aload 6
      //   839: invokestatic 129	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   842: pop
      //   843: aload_1
      //   844: areturn
      //   845: aload 7
      //   847: astore 6
      //   849: aload_0
      //   850: getfield 22	a/b/e/a$c:c	[B
      //   853: arraylength
      //   854: iconst_1
      //   855: if_icmpne +79 -> 934
      //   858: aload 7
      //   860: astore 6
      //   862: aload_0
      //   863: getfield 22	a/b/e/a$c:c	[B
      //   866: iconst_0
      //   867: baload
      //   868: iflt +66 -> 934
      //   871: aload 7
      //   873: astore 6
      //   875: aload_0
      //   876: getfield 22	a/b/e/a$c:c	[B
      //   879: iconst_0
      //   880: baload
      //   881: iconst_1
      //   882: if_icmpgt +52 -> 934
      //   885: aload 7
      //   887: astore 6
      //   889: new 60	java/lang/String
      //   892: dup
      //   893: iconst_1
      //   894: newarray char
      //   896: dup
      //   897: iconst_0
      //   898: aload_0
      //   899: getfield 22	a/b/e/a$c:c	[B
      //   902: iconst_0
      //   903: baload
      //   904: bipush 48
      //   906: iadd
      //   907: i2c
      //   908: castore
      //   909: invokespecial 156	java/lang/String:<init>	([C)V
      //   912: astore_1
      //   913: aload 7
      //   915: invokevirtual 119	java/io/InputStream:close	()V
      //   918: aload_1
      //   919: areturn
      //   920: astore 6
      //   922: ldc 121
      //   924: ldc 123
      //   926: aload 6
      //   928: invokestatic 129	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   931: pop
      //   932: aload_1
      //   933: areturn
      //   934: aload 7
      //   936: astore 6
      //   938: new 60	java/lang/String
      //   941: dup
      //   942: aload_0
      //   943: getfield 22	a/b/e/a$c:c	[B
      //   946: invokestatic 58	a/b/e/a:a	()Ljava/nio/charset/Charset;
      //   949: invokespecial 159	java/lang/String:<init>	([BLjava/nio/charset/Charset;)V
      //   952: astore_1
      //   953: aload 7
      //   955: invokevirtual 119	java/io/InputStream:close	()V
      //   958: aload_1
      //   959: areturn
      //   960: astore 6
      //   962: ldc 121
      //   964: ldc 123
      //   966: aload 6
      //   968: invokestatic 129	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   971: pop
      //   972: aload_1
      //   973: areturn
      //   974: aload 7
      //   976: invokevirtual 119	java/io/InputStream:close	()V
      //   979: aconst_null
      //   980: areturn
      //   981: astore_1
      //   982: ldc 121
      //   984: ldc 123
      //   986: aload_1
      //   987: invokestatic 129	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   990: pop
      //   991: aconst_null
      //   992: areturn
      //   993: astore_1
      //   994: goto +8 -> 1002
      //   997: astore_1
      //   998: goto +45 -> 1043
      //   1001: astore_1
      //   1002: aload 7
      //   1004: astore 6
      //   1006: ldc 121
      //   1008: ldc -95
      //   1010: aload_1
      //   1011: invokestatic 164	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   1014: pop
      //   1015: aload 7
      //   1017: ifnull +20 -> 1037
      //   1020: aload 7
      //   1022: invokevirtual 119	java/io/InputStream:close	()V
      //   1025: aconst_null
      //   1026: areturn
      //   1027: astore_1
      //   1028: ldc 121
      //   1030: ldc 123
      //   1032: aload_1
      //   1033: invokestatic 129	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   1036: pop
      //   1037: aconst_null
      //   1038: areturn
      //   1039: astore_1
      //   1040: goto -42 -> 998
      //   1043: aload 6
      //   1045: ifnull +23 -> 1068
      //   1048: aload 6
      //   1050: invokevirtual 119	java/io/InputStream:close	()V
      //   1053: goto +15 -> 1068
      //   1056: astore 6
      //   1058: ldc 121
      //   1060: ldc 123
      //   1062: aload 6
      //   1064: invokestatic 129	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   1067: pop
      //   1068: goto +5 -> 1073
      //   1071: aload_1
      //   1072: athrow
      //   1073: goto -2 -> 1071
      //   1076: goto -102 -> 974
      //   1079: iload_2
      //   1080: iconst_1
      //   1081: iadd
      //   1082: istore_2
      //   1083: goto -398 -> 685
      //   1086: iload_2
      //   1087: iconst_1
      //   1088: iadd
      //   1089: istore_2
      //   1090: goto -339 -> 751
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	1093	0	this	c
      //   0	1093	1	paramByteOrder	ByteOrder
      //   41	1049	2	i	int
      //   43	750	3	j	int
      //   660	64	4	k	int
      //   681	5	5	m	int
      //   4	132	6	localObject1	Object
      //   159	7	6	localIOException1	IOException
      //   175	26	6	localObject2	Object
      //   225	7	6	localIOException2	IOException
      //   241	27	6	localObject3	Object
      //   306	7	6	localIOException3	IOException
      //   322	26	6	localObject4	Object
      //   371	7	6	localIOException4	IOException
      //   387	26	6	localObject5	Object
      //   436	7	6	localIOException5	IOException
      //   452	27	6	localObject6	Object
      //   515	7	6	localIOException6	IOException
      //   531	26	6	localObject7	Object
      //   580	7	6	localIOException7	IOException
      //   596	26	6	localObject8	Object
      //   645	7	6	localIOException8	IOException
      //   667	151	6	localObject9	Object
      //   831	7	6	localIOException9	IOException
      //   847	41	6	localObject10	Object
      //   920	7	6	localIOException10	IOException
      //   936	1	6	localObject11	Object
      //   960	7	6	localIOException11	IOException
      //   1004	45	6	localObject12	Object
      //   1056	7	6	localIOException12	IOException
      //   1	1020	7	localObject13	Object
      //   17	3	8	localB	a.b
      // Exception table:
      //   from	to	target	type
      //   152	157	159	java/io/IOException
      //   218	223	225	java/io/IOException
      //   299	304	306	java/io/IOException
      //   364	369	371	java/io/IOException
      //   429	434	436	java/io/IOException
      //   508	513	515	java/io/IOException
      //   573	578	580	java/io/IOException
      //   638	643	645	java/io/IOException
      //   824	829	831	java/io/IOException
      //   913	918	920	java/io/IOException
      //   953	958	960	java/io/IOException
      //   974	979	981	java/io/IOException
      //   27	33	993	java/io/IOException
      //   37	42	993	java/io/IOException
      //   112	119	993	java/io/IOException
      //   125	133	993	java/io/IOException
      //   137	145	993	java/io/IOException
      //   177	184	993	java/io/IOException
      //   190	198	993	java/io/IOException
      //   202	211	993	java/io/IOException
      //   243	251	993	java/io/IOException
      //   257	265	993	java/io/IOException
      //   269	292	993	java/io/IOException
      //   324	331	993	java/io/IOException
      //   337	345	993	java/io/IOException
      //   349	357	993	java/io/IOException
      //   389	396	993	java/io/IOException
      //   402	410	993	java/io/IOException
      //   414	422	993	java/io/IOException
      //   454	462	993	java/io/IOException
      //   468	476	993	java/io/IOException
      //   480	501	993	java/io/IOException
      //   533	540	993	java/io/IOException
      //   546	554	993	java/io/IOException
      //   558	566	993	java/io/IOException
      //   598	605	993	java/io/IOException
      //   611	619	993	java/io/IOException
      //   623	631	993	java/io/IOException
      //   669	680	993	java/io/IOException
      //   692	700	993	java/io/IOException
      //   704	718	993	java/io/IOException
      //   734	739	993	java/io/IOException
      //   743	751	993	java/io/IOException
      //   755	763	993	java/io/IOException
      //   767	774	993	java/io/IOException
      //   791	798	993	java/io/IOException
      //   805	812	993	java/io/IOException
      //   819	824	993	java/io/IOException
      //   849	858	993	java/io/IOException
      //   862	871	993	java/io/IOException
      //   875	885	993	java/io/IOException
      //   889	913	993	java/io/IOException
      //   938	953	993	java/io/IOException
      //   6	19	997	finally
      //   6	19	1001	java/io/IOException
      //   1020	1025	1027	java/io/IOException
      //   27	33	1039	finally
      //   37	42	1039	finally
      //   112	119	1039	finally
      //   125	133	1039	finally
      //   137	145	1039	finally
      //   177	184	1039	finally
      //   190	198	1039	finally
      //   202	211	1039	finally
      //   243	251	1039	finally
      //   257	265	1039	finally
      //   269	292	1039	finally
      //   324	331	1039	finally
      //   337	345	1039	finally
      //   349	357	1039	finally
      //   389	396	1039	finally
      //   402	410	1039	finally
      //   414	422	1039	finally
      //   454	462	1039	finally
      //   468	476	1039	finally
      //   480	501	1039	finally
      //   533	540	1039	finally
      //   546	554	1039	finally
      //   558	566	1039	finally
      //   598	605	1039	finally
      //   611	619	1039	finally
      //   623	631	1039	finally
      //   669	680	1039	finally
      //   692	700	1039	finally
      //   704	718	1039	finally
      //   734	739	1039	finally
      //   743	751	1039	finally
      //   755	763	1039	finally
      //   767	774	1039	finally
      //   791	798	1039	finally
      //   805	812	1039	finally
      //   819	824	1039	finally
      //   849	858	1039	finally
      //   862	871	1039	finally
      //   875	885	1039	finally
      //   889	913	1039	finally
      //   938	953	1039	finally
      //   1006	1015	1039	finally
      //   1048	1053	1056	java/io/IOException
    }
    
    public double a(ByteOrder paramByteOrder)
    {
      paramByteOrder = d(paramByteOrder);
      if (paramByteOrder != null)
      {
        if ((paramByteOrder instanceof String)) {
          return Double.parseDouble((String)paramByteOrder);
        }
        if ((paramByteOrder instanceof long[]))
        {
          paramByteOrder = (long[])paramByteOrder;
          if (paramByteOrder.length == 1) {
            return paramByteOrder[0];
          }
          throw new NumberFormatException("There are more than one component");
        }
        if ((paramByteOrder instanceof int[]))
        {
          paramByteOrder = (int[])paramByteOrder;
          if (paramByteOrder.length == 1) {
            return paramByteOrder[0];
          }
          throw new NumberFormatException("There are more than one component");
        }
        if ((paramByteOrder instanceof double[]))
        {
          paramByteOrder = (double[])paramByteOrder;
          if (paramByteOrder.length == 1) {
            return paramByteOrder[0];
          }
          throw new NumberFormatException("There are more than one component");
        }
        if ((paramByteOrder instanceof a.e[]))
        {
          paramByteOrder = (a.e[])paramByteOrder;
          if (paramByteOrder.length == 1) {
            return paramByteOrder[0].a();
          }
          throw new NumberFormatException("There are more than one component");
        }
        throw new NumberFormatException("Couldn't find a double value");
      }
      throw new NumberFormatException("NULL can't be converted to a double value");
    }
    
    public int b(ByteOrder paramByteOrder)
    {
      paramByteOrder = d(paramByteOrder);
      if (paramByteOrder != null)
      {
        if ((paramByteOrder instanceof String)) {
          return Integer.parseInt((String)paramByteOrder);
        }
        if ((paramByteOrder instanceof long[]))
        {
          paramByteOrder = (long[])paramByteOrder;
          if (paramByteOrder.length == 1) {
            return (int)paramByteOrder[0];
          }
          throw new NumberFormatException("There are more than one component");
        }
        if ((paramByteOrder instanceof int[]))
        {
          paramByteOrder = (int[])paramByteOrder;
          if (paramByteOrder.length == 1) {
            return paramByteOrder[0];
          }
          throw new NumberFormatException("There are more than one component");
        }
        throw new NumberFormatException("Couldn't find a integer value");
      }
      throw new NumberFormatException("NULL can't be converted to a integer value");
    }
    
    public String c(ByteOrder paramByteOrder)
    {
      Object localObject = d(paramByteOrder);
      if (localObject == null) {
        return null;
      }
      if ((localObject instanceof String)) {
        return (String)localObject;
      }
      paramByteOrder = new StringBuilder();
      int i;
      if ((localObject instanceof long[]))
      {
        localObject = (long[])localObject;
        i = 0;
        while (i < localObject.length)
        {
          paramByteOrder.append(localObject[i]);
          if (i + 1 != localObject.length) {
            paramByteOrder.append(",");
          }
          i += 1;
        }
        return paramByteOrder.toString();
      }
      if ((localObject instanceof int[]))
      {
        localObject = (int[])localObject;
        i = 0;
        while (i < localObject.length)
        {
          paramByteOrder.append(localObject[i]);
          if (i + 1 != localObject.length) {
            paramByteOrder.append(",");
          }
          i += 1;
        }
        return paramByteOrder.toString();
      }
      if ((localObject instanceof double[]))
      {
        localObject = (double[])localObject;
        i = 0;
        while (i < localObject.length)
        {
          paramByteOrder.append(localObject[i]);
          if (i + 1 != localObject.length) {
            paramByteOrder.append(",");
          }
          i += 1;
        }
        return paramByteOrder.toString();
      }
      if ((localObject instanceof a.e[]))
      {
        localObject = (a.e[])localObject;
        i = 0;
        while (i < localObject.length)
        {
          paramByteOrder.append(a);
          paramByteOrder.append('/');
          paramByteOrder.append(b);
          if (i + 1 != localObject.length) {
            paramByteOrder.append(",");
          }
          i += 1;
        }
        return paramByteOrder.toString();
      }
      return null;
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("(");
      localStringBuilder.append(a.r[a]);
      localStringBuilder.append(", data length:");
      localStringBuilder.append(c.length);
      localStringBuilder.append(")");
      return localStringBuilder.toString();
    }
  }
  
  static class d
  {
    public final int a;
    public final String b;
    public final int c;
    public final int d;
    
    private d(String paramString, int paramInt1, int paramInt2)
    {
      b = paramString;
      a = paramInt1;
      c = paramInt2;
      d = -1;
    }
    
    private d(String paramString, int paramInt1, int paramInt2, int paramInt3)
    {
      b = paramString;
      a = paramInt1;
      c = paramInt2;
      d = paramInt3;
    }
    
    private boolean a(int paramInt)
    {
      int i = c;
      if (i != 7)
      {
        if (paramInt == 7) {
          return true;
        }
        if (i != paramInt)
        {
          int j = d;
          if (j == paramInt) {
            return true;
          }
          if (((i == 4) || (j == 4)) && (paramInt == 3)) {
            return true;
          }
          if (((c == 9) || (d == 9)) && (paramInt == 8)) {
            return true;
          }
          return ((c == 12) || (d == 12)) && (paramInt == 11);
        }
        return true;
      }
      return true;
    }
  }
  
  private static class e
  {
    public final long a;
    public final long b;
    
    private e(long paramLong1, long paramLong2)
    {
      if (paramLong2 == 0L)
      {
        a = 0L;
        b = 1L;
        return;
      }
      a = paramLong1;
      b = paramLong2;
    }
    
    public double a()
    {
      double d1 = a;
      double d2 = b;
      Double.isNaN(d1);
      Double.isNaN(d2);
      return d1 / d2;
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(a);
      localStringBuilder.append("/");
      localStringBuilder.append(b);
      return localStringBuilder.toString();
    }
  }
}
