package f;

import java.io.EOFException;
import java.io.IOException;
import java.util.zip.DataFormatException;
import java.util.zip.Inflater;

public final class k
  implements s
{
  private final e c;
  private final Inflater d;
  private int e;
  private boolean f;
  
  k(e paramE, Inflater paramInflater)
  {
    if (paramE != null)
    {
      if (paramInflater != null)
      {
        c = paramE;
        d = paramInflater;
        return;
      }
      throw new IllegalArgumentException("inflater == null");
    }
    throw new IllegalArgumentException("source == null");
  }
  
  private void l()
  {
    int i = e;
    if (i == 0) {
      return;
    }
    i -= d.getRemaining();
    e -= i;
    c.skip(i);
  }
  
  public long b(c paramC, long paramLong)
  {
    if (paramLong >= 0L) {
      if (!f) {
        if (paramLong == 0L) {
          return 0L;
        }
      }
    }
    for (;;)
    {
      boolean bool = d();
      label139:
      do
      {
        try
        {
          o localO = paramC.b(1);
          int i = (int)Math.min(paramLong, 8192 - c);
          i = d.inflate(a, c, i);
          if (i > 0)
          {
            c += i;
            d += i;
            return i;
          }
          if (!d.finished())
          {
            if (!d.needsDictionary()) {
              continue;
            }
            break label139;
            throw new EOFException("source exhausted prematurely");
          }
          l();
          if (b == c)
          {
            c = localO.b();
            p.a(localO);
          }
          return -1L;
        }
        catch (DataFormatException paramC)
        {
          throw new IOException(paramC);
        }
        throw new IllegalStateException("closed");
        paramC = new StringBuilder();
        paramC.append("byteCount < 0: ");
        paramC.append(paramLong);
        paramC = new IllegalArgumentException(paramC.toString());
        for (;;)
        {
          throw paramC;
        }
      } while (bool);
    }
  }
  
  public t b()
  {
    return c.b();
  }
  
  public void close()
  {
    if (f) {
      return;
    }
    d.end();
    f = true;
    c.close();
  }
  
  public boolean d()
  {
    if (!d.needsInput()) {
      return false;
    }
    l();
    if (d.getRemaining() == 0)
    {
      if (c.i()) {
        return true;
      }
      o localO = c.a().c;
      int i = c;
      int j = b;
      e = (i - j);
      d.setInput(a, j, e);
      return false;
    }
    throw new IllegalStateException("?");
  }
}
