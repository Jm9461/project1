package f;

import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;

public class t
{
  public static final t d = new a();
  private boolean a;
  private long b;
  private long c;
  
  public t() {}
  
  public t a()
  {
    a = false;
    return this;
  }
  
  public t a(long paramLong)
  {
    a = true;
    b = paramLong;
    return this;
  }
  
  public t a(long paramLong, TimeUnit paramTimeUnit)
  {
    if (paramLong >= 0L)
    {
      if (paramTimeUnit != null)
      {
        c = paramTimeUnit.toNanos(paramLong);
        return this;
      }
      throw new IllegalArgumentException("unit == null");
    }
    paramTimeUnit = new StringBuilder();
    paramTimeUnit.append("timeout < 0: ");
    paramTimeUnit.append(paramLong);
    throw new IllegalArgumentException(paramTimeUnit.toString());
  }
  
  public t b()
  {
    c = 0L;
    return this;
  }
  
  public long c()
  {
    if (a) {
      return b;
    }
    throw new IllegalStateException("No deadline");
  }
  
  public boolean d()
  {
    return a;
  }
  
  public void e()
  {
    if (!Thread.interrupted())
    {
      if (a)
      {
        if (b - System.nanoTime() > 0L) {
          return;
        }
        throw new InterruptedIOException("deadline reached");
      }
      return;
    }
    throw new InterruptedIOException("thread interrupted");
  }
  
  public long f()
  {
    return c;
  }
  
  final class a
    extends t
  {
    a() {}
    
    public t a(long paramLong)
    {
      return this;
    }
    
    public t a(long paramLong, TimeUnit paramTimeUnit)
    {
      return this;
    }
    
    public void e() {}
  }
}
