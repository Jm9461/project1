package e;

import e.f0.c;
import java.util.Arrays;
import java.util.List;
import javax.net.ssl.SSLSocket;

public final class k
{
  private static final h[] e = { h.k, h.m, h.l, h.n, h.p, h.o, h.i, h.j, h.g, h.h, h.e, h.f, h.d };
  public static final k f;
  public static final k g = new a(false).a();
  final boolean a;
  final boolean b;
  final String[] c;
  final String[] d;
  
  static
  {
    a localA = new a(true);
    localA.a(e);
    localA.a(new d0[] { d0.d, d0.e, d0.f, d0.g });
    localA.a(true);
    f = localA.a();
    localA = new a(f);
    localA.a(new d0[] { d0.g });
    localA.a(true);
    localA.a();
  }
  
  k(a paramA)
  {
    a = a;
    c = b;
    d = c;
    b = d;
  }
  
  private k b(SSLSocket paramSSLSocket, boolean paramBoolean)
  {
    if (c != null) {
      localObject = c.a(h.b, paramSSLSocket.getEnabledCipherSuites(), c);
    } else {
      localObject = paramSSLSocket.getEnabledCipherSuites();
    }
    String[] arrayOfString1;
    if (d != null) {
      arrayOfString1 = c.a(c.f, paramSSLSocket.getEnabledProtocols(), d);
    } else {
      arrayOfString1 = paramSSLSocket.getEnabledProtocols();
    }
    String[] arrayOfString2 = paramSSLSocket.getSupportedCipherSuites();
    int i = c.a(h.b, arrayOfString2, "TLS_FALLBACK_SCSV");
    paramSSLSocket = (SSLSocket)localObject;
    if (paramBoolean)
    {
      paramSSLSocket = (SSLSocket)localObject;
      if (i != -1) {
        paramSSLSocket = c.a((String[])localObject, arrayOfString2[i]);
      }
    }
    Object localObject = new a(this);
    ((a)localObject).a(paramSSLSocket);
    ((a)localObject).b(arrayOfString1);
    return ((a)localObject).a();
  }
  
  public List<h> a()
  {
    String[] arrayOfString = c;
    if (arrayOfString != null) {
      return h.a(arrayOfString);
    }
    return null;
  }
  
  void a(SSLSocket paramSSLSocket, boolean paramBoolean)
  {
    Object localObject = b(paramSSLSocket, paramBoolean);
    String[] arrayOfString = d;
    if (arrayOfString != null) {
      paramSSLSocket.setEnabledProtocols(arrayOfString);
    }
    localObject = c;
    if (localObject != null) {
      paramSSLSocket.setEnabledCipherSuites((String[])localObject);
    }
  }
  
  public boolean a(SSLSocket paramSSLSocket)
  {
    if (!a) {
      return false;
    }
    String[] arrayOfString = d;
    if ((arrayOfString != null) && (!c.b(c.f, arrayOfString, paramSSLSocket.getEnabledProtocols()))) {
      return false;
    }
    arrayOfString = c;
    return (arrayOfString == null) || (c.b(h.b, arrayOfString, paramSSLSocket.getEnabledCipherSuites()));
  }
  
  public boolean b()
  {
    return a;
  }
  
  public boolean c()
  {
    return b;
  }
  
  public List<d0> d()
  {
    String[] arrayOfString = d;
    if (arrayOfString != null) {
      return d0.a(arrayOfString);
    }
    return null;
  }
  
  public boolean equals(Object paramObject)
  {
    if (!(paramObject instanceof k)) {
      return false;
    }
    if (paramObject == this) {
      return true;
    }
    paramObject = (k)paramObject;
    boolean bool = a;
    if (bool != a) {
      return false;
    }
    if (bool)
    {
      if (!Arrays.equals(c, c)) {
        return false;
      }
      if (!Arrays.equals(d, d)) {
        return false;
      }
      if (b != b) {
        return false;
      }
    }
    return true;
  }
  
  public int hashCode()
  {
    int i = 17;
    if (a) {
      i = ((17 * 31 + Arrays.hashCode(c)) * 31 + Arrays.hashCode(d)) * 31 + (b ^ true);
    }
    return i;
  }
  
  public String toString()
  {
    if (!a) {
      return "ConnectionSpec()";
    }
    Object localObject = c;
    String str = "[all enabled]";
    if (localObject != null) {
      localObject = a().toString();
    } else {
      localObject = "[all enabled]";
    }
    if (d != null) {
      str = d().toString();
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("ConnectionSpec(cipherSuites=");
    localStringBuilder.append((String)localObject);
    localStringBuilder.append(", tlsVersions=");
    localStringBuilder.append(str);
    localStringBuilder.append(", supportsTlsExtensions=");
    localStringBuilder.append(b);
    localStringBuilder.append(")");
    return localStringBuilder.toString();
  }
  
  public static final class a
  {
    boolean a;
    String[] b;
    String[] c;
    boolean d;
    
    public a(k paramK)
    {
      a = a;
      b = c;
      c = d;
      d = b;
    }
    
    a(boolean paramBoolean)
    {
      a = paramBoolean;
    }
    
    public a a(boolean paramBoolean)
    {
      if (a)
      {
        d = paramBoolean;
        return this;
      }
      throw new IllegalStateException("no TLS extensions for cleartext connections");
    }
    
    public a a(d0... paramVarArgs)
    {
      if (a)
      {
        String[] arrayOfString = new String[paramVarArgs.length];
        int i = 0;
        while (i < paramVarArgs.length)
        {
          arrayOfString[i] = c;
          i += 1;
        }
        b(arrayOfString);
        return this;
      }
      paramVarArgs = new IllegalStateException("no TLS versions for cleartext connections");
      for (;;)
      {
        throw paramVarArgs;
      }
    }
    
    public a a(h... paramVarArgs)
    {
      if (a)
      {
        String[] arrayOfString = new String[paramVarArgs.length];
        int i = 0;
        while (i < paramVarArgs.length)
        {
          arrayOfString[i] = a;
          i += 1;
        }
        a(arrayOfString);
        return this;
      }
      paramVarArgs = new IllegalStateException("no cipher suites for cleartext connections");
      for (;;)
      {
        throw paramVarArgs;
      }
    }
    
    public a a(String... paramVarArgs)
    {
      if (a)
      {
        if (paramVarArgs.length != 0)
        {
          b = ((String[])paramVarArgs.clone());
          return this;
        }
        throw new IllegalArgumentException("At least one cipher suite is required");
      }
      throw new IllegalStateException("no cipher suites for cleartext connections");
    }
    
    public k a()
    {
      return new k(this);
    }
    
    public a b(String... paramVarArgs)
    {
      if (a)
      {
        if (paramVarArgs.length != 0)
        {
          c = ((String[])paramVarArgs.clone());
          return this;
        }
        throw new IllegalArgumentException("At least one TLS version is required");
      }
      throw new IllegalStateException("no TLS versions for cleartext connections");
    }
  }
}
