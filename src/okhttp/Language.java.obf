package e;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public final class h
{
  static final Comparator<String> b = new a();
  private static final Map<String, h> c = new TreeMap(b);
  public static final h d;
  public static final h e;
  public static final h f;
  public static final h g;
  public static final h h;
  public static final h i;
  public static final h j;
  public static final h k;
  public static final h l;
  public static final h m;
  public static final h n;
  public static final h o = a("TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256", 52392);
  public static final h p = a("TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", 52393);
  final String a;
  
  static
  {
    a("SSL_RSA_WITH_NULL_MD5", 1);
    a("SSL_RSA_WITH_NULL_SHA", 2);
    a("SSL_RSA_EXPORT_WITH_RC4_40_MD5", 3);
    a("SSL_RSA_WITH_RC4_128_MD5", 4);
    a("SSL_RSA_WITH_RC4_128_SHA", 5);
    a("SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", 8);
    a("SSL_RSA_WITH_DES_CBC_SHA", 9);
    d = a("SSL_RSA_WITH_3DES_EDE_CBC_SHA", 10);
    a("SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", 17);
    a("SSL_DHE_DSS_WITH_DES_CBC_SHA", 18);
    a("SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA", 19);
    a("SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", 20);
    a("SSL_DHE_RSA_WITH_DES_CBC_SHA", 21);
    a("SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA", 22);
    a("SSL_DH_anon_EXPORT_WITH_RC4_40_MD5", 23);
    a("SSL_DH_anon_WITH_RC4_128_MD5", 24);
    a("SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA", 25);
    a("SSL_DH_anon_WITH_DES_CBC_SHA", 26);
    a("SSL_DH_anon_WITH_3DES_EDE_CBC_SHA", 27);
    a("TLS_KRB5_WITH_DES_CBC_SHA", 30);
    a("TLS_KRB5_WITH_3DES_EDE_CBC_SHA", 31);
    a("TLS_KRB5_WITH_RC4_128_SHA", 32);
    a("TLS_KRB5_WITH_DES_CBC_MD5", 34);
    a("TLS_KRB5_WITH_3DES_EDE_CBC_MD5", 35);
    a("TLS_KRB5_WITH_RC4_128_MD5", 36);
    a("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", 38);
    a("TLS_KRB5_EXPORT_WITH_RC4_40_SHA", 40);
    a("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", 41);
    a("TLS_KRB5_EXPORT_WITH_RC4_40_MD5", 43);
    e = a("TLS_RSA_WITH_AES_128_CBC_SHA", 47);
    a("TLS_DHE_DSS_WITH_AES_128_CBC_SHA", 50);
    a("TLS_DHE_RSA_WITH_AES_128_CBC_SHA", 51);
    a("TLS_DH_anon_WITH_AES_128_CBC_SHA", 52);
    f = a("TLS_RSA_WITH_AES_256_CBC_SHA", 53);
    a("TLS_DHE_DSS_WITH_AES_256_CBC_SHA", 56);
    a("TLS_DHE_RSA_WITH_AES_256_CBC_SHA", 57);
    a("TLS_DH_anon_WITH_AES_256_CBC_SHA", 58);
    a("TLS_RSA_WITH_NULL_SHA256", 59);
    a("TLS_RSA_WITH_AES_128_CBC_SHA256", 60);
    a("TLS_RSA_WITH_AES_256_CBC_SHA256", 61);
    a("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", 64);
    a("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA", 65);
    a("TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA", 68);
    a("TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA", 69);
    a("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", 103);
    a("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", 106);
    a("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", 107);
    a("TLS_DH_anon_WITH_AES_128_CBC_SHA256", 108);
    a("TLS_DH_anon_WITH_AES_256_CBC_SHA256", 109);
    a("TLS_RSA_WITH_CAMELLIA_256_CBC_SHA", 132);
    a("TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA", 135);
    a("TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA", 136);
    a("TLS_PSK_WITH_RC4_128_SHA", 138);
    a("TLS_PSK_WITH_3DES_EDE_CBC_SHA", 139);
    a("TLS_PSK_WITH_AES_128_CBC_SHA", 140);
    a("TLS_PSK_WITH_AES_256_CBC_SHA", 141);
    a("TLS_RSA_WITH_SEED_CBC_SHA", 150);
    g = a("TLS_RSA_WITH_AES_128_GCM_SHA256", 156);
    h = a("TLS_RSA_WITH_AES_256_GCM_SHA384", 157);
    a("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", 158);
    a("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", 159);
    a("TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", 162);
    a("TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", 163);
    a("TLS_DH_anon_WITH_AES_128_GCM_SHA256", 166);
    a("TLS_DH_anon_WITH_AES_256_GCM_SHA384", 167);
    a("TLS_EMPTY_RENEGOTIATION_INFO_SCSV", 255);
    a("TLS_FALLBACK_SCSV", 22016);
    a("TLS_ECDH_ECDSA_WITH_NULL_SHA", 49153);
    a("TLS_ECDH_ECDSA_WITH_RC4_128_SHA", 49154);
    a("TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", 49155);
    a("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", 49156);
    a("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", 49157);
    a("TLS_ECDHE_ECDSA_WITH_NULL_SHA", 49158);
    a("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", 49159);
    a("TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", 49160);
    a("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", 49161);
    a("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", 49162);
    a("TLS_ECDH_RSA_WITH_NULL_SHA", 49163);
    a("TLS_ECDH_RSA_WITH_RC4_128_SHA", 49164);
    a("TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", 49165);
    a("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", 49166);
    a("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", 49167);
    a("TLS_ECDHE_RSA_WITH_NULL_SHA", 49168);
    a("TLS_ECDHE_RSA_WITH_RC4_128_SHA", 49169);
    a("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", 49170);
    i = a("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", 49171);
    j = a("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", 49172);
    a("TLS_ECDH_anon_WITH_NULL_SHA", 49173);
    a("TLS_ECDH_anon_WITH_RC4_128_SHA", 49174);
    a("TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA", 49175);
    a("TLS_ECDH_anon_WITH_AES_128_CBC_SHA", 49176);
    a("TLS_ECDH_anon_WITH_AES_256_CBC_SHA", 49177);
    a("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", 49187);
    a("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", 49188);
    a("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", 49189);
    a("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", 49190);
    a("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", 49191);
    a("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", 49192);
    a("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", 49193);
    a("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", 49194);
    k = a("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", 49195);
    l = a("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", 49196);
    a("TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", 49197);
    a("TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", 49198);
    m = a("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", 49199);
    n = a("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", 49200);
    a("TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", 49201);
    a("TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", 49202);
    a("TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA", 49205);
    a("TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA", 49206);
  }
  
  private h(String paramString)
  {
    if (paramString != null)
    {
      a = paramString;
      return;
    }
    throw new NullPointerException();
  }
  
  public static h a(String paramString)
  {
    try
    {
      h localH2 = (h)c.get(paramString);
      h localH1 = localH2;
      if (localH2 == null)
      {
        localH1 = new h(paramString);
        c.put(paramString, localH1);
      }
      return localH1;
    }
    finally {}
  }
  
  private static h a(String paramString, int paramInt)
  {
    return a(paramString);
  }
  
  static List<h> a(String... paramVarArgs)
  {
    ArrayList localArrayList = new ArrayList(paramVarArgs.length);
    int i2 = paramVarArgs.length;
    int i1 = 0;
    while (i1 < i2)
    {
      localArrayList.add(a(paramVarArgs[i1]));
      i1 += 1;
    }
    return Collections.unmodifiableList(localArrayList);
  }
  
  public String a()
  {
    return a;
  }
  
  public String toString()
  {
    return a;
  }
  
  final class a
    implements Comparator<String>
  {
    a() {}
    
    public int a(String paramString1, String paramString2)
    {
      int i = 4;
      int j = Math.min(paramString1.length(), paramString2.length());
      while (i < j)
      {
        int k = paramString1.charAt(i);
        int m = paramString2.charAt(i);
        if (k != m)
        {
          if (k < m) {
            return -1;
          }
          return 1;
        }
        i += 1;
      }
      i = paramString1.length();
      j = paramString2.length();
      if (i != j)
      {
        if (i < j) {
          return -1;
        }
        return 1;
      }
      return 0;
    }
  }
}
