package e;

import f.f;
import java.security.Principal;
import java.security.PublicKey;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import javax.net.ssl.SSLPeerUnverifiedException;

public final class g
{
  public static final g c = new a().a();
  private final Set<b> a;
  private final e.f0.l.c b;
  
  g(Set<b> paramSet, e.f0.l.c paramC)
  {
    a = paramSet;
    b = paramC;
  }
  
  static f a(X509Certificate paramX509Certificate)
  {
    return f.a(paramX509Certificate.getPublicKey().getEncoded()).d();
  }
  
  public static String a(Certificate paramCertificate)
  {
    if ((paramCertificate instanceof X509Certificate))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("sha256/");
      localStringBuilder.append(b((X509Certificate)paramCertificate).a());
      return localStringBuilder.toString();
    }
    throw new IllegalArgumentException("Certificate pinning requires X509 certificates");
  }
  
  static f b(X509Certificate paramX509Certificate)
  {
    return f.a(paramX509Certificate.getPublicKey().getEncoded()).e();
  }
  
  g a(e.f0.l.c paramC)
  {
    if (e.f0.c.a(b, paramC)) {
      return this;
    }
    return new g(a, paramC);
  }
  
  List<b> a(String paramString)
  {
    Object localObject1 = Collections.emptyList();
    Iterator localIterator = a.iterator();
    while (localIterator.hasNext())
    {
      b localB = (b)localIterator.next();
      Object localObject2 = localObject1;
      if (localB.a(paramString))
      {
        localObject2 = localObject1;
        if (((List)localObject1).isEmpty()) {
          localObject2 = new ArrayList();
        }
        ((List)localObject2).add(localB);
      }
      localObject1 = localObject2;
    }
    return localObject1;
  }
  
  public void a(String paramString, List<Certificate> paramList)
  {
    List localList = a(paramString);
    if (localList.isEmpty()) {
      return;
    }
    Object localObject1 = b;
    Object localObject3 = paramList;
    if (localObject1 != null) {
      localObject3 = ((e.f0.l.c)localObject1).a(paramList, paramString);
    }
    int i = 0;
    int k = ((List)localObject3).size();
    while (i < k)
    {
      X509Certificate localX509Certificate = (X509Certificate)((List)localObject3).get(i);
      localObject1 = null;
      paramList = null;
      j = 0;
      int m = localList.size();
      while (j < m)
      {
        b localB = (b)localList.get(j);
        Object localObject2;
        if (c.equals("sha256/"))
        {
          localObject2 = paramList;
          if (paramList == null) {
            localObject2 = b(localX509Certificate);
          }
          paramList = (List<Certificate>)localObject2;
          if (!d.equals(localObject2)) {}
        }
        else
        {
          if (!c.equals("sha1/")) {
            break label209;
          }
          localObject2 = localObject1;
          if (localObject1 == null) {
            localObject2 = a(localX509Certificate);
          }
          localObject1 = localObject2;
          if (d.equals(localObject2)) {
            return;
          }
        }
        j += 1;
        continue;
        label209:
        paramString = new StringBuilder();
        paramString.append("unsupported hashAlgorithm: ");
        paramString.append(c);
        throw new AssertionError(paramString.toString());
      }
      i += 1;
    }
    paramList = new StringBuilder();
    paramList.append("Certificate pinning failure!");
    paramList = paramList.append("\n  Peer certificate chain:");
    i = 0;
    int j = ((List)localObject3).size();
    while (i < j)
    {
      localObject1 = (X509Certificate)((List)localObject3).get(i);
      paramList.append("\n    ");
      paramList.append(a((Certificate)localObject1));
      paramList.append(": ");
      paramList.append(((X509Certificate)localObject1).getSubjectDN().getName());
      i += 1;
    }
    paramList.append("\n  Pinned certificates for ");
    paramList.append(paramString);
    paramList.append(":");
    i = 0;
    j = localList.size();
    while (i < j)
    {
      paramString = (b)localList.get(i);
      paramList.append("\n    ");
      paramList.append(paramString);
      i += 1;
    }
    paramString = new SSLPeerUnverifiedException(paramList.toString());
    for (;;)
    {
      throw paramString;
    }
  }
  
  public boolean equals(Object paramObject)
  {
    if (paramObject == this) {
      return true;
    }
    return ((paramObject instanceof g)) && (e.f0.c.a(b, b)) && (a.equals(a));
  }
  
  public int hashCode()
  {
    e.f0.l.c localC = b;
    int i;
    if (localC != null) {
      i = localC.hashCode();
    } else {
      i = 0;
    }
    return i * 31 + a.hashCode();
  }
  
  public static final class a
  {
    private final List<g.b> a = new ArrayList();
    
    public a() {}
    
    public g a()
    {
      return new g(new LinkedHashSet(a), null);
    }
  }
  
  static final class b
  {
    final String a;
    final String b;
    final String c;
    final f d;
    
    boolean a(String paramString)
    {
      if (a.startsWith("*."))
      {
        int i = paramString.indexOf('.');
        if (paramString.length() - i - 1 == b.length())
        {
          String str = b;
          if (paramString.regionMatches(false, i + 1, str, 0, str.length())) {
            return true;
          }
        }
        return false;
      }
      return paramString.equals(b);
    }
    
    public boolean equals(Object paramObject)
    {
      return ((paramObject instanceof b)) && (a.equals(a)) && (c.equals(c)) && (d.equals(d));
    }
    
    public int hashCode()
    {
      return ((17 * 31 + a.hashCode()) * 31 + c.hashCode()) * 31 + d.hashCode();
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(c);
      localStringBuilder.append(d.a());
      return localStringBuilder.toString();
    }
  }
}
