package e;

import e.f0.f.d;
import e.f0.f.g;
import e.f0.f.g.a;
import e.f0.k.f;
import java.lang.ref.Reference;
import java.net.Socket;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public final class j
{
  private static final Executor g = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue(), e.f0.c.a("OkHttp ConnectionPool", true));
  private final int a;
  private final long b;
  private final Runnable c = new a();
  private final Deque<e.f0.f.c> d = new ArrayDeque();
  final d e = new d();
  boolean f;
  
  public j()
  {
    this(5, 5L, TimeUnit.MINUTES);
  }
  
  public j(int paramInt, long paramLong, TimeUnit paramTimeUnit)
  {
    a = paramInt;
    b = paramTimeUnit.toNanos(paramLong);
    if (paramLong > 0L) {
      return;
    }
    paramTimeUnit = new StringBuilder();
    paramTimeUnit.append("keepAliveDuration <= 0: ");
    paramTimeUnit.append(paramLong);
    throw new IllegalArgumentException(paramTimeUnit.toString());
  }
  
  private int a(e.f0.f.c paramC, long paramLong)
  {
    List localList = n;
    int i = 0;
    while (i < localList.size())
    {
      Object localObject1 = (Reference)localList.get(i);
      if (((Reference)localObject1).get() != null)
      {
        i += 1;
      }
      else
      {
        localObject1 = (g.a)localObject1;
        Object localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("A connection to ");
        ((StringBuilder)localObject2).append(paramC.c().a().k());
        ((StringBuilder)localObject2).append(" was leaked. Did you forget to close a response body?");
        localObject2 = ((StringBuilder)localObject2).toString();
        f.d().a((String)localObject2, a);
        localList.remove(i);
        k = true;
        if (localList.isEmpty())
        {
          o = (paramLong - b);
          return 0;
        }
      }
    }
    return localList.size();
  }
  
  long a(long paramLong)
  {
    int j = 0;
    int i = 0;
    Object localObject1 = null;
    long l1 = Long.MIN_VALUE;
    try
    {
      Iterator localIterator = d.iterator();
      while (localIterator.hasNext())
      {
        e.f0.f.c localC = (e.f0.f.c)localIterator.next();
        if (a(localC, paramLong) > 0)
        {
          j += 1;
        }
        else
        {
          i += 1;
          long l3 = paramLong - o;
          l2 = l1;
          if (l3 <= l1) {
            break label202;
          }
          l2 = l3;
          localObject1 = localC;
          break label202;
        }
      }
      if ((l1 < b) && (i <= a))
      {
        if (i > 0)
        {
          paramLong = b;
          return paramLong - l1;
        }
        if (j > 0)
        {
          paramLong = b;
          return paramLong;
        }
        f = false;
        return -1L;
      }
      d.remove(localObject1);
      e.f0.c.a(localObject1.d());
      return 0L;
    }
    finally
    {
      for (;;)
      {
        long l2;
        for (;;)
        {
          throw localObject2;
        }
        label202:
        l1 = l2;
      }
    }
  }
  
  e.f0.f.c a(a paramA, g paramG, c0 paramC0)
  {
    Iterator localIterator = d.iterator();
    while (localIterator.hasNext())
    {
      e.f0.f.c localC = (e.f0.f.c)localIterator.next();
      if (localC.a(paramA, paramC0))
      {
        paramG.a(localC, true);
        return localC;
      }
    }
    return null;
  }
  
  Socket a(a paramA, g paramG)
  {
    Iterator localIterator = d.iterator();
    while (localIterator.hasNext())
    {
      e.f0.f.c localC = (e.f0.f.c)localIterator.next();
      if ((localC.a(paramA, null)) && (localC.b()) && (localC != paramG.b())) {
        return paramG.a(localC);
      }
    }
    return null;
  }
  
  boolean a(e.f0.f.c paramC)
  {
    if ((!k) && (a != 0))
    {
      notifyAll();
      return false;
    }
    d.remove(paramC);
    return true;
  }
  
  void b(e.f0.f.c paramC)
  {
    if (!f)
    {
      f = true;
      g.execute(c);
    }
    d.add(paramC);
  }
  
  class a
    implements Runnable
  {
    a() {}
    
    public void run()
    {
      for (;;)
      {
        long l1 = a(System.nanoTime());
        if (l1 == -1L) {
          return;
        }
        if (l1 > 0L)
        {
          long l2 = l1 / 1000000L;
          try
          {
            synchronized (j.this)
            {
              wait(l2, (int)(l1 - 1000000L * l2));
            }
          }
          catch (InterruptedException localInterruptedException) {}
          throw localInterruptedException;
        }
      }
    }
  }
}
