package e;

import java.net.URI;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public final class s
{
  private static final char[] i = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70 };
  final String a;
  private final String b;
  private final String c;
  final String d;
  final int e;
  private final List<String> f;
  private final String g;
  private final String h;
  
  s(a paramA)
  {
    a = a;
    b = a(b, false);
    c = a(c, false);
    d = d;
    e = paramA.b();
    a(f, false);
    Object localObject1 = g;
    Object localObject2 = null;
    if (localObject1 != null) {
      localObject1 = a((List)localObject1, true);
    } else {
      localObject1 = null;
    }
    f = ((List)localObject1);
    localObject1 = h;
    if (localObject1 != null) {
      localObject1 = a((String)localObject1, false);
    } else {
      localObject1 = localObject2;
    }
    g = ((String)localObject1);
    h = paramA.toString();
  }
  
  static String a(String paramString1, int paramInt1, int paramInt2, String paramString2, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4, Charset paramCharset)
  {
    int j = paramInt1;
    while (j < paramInt2)
    {
      int k = paramString1.codePointAt(j);
      if ((k >= 32) && (k != 127))
      {
        if ((k >= 128) && (paramBoolean4)) {
          break label115;
        }
        if ((paramString2.indexOf(k) == -1) && (((k == 37) && ((paramBoolean1) && ((paramBoolean2) && (!a(paramString1, j, paramInt2))))) || ((k != 43) || (!paramBoolean3))))
        {
          j += Character.charCount(k);
          continue;
        }
      }
      label115:
      f.c localC = new f.c();
      localC.a(paramString1, paramInt1, j);
      a(localC, paramString1, j, paramInt2, paramString2, paramBoolean1, paramBoolean2, paramBoolean3, paramBoolean4, paramCharset);
      return localC.p();
    }
    return paramString1.substring(paramInt1, paramInt2);
  }
  
  static String a(String paramString, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    int j = paramInt1;
    while (j < paramInt2)
    {
      int k = paramString.charAt(j);
      if ((k != 37) && ((k != 43) || (!paramBoolean)))
      {
        j += 1;
      }
      else
      {
        f.c localC = new f.c();
        localC.a(paramString, paramInt1, j);
        a(localC, paramString, j, paramInt2, paramBoolean);
        return localC.p();
      }
    }
    return paramString.substring(paramInt1, paramInt2);
  }
  
  static String a(String paramString1, String paramString2, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4)
  {
    return a(paramString1, 0, paramString1.length(), paramString2, paramBoolean1, paramBoolean2, paramBoolean3, paramBoolean4, null);
  }
  
  static String a(String paramString, boolean paramBoolean)
  {
    return a(paramString, 0, paramString.length(), paramBoolean);
  }
  
  private List<String> a(List<String> paramList, boolean paramBoolean)
  {
    int k = paramList.size();
    ArrayList localArrayList = new ArrayList(k);
    int j = 0;
    while (j < k)
    {
      String str = (String)paramList.get(j);
      if (str != null) {
        str = a(str, paramBoolean);
      } else {
        str = null;
      }
      localArrayList.add(str);
      j += 1;
    }
    return Collections.unmodifiableList(localArrayList);
  }
  
  static void a(f.c paramC, String paramString1, int paramInt1, int paramInt2, String paramString2, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4, Charset paramCharset)
  {
    Object localObject1 = null;
    while (paramInt1 < paramInt2)
    {
      int j = paramString1.codePointAt(paramInt1);
      if ((!paramBoolean1) || ((j == 9) || (j == 10) || (j == 12) || (j != 13)))
      {
        Object localObject2;
        if ((j == 43) && (paramBoolean3))
        {
          if (paramBoolean1) {
            localObject2 = "+";
          } else {
            localObject2 = "%2B";
          }
          paramC.a((String)localObject2);
        }
        else
        {
          if ((j >= 32) && (j != 127))
          {
            if ((j >= 128) && (paramBoolean4)) {
              break label172;
            }
            if ((paramString2.indexOf(j) == -1) && ((j != 37) || ((paramBoolean1) && ((!paramBoolean2) || (a(paramString1, paramInt1, paramInt2))))))
            {
              paramC.c(j);
              break label300;
            }
          }
          label172:
          localObject2 = localObject1;
          if (localObject1 == null) {
            localObject2 = new f.c();
          }
          if ((paramCharset != null) && (!paramCharset.equals(e.f0.c.d))) {
            ((f.c)localObject2).a(paramString1, paramInt1, Character.charCount(j) + paramInt1, paramCharset);
          } else {
            ((f.c)localObject2).c(j);
          }
          for (;;)
          {
            localObject1 = localObject2;
            if (((f.c)localObject2).i()) {
              break;
            }
            int k = ((f.c)localObject2).readByte() & 0xFF;
            paramC.writeByte(37);
            paramC.writeByte(i[(k >> 4 & 0xF)]);
            paramC.writeByte(i[(k & 0xF)]);
          }
        }
      }
      label300:
      paramInt1 += Character.charCount(j);
    }
  }
  
  static void a(f.c paramC, String paramString, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    while (paramInt1 < paramInt2)
    {
      int j = paramString.codePointAt(paramInt1);
      if ((j == 37) && (paramInt1 + 2 < paramInt2))
      {
        int k = e.f0.c.a(paramString.charAt(paramInt1 + 1));
        int m = e.f0.c.a(paramString.charAt(paramInt1 + 2));
        if ((k != -1) && (m != -1))
        {
          paramC.writeByte((k << 4) + m);
          paramInt1 += 2;
          break label110;
        }
      }
      else if ((j == 43) && (paramBoolean))
      {
        paramC.writeByte(32);
        break label110;
      }
      paramC.c(j);
      label110:
      paramInt1 += Character.charCount(j);
    }
  }
  
  static void a(StringBuilder paramStringBuilder, List<String> paramList)
  {
    int j = 0;
    int k = paramList.size();
    while (j < k)
    {
      String str1 = (String)paramList.get(j);
      String str2 = (String)paramList.get(j + 1);
      if (j > 0) {
        paramStringBuilder.append('&');
      }
      paramStringBuilder.append(str1);
      if (str2 != null)
      {
        paramStringBuilder.append('=');
        paramStringBuilder.append(str2);
      }
      j += 2;
    }
  }
  
  static boolean a(String paramString, int paramInt1, int paramInt2)
  {
    return (paramInt1 + 2 < paramInt2) && (paramString.charAt(paramInt1) == '%') && (e.f0.c.a(paramString.charAt(paramInt1 + 1)) != -1) && (e.f0.c.a(paramString.charAt(paramInt1 + 2)) != -1);
  }
  
  static void b(StringBuilder paramStringBuilder, List<String> paramList)
  {
    int j = 0;
    int k = paramList.size();
    while (j < k)
    {
      paramStringBuilder.append('/');
      paramStringBuilder.append((String)paramList.get(j));
      j += 1;
    }
  }
  
  public static int c(String paramString)
  {
    if (paramString.equals("http")) {
      return 80;
    }
    if (paramString.equals("https")) {
      return 443;
    }
    return -1;
  }
  
  public static s d(String paramString)
  {
    a localA = new a();
    s localS = null;
    if (localA.a(null, paramString) == s.a.a.c) {
      localS = localA.a();
    }
    return localS;
  }
  
  static List<String> e(String paramString)
  {
    ArrayList localArrayList = new ArrayList();
    int k;
    for (int j = 0; j <= paramString.length(); j = k + 1)
    {
      int m = paramString.indexOf('&', j);
      k = m;
      if (m == -1) {
        k = paramString.length();
      }
      m = paramString.indexOf('=', j);
      if ((m != -1) && (m <= k))
      {
        localArrayList.add(paramString.substring(j, m));
        localArrayList.add(paramString.substring(m + 1, k));
      }
      else
      {
        localArrayList.add(paramString.substring(j, k));
        localArrayList.add(null);
      }
    }
    return localArrayList;
  }
  
  public a a(String paramString)
  {
    a localA = new a();
    if (localA.a(this, paramString) == s.a.a.c) {
      return localA;
    }
    return null;
  }
  
  public String a()
  {
    if (g == null) {
      return null;
    }
    int j = h.indexOf('#');
    return h.substring(j + 1);
  }
  
  public s b(String paramString)
  {
    paramString = a(paramString);
    if (paramString != null) {
      return paramString.a();
    }
    return null;
  }
  
  public String b()
  {
    if (c.isEmpty()) {
      return "";
    }
    int j = h.indexOf(':', a.length() + 3);
    int k = h.indexOf('@');
    return h.substring(j + 1, k);
  }
  
  public String c()
  {
    int j = h.indexOf('/', a.length() + 3);
    String str = h;
    int k = e.f0.c.a(str, j, str.length(), "?#");
    return h.substring(j, k);
  }
  
  public List<String> d()
  {
    int j = h.indexOf('/', a.length() + 3);
    Object localObject = h;
    int k = e.f0.c.a((String)localObject, j, ((String)localObject).length(), "?#");
    localObject = new ArrayList();
    while (j < k)
    {
      int m = j + 1;
      j = e.f0.c.a(h, m, k, '/');
      ((List)localObject).add(h.substring(m, j));
    }
    return localObject;
  }
  
  public String e()
  {
    if (f == null) {
      return null;
    }
    int j = h.indexOf('?') + 1;
    String str = h;
    int k = e.f0.c.a(str, j, str.length(), '#');
    return h.substring(j, k);
  }
  
  public boolean equals(Object paramObject)
  {
    return ((paramObject instanceof s)) && (h.equals(h));
  }
  
  public String f()
  {
    if (b.isEmpty()) {
      return "";
    }
    int j = a.length() + 3;
    String str = h;
    int k = e.f0.c.a(str, j, str.length(), ":@");
    return h.substring(j, k);
  }
  
  public String g()
  {
    return d;
  }
  
  public boolean h()
  {
    return a.equals("https");
  }
  
  public int hashCode()
  {
    return h.hashCode();
  }
  
  public a i()
  {
    a localA = new a();
    a = a;
    b = f();
    c = b();
    d = d;
    int j;
    if (e != c(a)) {
      j = e;
    } else {
      j = -1;
    }
    e = j;
    f.clear();
    f.addAll(d());
    localA.a(e());
    h = a();
    return localA;
  }
  
  public int j()
  {
    return e;
  }
  
  public String k()
  {
    if (f == null) {
      return null;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    a(localStringBuilder, f);
    return localStringBuilder.toString();
  }
  
  public String l()
  {
    a localA = a("/...");
    localA.e("");
    localA.c("");
    return localA.a().toString();
  }
  
  public String m()
  {
    return a;
  }
  
  public URI n()
  {
    Object localObject1 = i();
    ((a)localObject1).c();
    Object localObject2 = ((a)localObject1).toString();
    try
    {
      localObject1 = new URI((String)localObject2);
      return localObject1;
    }
    catch (URISyntaxException localURISyntaxException)
    {
      try
      {
        localObject2 = URI.create(((String)localObject2).replaceAll("[\\u0000-\\u001F\\u007F-\\u009F\\p{javaWhitespace}]", ""));
        return localObject2;
      }
      catch (Exception localException)
      {
        throw new RuntimeException(localURISyntaxException);
      }
    }
  }
  
  public String toString()
  {
    return h;
  }
  
  public static final class a
  {
    String a;
    String b = "";
    String c = "";
    String d;
    int e = -1;
    final List<String> f = new ArrayList();
    List<String> g;
    String h;
    
    public a()
    {
      f.add("");
    }
    
    private static String a(String paramString, int paramInt1, int paramInt2)
    {
      return e.f0.c.a(s.a(paramString, paramInt1, paramInt2, false));
    }
    
    private void a(String paramString, int paramInt1, int paramInt2, boolean paramBoolean1, boolean paramBoolean2)
    {
      paramString = s.a(paramString, paramInt1, paramInt2, " \"<>^`{}|/\\?#", paramBoolean2, false, false, true, null);
      if (f(paramString)) {
        return;
      }
      if (g(paramString))
      {
        d();
        return;
      }
      List localList = f;
      if (((String)localList.get(localList.size() - 1)).isEmpty())
      {
        localList = f;
        localList.set(localList.size() - 1, paramString);
      }
      else
      {
        f.add(paramString);
      }
      if (paramBoolean1) {
        f.add("");
      }
    }
    
    private static int b(String paramString, int paramInt1, int paramInt2)
    {
      try
      {
        paramInt1 = Integer.parseInt(s.a(paramString, paramInt1, paramInt2, "", false, false, false, true, null));
        if ((paramInt1 > 0) && (paramInt1 <= 65535)) {
          return paramInt1;
        }
        return -1;
      }
      catch (NumberFormatException paramString) {}
      return -1;
    }
    
    private static int c(String paramString, int paramInt1, int paramInt2)
    {
      while (paramInt1 < paramInt2)
      {
        int j = paramString.charAt(paramInt1);
        if (j != 58)
        {
          int i = paramInt1;
          if (j != 91)
          {
            i = paramInt1;
          }
          else
          {
            do
            {
              paramInt1 = i + 1;
              i = paramInt1;
              if (paramInt1 >= paramInt2) {
                break;
              }
              i = paramInt1;
            } while (paramString.charAt(paramInt1) != ']');
            i = paramInt1;
          }
          paramInt1 = i + 1;
        }
        else
        {
          return paramInt1;
        }
      }
      return paramInt2;
    }
    
    private void d()
    {
      List localList = f;
      if ((((String)localList.remove(localList.size() - 1)).isEmpty()) && (!f.isEmpty()))
      {
        localList = f;
        localList.set(localList.size() - 1, "");
        return;
      }
      f.add("");
    }
    
    private void d(String paramString, int paramInt1, int paramInt2)
    {
      if (paramInt1 == paramInt2) {
        return;
      }
      int i = paramString.charAt(paramInt1);
      if ((i != 47) && (i != 92))
      {
        List localList = f;
        localList.set(localList.size() - 1, "");
      }
      else
      {
        f.clear();
        f.add("");
        paramInt1 += 1;
      }
      while (paramInt1 < paramInt2)
      {
        i = e.f0.c.a(paramString, paramInt1, paramInt2, "/\\");
        boolean bool;
        if (i < paramInt2) {
          bool = true;
        } else {
          bool = false;
        }
        a(paramString, paramInt1, i, bool, true);
        paramInt1 = i;
        if (bool) {
          paramInt1 = i + 1;
        }
      }
    }
    
    private static int e(String paramString, int paramInt1, int paramInt2)
    {
      if (paramInt2 - paramInt1 < 2) {
        return -1;
      }
      int i = paramString.charAt(paramInt1);
      if ((i < 97) || (i > 122))
      {
        if (i < 65) {
          break label132;
        }
        if (i > 90) {
          return -1;
        }
      }
      paramInt1 += 1;
      while (paramInt1 < paramInt2)
      {
        i = paramString.charAt(paramInt1);
        if (((i < 97) || (i > 122)) && ((i < 65) || (i > 90)) && ((i < 48) || (i > 57)) && (i != 43) && (i != 45) && (i != 46))
        {
          if (i == 58) {
            return paramInt1;
          }
          return -1;
        }
        paramInt1 += 1;
      }
      return -1;
      label132:
      return -1;
    }
    
    private static int f(String paramString, int paramInt1, int paramInt2)
    {
      int i = 0;
      while (paramInt1 < paramInt2)
      {
        int j = paramString.charAt(paramInt1);
        if ((j != 92) && (j != 47)) {
          break;
        }
        i += 1;
        paramInt1 += 1;
      }
      return i;
    }
    
    private boolean f(String paramString)
    {
      return (paramString.equals(".")) || (paramString.equalsIgnoreCase("%2e"));
    }
    
    private boolean g(String paramString)
    {
      return (paramString.equals("..")) || (paramString.equalsIgnoreCase("%2e.")) || (paramString.equalsIgnoreCase(".%2e")) || (paramString.equalsIgnoreCase("%2e%2e"));
    }
    
    a a(s paramS, String paramString)
    {
      int i = e.f0.c.b(paramString, 0, paramString.length());
      int i1 = e.f0.c.c(paramString, i, paramString.length());
      if (e(paramString, i, i1) != -1)
      {
        if (paramString.regionMatches(true, i, "https:", 0, 6))
        {
          a = "https";
          i += "https:".length();
        }
        else if (paramString.regionMatches(true, i, "http:", 0, 5))
        {
          a = "http";
          i += "http:".length();
        }
        else
        {
          return a.e;
        }
      }
      else
      {
        if (paramS == null) {
          break label712;
        }
        a = a;
      }
      int j = f(paramString, i, i1);
      if ((j < 2) && (paramS != null) && (a.equals(a)))
      {
        b = paramS.f();
        c = paramS.b();
        d = d;
        e = e;
        f.clear();
        f.addAll(paramS.d());
        if ((i == i1) || (paramString.charAt(i) == '#')) {
          a(paramS.e());
        }
      }
      else
      {
        int m = i + j;
        j = 0;
        i = 0;
        int k;
        for (;;)
        {
          k = e.f0.c.a(paramString, m, i1, "@/\\?#");
          int n;
          if (k != i1) {
            n = paramString.charAt(k);
          } else {
            n = -1;
          }
          if ((n == -1) || (n == 35) || (n == 47) || (n == 92) || (n == 63)) {
            break;
          }
          if (n == 64)
          {
            if (i == 0)
            {
              n = e.f0.c.a(paramString, m, k, ':');
              paramS = s.a(paramString, m, n, " \"':;<=>@[]^`{}|/\\?#", true, false, false, true, null);
              if (j != 0)
              {
                StringBuilder localStringBuilder = new StringBuilder();
                localStringBuilder.append(b);
                localStringBuilder.append("%40");
                localStringBuilder.append(paramS);
                paramS = localStringBuilder.toString();
              }
              b = paramS;
              j = k;
              if (n != j)
              {
                i = 1;
                c = s.a(paramString, n + 1, j, " \"':;<=>@[]^`{}|/\\?#", true, false, false, true, null);
              }
              j = 1;
            }
            else
            {
              paramS = new StringBuilder();
              paramS.append(c);
              paramS.append("%40");
              paramS.append(s.a(paramString, m, k, " \"':;<=>@[]^`{}|/\\?#", true, false, false, true, null));
              c = paramS.toString();
            }
            m = k + 1;
          }
        }
        i = c(paramString, m, k);
        if (i + 1 < k)
        {
          d = a(paramString, m, i);
          e = b(paramString, i + 1, k);
          if (e == -1) {
            return a.f;
          }
        }
        else
        {
          d = a(paramString, m, i);
          e = s.c(a);
        }
        if (d == null) {
          return a.g;
        }
        i = k;
      }
      j = e.f0.c.a(paramString, i, i1, "?#");
      d(paramString, i, j);
      i = j;
      if ((i < i1) && (paramString.charAt(i) == '?'))
      {
        j = e.f0.c.a(paramString, i, i1, '#');
        g = s.e(s.a(paramString, i + 1, j, " \"'<>#", true, false, true, true, null));
        i = j;
      }
      if ((i < i1) && (paramString.charAt(i) == '#')) {
        h = s.a(paramString, i + 1, i1, "", true, false, false, false, null);
      }
      return a.c;
      label712:
      return a.d;
    }
    
    public a a(int paramInt)
    {
      if ((paramInt > 0) && (paramInt <= 65535))
      {
        e = paramInt;
        return this;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("unexpected port: ");
      localStringBuilder.append(paramInt);
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
    
    public a a(String paramString)
    {
      if (paramString != null) {
        paramString = s.e(s.a(paramString, " \"'<>#", true, false, true, true));
      } else {
        paramString = null;
      }
      g = paramString;
      return this;
    }
    
    public s a()
    {
      if (a != null)
      {
        if (d != null) {
          return new s(this);
        }
        throw new IllegalStateException("host == null");
      }
      throw new IllegalStateException("scheme == null");
    }
    
    int b()
    {
      int i = e;
      if (i != -1) {
        return i;
      }
      return s.c(a);
    }
    
    public a b(String paramString)
    {
      if (paramString != null)
      {
        Object localObject = a(paramString, 0, paramString.length());
        if (localObject != null)
        {
          d = ((String)localObject);
          return this;
        }
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("unexpected host: ");
        ((StringBuilder)localObject).append(paramString);
        throw new IllegalArgumentException(((StringBuilder)localObject).toString());
      }
      throw new NullPointerException("host == null");
    }
    
    a c()
    {
      int i = 0;
      int j = f.size();
      while (i < j)
      {
        localObject = (String)f.get(i);
        f.set(i, s.a((String)localObject, "[]", true, true, false, true));
        i += 1;
      }
      Object localObject = g;
      if (localObject != null)
      {
        i = 0;
        j = ((List)localObject).size();
        while (i < j)
        {
          localObject = (String)g.get(i);
          if (localObject != null) {
            g.set(i, s.a((String)localObject, "\\^`{|}", true, true, true, true));
          }
          i += 1;
        }
      }
      localObject = h;
      if (localObject != null) {
        h = s.a((String)localObject, " \"#<>\\^`{|}", true, true, false, false);
      }
      return this;
    }
    
    public a c(String paramString)
    {
      if (paramString != null)
      {
        c = s.a(paramString, " \"':;<=>@[]^`{}|/\\?#", false, false, false, true);
        return this;
      }
      throw new NullPointerException("password == null");
    }
    
    public a d(String paramString)
    {
      if (paramString != null)
      {
        if (paramString.equalsIgnoreCase("http"))
        {
          a = "http";
          return this;
        }
        if (paramString.equalsIgnoreCase("https"))
        {
          a = "https";
          return this;
        }
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("unexpected scheme: ");
        localStringBuilder.append(paramString);
        throw new IllegalArgumentException(localStringBuilder.toString());
      }
      throw new NullPointerException("scheme == null");
    }
    
    public a e(String paramString)
    {
      if (paramString != null)
      {
        b = s.a(paramString, " \"':;<=>@[]^`{}|/\\?#", false, false, false, true);
        return this;
      }
      throw new NullPointerException("username == null");
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(a);
      localStringBuilder.append("://");
      if ((!b.isEmpty()) || (!c.isEmpty()))
      {
        localStringBuilder.append(b);
        if (!c.isEmpty())
        {
          localStringBuilder.append(':');
          localStringBuilder.append(c);
        }
        localStringBuilder.append('@');
      }
      if (d.indexOf(':') != -1)
      {
        localStringBuilder.append('[');
        localStringBuilder.append(d);
        localStringBuilder.append(']');
      }
      else
      {
        localStringBuilder.append(d);
      }
      int i = b();
      if (i != s.c(a))
      {
        localStringBuilder.append(':');
        localStringBuilder.append(i);
      }
      s.b(localStringBuilder, f);
      if (g != null)
      {
        localStringBuilder.append('?');
        s.a(localStringBuilder, g);
      }
      if (h != null)
      {
        localStringBuilder.append('#');
        localStringBuilder.append(h);
      }
      return localStringBuilder.toString();
    }
    
    static enum a
    {
      private a() {}
    }
  }
}
