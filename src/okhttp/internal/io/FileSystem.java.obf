package e.f0.j;

import f.l;
import f.r;
import f.s;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

public abstract interface a
{
  public static final a a = new a();
  
  public abstract void a(File paramFile);
  
  public abstract void a(File paramFile1, File paramFile2);
  
  public abstract s b(File paramFile);
  
  public abstract r c(File paramFile);
  
  public abstract void d(File paramFile);
  
  public abstract r e(File paramFile);
  
  public abstract boolean f(File paramFile);
  
  public abstract long g(File paramFile);
  
  final class a
    implements a
  {
    a() {}
    
    public void a(File paramFile)
    {
      if (!paramFile.delete())
      {
        if (!paramFile.exists()) {
          return;
        }
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("failed to delete ");
        localStringBuilder.append(paramFile);
        throw new IOException(localStringBuilder.toString());
      }
    }
    
    public void a(File paramFile1, File paramFile2)
    {
      a(paramFile2);
      if (paramFile1.renameTo(paramFile2)) {
        return;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("failed to rename ");
      localStringBuilder.append(paramFile1);
      localStringBuilder.append(" to ");
      localStringBuilder.append(paramFile2);
      throw new IOException(localStringBuilder.toString());
    }
    
    public s b(File paramFile)
    {
      return l.c(paramFile);
    }
    
    public r c(File paramFile)
    {
      try
      {
        r localR = l.b(paramFile);
        return localR;
      }
      catch (FileNotFoundException localFileNotFoundException)
      {
        paramFile.getParentFile().mkdirs();
      }
      return l.b(paramFile);
    }
    
    public void d(File paramFile)
    {
      Object localObject = paramFile.listFiles();
      if (localObject != null)
      {
        int j = localObject.length;
        int i = 0;
        while (i < j)
        {
          paramFile = localObject[i];
          if (paramFile.isDirectory()) {
            d(paramFile);
          }
          if (paramFile.delete())
          {
            i += 1;
          }
          else
          {
            localObject = new StringBuilder();
            ((StringBuilder)localObject).append("failed to delete ");
            ((StringBuilder)localObject).append(paramFile);
            throw new IOException(((StringBuilder)localObject).toString());
          }
        }
        return;
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("not a readable directory: ");
      ((StringBuilder)localObject).append(paramFile);
      paramFile = new IOException(((StringBuilder)localObject).toString());
      for (;;)
      {
        throw paramFile;
      }
    }
    
    public r e(File paramFile)
    {
      try
      {
        r localR = l.a(paramFile);
        return localR;
      }
      catch (FileNotFoundException localFileNotFoundException)
      {
        paramFile.getParentFile().mkdirs();
      }
      return l.a(paramFile);
    }
    
    public boolean f(File paramFile)
    {
      return paramFile.exists();
    }
    
    public long g(File paramFile)
    {
      return paramFile.length();
    }
  }
}
