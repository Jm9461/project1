package e.f0;

import e.b0;
import e.z;
import f.f;
import java.io.Closeable;
import java.io.IOException;
import java.net.IDN;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class c
{
  public static final byte[] a = new byte[0];
  public static final String[] b = new String[0];
  public static final b0 c = b0.a(null, a);
  public static final Charset d;
  public static final TimeZone e = TimeZone.getTimeZone("GMT");
  public static final Comparator<String> f = new a();
  private static final Pattern g = Pattern.compile("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([\\d.]+)");
  
  static
  {
    z.a(null, a);
    f.b("efbbbf");
    f.b("feff");
    f.b("fffe");
    f.b("0000ffff");
    f.b("ffff0000");
    d = Charset.forName("UTF-8");
    Charset.forName("ISO-8859-1");
    Charset.forName("UTF-16BE");
    Charset.forName("UTF-16LE");
    Charset.forName("UTF-32BE");
    Charset.forName("UTF-32LE");
  }
  
  public static int a(char paramChar)
  {
    if ((paramChar >= '0') && (paramChar <= '9')) {
      return paramChar - '0';
    }
    if ((paramChar >= 'a') && (paramChar <= 'f')) {
      return paramChar - 'a' + 10;
    }
    if ((paramChar >= 'A') && (paramChar <= 'F')) {
      return paramChar - 'A' + 10;
    }
    return -1;
  }
  
  public static int a(String paramString, int paramInt1, int paramInt2, char paramChar)
  {
    while (paramInt1 < paramInt2)
    {
      if (paramString.charAt(paramInt1) == paramChar) {
        return paramInt1;
      }
      paramInt1 += 1;
    }
    return paramInt2;
  }
  
  public static int a(String paramString1, int paramInt1, int paramInt2, String paramString2)
  {
    while (paramInt1 < paramInt2)
    {
      if (paramString2.indexOf(paramString1.charAt(paramInt1)) != -1) {
        return paramInt1;
      }
      paramInt1 += 1;
    }
    return paramInt2;
  }
  
  public static int a(Comparator<String> paramComparator, String[] paramArrayOfString, String paramString)
  {
    int i = 0;
    int j = paramArrayOfString.length;
    while (i < j)
    {
      if (paramComparator.compare(paramArrayOfString[i], paramString) == 0) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  public static AssertionError a(String paramString, Exception paramException)
  {
    paramString = new AssertionError(paramString);
    try
    {
      paramString.initCause(paramException);
      return paramString;
    }
    catch (IllegalStateException paramException) {}
    return paramString;
  }
  
  public static String a(e.s paramS, boolean paramBoolean)
  {
    Object localObject;
    if (paramS.g().contains(":"))
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("[");
      ((StringBuilder)localObject).append(paramS.g());
      ((StringBuilder)localObject).append("]");
      localObject = ((StringBuilder)localObject).toString();
    }
    else
    {
      localObject = paramS.g();
    }
    if ((!paramBoolean) && (paramS.j() == e.s.c(paramS.m()))) {
      return localObject;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append((String)localObject);
    localStringBuilder.append(":");
    localStringBuilder.append(paramS.j());
    return localStringBuilder.toString();
  }
  
  public static String a(String paramString)
  {
    if (paramString.contains(":"))
    {
      if ((paramString.startsWith("[")) && (paramString.endsWith("]"))) {
        localObject = a(paramString, 1, paramString.length() - 1);
      } else {
        localObject = a(paramString, 0, paramString.length());
      }
      if (localObject == null) {
        return null;
      }
      Object localObject = ((InetAddress)localObject).getAddress();
      if (localObject.length == 16) {
        return a((byte[])localObject);
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Invalid IPv6 address: '");
      ((StringBuilder)localObject).append(paramString);
      ((StringBuilder)localObject).append("'");
      throw new AssertionError(((StringBuilder)localObject).toString());
    }
    try
    {
      paramString = IDN.toASCII(paramString).toLowerCase(Locale.US);
      if (paramString.isEmpty()) {
        return null;
      }
      boolean bool = b(paramString);
      if (bool) {
        return null;
      }
      return paramString;
    }
    catch (IllegalArgumentException paramString) {}
    return null;
  }
  
  public static String a(String paramString, Object... paramVarArgs)
  {
    return String.format(Locale.US, paramString, paramVarArgs);
  }
  
  private static String a(byte[] paramArrayOfByte)
  {
    int m = -1;
    int k = 0;
    int i = 0;
    int j;
    while (i < paramArrayOfByte.length)
    {
      int i1;
      for (j = i;; j = i1 + 2)
      {
        i1 = j;
        if ((i1 >= 16) || (paramArrayOfByte[i1] != 0) || (paramArrayOfByte[(i1 + 1)] != 0)) {
          break;
        }
      }
      int i2 = i1 - i;
      int n = m;
      j = k;
      if (i2 > k)
      {
        n = m;
        j = k;
        if (i2 >= 4)
        {
          j = i2;
          n = i;
        }
      }
      i = i1 + 2;
      m = n;
      k = j;
    }
    f.c localC = new f.c();
    i = 0;
    while (i < paramArrayOfByte.length) {
      if (i == m)
      {
        localC.writeByte(58);
        j = i + k;
        i = j;
        if (j == 16)
        {
          localC.writeByte(58);
          i = j;
        }
      }
      else
      {
        if (i > 0) {
          localC.writeByte(58);
        }
        localC.a((paramArrayOfByte[i] & 0xFF) << 8 | paramArrayOfByte[(i + 1)] & 0xFF);
        i += 2;
      }
    }
    return localC.p();
  }
  
  private static InetAddress a(String paramString, int paramInt1, int paramInt2)
  {
    byte[] arrayOfByte = new byte[16];
    int i = 0;
    int j = -1;
    int i1 = -1;
    int m;
    for (int k = paramInt1;; k = paramInt1)
    {
      paramInt1 = i;
      m = j;
      if (k >= paramInt2) {
        break label309;
      }
      if (i == arrayOfByte.length) {
        return null;
      }
      int n;
      if ((k + 2 <= paramInt2) && (paramString.regionMatches(k, "::", 0, 2)))
      {
        if (j != -1) {
          return null;
        }
        k += 2;
        j = i + 2;
        i = j;
        n = j;
        m = i;
        paramInt1 = k;
        if (k == paramInt2)
        {
          paramInt1 = j;
          m = i;
          break label309;
        }
      }
      else
      {
        n = i;
        m = j;
        paramInt1 = k;
        if (i != 0) {
          if (paramString.regionMatches(k, ":", 0, 1))
          {
            paramInt1 = k + 1;
            n = i;
            m = j;
          }
          else
          {
            if (paramString.regionMatches(k, ".", 0, 1))
            {
              if (!a(paramString, i1, paramInt2, arrayOfByte, i - 2)) {
                return null;
              }
              paramInt1 = i + 2;
              m = j;
              break label309;
            }
            return null;
          }
        }
      }
      i = 0;
      k = paramInt1;
      while (paramInt1 < paramInt2)
      {
        j = a(paramString.charAt(paramInt1));
        if (j == -1) {
          break;
        }
        i = (i << 4) + j;
        paramInt1 += 1;
      }
      j = paramInt1 - k;
      if (j == 0) {
        break;
      }
      if (j > 4) {
        return null;
      }
      i1 = n + 1;
      arrayOfByte[n] = ((byte)(i >>> 8 & 0xFF));
      j = i1 + 1;
      arrayOfByte[i1] = ((byte)(i & 0xFF));
      i = j;
      j = m;
      i1 = k;
    }
    return null;
    label309:
    if (paramInt1 != arrayOfByte.length)
    {
      if (m == -1) {
        return null;
      }
      System.arraycopy(arrayOfByte, m, arrayOfByte, arrayOfByte.length - (paramInt1 - m), paramInt1 - m);
      Arrays.fill(arrayOfByte, m, arrayOfByte.length - paramInt1 + m, (byte)0);
    }
    try
    {
      paramString = InetAddress.getByAddress(arrayOfByte);
      return paramString;
    }
    catch (UnknownHostException paramString)
    {
      paramString = new AssertionError();
    }
    for (;;)
    {
      throw paramString;
    }
  }
  
  public static <T> List<T> a(List<T> paramList)
  {
    return Collections.unmodifiableList(new ArrayList(paramList));
  }
  
  public static <T> List<T> a(T... paramVarArgs)
  {
    return Collections.unmodifiableList(Arrays.asList((Object[])paramVarArgs.clone()));
  }
  
  public static ThreadFactory a(String paramString, final boolean paramBoolean)
  {
    return new b(paramBoolean);
  }
  
  public static void a(long paramLong1, long paramLong2, long paramLong3)
  {
    if (((paramLong2 | paramLong3) >= 0L) && (paramLong2 <= paramLong1) && (paramLong1 - paramLong2 >= paramLong3)) {
      return;
    }
    throw new ArrayIndexOutOfBoundsException();
  }
  
  public static void a(Closeable paramCloseable)
  {
    if (paramCloseable != null) {
      try
      {
        paramCloseable.close();
        return;
      }
      catch (Exception paramCloseable) {}catch (RuntimeException paramCloseable)
      {
        throw paramCloseable;
      }
    }
  }
  
  public static void a(Socket paramSocket)
  {
    if (paramSocket != null) {
      try
      {
        paramSocket.close();
        return;
      }
      catch (Exception paramSocket) {}catch (RuntimeException paramSocket)
      {
        throw paramSocket;
      }
      catch (AssertionError paramSocket)
      {
        if (a(paramSocket)) {
          return;
        }
        throw paramSocket;
      }
    }
  }
  
  public static boolean a(f.s paramS, int paramInt, TimeUnit paramTimeUnit)
  {
    try
    {
      boolean bool = b(paramS, paramInt, paramTimeUnit);
      return bool;
    }
    catch (IOException paramS) {}
    return false;
  }
  
  public static boolean a(AssertionError paramAssertionError)
  {
    return (paramAssertionError.getCause() != null) && (paramAssertionError.getMessage() != null) && (paramAssertionError.getMessage().contains("getsockname failed"));
  }
  
  public static boolean a(Object paramObject1, Object paramObject2)
  {
    return (paramObject1 == paramObject2) || ((paramObject1 != null) && (paramObject1.equals(paramObject2)));
  }
  
  private static boolean a(String paramString, int paramInt1, int paramInt2, byte[] paramArrayOfByte, int paramInt3)
  {
    int j = paramInt3;
    int i = paramInt1;
    while (i < paramInt2)
    {
      if (j == paramArrayOfByte.length) {
        return false;
      }
      paramInt1 = i;
      if (j != paramInt3)
      {
        if (paramString.charAt(i) != '.') {
          return false;
        }
        paramInt1 = i + 1;
      }
      int k = 0;
      i = paramInt1;
      while (i < paramInt2)
      {
        int m = paramString.charAt(i);
        if ((m < 48) || (m > 57)) {
          break;
        }
        if ((k == 0) && (paramInt1 != i)) {
          return false;
        }
        k = k * 10 + m - 48;
        if (k > 255) {
          return false;
        }
        i += 1;
      }
      if (i - paramInt1 == 0) {
        return false;
      }
      paramArrayOfByte[j] = ((byte)k);
      j += 1;
    }
    return j == paramInt3 + 4;
  }
  
  public static String[] a(Comparator<? super String> paramComparator, String[] paramArrayOfString1, String[] paramArrayOfString2)
  {
    ArrayList localArrayList = new ArrayList();
    int k = paramArrayOfString1.length;
    int i = 0;
    while (i < k)
    {
      String str = paramArrayOfString1[i];
      int m = paramArrayOfString2.length;
      int j = 0;
      while (j < m)
      {
        if (paramComparator.compare(str, paramArrayOfString2[j]) == 0)
        {
          localArrayList.add(str);
          break;
        }
        j += 1;
      }
      i += 1;
    }
    return (String[])localArrayList.toArray(new String[localArrayList.size()]);
  }
  
  public static String[] a(String[] paramArrayOfString, String paramString)
  {
    String[] arrayOfString = new String[paramArrayOfString.length + 1];
    System.arraycopy(paramArrayOfString, 0, arrayOfString, 0, paramArrayOfString.length);
    arrayOfString[(arrayOfString.length - 1)] = paramString;
    return arrayOfString;
  }
  
  public static int b(String paramString, int paramInt1, int paramInt2)
  {
    while (paramInt1 < paramInt2)
    {
      int i = paramString.charAt(paramInt1);
      if ((i != 9) && (i != 10) && (i != 12) && (i != 13) && (i != 32)) {
        return paramInt1;
      }
      paramInt1 += 1;
    }
    return paramInt2;
  }
  
  /* Error */
  public static boolean b(f.s paramS, int paramInt, TimeUnit paramTimeUnit)
  {
    // Byte code:
    //   0: invokestatic 366	java/lang/System:nanoTime	()J
    //   3: lstore 5
    //   5: aload_0
    //   6: invokeinterface 371 1 0
    //   11: invokevirtual 375	f/t:d	()Z
    //   14: ifeq +19 -> 33
    //   17: aload_0
    //   18: invokeinterface 371 1 0
    //   23: invokevirtual 377	f/t:c	()J
    //   26: lload 5
    //   28: lsub
    //   29: lstore_3
    //   30: goto +7 -> 37
    //   33: ldc2_w 378
    //   36: lstore_3
    //   37: aload_0
    //   38: invokeinterface 371 1 0
    //   43: lload_3
    //   44: aload_2
    //   45: iload_1
    //   46: i2l
    //   47: invokevirtual 385	java/util/concurrent/TimeUnit:toNanos	(J)J
    //   50: invokestatic 391	java/lang/Math:min	(JJ)J
    //   53: lload 5
    //   55: ladd
    //   56: invokevirtual 394	f/t:a	(J)Lf/t;
    //   59: pop
    //   60: new 232	f/c
    //   63: dup
    //   64: invokespecial 233	f/c:<init>	()V
    //   67: astore_2
    //   68: aload_0
    //   69: aload_2
    //   70: ldc2_w 395
    //   73: invokeinterface 399 4 0
    //   78: ldc2_w 400
    //   81: lcmp
    //   82: ifeq +10 -> 92
    //   85: aload_2
    //   86: invokevirtual 403	f/c:m	()V
    //   89: goto -21 -> 68
    //   92: lload_3
    //   93: ldc2_w 378
    //   96: lcmp
    //   97: ifne +15 -> 112
    //   100: aload_0
    //   101: invokeinterface 371 1 0
    //   106: invokevirtual 405	f/t:a	()Lf/t;
    //   109: pop
    //   110: iconst_1
    //   111: ireturn
    //   112: aload_0
    //   113: invokeinterface 371 1 0
    //   118: lload 5
    //   120: lload_3
    //   121: ladd
    //   122: invokevirtual 394	f/t:a	(J)Lf/t;
    //   125: pop
    //   126: iconst_1
    //   127: ireturn
    //   128: astore_2
    //   129: lload_3
    //   130: ldc2_w 378
    //   133: lcmp
    //   134: ifne +16 -> 150
    //   137: aload_0
    //   138: invokeinterface 371 1 0
    //   143: invokevirtual 405	f/t:a	()Lf/t;
    //   146: pop
    //   147: goto +17 -> 164
    //   150: aload_0
    //   151: invokeinterface 371 1 0
    //   156: lload 5
    //   158: lload_3
    //   159: ladd
    //   160: invokevirtual 394	f/t:a	(J)Lf/t;
    //   163: pop
    //   164: aload_2
    //   165: athrow
    //   166: astore_2
    //   167: lload_3
    //   168: ldc2_w 378
    //   171: lcmp
    //   172: ifne +15 -> 187
    //   175: aload_0
    //   176: invokeinterface 371 1 0
    //   181: invokevirtual 405	f/t:a	()Lf/t;
    //   184: pop
    //   185: iconst_0
    //   186: ireturn
    //   187: aload_0
    //   188: invokeinterface 371 1 0
    //   193: lload 5
    //   195: lload_3
    //   196: ladd
    //   197: invokevirtual 394	f/t:a	(J)Lf/t;
    //   200: pop
    //   201: iconst_0
    //   202: ireturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	203	0	paramS	f.s
    //   0	203	1	paramInt	int
    //   0	203	2	paramTimeUnit	TimeUnit
    //   29	167	3	l1	long
    //   3	191	5	l2	long
    // Exception table:
    //   from	to	target	type
    //   60	68	128	finally
    //   68	89	128	finally
    //   60	68	166	java/io/InterruptedIOException
    //   68	89	166	java/io/InterruptedIOException
  }
  
  private static boolean b(String paramString)
  {
    int i = 0;
    while (i < paramString.length())
    {
      int j = paramString.charAt(i);
      if (j > 31)
      {
        if (j >= 127) {
          return true;
        }
        if (" #%/:?@[\\]".indexOf(j) != -1) {
          return true;
        }
        i += 1;
      }
      else
      {
        return true;
      }
    }
    return false;
  }
  
  public static boolean b(Comparator<String> paramComparator, String[] paramArrayOfString1, String[] paramArrayOfString2)
  {
    if ((paramArrayOfString1 != null) && (paramArrayOfString2 != null) && (paramArrayOfString1.length != 0))
    {
      if (paramArrayOfString2.length == 0) {
        return false;
      }
      int k = paramArrayOfString1.length;
      int i = 0;
      while (i < k)
      {
        String str = paramArrayOfString1[i];
        int m = paramArrayOfString2.length;
        int j = 0;
        while (j < m)
        {
          if (paramComparator.compare(str, paramArrayOfString2[j]) == 0) {
            return true;
          }
          j += 1;
        }
        i += 1;
      }
      return false;
    }
    return false;
  }
  
  public static int c(String paramString)
  {
    int i = 0;
    int j = paramString.length();
    while (i < j)
    {
      int k = paramString.charAt(i);
      if (k > 31)
      {
        if (k >= 127) {
          return i;
        }
        i += 1;
      }
      else
      {
        return i;
      }
    }
    return -1;
  }
  
  public static int c(String paramString, int paramInt1, int paramInt2)
  {
    paramInt2 -= 1;
    while (paramInt2 >= paramInt1)
    {
      int i = paramString.charAt(paramInt2);
      if ((i != 9) && (i != 10) && (i != 12) && (i != 13) && (i != 32)) {
        return paramInt2 + 1;
      }
      paramInt2 -= 1;
    }
    return paramInt1;
  }
  
  public static String d(String paramString, int paramInt1, int paramInt2)
  {
    paramInt1 = b(paramString, paramInt1, paramInt2);
    return paramString.substring(paramInt1, c(paramString, paramInt1, paramInt2));
  }
  
  public static boolean d(String paramString)
  {
    return g.matcher(paramString).matches();
  }
  
  final class a
    implements Comparator<String>
  {
    a() {}
    
    public int a(String paramString1, String paramString2)
    {
      return paramString1.compareTo(paramString2);
    }
  }
  
  final class b
    implements ThreadFactory
  {
    b(boolean paramBoolean) {}
    
    public Thread newThread(Runnable paramRunnable)
    {
      paramRunnable = new Thread(paramRunnable, c.this);
      paramRunnable.setDaemon(paramBoolean);
      return paramRunnable;
    }
  }
}
