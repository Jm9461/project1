package e.f0.f;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public final class e
  extends RuntimeException
{
  private static final Method d;
  private IOException c;
  
  static
  {
    Object localObject;
    try
    {
      Method localMethod = Throwable.class.getDeclaredMethod("addSuppressed", new Class[] { Throwable.class });
    }
    catch (Exception localException)
    {
      localObject = null;
    }
    d = localObject;
  }
  
  public e(IOException paramIOException)
  {
    super(paramIOException);
    c = paramIOException;
  }
  
  private void a(IOException paramIOException1, IOException paramIOException2)
  {
    Method localMethod = d;
    if (localMethod != null) {
      try
      {
        localMethod.invoke(paramIOException1, new Object[] { paramIOException2 });
        return;
      }
      catch (IllegalAccessException paramIOException1) {}catch (InvocationTargetException paramIOException1) {}
    }
  }
  
  public IOException a()
  {
    return c;
  }
  
  public void a(IOException paramIOException)
  {
    a(paramIOException, c);
    c = paramIOException;
  }
}
