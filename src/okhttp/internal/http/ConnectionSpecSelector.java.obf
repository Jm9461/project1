package e.f0.f;

import e.f0.a;
import e.k;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.net.ProtocolException;
import java.net.UnknownServiceException;
import java.security.cert.CertificateException;
import java.util.Arrays;
import java.util.List;
import javax.net.ssl.SSLHandshakeException;
import javax.net.ssl.SSLPeerUnverifiedException;
import javax.net.ssl.SSLProtocolException;
import javax.net.ssl.SSLSocket;

public final class b
{
  private final List<k> a;
  private int b = 0;
  private boolean c;
  private boolean d;
  
  public b(List<k> paramList)
  {
    a = paramList;
  }
  
  private boolean b(SSLSocket paramSSLSocket)
  {
    int i = b;
    while (i < a.size())
    {
      if (((k)a.get(i)).a(paramSSLSocket)) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  public k a(SSLSocket paramSSLSocket)
  {
    Object localObject2 = null;
    int i = b;
    int j = a.size();
    for (;;)
    {
      localObject1 = localObject2;
      if (i >= j) {
        break;
      }
      localObject1 = (k)a.get(i);
      if (((k)localObject1).a(paramSSLSocket))
      {
        b = (i + 1);
        break;
      }
      i += 1;
    }
    if (localObject1 != null)
    {
      c = b(paramSSLSocket);
      a.a.a((k)localObject1, paramSSLSocket, d);
      return localObject1;
    }
    Object localObject1 = new StringBuilder();
    ((StringBuilder)localObject1).append("Unable to find acceptable protocols. isFallback=");
    ((StringBuilder)localObject1).append(d);
    ((StringBuilder)localObject1).append(", modes=");
    ((StringBuilder)localObject1).append(a);
    ((StringBuilder)localObject1).append(", supported protocols=");
    ((StringBuilder)localObject1).append(Arrays.toString(paramSSLSocket.getEnabledProtocols()));
    paramSSLSocket = new UnknownServiceException(((StringBuilder)localObject1).toString());
    for (;;)
    {
      throw paramSSLSocket;
    }
  }
  
  public boolean a(IOException paramIOException)
  {
    boolean bool = true;
    d = true;
    if (!c) {
      return false;
    }
    if ((paramIOException instanceof ProtocolException)) {
      return false;
    }
    if ((paramIOException instanceof InterruptedIOException)) {
      return false;
    }
    if (((paramIOException instanceof SSLHandshakeException)) && ((paramIOException.getCause() instanceof CertificateException))) {
      return false;
    }
    if ((paramIOException instanceof SSLPeerUnverifiedException)) {
      return false;
    }
    if (!(paramIOException instanceof SSLHandshakeException))
    {
      if ((paramIOException instanceof SSLProtocolException)) {
        return true;
      }
      bool = false;
    }
    return bool;
  }
}
