package e.f0.i;

import java.util.Arrays;

public final class m
{
  private int a;
  private final int[] b = new int[10];
  
  public m() {}
  
  int a(int paramInt)
  {
    return b[paramInt];
  }
  
  m a(int paramInt1, int paramInt2)
  {
    if (paramInt1 >= 0)
    {
      int[] arrayOfInt = b;
      if (paramInt1 >= arrayOfInt.length) {
        return this;
      }
      a |= 1 << paramInt1;
      arrayOfInt[paramInt1] = paramInt2;
      return this;
    }
    return this;
  }
  
  void a()
  {
    a = 0;
    Arrays.fill(b, 0);
  }
  
  void a(m paramM)
  {
    int i = 0;
    while (i < 10)
    {
      if (paramM.d(i)) {
        a(i, paramM.a(i));
      }
      i += 1;
    }
  }
  
  int b()
  {
    if ((a & 0x2) != 0) {
      return b[1];
    }
    return -1;
  }
  
  int b(int paramInt)
  {
    if ((a & 0x10) != 0) {
      return b[4];
    }
    return paramInt;
  }
  
  int c()
  {
    if ((a & 0x80) != 0) {
      return b[7];
    }
    return 65535;
  }
  
  int c(int paramInt)
  {
    if ((a & 0x20) != 0) {
      return b[5];
    }
    return paramInt;
  }
  
  int d()
  {
    return Integer.bitCount(a);
  }
  
  boolean d(int paramInt)
  {
    return (a & 1 << paramInt) != 0;
  }
}
