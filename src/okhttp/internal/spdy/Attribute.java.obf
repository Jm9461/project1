package e.f0.i;

import f.e;
import f.f;
import f.l;
import f.s;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

final class d
{
  static final c[] a = { new c(c.i, ""), new c(c.f, "GET"), new c(c.f, "POST"), new c(c.g, "/"), new c(c.g, "/index.html"), new c(c.h, "http"), new c(c.h, "https"), new c(c.e, "200"), new c(c.e, "204"), new c(c.e, "206"), new c(c.e, "304"), new c(c.e, "400"), new c(c.e, "404"), new c(c.e, "500"), new c("accept-charset", ""), new c("accept-encoding", "gzip, deflate"), new c("accept-language", ""), new c("accept-ranges", ""), new c("accept", ""), new c("access-control-allow-origin", ""), new c("age", ""), new c("allow", ""), new c("authorization", ""), new c("cache-control", ""), new c("content-disposition", ""), new c("content-encoding", ""), new c("content-language", ""), new c("content-length", ""), new c("content-location", ""), new c("content-range", ""), new c("content-type", ""), new c("cookie", ""), new c("date", ""), new c("etag", ""), new c("expect", ""), new c("expires", ""), new c("from", ""), new c("host", ""), new c("if-match", ""), new c("if-modified-since", ""), new c("if-none-match", ""), new c("if-range", ""), new c("if-unmodified-since", ""), new c("last-modified", ""), new c("link", ""), new c("location", ""), new c("max-forwards", ""), new c("proxy-authenticate", ""), new c("proxy-authorization", ""), new c("range", ""), new c("referer", ""), new c("refresh", ""), new c("retry-after", ""), new c("server", ""), new c("set-cookie", ""), new c("strict-transport-security", ""), new c("transfer-encoding", ""), new c("user-agent", ""), new c("vary", ""), new c("via", ""), new c("www-authenticate", "") };
  static final Map<f, Integer> b = a();
  
  static f a(f paramF)
  {
    int i = 0;
    int j = paramF.f();
    while (i < j)
    {
      int k = paramF.a(i);
      if ((k >= 65) && (k <= 90))
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("PROTOCOL_ERROR response malformed: mixed case name: ");
        localStringBuilder.append(paramF.i());
        throw new IOException(localStringBuilder.toString());
      }
      i += 1;
    }
    return paramF;
  }
  
  private static Map<f, Integer> a()
  {
    LinkedHashMap localLinkedHashMap = new LinkedHashMap(a.length);
    int i = 0;
    for (;;)
    {
      c[] arrayOfC = a;
      if (i >= arrayOfC.length) {
        break;
      }
      if (!localLinkedHashMap.containsKey(a)) {
        localLinkedHashMap.put(aa, Integer.valueOf(i));
      }
      i += 1;
    }
    return Collections.unmodifiableMap(localLinkedHashMap);
  }
  
  static final class a
  {
    private final List<c> a = new ArrayList();
    private final e b;
    private final int c;
    private int d;
    c[] e = new c[8];
    int f = e.length - 1;
    int g = 0;
    int h = 0;
    
    a(int paramInt1, int paramInt2, s paramS)
    {
      c = paramInt1;
      d = paramInt2;
      b = l.a(paramS);
    }
    
    a(int paramInt, s paramS)
    {
      this(paramInt, paramInt, paramS);
    }
    
    private int a(int paramInt)
    {
      return f + 1 + paramInt;
    }
    
    private void a(int paramInt, c paramC)
    {
      a.add(paramC);
      int j = c;
      int i = j;
      if (paramInt != -1) {
        i = j - e[a(paramInt)].c;
      }
      j = d;
      if (i > j)
      {
        e();
        return;
      }
      j = b(h + i - j);
      if (paramInt == -1)
      {
        paramInt = g;
        c[] arrayOfC1 = e;
        if (paramInt + 1 > arrayOfC1.length)
        {
          c[] arrayOfC2 = new c[arrayOfC1.length * 2];
          System.arraycopy(arrayOfC1, 0, arrayOfC2, arrayOfC1.length, arrayOfC1.length);
          f = (e.length - 1);
          e = arrayOfC2;
        }
        paramInt = f;
        f = (paramInt - 1);
        e[paramInt] = paramC;
        g += 1;
      }
      else
      {
        int k = a(paramInt);
        e[(paramInt + (k + j))] = paramC;
      }
      h += i;
    }
    
    private int b(int paramInt)
    {
      int i = 0;
      int k = 0;
      if (paramInt > 0)
      {
        i = e.length - 1;
        int j = paramInt;
        paramInt = k;
        while ((i >= f) && (j > 0))
        {
          arrayOfC = e;
          j -= c;
          h -= c;
          g -= 1;
          paramInt += 1;
          i -= 1;
        }
        c[] arrayOfC = e;
        i = f;
        System.arraycopy(arrayOfC, i + 1, arrayOfC, i + 1 + paramInt, g);
        f += paramInt;
        i = paramInt;
      }
      return i;
    }
    
    private f c(int paramInt)
    {
      if (d(paramInt)) {
        return aa;
      }
      int i = a(paramInt - d.a.length);
      if (i >= 0)
      {
        localObject = e;
        if (i < localObject.length) {
          return a;
        }
      }
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Header index too large ");
      ((StringBuilder)localObject).append(paramInt + 1);
      throw new IOException(((StringBuilder)localObject).toString());
    }
    
    private void d()
    {
      int i = d;
      int j = h;
      if (i < j)
      {
        if (i == 0)
        {
          e();
          return;
        }
        b(j - i);
      }
    }
    
    private boolean d(int paramInt)
    {
      return (paramInt >= 0) && (paramInt <= d.a.length - 1);
    }
    
    private void e()
    {
      Arrays.fill(e, null);
      f = (e.length - 1);
      g = 0;
      h = 0;
    }
    
    private void e(int paramInt)
    {
      if (d(paramInt))
      {
        localObject = d.a[paramInt];
        a.add(localObject);
        return;
      }
      int i = a(paramInt - d.a.length);
      if (i >= 0)
      {
        localObject = e;
        if (i < localObject.length)
        {
          a.add(localObject[i]);
          return;
        }
      }
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Header index too large ");
      ((StringBuilder)localObject).append(paramInt + 1);
      throw new IOException(((StringBuilder)localObject).toString());
    }
    
    private int f()
    {
      return b.readByte() & 0xFF;
    }
    
    private void f(int paramInt)
    {
      a(-1, new c(c(paramInt), b()));
    }
    
    private void g()
    {
      a(-1, new c(d.a(b()), b()));
    }
    
    private void g(int paramInt)
    {
      f localF1 = c(paramInt);
      f localF2 = b();
      a.add(new c(localF1, localF2));
    }
    
    private void h()
    {
      f localF1 = d.a(b());
      f localF2 = b();
      a.add(new c(localF1, localF2));
    }
    
    int a(int paramInt1, int paramInt2)
    {
      paramInt1 &= paramInt2;
      if (paramInt1 < paramInt2) {
        return paramInt1;
      }
      paramInt1 = 0;
      int i;
      for (;;)
      {
        i = f();
        if ((i & 0x80) == 0) {
          break;
        }
        paramInt2 += ((i & 0x7F) << paramInt1);
        paramInt1 += 7;
      }
      return paramInt2 + (i << paramInt1);
    }
    
    public List<c> a()
    {
      ArrayList localArrayList = new ArrayList(a);
      a.clear();
      return localArrayList;
    }
    
    f b()
    {
      int j = f();
      int i;
      if ((j & 0x80) == 128) {
        i = 1;
      } else {
        i = 0;
      }
      j = a(j, 127);
      if (i != 0) {
        return f.a(k.b().a(b.f(j)));
      }
      return b.b(j);
    }
    
    void c()
    {
      while (!b.i())
      {
        int i = b.readByte() & 0xFF;
        if (i != 128)
        {
          if ((i & 0x80) == 128)
          {
            e(a(i, 127) - 1);
          }
          else if (i == 64)
          {
            g();
          }
          else if ((i & 0x40) == 64)
          {
            f(a(i, 63) - 1);
          }
          else if ((i & 0x20) == 32)
          {
            d = a(i, 31);
            i = d;
            if ((i >= 0) && (i <= c))
            {
              d();
            }
            else
            {
              StringBuilder localStringBuilder = new StringBuilder();
              localStringBuilder.append("Invalid dynamic table size update ");
              localStringBuilder.append(d);
              throw new IOException(localStringBuilder.toString());
            }
          }
          else if ((i != 16) && (i != 0))
          {
            g(a(i, 15) - 1);
          }
          else
          {
            h();
          }
        }
        else {
          throw new IOException("index == 0");
        }
      }
    }
  }
  
  static final class b
  {
    private final f.c a;
    private final boolean b;
    private int c = Integer.MAX_VALUE;
    private boolean d;
    int e;
    c[] f = new c[8];
    int g = f.length - 1;
    int h = 0;
    int i = 0;
    
    b(int paramInt, boolean paramBoolean, f.c paramC)
    {
      e = paramInt;
      b = paramBoolean;
      a = paramC;
    }
    
    b(f.c paramC)
    {
      this(4096, true, paramC);
    }
    
    private void a()
    {
      int j = e;
      int k = i;
      if (j < k)
      {
        if (j == 0)
        {
          b();
          return;
        }
        b(k - j);
      }
    }
    
    private void a(c paramC)
    {
      int j = c;
      int k = e;
      if (j > k)
      {
        b();
        return;
      }
      b(i + j - k);
      k = h;
      c[] arrayOfC1 = f;
      if (k + 1 > arrayOfC1.length)
      {
        c[] arrayOfC2 = new c[arrayOfC1.length * 2];
        System.arraycopy(arrayOfC1, 0, arrayOfC2, arrayOfC1.length, arrayOfC1.length);
        g = (f.length - 1);
        f = arrayOfC2;
      }
      k = g;
      g = (k - 1);
      f[k] = paramC;
      h += 1;
      i += j;
    }
    
    private int b(int paramInt)
    {
      int j = 0;
      int m = 0;
      if (paramInt > 0)
      {
        j = f.length - 1;
        int k = paramInt;
        paramInt = m;
        while ((j >= g) && (k > 0))
        {
          arrayOfC = f;
          k -= c;
          i -= c;
          h -= 1;
          paramInt += 1;
          j -= 1;
        }
        c[] arrayOfC = f;
        j = g;
        System.arraycopy(arrayOfC, j + 1, arrayOfC, j + 1 + paramInt, h);
        arrayOfC = f;
        j = g;
        Arrays.fill(arrayOfC, j + 1, j + 1 + paramInt, null);
        g += paramInt;
        j = paramInt;
      }
      return j;
    }
    
    private void b()
    {
      Arrays.fill(f, null);
      g = (f.length - 1);
      h = 0;
      i = 0;
    }
    
    void a(int paramInt)
    {
      paramInt = Math.min(paramInt, 16384);
      int j = e;
      if (j == paramInt) {
        return;
      }
      if (paramInt < j) {
        c = Math.min(c, paramInt);
      }
      d = true;
      e = paramInt;
      a();
    }
    
    void a(int paramInt1, int paramInt2, int paramInt3)
    {
      if (paramInt1 < paramInt2)
      {
        a.writeByte(paramInt3 | paramInt1);
        return;
      }
      a.writeByte(paramInt3 | paramInt2);
      paramInt1 -= paramInt2;
      while (paramInt1 >= 128)
      {
        a.writeByte(paramInt1 & 0x7F | 0x80);
        paramInt1 >>>= 7;
      }
      a.writeByte(paramInt1);
    }
    
    void a(f paramF)
    {
      if ((b) && (k.b().a(paramF) < paramF.f()))
      {
        f.c localC = new f.c();
        k.b().a(paramF, localC);
        paramF = localC.o();
        a(paramF.f(), 127, 128);
        a.a(paramF);
        return;
      }
      a(paramF.f(), 127, 0);
      a.a(paramF);
    }
    
    void a(List<c> paramList)
    {
      int j;
      if (d)
      {
        j = c;
        if (j < e) {
          a(j, 31, 32);
        }
        d = false;
        c = Integer.MAX_VALUE;
        a(e, 31, 32);
      }
      int m = 0;
      int i3 = paramList.size();
      while (m < i3)
      {
        c localC = (c)paramList.get(m);
        f localF1 = a.g();
        f localF2 = b;
        int i1 = -1;
        int k = -1;
        Integer localInteger = (Integer)d.b.get(localF1);
        j = i1;
        int n;
        if (localInteger != null)
        {
          n = localInteger.intValue() + 1;
          j = i1;
          k = n;
          if (n > 1)
          {
            j = i1;
            k = n;
            if (n < 8) {
              if (e.f0.c.a(a1b, localF2))
              {
                j = n;
                k = n;
              }
              else
              {
                j = i1;
                k = n;
                if (e.f0.c.a(ab, localF2))
                {
                  j = n + 1;
                  k = n;
                }
              }
            }
          }
        }
        i1 = j;
        int i2 = k;
        if (j == -1)
        {
          n = g + 1;
          int i4 = f.length;
          for (;;)
          {
            i1 = j;
            i2 = k;
            if (n >= i4) {
              break;
            }
            i1 = k;
            if (e.f0.c.a(f[n].a, localF1))
            {
              if (e.f0.c.a(f[n].b, localF2))
              {
                i1 = n - g + d.a.length;
                i2 = k;
                break;
              }
              i1 = k;
              if (k == -1) {
                i1 = n - g + d.a.length;
              }
            }
            n += 1;
            k = i1;
          }
        }
        if (i1 != -1)
        {
          a(i1, 127, 128);
        }
        else if (i2 == -1)
        {
          a.writeByte(64);
          a(localF1);
          a(localF2);
          a(localC);
        }
        else if ((localF1.b(c.d)) && (!c.i.equals(localF1)))
        {
          a(i2, 15, 0);
          a(localF2);
        }
        else
        {
          a(i2, 63, 64);
          a(localF2);
          a(localC);
        }
        m += 1;
      }
    }
  }
}
