package e.f0.e;

import e.a0;
import e.a0.a;
import e.f0.a;
import e.f0.g.e;
import e.r;
import e.r.a;
import e.s;
import e.y;
import e.y.a;
import java.util.Date;
import java.util.concurrent.TimeUnit;

public final class c
{
  public final y a;
  public final a0 b;
  
  c(y paramY, a0 paramA0)
  {
    a = paramY;
    b = paramA0;
  }
  
  public static boolean a(a0 paramA0, y paramY)
  {
    int i = paramA0.o();
    boolean bool2 = false;
    if ((i != 200) && (i != 410) && (i != 414) && (i != 501) && (i != 203) && (i != 204)) {
      if (i != 307)
      {
        if ((i == 308) || (i == 404) || (i == 405)) {}
      }
      else {
        switch (i)
        {
        default: 
          return false;
        case 302: 
          if ((paramA0.b("Expires") == null) && (paramA0.m().d() == -1) && (!paramA0.m().c()) && (!paramA0.m().b())) {
            return false;
          }
          break;
        }
      }
    }
    boolean bool1 = bool2;
    if (!paramA0.m().i())
    {
      bool1 = bool2;
      if (!paramY.b().i()) {
        bool1 = true;
      }
    }
    return bool1;
  }
  
  public static class a
  {
    final long a;
    final y b;
    final a0 c;
    private Date d;
    private String e;
    private Date f;
    private String g;
    private Date h;
    private long i;
    private long j;
    private String k;
    private int l = -1;
    
    public a(long paramLong, y paramY, a0 paramA0)
    {
      a = paramLong;
      b = paramY;
      c = paramA0;
      if (paramA0 != null)
      {
        i = paramA0.z();
        j = paramA0.x();
        paramY = paramA0.q();
        int m = 0;
        int n = paramY.b();
        while (m < n)
        {
          paramA0 = paramY.a(m);
          String str = paramY.b(m);
          if ("Date".equalsIgnoreCase(paramA0))
          {
            d = e.f0.g.d.a(str);
            e = str;
          }
          else if ("Expires".equalsIgnoreCase(paramA0))
          {
            h = e.f0.g.d.a(str);
          }
          else if ("Last-Modified".equalsIgnoreCase(paramA0))
          {
            f = e.f0.g.d.a(str);
            g = str;
          }
          else if ("ETag".equalsIgnoreCase(paramA0))
          {
            k = str;
          }
          else if ("Age".equalsIgnoreCase(paramA0))
          {
            l = e.a(str, -1);
          }
          m += 1;
        }
      }
    }
    
    private static boolean a(y paramY)
    {
      return (paramY.a("If-Modified-Since") != null) || (paramY.a("If-None-Match") != null);
    }
    
    private long b()
    {
      Date localDate = d;
      long l1 = 0L;
      if (localDate != null) {
        l1 = Math.max(0L, j - localDate.getTime());
      }
      int m = l;
      if (m != -1) {
        l1 = Math.max(l1, TimeUnit.SECONDS.toMillis(m));
      }
      long l2 = j;
      return l1 + (l2 - i) + (a - l2);
    }
    
    private long c()
    {
      Object localObject = c.m();
      if (((e.d)localObject).d() != -1) {
        return TimeUnit.SECONDS.toMillis(((e.d)localObject).d());
      }
      localObject = h;
      long l1 = 0L;
      long l2;
      if (localObject != null)
      {
        localObject = d;
        if (localObject != null) {
          l2 = ((Date)localObject).getTime();
        } else {
          l2 = j;
        }
        l2 = h.getTime() - l2;
        if (l2 > 0L) {
          l1 = l2;
        }
        return l1;
      }
      if ((f != null) && (c.y().g().k() == null))
      {
        localObject = d;
        if (localObject != null) {
          l2 = ((Date)localObject).getTime();
        } else {
          l2 = i;
        }
        l2 -= f.getTime();
        if (l2 > 0L) {
          l1 = l2 / 10L;
        }
        return l1;
      }
      return 0L;
    }
    
    private c d()
    {
      if (c == null) {
        return new c(b, null);
      }
      if ((b.d()) && (c.p() == null)) {
        return new c(b, null);
      }
      if (!c.a(c, b)) {
        return new c(b, null);
      }
      Object localObject1 = b.b();
      if ((!((e.d)localObject1).h()) && (!a(b)))
      {
        Object localObject2 = c.m();
        if (((e.d)localObject2).a()) {
          return new c(null, c);
        }
        long l5 = b();
        long l2 = c();
        long l1 = l2;
        if (((e.d)localObject1).d() != -1) {
          l1 = Math.min(l2, TimeUnit.SECONDS.toMillis(((e.d)localObject1).d()));
        }
        l2 = 0L;
        if (((e.d)localObject1).f() != -1) {
          l2 = TimeUnit.SECONDS.toMillis(((e.d)localObject1).f());
        }
        long l4 = 0L;
        long l3 = l4;
        if (!((e.d)localObject2).g())
        {
          l3 = l4;
          if (((e.d)localObject1).e() != -1) {
            l3 = TimeUnit.SECONDS.toMillis(((e.d)localObject1).e());
          }
        }
        if ((!((e.d)localObject2).h()) && (l5 + l2 < l1 + l3))
        {
          localObject1 = c.u();
          if (l5 + l2 >= l1) {
            ((a0.a)localObject1).a("Warning", "110 HttpURLConnection \"Response is stale\"");
          }
          if ((l5 > 86400000L) && (e())) {
            ((a0.a)localObject1).a("Warning", "113 HttpURLConnection \"Heuristic expiration\"");
          }
          return new c(null, ((a0.a)localObject1).a());
        }
        if (k != null)
        {
          localObject1 = "If-None-Match";
          localObject2 = k;
        }
        else if (f != null)
        {
          localObject1 = "If-Modified-Since";
          localObject2 = g;
        }
        else
        {
          if (d == null) {
            break label451;
          }
          localObject1 = "If-Modified-Since";
          localObject2 = e;
        }
        r.a localA = b.c().a();
        a.a.a(localA, (String)localObject1, (String)localObject2);
        localObject1 = b.f();
        ((y.a)localObject1).a(localA.a());
        return new c(((y.a)localObject1).a(), c);
        label451:
        return new c(b, null);
      }
      return new c(b, null);
    }
    
    private boolean e()
    {
      return (c.m().d() == -1) && (h == null);
    }
    
    public c a()
    {
      c localC = d();
      if ((a != null) && (b.b().j())) {
        return new c(null, null);
      }
      return localC;
    }
  }
}
