package e.f0.k;

import android.os.Build.VERSION;
import android.util.Log;
import e.w;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.security.Security;
import java.security.cert.Certificate;
import java.security.cert.TrustAnchor;
import java.security.cert.X509Certificate;
import java.util.List;
import javax.net.ssl.SSLPeerUnverifiedException;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.X509TrustManager;

class a
  extends f
{
  private final e<Socket> c;
  private final e<Socket> d;
  private final e<Socket> e;
  private final e<Socket> f;
  private final c g = c.a();
  
  a(Class<?> paramClass, e<Socket> paramE1, e<Socket> paramE2, e<Socket> paramE3, e<Socket> paramE4)
  {
    c = paramE1;
    d = paramE2;
    e = paramE3;
    f = paramE4;
  }
  
  private boolean a(String paramString, Class<?> paramClass, Object paramObject)
  {
    try
    {
      boolean bool = ((Boolean)paramClass.getMethod("isCleartextTrafficPermitted", new Class[0]).invoke(paramObject, new Object[0])).booleanValue();
      return bool;
    }
    catch (NoSuchMethodException paramClass) {}
    return super.b(paramString);
  }
  
  private boolean b(String paramString, Class<?> paramClass, Object paramObject)
  {
    try
    {
      boolean bool = ((Boolean)paramClass.getMethod("isCleartextTrafficPermitted", new Class[] { String.class }).invoke(paramObject, new Object[] { paramString })).booleanValue();
      return bool;
    }
    catch (NoSuchMethodException localNoSuchMethodException) {}
    return a(paramString, paramClass, paramObject);
  }
  
  public static f c()
  {
    try
    {
      Class localClass = Class.forName("com.android.org.conscrypt.SSLParametersImpl");
    }
    catch (ClassNotFoundException localClassNotFoundException1) {}
    for (;;)
    {
      try
      {
        Object localObject = Class.forName("org.apache.harmony.xnet.provider.jsse.SSLParametersImpl");
        e localE3 = new e(null, "setUseSessionTickets", new Class[] { Boolean.TYPE });
        e localE4 = new e(null, "setHostname", new Class[] { String.class });
        if (f())
        {
          localE1 = new e([B.class, "getAlpnSelectedProtocol", new Class[0]);
          localE2 = new e(null, "setAlpnProtocols", new Class[] { [B.class });
          localObject = new a((Class)localObject, localE3, localE4, localE1, localE2);
          return localObject;
        }
      }
      catch (ClassNotFoundException localClassNotFoundException2)
      {
        return null;
      }
      e localE1 = null;
      e localE2 = null;
    }
  }
  
  private static boolean f()
  {
    if (Security.getProvider("GMSCore_OpenSSL") != null) {
      return true;
    }
    try
    {
      Class.forName("android.net.Network");
      return true;
    }
    catch (ClassNotFoundException localClassNotFoundException) {}
    return false;
  }
  
  public e.f0.l.c a(X509TrustManager paramX509TrustManager)
  {
    try
    {
      Object localObject = Class.forName("android.net.http.X509TrustManagerExtensions");
      localObject = new a(((Class)localObject).getConstructor(new Class[] { X509TrustManager.class }).newInstance(new Object[] { paramX509TrustManager }), ((Class)localObject).getMethod("checkServerTrusted", new Class[] { [Ljava.security.cert.X509Certificate.class, String.class, String.class }));
      return localObject;
    }
    catch (Exception localException) {}
    return super.a(paramX509TrustManager);
  }
  
  public Object a(String paramString)
  {
    return g.a(paramString);
  }
  
  public void a(int paramInt, String paramString, Throwable paramThrowable)
  {
    int i = 5;
    if (paramInt != 5) {
      i = 3;
    }
    Object localObject = paramString;
    if (paramThrowable != null)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(paramString);
      ((StringBuilder)localObject).append('\n');
      ((StringBuilder)localObject).append(Log.getStackTraceString(paramThrowable));
      localObject = ((StringBuilder)localObject).toString();
    }
    paramInt = 0;
    int m = ((String)localObject).length();
    while (paramInt < m)
    {
      int j = ((String)localObject).indexOf('\n', paramInt);
      if (j == -1) {
        j = m;
      }
      int k;
      do
      {
        k = Math.min(j, paramInt + 4000);
        Log.println(i, "OkHttp", ((String)localObject).substring(paramInt, k));
        paramInt = k;
      } while (k < j);
      paramInt = k + 1;
    }
  }
  
  public void a(String paramString, Object paramObject)
  {
    if (!g.a(paramObject)) {
      a(5, paramString, null);
    }
  }
  
  public void a(Socket paramSocket, InetSocketAddress paramInetSocketAddress, int paramInt)
  {
    try
    {
      paramSocket.connect(paramInetSocketAddress, paramInt);
      return;
    }
    catch (ClassCastException paramSocket)
    {
      if (Build.VERSION.SDK_INT == 26)
      {
        paramInetSocketAddress = new IOException("Exception in connect");
        paramInetSocketAddress.initCause(paramSocket);
        throw paramInetSocketAddress;
      }
      throw paramSocket;
    }
    catch (SecurityException paramSocket)
    {
      paramInetSocketAddress = new IOException("Exception in connect");
      paramInetSocketAddress.initCause(paramSocket);
      throw paramInetSocketAddress;
    }
    catch (AssertionError paramSocket)
    {
      if (e.f0.c.a(paramSocket)) {
        throw new IOException(paramSocket);
      }
      throw paramSocket;
    }
  }
  
  public void a(SSLSocket paramSSLSocket, String paramString, List<w> paramList)
  {
    if (paramString != null)
    {
      c.c(paramSSLSocket, new Object[] { Boolean.valueOf(true) });
      d.c(paramSSLSocket, new Object[] { paramString });
    }
    paramString = f;
    if ((paramString != null) && (paramString.a(paramSSLSocket)))
    {
      paramString = f.b(paramList);
      f.d(paramSSLSocket, new Object[] { paramString });
    }
  }
  
  public e.f0.l.e b(X509TrustManager paramX509TrustManager)
  {
    try
    {
      Object localObject = paramX509TrustManager.getClass().getDeclaredMethod("findTrustAnchorByIssuerAndSignature", new Class[] { X509Certificate.class });
      ((Method)localObject).setAccessible(true);
      localObject = new b(paramX509TrustManager, (Method)localObject);
      return localObject;
    }
    catch (NoSuchMethodException localNoSuchMethodException) {}
    return super.b(paramX509TrustManager);
  }
  
  public String b(SSLSocket paramSSLSocket)
  {
    Object localObject2 = e;
    Object localObject1 = null;
    if (localObject2 == null) {
      return null;
    }
    if (!((e)localObject2).a(paramSSLSocket)) {
      return null;
    }
    localObject2 = (byte[])e.d(paramSSLSocket, new Object[0]);
    paramSSLSocket = localObject1;
    if (localObject2 != null) {
      paramSSLSocket = new String((byte[])localObject2, e.f0.c.d);
    }
    return paramSSLSocket;
  }
  
  public boolean b(String paramString)
  {
    try
    {
      try
      {
        Class localClass = Class.forName("android.security.NetworkSecurityPolicy");
        boolean bool = b(paramString, localClass, localClass.getMethod("getInstance", new Class[0]).invoke(null, new Object[0]));
        return bool;
      }
      catch (InvocationTargetException paramString) {}catch (IllegalArgumentException paramString) {}catch (IllegalAccessException paramString) {}
      throw e.f0.c.a("unable to determine cleartext support", paramString);
    }
    catch (NoSuchMethodException localNoSuchMethodException) {}catch (ClassNotFoundException localClassNotFoundException) {}
    return super.b(paramString);
  }
  
  static final class a
    extends e.f0.l.c
  {
    private final Object a;
    private final Method b;
    
    a(Object paramObject, Method paramMethod)
    {
      a = paramObject;
      b = paramMethod;
    }
    
    public List<Certificate> a(List<Certificate> paramList, String paramString)
    {
      try
      {
        paramList = (X509Certificate[])paramList.toArray(new X509Certificate[paramList.size()]);
        paramList = (List)b.invoke(a, new Object[] { paramList, "RSA", paramString });
        return paramList;
      }
      catch (IllegalAccessException paramList)
      {
        throw new AssertionError(paramList);
      }
      catch (InvocationTargetException paramList)
      {
        paramString = new SSLPeerUnverifiedException(paramList.getMessage());
        paramString.initCause(paramList);
        throw paramString;
      }
    }
    
    public boolean equals(Object paramObject)
    {
      return paramObject instanceof a;
    }
    
    public int hashCode()
    {
      return 0;
    }
  }
  
  static final class b
    implements e.f0.l.e
  {
    private final X509TrustManager a;
    private final Method b;
    
    b(X509TrustManager paramX509TrustManager, Method paramMethod)
    {
      b = paramMethod;
      a = paramX509TrustManager;
    }
    
    public X509Certificate a(X509Certificate paramX509Certificate)
    {
      try
      {
        paramX509Certificate = (TrustAnchor)b.invoke(a, new Object[] { paramX509Certificate });
        if (paramX509Certificate != null)
        {
          paramX509Certificate = paramX509Certificate.getTrustedCert();
          return paramX509Certificate;
        }
        return null;
      }
      catch (InvocationTargetException paramX509Certificate)
      {
        return null;
      }
      catch (IllegalAccessException paramX509Certificate)
      {
        throw e.f0.c.a("unable to get issues and signature", paramX509Certificate);
      }
    }
    
    public boolean equals(Object paramObject)
    {
      if (paramObject == this) {
        return true;
      }
      if (!(paramObject instanceof b)) {
        return false;
      }
      paramObject = (b)paramObject;
      return (a.equals(a)) && (b.equals(b));
    }
    
    public int hashCode()
    {
      return a.hashCode() + b.hashCode() * 31;
    }
  }
  
  static final class c
  {
    private final Method a;
    private final Method b;
    private final Method c;
    
    c(Method paramMethod1, Method paramMethod2, Method paramMethod3)
    {
      a = paramMethod1;
      b = paramMethod2;
      c = paramMethod3;
    }
    
    static c a()
    {
      Method localMethod2;
      Method localMethod3;
      Method localMethod1;
      try
      {
        Object localObject = Class.forName("dalvik.system.CloseGuard");
        localMethod2 = ((Class)localObject).getMethod("get", new Class[0]);
        localMethod3 = ((Class)localObject).getMethod("open", new Class[] { String.class });
        localObject = ((Class)localObject).getMethod("warnIfOpen", new Class[0]);
      }
      catch (Exception localException)
      {
        localMethod2 = null;
        localMethod3 = null;
        localMethod1 = null;
      }
      return new c(localMethod2, localMethod3, localMethod1);
    }
    
    Object a(String paramString)
    {
      Object localObject = a;
      if (localObject != null) {
        try
        {
          localObject = ((Method)localObject).invoke(null, new Object[0]);
          b.invoke(localObject, new Object[] { paramString });
          return localObject;
        }
        catch (Exception paramString) {}
      }
      return null;
    }
    
    boolean a(Object paramObject)
    {
      if (paramObject != null) {
        try
        {
          c.invoke(paramObject, new Object[0]);
          return true;
        }
        catch (Exception paramObject) {}
      }
      return false;
    }
  }
}
