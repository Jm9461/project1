package e.f0.k;

import e.f0.l.e;
import e.v;
import e.w;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.security.NoSuchAlgorithmException;
import java.security.Provider;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.X509TrustManager;

public class f
{
  private static final f a = ;
  private static final Logger b = Logger.getLogger(v.class.getName());
  
  public f() {}
  
  public static List<String> a(List<w> paramList)
  {
    ArrayList localArrayList = new ArrayList(paramList.size());
    int i = 0;
    int j = paramList.size();
    while (i < j)
    {
      w localW = (w)paramList.get(i);
      if (localW != w.d) {
        localArrayList.add(localW.toString());
      }
      i += 1;
    }
    return localArrayList;
  }
  
  static byte[] b(List<w> paramList)
  {
    f.c localC = new f.c();
    int i = 0;
    int j = paramList.size();
    while (i < j)
    {
      w localW = (w)paramList.get(i);
      if (localW != w.d)
      {
        localC.writeByte(localW.toString().length());
        localC.a(localW.toString());
      }
      i += 1;
    }
    return localC.g();
  }
  
  private static f c()
  {
    Object localObject = a.c();
    if (localObject != null) {
      return localObject;
    }
    if (e())
    {
      localObject = b.c();
      if (localObject != null) {
        return localObject;
      }
    }
    localObject = c.c();
    if (localObject != null) {
      return localObject;
    }
    localObject = d.c();
    if (localObject != null) {
      return localObject;
    }
    return new f();
  }
  
  public static f d()
  {
    return a;
  }
  
  public static boolean e()
  {
    if ("conscrypt".equals(System.getProperty("okhttp.platform"))) {
      return true;
    }
    return "Conscrypt".equals(java.security.Security.getProviders()[0].getName());
  }
  
  public e.f0.l.c a(X509TrustManager paramX509TrustManager)
  {
    return new e.f0.l.a(b(paramX509TrustManager));
  }
  
  public Object a(String paramString)
  {
    if (b.isLoggable(Level.FINE)) {
      return new Throwable(paramString);
    }
    return null;
  }
  
  public String a()
  {
    return "OkHttp";
  }
  
  public void a(int paramInt, String paramString, Throwable paramThrowable)
  {
    Level localLevel;
    if (paramInt == 5) {
      localLevel = Level.WARNING;
    } else {
      localLevel = Level.INFO;
    }
    b.log(localLevel, paramString, paramThrowable);
  }
  
  public void a(String paramString, Object paramObject)
  {
    Object localObject = paramString;
    if (paramObject == null)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(paramString);
      ((StringBuilder)localObject).append(" To see where this was allocated, set the OkHttpClient logger level to FINE: Logger.getLogger(OkHttpClient.class.getName()).setLevel(Level.FINE);");
      localObject = ((StringBuilder)localObject).toString();
    }
    a(5, (String)localObject, (Throwable)paramObject);
  }
  
  public void a(Socket paramSocket, InetSocketAddress paramInetSocketAddress, int paramInt)
  {
    paramSocket.connect(paramInetSocketAddress, paramInt);
  }
  
  public void a(SSLSocket paramSSLSocket) {}
  
  public void a(SSLSocket paramSSLSocket, String paramString, List<w> paramList) {}
  
  public e b(X509TrustManager paramX509TrustManager)
  {
    return new e.f0.l.b(paramX509TrustManager.getAcceptedIssuers());
  }
  
  public String b(SSLSocket paramSSLSocket)
  {
    return null;
  }
  
  public SSLContext b()
  {
    try
    {
      SSLContext localSSLContext = SSLContext.getInstance("TLS");
      return localSSLContext;
    }
    catch (NoSuchAlgorithmException localNoSuchAlgorithmException)
    {
      throw new IllegalStateException("No TLS provider", localNoSuchAlgorithmException);
    }
  }
  
  public boolean b(String paramString)
  {
    return true;
  }
}
