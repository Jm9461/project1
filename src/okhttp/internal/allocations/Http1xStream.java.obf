package e.f0.h;

import e.a0;
import e.a0.a;
import e.b0;
import e.c0;
import e.f0.f.g;
import e.f0.g.h;
import e.f0.g.k;
import e.p;
import e.r.a;
import e.v;
import e.y;
import f.d;
import f.l;
import f.t;
import java.io.EOFException;
import java.io.IOException;
import java.net.ProtocolException;
import java.net.Proxy;
import java.util.concurrent.TimeUnit;

public final class a
  implements e.f0.g.c
{
  final v a;
  final g b;
  final f.e c;
  final d d;
  int e = 0;
  private long f = 262144L;
  
  public a(v paramV, g paramG, f.e paramE, d paramD)
  {
    a = paramV;
    b = paramG;
    c = paramE;
    d = paramD;
  }
  
  private String f()
  {
    String str = c.c(f);
    f -= str.length();
    return str;
  }
  
  public a0.a a(boolean paramBoolean)
  {
    int i = e;
    Object localObject1;
    if ((i != 1) && (i != 3))
    {
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("state: ");
      ((StringBuilder)localObject1).append(e);
      throw new IllegalStateException(((StringBuilder)localObject1).toString());
    }
    try
    {
      localObject1 = k.a(f());
      localObject2 = new a0.a();
      ((a0.a)localObject2).a(a);
      ((a0.a)localObject2).a(b);
      ((a0.a)localObject2).a(c);
      ((a0.a)localObject2).a(e());
      if ((paramBoolean) && (b == 100)) {
        return null;
      }
      if (b == 100)
      {
        e = 3;
        return localObject2;
      }
      e = 4;
      return localObject2;
    }
    catch (EOFException localEOFException)
    {
      Object localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("unexpected end of stream on ");
      ((StringBuilder)localObject2).append(b);
      localObject2 = new IOException(((StringBuilder)localObject2).toString());
      ((IOException)localObject2).initCause(localEOFException);
      throw ((Throwable)localObject2);
    }
  }
  
  public b0 a(a0 paramA0)
  {
    Object localObject = b;
    f.e(e);
    localObject = paramA0.b("Content-Type");
    if (!e.f0.g.e.b(paramA0)) {
      return new h((String)localObject, 0L, l.a(b(0L)));
    }
    if ("chunked".equalsIgnoreCase(paramA0.b("Transfer-Encoding"))) {
      return new h((String)localObject, -1L, l.a(a(paramA0.y().g())));
    }
    long l = e.f0.g.e.a(paramA0);
    if (l != -1L) {
      return new h((String)localObject, l, l.a(b(l)));
    }
    return new h((String)localObject, -1L, l.a(d()));
  }
  
  public f.r a(long paramLong)
  {
    if (e == 1)
    {
      e = 2;
      return new e(paramLong);
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("state: ");
    localStringBuilder.append(e);
    throw new IllegalStateException(localStringBuilder.toString());
  }
  
  public f.r a(y paramY, long paramLong)
  {
    if ("chunked".equalsIgnoreCase(paramY.a("Transfer-Encoding"))) {
      return c();
    }
    if (paramLong != -1L) {
      return a(paramLong);
    }
    throw new IllegalStateException("Cannot stream a request body without chunked encoding or a known content length!");
  }
  
  public f.s a(e.s paramS)
  {
    if (e == 4)
    {
      e = 5;
      return new d(paramS);
    }
    paramS = new StringBuilder();
    paramS.append("state: ");
    paramS.append(e);
    throw new IllegalStateException(paramS.toString());
  }
  
  public void a()
  {
    d.flush();
  }
  
  public void a(e.r paramR, String paramString)
  {
    if (e == 0)
    {
      d.a(paramString).a("\r\n");
      int i = 0;
      int j = paramR.b();
      while (i < j)
      {
        d.a(paramR.a(i)).a(": ").a(paramR.b(i)).a("\r\n");
        i += 1;
      }
      d.a("\r\n");
      e = 1;
      return;
    }
    paramR = new StringBuilder();
    paramR.append("state: ");
    paramR.append(e);
    paramR = new IllegalStateException(paramR.toString());
    for (;;)
    {
      throw paramR;
    }
  }
  
  public void a(y paramY)
  {
    String str = e.f0.g.i.a(paramY, b.b().c().b().type());
    a(paramY.c(), str);
  }
  
  void a(f.i paramI)
  {
    t localT = paramI.g();
    paramI.a(t.d);
    localT.a();
    localT.b();
  }
  
  public f.s b(long paramLong)
  {
    if (e == 4)
    {
      e = 5;
      return new f(paramLong);
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("state: ");
    localStringBuilder.append(e);
    throw new IllegalStateException(localStringBuilder.toString());
  }
  
  public void b()
  {
    d.flush();
  }
  
  public f.r c()
  {
    if (e == 1)
    {
      e = 2;
      return new c();
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("state: ");
    localStringBuilder.append(e);
    throw new IllegalStateException(localStringBuilder.toString());
  }
  
  public f.s d()
  {
    if (e == 4)
    {
      localObject = b;
      if (localObject != null)
      {
        e = 5;
        ((g)localObject).d();
        return new g();
      }
      throw new IllegalStateException("streamAllocation == null");
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("state: ");
    ((StringBuilder)localObject).append(e);
    throw new IllegalStateException(((StringBuilder)localObject).toString());
  }
  
  public e.r e()
  {
    r.a localA = new r.a();
    for (;;)
    {
      String str = f();
      if (str.length() == 0) {
        break;
      }
      e.f0.a.a.a(localA, str);
    }
    return localA.a();
  }
  
  private abstract class b
    implements f.s
  {
    protected final f.i c = new f.i(c.b());
    protected boolean d;
    protected long e = 0L;
    
    private b() {}
    
    protected final void a(boolean paramBoolean, IOException paramIOException)
    {
      a localA = a.this;
      int i = e;
      if (i == 6) {
        return;
      }
      if (i == 5)
      {
        localA.a(c);
        localA = a.this;
        e = 6;
        g localG = b;
        if (localG != null) {
          localG.a(paramBoolean ^ true, localA, e, paramIOException);
        }
        return;
      }
      paramIOException = new StringBuilder();
      paramIOException.append("state: ");
      paramIOException.append(e);
      throw new IllegalStateException(paramIOException.toString());
    }
    
    public long b(f.c paramC, long paramLong)
    {
      try
      {
        paramLong = c.b(paramC, paramLong);
        if (paramLong > 0L) {
          e += paramLong;
        }
        return paramLong;
      }
      catch (IOException paramC)
      {
        a(false, paramC);
        throw paramC;
      }
    }
    
    public t b()
    {
      return c;
    }
  }
  
  private final class c
    implements f.r
  {
    private final f.i c = new f.i(d.b());
    private boolean d;
    
    c() {}
    
    public void a(f.c paramC, long paramLong)
    {
      if (!d)
      {
        if (paramLong == 0L) {
          return;
        }
        d.a(paramLong);
        d.a("\r\n");
        d.a(paramC, paramLong);
        d.a("\r\n");
        return;
      }
      throw new IllegalStateException("closed");
    }
    
    public t b()
    {
      return c;
    }
    
    public void close()
    {
      try
      {
        boolean bool = d;
        if (bool) {
          return;
        }
        d = true;
        d.a("0\r\n\r\n");
        a(c);
        e = 3;
        return;
      }
      finally {}
    }
    
    public void flush()
    {
      try
      {
        boolean bool = d;
        if (bool) {
          return;
        }
        d.flush();
        return;
      }
      finally {}
    }
  }
  
  private class d
    extends a.b
  {
    private final e.s g;
    private long h = -1L;
    private boolean i = true;
    
    d(e.s paramS)
    {
      super(null);
      g = paramS;
    }
    
    private void d()
    {
      if (h != -1L) {
        c.f();
      }
      try
      {
        h = c.j();
        String str = c.f().trim();
        if (h >= 0L) {
          if (!str.isEmpty())
          {
            boolean bool = str.startsWith(";");
            if (!bool) {}
          }
          else
          {
            if (h == 0L)
            {
              i = false;
              e.f0.g.e.a(a.g(), g, e());
              a(true, null);
            }
            return;
          }
        }
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("expected chunk size and optional extensions but was \"");
        localStringBuilder.append(h);
        localStringBuilder.append(str);
        localStringBuilder.append("\"");
        throw new ProtocolException(localStringBuilder.toString());
      }
      catch (NumberFormatException localNumberFormatException)
      {
        throw new ProtocolException(localNumberFormatException.getMessage());
      }
    }
    
    public long b(f.c paramC, long paramLong)
    {
      if (paramLong >= 0L)
      {
        if (!d)
        {
          if (!i) {
            return -1L;
          }
          long l = h;
          if ((l == 0L) || (l == -1L))
          {
            d();
            if (!i) {
              return -1L;
            }
          }
          paramLong = super.b(paramC, Math.min(paramLong, h));
          if (paramLong != -1L)
          {
            h -= paramLong;
            return paramLong;
          }
          paramC = new ProtocolException("unexpected end of stream");
          a(false, paramC);
          throw paramC;
        }
        throw new IllegalStateException("closed");
      }
      paramC = new StringBuilder();
      paramC.append("byteCount < 0: ");
      paramC.append(paramLong);
      throw new IllegalArgumentException(paramC.toString());
    }
    
    public void close()
    {
      if (d) {
        return;
      }
      if ((i) && (!e.f0.c.a(this, 100, TimeUnit.MILLISECONDS))) {
        a(false, null);
      }
      d = true;
    }
  }
  
  private final class e
    implements f.r
  {
    private final f.i c = new f.i(d.b());
    private boolean d;
    private long e;
    
    e(long paramLong)
    {
      e = paramLong;
    }
    
    public void a(f.c paramC, long paramLong)
    {
      if (!d)
      {
        e.f0.c.a(paramC.q(), 0L, paramLong);
        if (paramLong <= e)
        {
          d.a(paramC, paramLong);
          e -= paramLong;
          return;
        }
        paramC = new StringBuilder();
        paramC.append("expected ");
        paramC.append(e);
        paramC.append(" bytes but received ");
        paramC.append(paramLong);
        throw new ProtocolException(paramC.toString());
      }
      throw new IllegalStateException("closed");
    }
    
    public t b()
    {
      return c;
    }
    
    public void close()
    {
      if (d) {
        return;
      }
      d = true;
      if (e <= 0L)
      {
        a(c);
        e = 3;
        return;
      }
      throw new ProtocolException("unexpected end of stream");
    }
    
    public void flush()
    {
      if (d) {
        return;
      }
      d.flush();
    }
  }
  
  private class f
    extends a.b
  {
    private long g;
    
    f(long paramLong)
    {
      super(null);
      g = paramLong;
      if (g == 0L) {
        a(true, null);
      }
    }
    
    public long b(f.c paramC, long paramLong)
    {
      if (paramLong >= 0L)
      {
        if (!d)
        {
          long l = g;
          if (l == 0L) {
            return -1L;
          }
          paramLong = super.b(paramC, Math.min(l, paramLong));
          if (paramLong != -1L)
          {
            g -= paramLong;
            if (g == 0L) {
              a(true, null);
            }
            return paramLong;
          }
          paramC = new ProtocolException("unexpected end of stream");
          a(false, paramC);
          throw paramC;
        }
        throw new IllegalStateException("closed");
      }
      paramC = new StringBuilder();
      paramC.append("byteCount < 0: ");
      paramC.append(paramLong);
      throw new IllegalArgumentException(paramC.toString());
    }
    
    public void close()
    {
      if (d) {
        return;
      }
      if ((g != 0L) && (!e.f0.c.a(this, 100, TimeUnit.MILLISECONDS))) {
        a(false, null);
      }
      d = true;
    }
  }
  
  private class g
    extends a.b
  {
    private boolean g;
    
    g()
    {
      super(null);
    }
    
    public long b(f.c paramC, long paramLong)
    {
      if (paramLong >= 0L)
      {
        if (!d)
        {
          if (g) {
            return -1L;
          }
          paramLong = super.b(paramC, paramLong);
          if (paramLong == -1L)
          {
            g = true;
            a(true, null);
            return -1L;
          }
          return paramLong;
        }
        throw new IllegalStateException("closed");
      }
      paramC = new StringBuilder();
      paramC.append("byteCount < 0: ");
      paramC.append(paramLong);
      throw new IllegalArgumentException(paramC.toString());
    }
    
    public void close()
    {
      if (d) {
        return;
      }
      if (!g) {
        a(false, null);
      }
      d = true;
    }
  }
}
