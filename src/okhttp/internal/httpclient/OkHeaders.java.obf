package e.f0.g;

import e.a0;
import e.f0.c;
import e.l;
import e.m;
import e.r;
import e.r.a;
import e.s;
import e.y;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.regex.Pattern;

public final class e
{
  static
  {
    Pattern.compile(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)");
  }
  
  public static int a(String paramString, int paramInt)
  {
    try
    {
      long l = Long.parseLong(paramString);
      if (l > 2147483647L) {
        return Integer.MAX_VALUE;
      }
      if (l < 0L) {
        return 0;
      }
      return (int)l;
    }
    catch (NumberFormatException paramString) {}
    return paramInt;
  }
  
  public static int a(String paramString1, int paramInt, String paramString2)
  {
    while (paramInt < paramString1.length())
    {
      if (paramString2.indexOf(paramString1.charAt(paramInt)) != -1) {
        return paramInt;
      }
      paramInt += 1;
    }
    return paramInt;
  }
  
  public static long a(a0 paramA0)
  {
    return a(paramA0.q());
  }
  
  public static long a(r paramR)
  {
    return a(paramR.a("Content-Length"));
  }
  
  private static long a(String paramString)
  {
    if (paramString == null) {
      return -1L;
    }
    try
    {
      long l = Long.parseLong(paramString);
      return l;
    }
    catch (NumberFormatException paramString) {}
    return -1L;
  }
  
  public static r a(r paramR1, r paramR2)
  {
    paramR2 = c(paramR2);
    if (paramR2.isEmpty()) {
      return new r.a().a();
    }
    r.a localA = new r.a();
    int i = 0;
    int j = paramR1.b();
    while (i < j)
    {
      String str = paramR1.a(i);
      if (paramR2.contains(str)) {
        localA.a(str, paramR1.b(i));
      }
      i += 1;
    }
    return localA.a();
  }
  
  public static void a(m paramM, s paramS, r paramR)
  {
    if (paramM == m.a) {
      return;
    }
    paramR = l.a(paramS, paramR);
    if (paramR.isEmpty()) {
      return;
    }
    paramM.a(paramS, paramR);
  }
  
  public static boolean a(a0 paramA0, r paramR, y paramY)
  {
    paramA0 = d(paramA0).iterator();
    while (paramA0.hasNext())
    {
      String str = (String)paramA0.next();
      if (!c.a(paramR.b(str), paramY.b(str))) {
        return false;
      }
    }
    return true;
  }
  
  public static int b(String paramString, int paramInt)
  {
    while (paramInt < paramString.length())
    {
      int i = paramString.charAt(paramInt);
      if ((i != 32) && (i != 9)) {
        return paramInt;
      }
      paramInt += 1;
    }
    return paramInt;
  }
  
  public static boolean b(a0 paramA0)
  {
    if (paramA0.y().e().equals("HEAD")) {
      return false;
    }
    int i = paramA0.o();
    if (((i < 100) || (i >= 200)) && (i != 204) && (i != 304)) {
      return true;
    }
    if (a(paramA0) == -1L) {
      return "chunked".equalsIgnoreCase(paramA0.b("Transfer-Encoding"));
    }
    return true;
  }
  
  public static boolean b(r paramR)
  {
    return c(paramR).contains("*");
  }
  
  public static Set<String> c(r paramR)
  {
    Object localObject2 = Collections.emptySet();
    int i = 0;
    int k = paramR.b();
    while (i < k)
    {
      if ("Vary".equalsIgnoreCase(paramR.a(i)))
      {
        Object localObject3 = paramR.b(i);
        Object localObject1 = localObject2;
        if (((Set)localObject2).isEmpty()) {
          localObject1 = new TreeSet(String.CASE_INSENSITIVE_ORDER);
        }
        localObject3 = ((String)localObject3).split(",");
        int m = localObject3.length;
        int j = 0;
        for (;;)
        {
          localObject2 = localObject1;
          if (j >= m) {
            break;
          }
          ((Set)localObject1).add(localObject3[j].trim());
          j += 1;
        }
      }
      i += 1;
    }
    return localObject2;
  }
  
  public static boolean c(a0 paramA0)
  {
    return b(paramA0.q());
  }
  
  private static Set<String> d(a0 paramA0)
  {
    return c(paramA0.q());
  }
  
  public static r e(a0 paramA0)
  {
    return a(paramA0.t().y().c(), paramA0.q());
  }
}
