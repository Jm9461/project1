package e;

import e.f0.c;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public final class n
{
  private int a = 64;
  private int b = 5;
  private Runnable c;
  private ExecutorService d;
  private final Deque<x.a> e = new ArrayDeque();
  private final Deque<x.a> f = new ArrayDeque();
  private final Deque<x> g = new ArrayDeque();
  
  public n() {}
  
  private <T> void a(Deque<T> paramDeque, T paramT, boolean paramBoolean)
  {
    try
    {
      if (paramDeque.remove(paramT))
      {
        if (paramBoolean) {
          c();
        }
        int i = b();
        paramDeque = c;
        if ((i == 0) && (paramDeque != null)) {
          paramDeque.run();
        }
        return;
      }
      throw new AssertionError("Call wasn't in-flight!");
    }
    finally {}
  }
  
  private int b(x.a paramA)
  {
    int i = 0;
    Iterator localIterator = f.iterator();
    while (localIterator.hasNext())
    {
      x.a localA = (x.a)localIterator.next();
      if (!cg)
      {
        int j = i;
        if (localA.d().equals(paramA.d())) {
          j = i + 1;
        }
        i = j;
      }
    }
    return i;
  }
  
  private void c()
  {
    if (f.size() >= a) {
      return;
    }
    if (e.isEmpty()) {
      return;
    }
    Iterator localIterator = e.iterator();
    while (localIterator.hasNext())
    {
      x.a localA = (x.a)localIterator.next();
      if (b(localA) < b)
      {
        localIterator.remove();
        f.add(localA);
        a().execute(localA);
      }
      if (f.size() >= a) {
        return;
      }
    }
  }
  
  public ExecutorService a()
  {
    try
    {
      if (d == null) {
        d = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue(), c.a("OkHttp Dispatcher", false));
      }
      ExecutorService localExecutorService = d;
      return localExecutorService;
    }
    finally {}
  }
  
  void a(x.a paramA)
  {
    a(f, paramA, true);
  }
  
  void a(x paramX)
  {
    try
    {
      g.add(paramX);
      return;
    }
    finally
    {
      paramX = finally;
      throw paramX;
    }
  }
  
  public int b()
  {
    try
    {
      int i = f.size();
      int j = g.size();
      return i + j;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  void b(x paramX)
  {
    a(g, paramX, false);
  }
}
