package e;

import e.f0.c;
import java.security.cert.Certificate;
import java.util.Collections;
import java.util.List;
import javax.net.ssl.SSLPeerUnverifiedException;
import javax.net.ssl.SSLSession;

public final class q
{
  private final d0 a;
  private final h b;
  private final List<Certificate> c;
  private final List<Certificate> d;
  
  private q(d0 paramD0, h paramH, List<Certificate> paramList1, List<Certificate> paramList2)
  {
    a = paramD0;
    b = paramH;
    c = paramList1;
    d = paramList2;
  }
  
  public static q a(d0 paramD0, h paramH, List<Certificate> paramList1, List<Certificate> paramList2)
  {
    if (paramD0 != null)
    {
      if (paramH != null) {
        return new q(paramD0, paramH, c.a(paramList1), c.a(paramList2));
      }
      throw new NullPointerException("cipherSuite == null");
    }
    throw new NullPointerException("tlsVersion == null");
  }
  
  public static q a(SSLSession paramSSLSession)
  {
    Object localObject1 = paramSSLSession.getCipherSuite();
    if (localObject1 != null)
    {
      h localH = h.a((String)localObject1);
      localObject1 = paramSSLSession.getProtocol();
      if (localObject1 != null)
      {
        d0 localD0 = d0.a((String)localObject1);
        Object localObject2;
        try
        {
          localObject1 = paramSSLSession.getPeerCertificates();
        }
        catch (SSLPeerUnverifiedException localSSLPeerUnverifiedException)
        {
          localObject2 = null;
        }
        if (localObject2 != null) {
          localObject2 = c.a((Object[])localObject2);
        } else {
          localObject2 = Collections.emptyList();
        }
        paramSSLSession = paramSSLSession.getLocalCertificates();
        if (paramSSLSession != null) {
          paramSSLSession = c.a(paramSSLSession);
        } else {
          paramSSLSession = Collections.emptyList();
        }
        return new q(localD0, localH, (List)localObject2, paramSSLSession);
      }
      throw new IllegalStateException("tlsVersion == null");
    }
    throw new IllegalStateException("cipherSuite == null");
  }
  
  public h a()
  {
    return b;
  }
  
  public List<Certificate> b()
  {
    return d;
  }
  
  public List<Certificate> c()
  {
    return c;
  }
  
  public d0 d()
  {
    return a;
  }
  
  public boolean equals(Object paramObject)
  {
    if (!(paramObject instanceof q)) {
      return false;
    }
    paramObject = (q)paramObject;
    return (a.equals(a)) && (b.equals(b)) && (c.equals(c)) && (d.equals(d));
  }
  
  public int hashCode()
  {
    return (((17 * 31 + a.hashCode()) * 31 + b.hashCode()) * 31 + c.hashCode()) * 31 + d.hashCode();
  }
}
