package android.arch.lifecycle;

import a.a.a.a.a;
import a.a.a.b.b;
import a.a.a.b.b.e;
import java.util.Iterator;
import java.util.Map.Entry;

public abstract class LiveData<T>
{
  private static final Object i = new Object();
  private final Object a = new Object();
  private b<k<T>, LiveData<T>.b> b = new b();
  private int c = 0;
  private volatile Object d;
  private volatile Object e;
  private int f;
  private boolean g;
  private boolean h;
  
  public LiveData()
  {
    Object localObject = i;
    d = localObject;
    e = localObject;
    f = -1;
    new a();
  }
  
  private void a(LiveData<T>.b paramLiveData)
  {
    if (!b) {
      return;
    }
    if (!paramLiveData.b())
    {
      paramLiveData.a(false);
      return;
    }
    int j = c;
    int k = f;
    if (j >= k) {
      return;
    }
    c = k;
    a.a(d);
  }
  
  private static void a(String paramString)
  {
    if (a.b().a()) {
      return;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Cannot invoke ");
    localStringBuilder.append(paramString);
    localStringBuilder.append(" on a background");
    localStringBuilder.append(" thread");
    throw new IllegalStateException(localStringBuilder.toString());
  }
  
  private void b(LiveData<T>.b paramLiveData)
  {
    if (g)
    {
      h = true;
      return;
    }
    g = true;
    for (;;)
    {
      h = false;
      LiveData<T>.b localLiveData;
      if (paramLiveData != null)
      {
        a(paramLiveData);
        localLiveData = null;
      }
      else
      {
        b.e localE = b.c();
        do
        {
          localLiveData = paramLiveData;
          if (!localE.hasNext()) {
            break;
          }
          a((b)((Map.Entry)localE.next()).getValue());
        } while (!h);
        localLiveData = paramLiveData;
      }
      if (!h)
      {
        g = false;
        return;
      }
      paramLiveData = localLiveData;
    }
  }
  
  protected void a() {}
  
  public void a(e paramE, k<T> paramK)
  {
    if (paramE.a().a() == c.b.c) {
      return;
    }
    LifecycleBoundObserver localLifecycleBoundObserver = new LifecycleBoundObserver(paramE, paramK);
    paramK = (b)b.b(paramK, localLifecycleBoundObserver);
    if ((paramK != null) && (!paramK.a(paramE))) {
      throw new IllegalArgumentException("Cannot add the same observer with different lifecycles");
    }
    if (paramK != null) {
      return;
    }
    paramE.a().a(localLifecycleBoundObserver);
  }
  
  public void a(k<T> paramK)
  {
    a("removeObserver");
    paramK = (b)b.remove(paramK);
    if (paramK == null) {
      return;
    }
    paramK.a();
    paramK.a(false);
  }
  
  protected void a(T paramT)
  {
    a("setValue");
    f += 1;
    d = paramT;
    b(null);
  }
  
  protected void b() {}
  
  class LifecycleBoundObserver
    extends LiveData<T>.b
    implements GenericLifecycleObserver
  {
    final e e;
    
    LifecycleBoundObserver(k<T> paramK)
    {
      super(localK);
      e = paramK;
    }
    
    void a()
    {
      e.a().b(this);
    }
    
    public void a(e paramE, c.a paramA)
    {
      if (e.a().a() == c.b.c)
      {
        a(a);
        return;
      }
      a(b());
    }
    
    boolean a(e paramE)
    {
      return e == paramE;
    }
    
    boolean b()
    {
      return e.a().a().a(c.b.f);
    }
  }
  
  class a
    implements Runnable
  {
    a() {}
    
    public void run()
    {
      Object localObject1;
      synchronized (LiveData.a(LiveData.this))
      {
        localObject1 = LiveData.b(LiveData.this);
      }
      try
      {
        LiveData.a(LiveData.this, LiveData.c());
        a(localObject1);
        return;
      }
      finally
      {
        for (;;) {}
      }
      localObject2 = finally;
      throw localObject2;
    }
  }
  
  private abstract class b
  {
    final k<T> a;
    boolean b;
    int c = -1;
    
    b()
    {
      Object localObject;
      a = localObject;
    }
    
    void a() {}
    
    void a(boolean paramBoolean)
    {
      if (paramBoolean == b) {
        return;
      }
      b = paramBoolean;
      int i = LiveData.c(LiveData.this);
      int j = 1;
      if (i == 0) {
        i = 1;
      } else {
        i = 0;
      }
      LiveData localLiveData = LiveData.this;
      int k = LiveData.c(localLiveData);
      if (!b) {
        j = -1;
      }
      LiveData.a(localLiveData, k + j);
      if ((i != 0) && (b)) {
        LiveData.this.a();
      }
      if ((LiveData.c(LiveData.this) == 0) && (!b)) {
        b();
      }
      if (b) {
        LiveData.a(LiveData.this, this);
      }
    }
    
    boolean a(e paramE)
    {
      return false;
    }
    
    abstract boolean b();
  }
}
