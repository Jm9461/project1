package android.arch.lifecycle;

import a.a.a.b.a;
import a.a.a.b.b;
import a.a.a.b.b.e;
import android.util.Log;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map.Entry;

public class f
  extends c
{
  private a<d, b> a = new a();
  private c.b b;
  private final WeakReference<e> c;
  private int d = 0;
  private boolean e = false;
  private boolean f = false;
  private ArrayList<c.b> g = new ArrayList();
  
  public f(e paramE)
  {
    c = new WeakReference(paramE);
    b = c.b.d;
  }
  
  static c.b a(c.b paramB1, c.b paramB2)
  {
    if ((paramB2 != null) && (paramB2.compareTo(paramB1) < 0)) {
      return paramB2;
    }
    return paramB1;
  }
  
  private void a(e paramE)
  {
    Iterator localIterator = a.a();
    while ((localIterator.hasNext()) && (!f))
    {
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      b localB = (b)localEntry.getValue();
      while ((a.compareTo(b) > 0) && (!f) && (a.contains(localEntry.getKey())))
      {
        c.a localA = b(a);
        d(b(localA));
        localB.a(paramE, localA);
        c();
      }
    }
  }
  
  private static c.a b(c.b paramB)
  {
    int i = a.b[paramB.ordinal()];
    if (i != 1)
    {
      if (i != 2)
      {
        if (i != 3)
        {
          if (i != 4)
          {
            if (i != 5)
            {
              StringBuilder localStringBuilder = new StringBuilder();
              localStringBuilder.append("Unexpected state value ");
              localStringBuilder.append(paramB);
              throw new IllegalArgumentException(localStringBuilder.toString());
            }
            throw new IllegalArgumentException();
          }
          return c.a.ON_PAUSE;
        }
        return c.a.ON_STOP;
      }
      return c.a.ON_DESTROY;
    }
    throw new IllegalArgumentException();
  }
  
  static c.b b(c.a paramA)
  {
    switch (a.a[paramA.ordinal()])
    {
    default: 
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Unexpected event value ");
      localStringBuilder.append(paramA);
      throw new IllegalArgumentException(localStringBuilder.toString());
    case 6: 
      return c.b.c;
    case 5: 
      return c.b.g;
    case 3: 
    case 4: 
      return c.b.f;
    }
    return c.b.e;
  }
  
  private void b(e paramE)
  {
    b.e localE = a.c();
    while ((localE.hasNext()) && (!f))
    {
      Map.Entry localEntry = (Map.Entry)localE.next();
      b localB = (b)localEntry.getValue();
      while ((a.compareTo(b) < 0) && (!f) && (a.contains(localEntry.getKey())))
      {
        d(a);
        localB.a(paramE, e(a));
        c();
      }
    }
  }
  
  private boolean b()
  {
    if (a.size() == 0) {
      return true;
    }
    c.b localB1 = a.b().getValue()).a;
    c.b localB2 = a.d().getValue()).a;
    return (localB1 == localB2) && (b == localB2);
  }
  
  private c.b c(d paramD)
  {
    paramD = a.b(paramD);
    Object localObject = null;
    if (paramD != null) {
      paramD = getValuea;
    } else {
      paramD = null;
    }
    if (!g.isEmpty())
    {
      localObject = g;
      localObject = (c.b)((ArrayList)localObject).get(((ArrayList)localObject).size() - 1);
    }
    return a(a(b, paramD), (c.b)localObject);
  }
  
  private void c()
  {
    ArrayList localArrayList = g;
    localArrayList.remove(localArrayList.size() - 1);
  }
  
  private void c(c.b paramB)
  {
    if (b == paramB) {
      return;
    }
    b = paramB;
    if ((!e) && (d == 0))
    {
      e = true;
      d();
      e = false;
      return;
    }
    f = true;
  }
  
  private void d()
  {
    e localE = (e)c.get();
    if (localE == null)
    {
      Log.w("LifecycleRegistry", "LifecycleOwner is garbage collected, you shouldn't try dispatch new events from it.");
      return;
    }
    while (!b())
    {
      f = false;
      if (b.compareTo(a.b().getValue()).a) < 0) {
        a(localE);
      }
      Map.Entry localEntry = a.d();
      if ((!f) && (localEntry != null) && (b.compareTo(getValuea) > 0)) {
        b(localE);
      }
    }
    f = false;
  }
  
  private void d(c.b paramB)
  {
    g.add(paramB);
  }
  
  private static c.a e(c.b paramB)
  {
    int i = a.b[paramB.ordinal()];
    if (i != 1) {
      if (i != 2)
      {
        if (i != 3)
        {
          if (i != 4)
          {
            if (i != 5)
            {
              StringBuilder localStringBuilder = new StringBuilder();
              localStringBuilder.append("Unexpected state value ");
              localStringBuilder.append(paramB);
              throw new IllegalArgumentException(localStringBuilder.toString());
            }
          }
          else {
            throw new IllegalArgumentException();
          }
        }
        else {
          return c.a.ON_RESUME;
        }
      }
      else {
        return c.a.ON_START;
      }
    }
    return c.a.ON_CREATE;
  }
  
  public c.b a()
  {
    return b;
  }
  
  public void a(c.a paramA)
  {
    c(b(paramA));
  }
  
  public void a(c.b paramB)
  {
    c(paramB);
  }
  
  public void a(d paramD)
  {
    Object localObject = b;
    c.b localB = c.b.c;
    if (localObject != localB) {
      localB = c.b.d;
    }
    localObject = new b(paramD, localB);
    if ((b)a.b(paramD, localObject) != null) {
      return;
    }
    e localE = (e)c.get();
    if (localE == null) {
      return;
    }
    int i;
    if ((d == 0) && (!e)) {
      i = 0;
    } else {
      i = 1;
    }
    localB = c(paramD);
    d += 1;
    while ((a.compareTo(localB) < 0) && (a.contains(paramD)))
    {
      d(a);
      ((b)localObject).a(localE, e(a));
      c();
      localB = c(paramD);
    }
    if (i == 0) {
      d();
    }
    d -= 1;
  }
  
  public void b(d paramD)
  {
    a.remove(paramD);
  }
  
  static class b
  {
    c.b a;
    GenericLifecycleObserver b;
    
    b(d paramD, c.b paramB)
    {
      b = h.a(paramD);
      a = paramB;
    }
    
    void a(e paramE, c.a paramA)
    {
      c.b localB = f.b(paramA);
      a = f.a(a, localB);
      b.a(paramE, paramA);
      a = localB;
    }
  }
}
