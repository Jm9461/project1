package android.support.design.internal;

import a.b.c.d;
import a.b.c.e;
import a.b.c.h;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.Resources.Theme;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Drawable.ConstantState;
import android.graphics.drawable.StateListDrawable;
import android.support.v4.view.b;
import android.support.v4.view.d0.c;
import android.support.v4.view.u;
import android.support.v4.widget.p;
import android.support.v7.view.menu.k;
import android.support.v7.view.menu.q.a;
import android.support.v7.widget.l1;
import android.support.v7.widget.o0;
import android.support.v7.widget.o0.a;
import android.util.AttributeSet;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.ViewStub;
import android.widget.CheckedTextView;
import android.widget.FrameLayout;

public class NavigationMenuItemView
  extends a
  implements q.a
{
  private static final int[] H = { 16842912 };
  private final CheckedTextView A;
  private FrameLayout B;
  private k C;
  private ColorStateList D;
  private boolean E;
  private Drawable F;
  private final b G = new a();
  private final int x;
  private boolean y;
  boolean z;
  
  public NavigationMenuItemView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public NavigationMenuItemView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public NavigationMenuItemView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    setOrientation(0);
    LayoutInflater.from(paramContext).inflate(h.design_navigation_menu_item, this, true);
    x = paramContext.getResources().getDimensionPixelSize(d.design_navigation_icon_size);
    A = ((CheckedTextView)findViewById(a.b.c.f.design_menu_item_text));
    A.setDuplicateParentStateEnabled(true);
    u.a(A, G);
  }
  
  private void e()
  {
    Object localObject;
    if (g())
    {
      A.setVisibility(8);
      localObject = B;
      if (localObject != null)
      {
        localObject = (o0.a)((FrameLayout)localObject).getLayoutParams();
        width = -1;
        B.setLayoutParams((ViewGroup.LayoutParams)localObject);
      }
    }
    else
    {
      A.setVisibility(0);
      localObject = B;
      if (localObject != null)
      {
        localObject = (o0.a)((FrameLayout)localObject).getLayoutParams();
        width = -2;
        B.setLayoutParams((ViewGroup.LayoutParams)localObject);
      }
    }
  }
  
  private StateListDrawable f()
  {
    TypedValue localTypedValue = new TypedValue();
    if (getContext().getTheme().resolveAttribute(a.b.h.a.a.colorControlHighlight, localTypedValue, true))
    {
      StateListDrawable localStateListDrawable = new StateListDrawable();
      localStateListDrawable.addState(H, new ColorDrawable(data));
      localStateListDrawable.addState(ViewGroup.EMPTY_STATE_SET, new ColorDrawable(0));
      return localStateListDrawable;
    }
    return null;
  }
  
  private boolean g()
  {
    return (C.getTitle() == null) && (C.getIcon() == null) && (C.getActionView() != null);
  }
  
  private void setActionView(View paramView)
  {
    if (paramView != null)
    {
      if (B == null) {
        B = ((FrameLayout)((ViewStub)findViewById(a.b.c.f.design_menu_item_action_area_stub)).inflate());
      }
      B.removeAllViews();
      B.addView(paramView);
    }
  }
  
  public void a(k paramK, int paramInt)
  {
    C = paramK;
    if (paramK.isVisible()) {
      paramInt = 0;
    } else {
      paramInt = 8;
    }
    setVisibility(paramInt);
    if (getBackground() == null) {
      u.a(this, f());
    }
    setCheckable(paramK.isCheckable());
    setChecked(paramK.isChecked());
    setEnabled(paramK.isEnabled());
    setTitle(paramK.getTitle());
    setIcon(paramK.getIcon());
    setActionView(paramK.getActionView());
    setContentDescription(paramK.getContentDescription());
    l1.a(this, paramK.getTooltipText());
    e();
  }
  
  public boolean a()
  {
    return false;
  }
  
  public void d()
  {
    FrameLayout localFrameLayout = B;
    if (localFrameLayout != null) {
      localFrameLayout.removeAllViews();
    }
    A.setCompoundDrawables(null, null, null, null);
  }
  
  public k getItemData()
  {
    return C;
  }
  
  protected int[] onCreateDrawableState(int paramInt)
  {
    int[] arrayOfInt = super.onCreateDrawableState(paramInt + 1);
    k localK = C;
    if ((localK != null) && (localK.isCheckable()) && (C.isChecked())) {
      ViewGroup.mergeDrawableStates(arrayOfInt, H);
    }
    return arrayOfInt;
  }
  
  public void setCheckable(boolean paramBoolean)
  {
    refreshDrawableState();
    if (z != paramBoolean)
    {
      z = paramBoolean;
      G.a(A, 2048);
    }
  }
  
  public void setChecked(boolean paramBoolean)
  {
    refreshDrawableState();
    A.setChecked(paramBoolean);
  }
  
  public void setHorizontalPadding(int paramInt)
  {
    setPadding(paramInt, 0, paramInt, 0);
  }
  
  public void setIcon(Drawable paramDrawable)
  {
    int i;
    if (paramDrawable != null)
    {
      Object localObject = paramDrawable;
      if (E)
      {
        localObject = paramDrawable.getConstantState();
        if (localObject != null) {
          paramDrawable = ((Drawable.ConstantState)localObject).newDrawable();
        }
        localObject = android.support.v4.graphics.drawable.a.h(paramDrawable).mutate();
        android.support.v4.graphics.drawable.a.a((Drawable)localObject, D);
      }
      i = x;
      ((Drawable)localObject).setBounds(0, 0, i, i);
      paramDrawable = (Drawable)localObject;
    }
    else if (y)
    {
      if (F == null)
      {
        F = android.support.v4.content.e.f.a(getResources(), e.navigation_empty_icon, getContext().getTheme());
        paramDrawable = F;
        if (paramDrawable != null)
        {
          i = x;
          paramDrawable.setBounds(0, 0, i, i);
        }
      }
      paramDrawable = F;
    }
    p.a(A, paramDrawable, null, null, null);
  }
  
  public void setIconPadding(int paramInt)
  {
    A.setCompoundDrawablePadding(paramInt);
  }
  
  void setIconTintList(ColorStateList paramColorStateList)
  {
    D = paramColorStateList;
    boolean bool;
    if (D != null) {
      bool = true;
    } else {
      bool = false;
    }
    E = bool;
    paramColorStateList = C;
    if (paramColorStateList != null) {
      setIcon(paramColorStateList.getIcon());
    }
  }
  
  public void setNeedsEmptyIcon(boolean paramBoolean)
  {
    y = paramBoolean;
  }
  
  public void setTextAppearance(int paramInt)
  {
    p.d(A, paramInt);
  }
  
  public void setTextColor(ColorStateList paramColorStateList)
  {
    A.setTextColor(paramColorStateList);
  }
  
  public void setTitle(CharSequence paramCharSequence)
  {
    A.setText(paramCharSequence);
  }
  
  class a
    extends b
  {
    a() {}
    
    public void a(View paramView, c paramC)
    {
      super.a(paramView, paramC);
      paramC.b(z);
    }
  }
}
