package android.support.design.widget;

import android.content.Context;
import android.support.v4.view.u;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.widget.OverScroller;

abstract class n<V extends View>
  extends x<V>
{
  private Runnable d;
  OverScroller e;
  private boolean f;
  private int g = -1;
  private int h;
  private int i = -1;
  private VelocityTracker j;
  
  public n() {}
  
  public n(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
  }
  
  private void d()
  {
    if (j == null) {
      j = VelocityTracker.obtain();
    }
  }
  
  final int a(CoordinatorLayout paramCoordinatorLayout, V paramV, int paramInt1, int paramInt2, int paramInt3)
  {
    return b(paramCoordinatorLayout, paramV, c() - paramInt1, paramInt2, paramInt3);
  }
  
  final boolean a(CoordinatorLayout paramCoordinatorLayout, V paramV, int paramInt1, int paramInt2, float paramFloat)
  {
    Runnable localRunnable = d;
    if (localRunnable != null)
    {
      paramV.removeCallbacks(localRunnable);
      d = null;
    }
    if (e == null) {
      e = new OverScroller(paramV.getContext());
    }
    e.fling(0, b(), 0, Math.round(paramFloat), 0, 0, paramInt1, paramInt2);
    if (e.computeScrollOffset())
    {
      d = new a(paramCoordinatorLayout, paramV);
      u.a(paramV, d);
      return true;
    }
    e(paramCoordinatorLayout, paramV);
    return false;
  }
  
  public boolean a(CoordinatorLayout paramCoordinatorLayout, V paramV, MotionEvent paramMotionEvent)
  {
    if (i < 0) {
      i = ViewConfiguration.get(paramCoordinatorLayout.getContext()).getScaledTouchSlop();
    }
    if ((paramMotionEvent.getAction() == 2) && (f)) {
      return true;
    }
    int k = paramMotionEvent.getActionMasked();
    if (k != 0)
    {
      if (k != 1) {
        if (k != 2)
        {
          if (k != 3) {
            break label231;
          }
        }
        else
        {
          k = g;
          if (k == -1) {
            break label231;
          }
          k = paramMotionEvent.findPointerIndex(k);
          if (k == -1) {
            break label231;
          }
          k = (int)paramMotionEvent.getY(k);
          if (Math.abs(k - h) <= i) {
            break label231;
          }
          f = true;
          h = k;
          break label231;
        }
      }
      f = false;
      g = -1;
      paramCoordinatorLayout = j;
      if (paramCoordinatorLayout != null)
      {
        paramCoordinatorLayout.recycle();
        j = null;
      }
    }
    else
    {
      f = false;
      k = (int)paramMotionEvent.getX();
      int m = (int)paramMotionEvent.getY();
      if ((a(paramV)) && (paramCoordinatorLayout.a(paramV, k, m)))
      {
        h = m;
        g = paramMotionEvent.getPointerId(0);
        d();
      }
    }
    label231:
    paramCoordinatorLayout = j;
    if (paramCoordinatorLayout != null) {
      paramCoordinatorLayout.addMovement(paramMotionEvent);
    }
    return f;
  }
  
  abstract boolean a(V paramV);
  
  abstract int b(CoordinatorLayout paramCoordinatorLayout, V paramV, int paramInt1, int paramInt2, int paramInt3);
  
  abstract int b(V paramV);
  
  public boolean b(CoordinatorLayout paramCoordinatorLayout, V paramV, MotionEvent paramMotionEvent)
  {
    if (i < 0) {
      i = ViewConfiguration.get(paramCoordinatorLayout.getContext()).getScaledTouchSlop();
    }
    int k = paramMotionEvent.getActionMasked();
    int m;
    if (k != 0)
    {
      if (k != 1)
      {
        if (k != 2)
        {
          if (k != 3) {
            break label322;
          }
        }
        else
        {
          k = paramMotionEvent.findPointerIndex(g);
          if (k == -1) {
            return false;
          }
          int n = (int)paramMotionEvent.getY(k);
          m = h - n;
          k = m;
          if (!f)
          {
            int i1 = Math.abs(m);
            int i2 = i;
            k = m;
            if (i1 > i2)
            {
              f = true;
              if (m > 0) {
                k = m - i2;
              } else {
                k = m + i2;
              }
            }
          }
          if (!f) {
            break label322;
          }
          h = n;
          a(paramCoordinatorLayout, paramV, k, b(paramV), 0);
          break label322;
        }
      }
      else
      {
        VelocityTracker localVelocityTracker = j;
        if (localVelocityTracker != null)
        {
          localVelocityTracker.addMovement(paramMotionEvent);
          j.computeCurrentVelocity(1000);
          float f1 = j.getYVelocity(g);
          a(paramCoordinatorLayout, paramV, -c(paramV), 0, f1);
        }
      }
      f = false;
      g = -1;
      paramCoordinatorLayout = j;
      if (paramCoordinatorLayout != null)
      {
        paramCoordinatorLayout.recycle();
        j = null;
      }
    }
    else
    {
      k = (int)paramMotionEvent.getX();
      m = (int)paramMotionEvent.getY();
      if ((!paramCoordinatorLayout.a(paramV, k, m)) || (!a(paramV))) {
        break label338;
      }
      h = m;
      g = paramMotionEvent.getPointerId(0);
      d();
    }
    label322:
    paramCoordinatorLayout = j;
    if (paramCoordinatorLayout != null) {
      paramCoordinatorLayout.addMovement(paramMotionEvent);
    }
    return true;
    label338:
    return false;
  }
  
  abstract int c();
  
  int c(CoordinatorLayout paramCoordinatorLayout, V paramV, int paramInt)
  {
    return b(paramCoordinatorLayout, paramV, paramInt, Integer.MIN_VALUE, Integer.MAX_VALUE);
  }
  
  abstract int c(V paramV);
  
  abstract void e(CoordinatorLayout paramCoordinatorLayout, V paramV);
  
  private class a
    implements Runnable
  {
    private final CoordinatorLayout c;
    private final V d;
    
    a(V paramV)
    {
      c = paramV;
      Object localObject;
      d = localObject;
    }
    
    public void run()
    {
      if (d != null)
      {
        Object localObject = e;
        if (localObject != null)
        {
          if (((OverScroller)localObject).computeScrollOffset())
          {
            localObject = n.this;
            ((n)localObject).c(c, d, e.getCurrY());
            u.a(d, this);
            return;
          }
          e(c, d);
        }
      }
    }
  }
}
