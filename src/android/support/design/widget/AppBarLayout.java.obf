package android.support.design.widget;

import a.b.c.b;
import a.b.c.j;
import a.b.g.g.i;
import android.animation.ValueAnimator;
import android.animation.ValueAnimator.AnimatorUpdateListener;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Rect;
import android.os.Build.VERSION;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.ClassLoaderCreator;
import android.os.Parcelable.Creator;
import android.support.design.internal.g;
import android.support.v4.view.c0;
import android.support.v4.view.p;
import android.support.v4.view.u;
import android.util.AttributeSet;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.animation.AnimationUtils;
import android.view.animation.Interpolator;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import java.lang.ref.WeakReference;
import java.util.List;

@CoordinatorLayout.d(Behavior.class)
public class AppBarLayout
  extends LinearLayout
{
  private int c = -1;
  private int d = -1;
  private int e = -1;
  private boolean f;
  private int g = 0;
  private c0 h;
  private List<b> i;
  private boolean j;
  private boolean k;
  private boolean l;
  private boolean m;
  private int[] n;
  
  public AppBarLayout(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public AppBarLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    setOrientation(1);
    if (Build.VERSION.SDK_INT >= 21)
    {
      z.a(this);
      z.a(this, paramAttributeSet, 0, j.Widget_Design_AppBarLayout);
    }
    paramContext = g.c(paramContext, paramAttributeSet, a.b.c.k.AppBarLayout, 0, j.Widget_Design_AppBarLayout, new int[0]);
    u.a(this, paramContext.getDrawable(a.b.c.k.AppBarLayout_android_background));
    if (paramContext.hasValue(a.b.c.k.AppBarLayout_expanded)) {
      a(paramContext.getBoolean(a.b.c.k.AppBarLayout_expanded, false), false, false);
    }
    if ((Build.VERSION.SDK_INT >= 21) && (paramContext.hasValue(a.b.c.k.AppBarLayout_elevation))) {
      z.a(this, paramContext.getDimensionPixelSize(a.b.c.k.AppBarLayout_elevation, 0));
    }
    if (Build.VERSION.SDK_INT >= 26)
    {
      if (paramContext.hasValue(a.b.c.k.AppBarLayout_android_keyboardNavigationCluster)) {
        setKeyboardNavigationCluster(paramContext.getBoolean(a.b.c.k.AppBarLayout_android_keyboardNavigationCluster, false));
      }
      if (paramContext.hasValue(a.b.c.k.AppBarLayout_android_touchscreenBlocksFocus)) {
        setTouchscreenBlocksFocus(paramContext.getBoolean(a.b.c.k.AppBarLayout_android_touchscreenBlocksFocus, false));
      }
    }
    m = paramContext.getBoolean(a.b.c.k.AppBarLayout_liftOnScroll, false);
    paramContext.recycle();
    u.a(this, new a());
  }
  
  private void a(boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
  {
    int i1;
    if (paramBoolean1) {
      i1 = 1;
    } else {
      i1 = 2;
    }
    int i3 = 0;
    int i2;
    if (paramBoolean2) {
      i2 = 4;
    } else {
      i2 = 0;
    }
    if (paramBoolean3) {
      i3 = 8;
    }
    g = (i1 | i2 | i3);
    requestLayout();
  }
  
  private boolean b(boolean paramBoolean)
  {
    if (k != paramBoolean)
    {
      k = paramBoolean;
      refreshDrawableState();
      return true;
    }
    return false;
  }
  
  private boolean e()
  {
    int i1 = 0;
    int i2 = getChildCount();
    while (i1 < i2)
    {
      if (((c)getChildAt(i1).getLayoutParams()).c()) {
        return true;
      }
      i1 += 1;
    }
    return false;
  }
  
  private void f()
  {
    c = -1;
    d = -1;
    e = -1;
  }
  
  c0 a(c0 paramC0)
  {
    c0 localC0 = null;
    if (u.h(this)) {
      localC0 = paramC0;
    }
    if (!i.a(h, localC0))
    {
      h = localC0;
      f();
    }
    return paramC0;
  }
  
  void a(int paramInt)
  {
    Object localObject = i;
    if (localObject != null)
    {
      int i1 = 0;
      int i2 = ((List)localObject).size();
      while (i1 < i2)
      {
        localObject = (b)i.get(i1);
        if (localObject != null) {
          ((b)localObject).a(this, paramInt);
        }
        i1 += 1;
      }
    }
  }
  
  public void a(boolean paramBoolean1, boolean paramBoolean2)
  {
    a(paramBoolean1, paramBoolean2, true);
  }
  
  boolean a()
  {
    return f;
  }
  
  boolean a(boolean paramBoolean)
  {
    if (l != paramBoolean)
    {
      l = paramBoolean;
      refreshDrawableState();
      return true;
    }
    return false;
  }
  
  boolean b()
  {
    return getTotalScrollRange() != 0;
  }
  
  public boolean c()
  {
    return m;
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return paramLayoutParams instanceof c;
  }
  
  void d()
  {
    g = 0;
  }
  
  protected c generateDefaultLayoutParams()
  {
    return new c(-1, -2);
  }
  
  public c generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new c(getContext(), paramAttributeSet);
  }
  
  protected c generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    if ((Build.VERSION.SDK_INT >= 19) && ((paramLayoutParams instanceof LinearLayout.LayoutParams))) {
      return new c((LinearLayout.LayoutParams)paramLayoutParams);
    }
    if ((paramLayoutParams instanceof ViewGroup.MarginLayoutParams)) {
      return new c((ViewGroup.MarginLayoutParams)paramLayoutParams);
    }
    return new c(paramLayoutParams);
  }
  
  int getDownNestedPreScrollRange()
  {
    int i1 = d;
    if (i1 != -1) {
      return i1;
    }
    int i3 = 0;
    int i2 = getChildCount() - 1;
    while (i2 >= 0)
    {
      View localView = getChildAt(i2);
      c localC = (c)localView.getLayoutParams();
      i1 = localView.getMeasuredHeight();
      int i4 = a;
      if ((i4 & 0x5) == 5)
      {
        i3 += topMargin + bottomMargin;
        if ((i4 & 0x8) != 0) {
          i1 = i3 + u.l(localView);
        } else if ((i4 & 0x2) != 0) {
          i1 = i3 + (i1 - u.l(localView));
        } else {
          i1 = i3 + (i1 - getTopInset());
        }
      }
      else
      {
        i1 = i3;
        if (i3 > 0) {
          break;
        }
      }
      i2 -= 1;
      i3 = i1;
    }
    i1 = Math.max(0, i3);
    d = i1;
    return i1;
  }
  
  int getDownNestedScrollRange()
  {
    int i1 = e;
    if (i1 != -1) {
      return i1;
    }
    i1 = 0;
    int i2 = 0;
    int i4 = getChildCount();
    int i3;
    for (;;)
    {
      i3 = i1;
      if (i2 >= i4) {
        break;
      }
      View localView = getChildAt(i2);
      c localC = (c)localView.getLayoutParams();
      int i6 = localView.getMeasuredHeight();
      int i7 = topMargin;
      int i8 = bottomMargin;
      int i5 = a;
      i3 = i1;
      if ((i5 & 0x1) == 0) {
        break;
      }
      i1 += i6 + (i7 + i8);
      if ((i5 & 0x2) != 0)
      {
        i3 = i1 - (u.l(localView) + getTopInset());
        break;
      }
      i2 += 1;
    }
    i1 = Math.max(0, i3);
    e = i1;
    return i1;
  }
  
  public final int getMinimumHeightForVisibleOverlappingContent()
  {
    int i2 = getTopInset();
    int i1 = u.l(this);
    if (i1 != 0) {
      return i1 * 2 + i2;
    }
    i1 = getChildCount();
    if (i1 >= 1) {
      i1 = u.l(getChildAt(i1 - 1));
    } else {
      i1 = 0;
    }
    if (i1 != 0) {
      return i1 * 2 + i2;
    }
    return getHeight() / 3;
  }
  
  int getPendingAction()
  {
    return g;
  }
  
  @Deprecated
  public float getTargetElevation()
  {
    return 0.0F;
  }
  
  final int getTopInset()
  {
    c0 localC0 = h;
    if (localC0 != null) {
      return localC0.e();
    }
    return 0;
  }
  
  public final int getTotalScrollRange()
  {
    int i1 = c;
    if (i1 != -1) {
      return i1;
    }
    i1 = 0;
    int i2 = 0;
    int i4 = getChildCount();
    int i3;
    for (;;)
    {
      i3 = i1;
      if (i2 >= i4) {
        break;
      }
      View localView = getChildAt(i2);
      c localC = (c)localView.getLayoutParams();
      int i6 = localView.getMeasuredHeight();
      int i5 = a;
      i3 = i1;
      if ((i5 & 0x1) == 0) {
        break;
      }
      i1 += topMargin + i6 + bottomMargin;
      if ((i5 & 0x2) != 0)
      {
        i3 = i1 - u.l(localView);
        break;
      }
      i2 += 1;
    }
    i1 = Math.max(0, i3 - getTopInset());
    c = i1;
    return i1;
  }
  
  int getUpNestedPreScrollRange()
  {
    return getTotalScrollRange();
  }
  
  protected int[] onCreateDrawableState(int paramInt)
  {
    if (n == null) {
      n = new int[4];
    }
    int[] arrayOfInt1 = n;
    int[] arrayOfInt2 = super.onCreateDrawableState(arrayOfInt1.length + paramInt);
    if (k) {
      paramInt = b.state_liftable;
    } else {
      paramInt = -b.state_liftable;
    }
    arrayOfInt1[0] = paramInt;
    if ((k) && (l)) {
      paramInt = b.state_lifted;
    } else {
      paramInt = -b.state_lifted;
    }
    arrayOfInt1[1] = paramInt;
    if (k) {
      paramInt = b.state_collapsible;
    } else {
      paramInt = -b.state_collapsible;
    }
    arrayOfInt1[2] = paramInt;
    if ((k) && (l)) {
      paramInt = b.state_collapsed;
    } else {
      paramInt = -b.state_collapsed;
    }
    arrayOfInt1[3] = paramInt;
    return LinearLayout.mergeDrawableStates(arrayOfInt2, arrayOfInt1);
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    f();
    paramBoolean = false;
    f = false;
    paramInt1 = 0;
    paramInt2 = getChildCount();
    while (paramInt1 < paramInt2)
    {
      if (((c)getChildAt(paramInt1).getLayoutParams()).b() != null)
      {
        f = true;
        break;
      }
      paramInt1 += 1;
    }
    if (!j)
    {
      if ((m) || (e())) {
        paramBoolean = true;
      }
      b(paramBoolean);
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    super.onMeasure(paramInt1, paramInt2);
    f();
  }
  
  public void setExpanded(boolean paramBoolean)
  {
    a(paramBoolean, u.y(this));
  }
  
  public void setLiftOnScroll(boolean paramBoolean)
  {
    m = paramBoolean;
  }
  
  public void setOrientation(int paramInt)
  {
    if (paramInt == 1)
    {
      super.setOrientation(paramInt);
      return;
    }
    throw new IllegalArgumentException("AppBarLayout is always vertical and does not support horizontal orientation");
  }
  
  @Deprecated
  public void setTargetElevation(float paramFloat)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      z.a(this, paramFloat);
    }
  }
  
  protected static class BaseBehavior<T extends AppBarLayout>
    extends n<T>
  {
    private int k;
    private int l;
    private ValueAnimator m;
    private int n = -1;
    private boolean o;
    private float p;
    private WeakReference<View> q;
    private b r;
    
    public BaseBehavior() {}
    
    public BaseBehavior(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
    }
    
    private static View a(AppBarLayout paramAppBarLayout, int paramInt)
    {
      int i = Math.abs(paramInt);
      paramInt = 0;
      int j = paramAppBarLayout.getChildCount();
      while (paramInt < j)
      {
        View localView = paramAppBarLayout.getChildAt(paramInt);
        if ((i >= localView.getTop()) && (i <= localView.getBottom())) {
          return localView;
        }
        paramInt += 1;
      }
      return null;
    }
    
    private View a(CoordinatorLayout paramCoordinatorLayout)
    {
      int i = 0;
      int j = paramCoordinatorLayout.getChildCount();
      while (i < j)
      {
        View localView = paramCoordinatorLayout.getChildAt(i);
        if ((localView instanceof android.support.v4.view.k)) {
          return localView;
        }
        i += 1;
      }
      return null;
    }
    
    private void a(int paramInt1, T paramT, View paramView, int paramInt2)
    {
      if (paramInt2 == 1)
      {
        paramInt2 = c();
        if (((paramInt1 < 0) && (paramInt2 == 0)) || ((paramInt1 > 0) && (paramInt2 == -paramT.getDownNestedScrollRange()))) {
          u.h(paramView, 1);
        }
      }
    }
    
    private void a(CoordinatorLayout paramCoordinatorLayout, T paramT, int paramInt, float paramFloat)
    {
      int i = Math.abs(c() - paramInt);
      paramFloat = Math.abs(paramFloat);
      if (paramFloat > 0.0F) {
        i = Math.round(i / paramFloat * 1000.0F) * 3;
      } else {
        i = (int)((1.0F + i / paramT.getHeight()) * 150.0F);
      }
      a(paramCoordinatorLayout, paramT, paramInt, i);
    }
    
    private void a(final CoordinatorLayout paramCoordinatorLayout, final T paramT, int paramInt1, int paramInt2)
    {
      int i = c();
      if (i == paramInt1)
      {
        paramCoordinatorLayout = m;
        if ((paramCoordinatorLayout != null) && (paramCoordinatorLayout.isRunning())) {
          m.cancel();
        }
        return;
      }
      ValueAnimator localValueAnimator = m;
      if (localValueAnimator == null)
      {
        m = new ValueAnimator();
        m.setInterpolator(a.b.c.l.a.e);
        m.addUpdateListener(new a(paramCoordinatorLayout, paramT));
      }
      else
      {
        localValueAnimator.cancel();
      }
      m.setDuration(Math.min(paramInt2, 600));
      m.setIntValues(new int[] { i, paramInt1 });
      m.start();
    }
    
    private void a(CoordinatorLayout paramCoordinatorLayout, T paramT, int paramInt1, int paramInt2, boolean paramBoolean)
    {
      View localView = a(paramT, paramInt1);
      if (localView != null)
      {
        int i = ((AppBarLayout.c)localView.getLayoutParams()).a();
        boolean bool2 = false;
        boolean bool3 = false;
        boolean bool1 = bool2;
        if ((i & 0x1) != 0)
        {
          int j = u.l(localView);
          if ((paramInt2 > 0) && ((i & 0xC) != 0))
          {
            if (-paramInt1 >= localView.getBottom() - j - paramT.getTopInset()) {
              bool1 = true;
            } else {
              bool1 = false;
            }
          }
          else
          {
            bool1 = bool2;
            if ((i & 0x2) != 0) {
              if (-paramInt1 >= localView.getBottom() - j - paramT.getTopInset()) {
                bool1 = true;
              } else {
                bool1 = false;
              }
            }
          }
        }
        bool2 = bool1;
        if (paramT.c())
        {
          localView = a(paramCoordinatorLayout);
          bool2 = bool1;
          if (localView != null)
          {
            bool1 = bool3;
            if (localView.getScrollY() > 0) {
              bool1 = true;
            }
            bool2 = bool1;
          }
        }
        bool1 = paramT.a(bool2);
        if ((Build.VERSION.SDK_INT >= 11) && ((paramBoolean) || ((bool1) && (c(paramCoordinatorLayout, paramT))))) {
          paramT.jumpDrawablesToCurrentState();
        }
      }
    }
    
    private static boolean a(int paramInt1, int paramInt2)
    {
      return (paramInt1 & paramInt2) == paramInt2;
    }
    
    private boolean a(CoordinatorLayout paramCoordinatorLayout, T paramT, View paramView)
    {
      return (paramT.b()) && (paramCoordinatorLayout.getHeight() - paramView.getHeight() <= paramT.getHeight());
    }
    
    private int b(T paramT, int paramInt)
    {
      int i = 0;
      int i4 = paramT.getChildCount();
      while (i < i4)
      {
        Object localObject = paramT.getChildAt(i);
        int i3 = ((View)localObject).getTop();
        int i2 = ((View)localObject).getBottom();
        localObject = (AppBarLayout.c)((View)localObject).getLayoutParams();
        int i1 = i3;
        int j = i2;
        if (a(((AppBarLayout.c)localObject).a(), 32))
        {
          i1 = i3 - topMargin;
          j = i2 + bottomMargin;
        }
        if ((i1 <= -paramInt) && (j >= -paramInt)) {
          return i;
        }
        i += 1;
      }
      return -1;
    }
    
    private int c(T paramT, int paramInt)
    {
      int i1 = Math.abs(paramInt);
      int i = 0;
      int j = paramT.getChildCount();
      while (i < j)
      {
        View localView = paramT.getChildAt(i);
        AppBarLayout.c localC = (AppBarLayout.c)localView.getLayoutParams();
        Interpolator localInterpolator = localC.b();
        if ((i1 >= localView.getTop()) && (i1 <= localView.getBottom()))
        {
          if (localInterpolator == null) {
            break;
          }
          i = 0;
          int i2 = localC.a();
          if ((i2 & 0x1) != 0)
          {
            j = 0 + (localView.getHeight() + topMargin + bottomMargin);
            i = j;
            if ((i2 & 0x2) != 0) {
              i = j - u.l(localView);
            }
          }
          j = i;
          if (u.h(localView)) {
            j = i - paramT.getTopInset();
          }
          if (j > 0)
          {
            i = localView.getTop();
            i = Math.round(j * localInterpolator.getInterpolation((i1 - i) / j));
            return Integer.signum(paramInt) * (localView.getTop() + i);
          }
          return paramInt;
        }
        i += 1;
      }
      return paramInt;
    }
    
    private boolean c(CoordinatorLayout paramCoordinatorLayout, T paramT)
    {
      paramCoordinatorLayout = paramCoordinatorLayout.c(paramT);
      int i = 0;
      int j = paramCoordinatorLayout.size();
      for (;;)
      {
        boolean bool = false;
        if (i >= j) {
          break;
        }
        paramT = ((CoordinatorLayout.f)((View)paramCoordinatorLayout.get(i)).getLayoutParams()).d();
        if ((paramT instanceof AppBarLayout.ScrollingViewBehavior))
        {
          if (((AppBarLayout.ScrollingViewBehavior)paramT).c() != 0) {
            bool = true;
          }
          return bool;
        }
        i += 1;
      }
      return false;
    }
    
    private void d(CoordinatorLayout paramCoordinatorLayout, T paramT)
    {
      int i3 = c();
      int i1 = b(paramT, i3);
      if (i1 >= 0)
      {
        View localView = paramT.getChildAt(i1);
        AppBarLayout.c localC = (AppBarLayout.c)localView.getLayoutParams();
        int i4 = localC.a();
        if ((i4 & 0x11) == 17)
        {
          int i2 = -localView.getTop();
          int i = -localView.getBottom();
          int j = i;
          if (i1 == paramT.getChildCount() - 1) {
            j = i + paramT.getTopInset();
          }
          if (a(i4, 2))
          {
            i = j + u.l(localView);
            i1 = i2;
          }
          else
          {
            i1 = i2;
            i = j;
            if (a(i4, 5))
            {
              i = u.l(localView) + j;
              if (i3 < i)
              {
                i1 = i;
                i = j;
              }
              else
              {
                i1 = i2;
              }
            }
          }
          i2 = i1;
          j = i;
          if (a(i4, 32))
          {
            i2 = i1 + topMargin;
            j = i - bottomMargin;
          }
          if (i3 >= (j + i2) / 2) {
            j = i2;
          }
          a(paramCoordinatorLayout, paramT, a.b.g.c.a.a(j, -paramT.getTotalScrollRange(), 0), 0.0F);
        }
      }
    }
    
    int a(CoordinatorLayout paramCoordinatorLayout, T paramT, int paramInt1, int paramInt2, int paramInt3)
    {
      int i = c();
      if ((paramInt2 != 0) && (i >= paramInt2) && (i <= paramInt3))
      {
        paramInt2 = a.b.g.c.a.a(paramInt1, paramInt2, paramInt3);
        if (i != paramInt2)
        {
          if (paramT.a()) {
            paramInt1 = c(paramT, paramInt2);
          } else {
            paramInt1 = paramInt2;
          }
          boolean bool = a(paramInt1);
          k = (paramInt2 - paramInt1);
          if ((!bool) && (paramT.a())) {
            paramCoordinatorLayout.a(paramT);
          }
          paramT.a(b());
          if (paramInt2 < i) {
            paramInt1 = -1;
          } else {
            paramInt1 = 1;
          }
          a(paramCoordinatorLayout, paramT, paramInt2, paramInt1, false);
          return i - paramInt2;
        }
      }
      else
      {
        k = 0;
      }
      return 0;
    }
    
    void a(CoordinatorLayout paramCoordinatorLayout, T paramT)
    {
      d(paramCoordinatorLayout, paramT);
    }
    
    public void a(CoordinatorLayout paramCoordinatorLayout, T paramT, Parcelable paramParcelable)
    {
      if ((paramParcelable instanceof c))
      {
        paramParcelable = (c)paramParcelable;
        super.a(paramCoordinatorLayout, paramT, paramParcelable.a());
        n = e;
        p = f;
        o = g;
        return;
      }
      super.a(paramCoordinatorLayout, paramT, paramParcelable);
      n = -1;
    }
    
    public void a(CoordinatorLayout paramCoordinatorLayout, T paramT, View paramView, int paramInt)
    {
      if ((l == 0) || (paramInt == 1)) {
        d(paramCoordinatorLayout, paramT);
      }
      q = new WeakReference(paramView);
    }
    
    public void a(CoordinatorLayout paramCoordinatorLayout, T paramT, View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
    {
      if (paramInt4 < 0)
      {
        a(paramCoordinatorLayout, paramT, paramInt4, -paramT.getDownNestedScrollRange(), 0);
        a(paramInt4, paramT, paramView, paramInt5);
      }
      if (paramT.c())
      {
        boolean bool;
        if (paramView.getScrollY() > 0) {
          bool = true;
        } else {
          bool = false;
        }
        paramT.a(bool);
      }
    }
    
    public void a(CoordinatorLayout paramCoordinatorLayout, T paramT, View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3)
    {
      if (paramInt2 != 0)
      {
        int i;
        if (paramInt2 < 0)
        {
          i = -paramT.getTotalScrollRange();
          int j = paramT.getDownNestedPreScrollRange();
          paramInt1 = i;
          i = j + i;
        }
        else
        {
          paramInt1 = -paramT.getUpNestedPreScrollRange();
          i = 0;
        }
        if (paramInt1 != i)
        {
          paramArrayOfInt[1] = a(paramCoordinatorLayout, paramT, paramInt2, paramInt1, i);
          a(paramInt2, paramT, paramView, paramInt3);
          return;
        }
        return;
      }
    }
    
    boolean a(T paramT)
    {
      b localB = r;
      if (localB != null) {
        return localB.a(paramT);
      }
      paramT = q;
      if (paramT != null)
      {
        paramT = (View)paramT.get();
        return (paramT != null) && (paramT.isShown()) && (!paramT.canScrollVertically(-1));
      }
      return true;
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, T paramT, int paramInt)
    {
      boolean bool = super.a(paramCoordinatorLayout, paramT, paramInt);
      int i = paramT.getPendingAction();
      paramInt = n;
      if ((paramInt >= 0) && ((i & 0x8) == 0))
      {
        View localView = paramT.getChildAt(paramInt);
        paramInt = -localView.getBottom();
        if (o) {
          paramInt += u.l(localView) + paramT.getTopInset();
        } else {
          paramInt += Math.round(localView.getHeight() * p);
        }
        c(paramCoordinatorLayout, paramT, paramInt);
      }
      else if (i != 0)
      {
        if ((i & 0x4) != 0) {
          paramInt = 1;
        } else {
          paramInt = 0;
        }
        if ((i & 0x2) != 0)
        {
          i = -paramT.getUpNestedPreScrollRange();
          if (paramInt != 0) {
            a(paramCoordinatorLayout, paramT, i, 0.0F);
          } else {
            c(paramCoordinatorLayout, paramT, i);
          }
        }
        else if ((i & 0x1) != 0)
        {
          if (paramInt != 0) {
            a(paramCoordinatorLayout, paramT, 0, 0.0F);
          } else {
            c(paramCoordinatorLayout, paramT, 0);
          }
        }
      }
      paramT.d();
      n = -1;
      a(a.b.g.c.a.a(b(), -paramT.getTotalScrollRange(), 0));
      a(paramCoordinatorLayout, paramT, b(), 0, true);
      paramT.a(b());
      return bool;
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, T paramT, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      if (getLayoutParamsheight == -2)
      {
        paramCoordinatorLayout.a(paramT, paramInt1, paramInt2, View.MeasureSpec.makeMeasureSpec(0, 0), paramInt4);
        return true;
      }
      return super.a(paramCoordinatorLayout, paramT, paramInt1, paramInt2, paramInt3, paramInt4);
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, T paramT, View paramView1, View paramView2, int paramInt1, int paramInt2)
    {
      boolean bool;
      if (((paramInt1 & 0x2) != 0) && ((paramT.c()) || (a(paramCoordinatorLayout, paramT, paramView1)))) {
        bool = true;
      } else {
        bool = false;
      }
      if (bool)
      {
        paramCoordinatorLayout = m;
        if (paramCoordinatorLayout != null) {
          paramCoordinatorLayout.cancel();
        }
      }
      q = null;
      l = paramInt2;
      return bool;
    }
    
    int b(T paramT)
    {
      return -paramT.getDownNestedScrollRange();
    }
    
    public Parcelable b(CoordinatorLayout paramCoordinatorLayout, T paramT)
    {
      Object localObject = super.d(paramCoordinatorLayout, paramT);
      int j = b();
      int i = 0;
      int i1 = paramT.getChildCount();
      while (i < i1)
      {
        paramCoordinatorLayout = paramT.getChildAt(i);
        int i2 = paramCoordinatorLayout.getBottom() + j;
        if ((paramCoordinatorLayout.getTop() + j <= 0) && (i2 >= 0))
        {
          localObject = new c((Parcelable)localObject);
          e = i;
          boolean bool;
          if (i2 == u.l(paramCoordinatorLayout) + paramT.getTopInset()) {
            bool = true;
          } else {
            bool = false;
          }
          g = bool;
          f = (i2 / paramCoordinatorLayout.getHeight());
          return localObject;
        }
        i += 1;
      }
      return localObject;
    }
    
    int c()
    {
      return b() + k;
    }
    
    int c(T paramT)
    {
      return paramT.getTotalScrollRange();
    }
    
    class a
      implements ValueAnimator.AnimatorUpdateListener
    {
      a(CoordinatorLayout paramCoordinatorLayout, AppBarLayout paramAppBarLayout) {}
      
      public void onAnimationUpdate(ValueAnimator paramValueAnimator)
      {
        c(paramCoordinatorLayout, paramT, ((Integer)paramValueAnimator.getAnimatedValue()).intValue());
      }
    }
    
    public static abstract class b<T extends AppBarLayout>
    {
      public abstract boolean a(T paramT);
    }
    
    protected static class c
      extends android.support.v4.view.a
    {
      public static final Parcelable.Creator<c> CREATOR = new a();
      int e;
      float f;
      boolean g;
      
      public c(Parcel paramParcel, ClassLoader paramClassLoader)
      {
        super(paramClassLoader);
        e = paramParcel.readInt();
        f = paramParcel.readFloat();
        boolean bool;
        if (paramParcel.readByte() != 0) {
          bool = true;
        } else {
          bool = false;
        }
        g = bool;
      }
      
      public c(Parcelable paramParcelable)
      {
        super();
      }
      
      public void writeToParcel(Parcel paramParcel, int paramInt)
      {
        super.writeToParcel(paramParcel, paramInt);
        paramParcel.writeInt(e);
        paramParcel.writeFloat(f);
        paramParcel.writeByte((byte)g);
      }
      
      static final class a
        implements Parcelable.ClassLoaderCreator<AppBarLayout.BaseBehavior.c>
      {
        a() {}
        
        public AppBarLayout.BaseBehavior.c createFromParcel(Parcel paramParcel)
        {
          return new AppBarLayout.BaseBehavior.c(paramParcel, null);
        }
        
        public AppBarLayout.BaseBehavior.c createFromParcel(Parcel paramParcel, ClassLoader paramClassLoader)
        {
          return new AppBarLayout.BaseBehavior.c(paramParcel, paramClassLoader);
        }
        
        public AppBarLayout.BaseBehavior.c[] newArray(int paramInt)
        {
          return new AppBarLayout.BaseBehavior.c[paramInt];
        }
      }
    }
  }
  
  public static class Behavior
    extends AppBarLayout.BaseBehavior<AppBarLayout>
  {
    public Behavior() {}
    
    public Behavior(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
    }
  }
  
  public static class ScrollingViewBehavior
    extends o
  {
    public ScrollingViewBehavior() {}
    
    public ScrollingViewBehavior(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
      paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, a.b.c.k.ScrollingViewBehavior_Layout);
      b(paramContext.getDimensionPixelSize(a.b.c.k.ScrollingViewBehavior_Layout_behavior_overlapTop, 0));
      paramContext.recycle();
    }
    
    private static int a(AppBarLayout paramAppBarLayout)
    {
      paramAppBarLayout = ((CoordinatorLayout.f)paramAppBarLayout.getLayoutParams()).d();
      if ((paramAppBarLayout instanceof AppBarLayout.BaseBehavior)) {
        return ((AppBarLayout.BaseBehavior)paramAppBarLayout).c();
      }
      return 0;
    }
    
    private void a(View paramView1, View paramView2)
    {
      Object localObject = ((CoordinatorLayout.f)paramView2.getLayoutParams()).d();
      if ((localObject instanceof AppBarLayout.BaseBehavior))
      {
        localObject = (AppBarLayout.BaseBehavior)localObject;
        u.d(paramView1, paramView2.getBottom() - paramView1.getTop() + AppBarLayout.BaseBehavior.a((AppBarLayout.BaseBehavior)localObject) + d() - a(paramView2));
      }
    }
    
    private void b(View paramView1, View paramView2)
    {
      if ((paramView2 instanceof AppBarLayout))
      {
        paramView2 = (AppBarLayout)paramView2;
        if (paramView2.c())
        {
          boolean bool;
          if (paramView1.getScrollY() > 0) {
            bool = true;
          } else {
            bool = false;
          }
          paramView2.a(bool);
        }
      }
    }
    
    AppBarLayout a(List<View> paramList)
    {
      int i = 0;
      int j = paramList.size();
      while (i < j)
      {
        View localView = (View)paramList.get(i);
        if ((localView instanceof AppBarLayout)) {
          return (AppBarLayout)localView;
        }
        i += 1;
      }
      return null;
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, View paramView, Rect paramRect, boolean paramBoolean)
    {
      AppBarLayout localAppBarLayout = a(paramCoordinatorLayout.b(paramView));
      if (localAppBarLayout != null)
      {
        paramRect.offset(paramView.getLeft(), paramView.getTop());
        paramView = d;
        paramView.set(0, 0, paramCoordinatorLayout.getWidth(), paramCoordinatorLayout.getHeight());
        if (!paramView.contains(paramRect))
        {
          localAppBarLayout.a(false, paramBoolean ^ true);
          return true;
        }
      }
      return false;
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, View paramView1, View paramView2)
    {
      return paramView2 instanceof AppBarLayout;
    }
    
    float b(View paramView)
    {
      if ((paramView instanceof AppBarLayout))
      {
        paramView = (AppBarLayout)paramView;
        int j = paramView.getTotalScrollRange();
        int k = paramView.getDownNestedPreScrollRange();
        int i = a(paramView);
        if ((k != 0) && (j + i <= k)) {
          return 0.0F;
        }
        j -= k;
        if (j != 0) {
          return i / j + 1.0F;
        }
      }
      return 0.0F;
    }
    
    public boolean b(CoordinatorLayout paramCoordinatorLayout, View paramView1, View paramView2)
    {
      a(paramView1, paramView2);
      b(paramView1, paramView2);
      return false;
    }
    
    int c(View paramView)
    {
      if ((paramView instanceof AppBarLayout)) {
        return ((AppBarLayout)paramView).getTotalScrollRange();
      }
      return super.c(paramView);
    }
  }
  
  class a
    implements p
  {
    a() {}
    
    public c0 a(View paramView, c0 paramC0)
    {
      return a(paramC0);
    }
  }
  
  public static abstract interface b<T extends AppBarLayout>
  {
    public abstract void a(T paramT, int paramInt);
  }
  
  public static class c
    extends LinearLayout.LayoutParams
  {
    int a = 1;
    Interpolator b;
    
    public c(int paramInt1, int paramInt2)
    {
      super(paramInt2);
    }
    
    public c(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
      paramAttributeSet = paramContext.obtainStyledAttributes(paramAttributeSet, a.b.c.k.AppBarLayout_Layout);
      a = paramAttributeSet.getInt(a.b.c.k.AppBarLayout_Layout_layout_scrollFlags, 0);
      if (paramAttributeSet.hasValue(a.b.c.k.AppBarLayout_Layout_layout_scrollInterpolator)) {
        b = AnimationUtils.loadInterpolator(paramContext, paramAttributeSet.getResourceId(a.b.c.k.AppBarLayout_Layout_layout_scrollInterpolator, 0));
      }
      paramAttributeSet.recycle();
    }
    
    public c(ViewGroup.LayoutParams paramLayoutParams)
    {
      super();
    }
    
    public c(ViewGroup.MarginLayoutParams paramMarginLayoutParams)
    {
      super();
    }
    
    public c(LinearLayout.LayoutParams paramLayoutParams)
    {
      super();
    }
    
    public int a()
    {
      return a;
    }
    
    public Interpolator b()
    {
      return b;
    }
    
    boolean c()
    {
      int i = a;
      return ((i & 0x1) == 1) && ((i & 0xA) != 0);
    }
  }
}
