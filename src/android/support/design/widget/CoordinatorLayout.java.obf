package android.support.design.widget;

import a.b.b.b;
import a.b.b.c;
import a.b.g.g.i;
import a.b.g.g.j;
import a.b.g.g.l;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.Region.Op;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.ClassLoaderCreator;
import android.os.Parcelable.Creator;
import android.os.SystemClock;
import android.support.v4.view.c0;
import android.support.v4.view.d;
import android.support.v4.view.m;
import android.support.v4.view.o;
import android.support.v4.view.p;
import android.support.v4.view.u;
import android.support.v4.widget.f;
import android.support.v4.widget.t;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.SparseArray;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.BaseSavedState;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.ViewGroup.OnHierarchyChangeListener;
import android.view.ViewParent;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnPreDrawListener;
import java.lang.annotation.Annotation;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CoordinatorLayout
  extends ViewGroup
  implements m
{
  static final String v;
  static final Class<?>[] w = { Context.class, AttributeSet.class };
  static final ThreadLocal<Map<String, Constructor<c>>> x = new ThreadLocal();
  static final Comparator<View> y;
  private static final j<Rect> z = new l(12);
  private final List<View> c = new ArrayList();
  private final f<View> d = new f();
  private final List<View> e = new ArrayList();
  private final List<View> f = new ArrayList();
  private final int[] g = new int[2];
  private Paint h;
  private boolean i;
  private boolean j;
  private int[] k;
  private View l;
  private View m;
  private g n;
  private boolean o;
  private c0 p;
  private boolean q;
  private Drawable r;
  ViewGroup.OnHierarchyChangeListener s;
  private p t;
  private final o u = new o(this);
  
  static
  {
    Object localObject = CoordinatorLayout.class.getPackage();
    if (localObject != null) {
      localObject = ((Package)localObject).getName();
    } else {
      localObject = null;
    }
    v = (String)localObject;
    if (Build.VERSION.SDK_INT >= 21) {
      y = new i();
    } else {
      y = null;
    }
  }
  
  public CoordinatorLayout(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public CoordinatorLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, a.b.b.a.coordinatorLayoutStyle);
  }
  
  public CoordinatorLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    if (paramInt == 0) {
      paramAttributeSet = paramContext.obtainStyledAttributes(paramAttributeSet, c.CoordinatorLayout, 0, b.Widget_Support_CoordinatorLayout);
    } else {
      paramAttributeSet = paramContext.obtainStyledAttributes(paramAttributeSet, c.CoordinatorLayout, paramInt, 0);
    }
    paramInt = paramAttributeSet.getResourceId(c.CoordinatorLayout_keylines, 0);
    if (paramInt != 0)
    {
      paramContext = paramContext.getResources();
      k = paramContext.getIntArray(paramInt);
      float f1 = getDisplayMetricsdensity;
      int i1 = k.length;
      paramInt = 0;
      while (paramInt < i1)
      {
        paramContext = k;
        paramContext[paramInt] = ((int)(paramContext[paramInt] * f1));
        paramInt += 1;
      }
    }
    r = paramAttributeSet.getDrawable(c.CoordinatorLayout_statusBarBackground);
    paramAttributeSet.recycle();
    f();
    super.setOnHierarchyChangeListener(new e());
  }
  
  private static int a(int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramInt1 < paramInt2) {
      return paramInt2;
    }
    if (paramInt1 > paramInt3) {
      return paramInt3;
    }
    return paramInt1;
  }
  
  static c a(Context paramContext, AttributeSet paramAttributeSet, String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return null;
    }
    Object localObject1;
    if (paramString.startsWith("."))
    {
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(paramContext.getPackageName());
      ((StringBuilder)localObject1).append(paramString);
      paramString = ((StringBuilder)localObject1).toString();
    }
    else if ((paramString.indexOf('.') < 0) && (!TextUtils.isEmpty(v)))
    {
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(v);
      ((StringBuilder)localObject1).append('.');
      ((StringBuilder)localObject1).append(paramString);
      paramString = ((StringBuilder)localObject1).toString();
    }
    try
    {
      Object localObject2 = (Map)x.get();
      localObject1 = localObject2;
      if (localObject2 == null)
      {
        localObject1 = new HashMap();
        x.set(localObject1);
      }
      Constructor localConstructor = (Constructor)((Map)localObject1).get(paramString);
      localObject2 = localConstructor;
      if (localConstructor == null)
      {
        localObject2 = paramContext.getClassLoader().loadClass(paramString).getConstructor(w);
        ((Constructor)localObject2).setAccessible(true);
        ((Map)localObject1).put(paramString, localObject2);
      }
      paramContext = (c)((Constructor)localObject2).newInstance(new Object[] { paramContext, paramAttributeSet });
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramAttributeSet = new StringBuilder();
      paramAttributeSet.append("Could not inflate Behavior subclass ");
      paramAttributeSet.append(paramString);
      throw new RuntimeException(paramAttributeSet.toString(), paramContext);
    }
  }
  
  private static void a(Rect paramRect)
  {
    paramRect.setEmpty();
    z.a(paramRect);
  }
  
  private void a(f paramF, Rect paramRect, int paramInt1, int paramInt2)
  {
    int i2 = getWidth();
    int i1 = getHeight();
    i2 = Math.max(getPaddingLeft() + leftMargin, Math.min(left, i2 - getPaddingRight() - paramInt1 - rightMargin));
    i1 = Math.max(getPaddingTop() + topMargin, Math.min(top, i1 - getPaddingBottom() - paramInt2 - bottomMargin));
    paramRect.set(i2, i1, i2 + paramInt1, i1 + paramInt2);
  }
  
  private void a(View paramView, int paramInt1, Rect paramRect1, Rect paramRect2, f paramF, int paramInt2, int paramInt3)
  {
    int i1 = d.a(c(c), paramInt1);
    paramInt1 = d.a(d(d), paramInt1);
    int i3 = i1 & 0x7;
    int i2 = i1 & 0x70;
    int i4 = paramInt1 & 0x7;
    i1 = paramInt1 & 0x70;
    if (i4 != 1)
    {
      if (i4 != 5) {
        paramInt1 = left;
      } else {
        paramInt1 = right;
      }
    }
    else {
      paramInt1 = left + paramRect1.width() / 2;
    }
    if (i1 != 16)
    {
      if (i1 != 80) {
        i1 = top;
      } else {
        i1 = bottom;
      }
    }
    else {
      i1 = top + paramRect1.height() / 2;
    }
    if (i3 != 1)
    {
      if (i3 != 5) {
        paramInt1 -= paramInt2;
      }
    }
    else {
      paramInt1 -= paramInt2 / 2;
    }
    if (i2 != 16)
    {
      if (i2 != 80) {
        i1 -= paramInt3;
      }
    }
    else {
      i1 -= paramInt3 / 2;
    }
    paramRect2.set(paramInt1, i1, paramInt1 + paramInt2, i1 + paramInt3);
  }
  
  private void a(View paramView, Rect paramRect, int paramInt)
  {
    if (!u.y(paramView)) {
      return;
    }
    if (paramView.getWidth() > 0)
    {
      if (paramView.getHeight() <= 0) {
        return;
      }
      f localF = (f)paramView.getLayoutParams();
      c localC = localF.d();
      Rect localRect1 = d();
      Rect localRect2 = d();
      localRect2.set(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom());
      if ((localC != null) && (localC.a(this, paramView, localRect1)))
      {
        if (!localRect2.contains(localRect1))
        {
          paramView = new StringBuilder();
          paramView.append("Rect should be within the child's bounds. Rect:");
          paramView.append(localRect1.toShortString());
          paramView.append(" | Bounds:");
          paramView.append(localRect2.toShortString());
          throw new IllegalArgumentException(paramView.toString());
        }
      }
      else {
        localRect1.set(localRect2);
      }
      a(localRect2);
      if (localRect1.isEmpty())
      {
        a(localRect1);
        return;
      }
      int i2 = d.a(h, paramInt);
      int i1 = 0;
      paramInt = i1;
      int i3;
      int i4;
      if ((i2 & 0x30) == 48)
      {
        i3 = top - topMargin - j;
        i4 = top;
        paramInt = i1;
        if (i3 < i4)
        {
          f(paramView, i4 - i3);
          paramInt = 1;
        }
      }
      i1 = paramInt;
      if ((i2 & 0x50) == 80)
      {
        i3 = getHeight() - bottom - bottomMargin + j;
        i4 = bottom;
        i1 = paramInt;
        if (i3 < i4)
        {
          f(paramView, i3 - i4);
          i1 = 1;
        }
      }
      if (i1 == 0) {
        f(paramView, 0);
      }
      i1 = 0;
      paramInt = i1;
      if ((i2 & 0x3) == 3)
      {
        i3 = left - leftMargin - i;
        i4 = left;
        paramInt = i1;
        if (i3 < i4)
        {
          e(paramView, i4 - i3);
          paramInt = 1;
        }
      }
      i1 = paramInt;
      if ((i2 & 0x5) == 5)
      {
        i2 = getWidth() - right - rightMargin + i;
        i3 = right;
        i1 = paramInt;
        if (i2 < i3)
        {
          e(paramView, i2 - i3);
          i1 = 1;
        }
      }
      if (i1 == 0) {
        e(paramView, 0);
      }
      a(localRect1);
      return;
    }
  }
  
  private void a(View paramView1, View paramView2, int paramInt)
  {
    Rect localRect1 = d();
    Rect localRect2 = d();
    try
    {
      a(paramView2, localRect1);
      a(paramView1, paramInt, localRect1, localRect2);
      paramView1.layout(left, top, right, bottom);
      return;
    }
    finally
    {
      a(localRect1);
      a(localRect2);
    }
  }
  
  private void a(List<View> paramList)
  {
    paramList.clear();
    boolean bool = isChildrenDrawingOrderEnabled();
    int i3 = getChildCount();
    int i1 = i3 - 1;
    while (i1 >= 0)
    {
      int i2;
      if (bool) {
        i2 = getChildDrawingOrder(i3, i1);
      } else {
        i2 = i1;
      }
      paramList.add(getChildAt(i2));
      i1 -= 1;
    }
    Comparator localComparator = y;
    if (localComparator != null) {
      Collections.sort(paramList, localComparator);
    }
  }
  
  private void a(boolean paramBoolean)
  {
    int i2 = getChildCount();
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = getChildAt(i1);
      c localC = ((f)localView.getLayoutParams()).d();
      if (localC != null)
      {
        long l1 = SystemClock.uptimeMillis();
        MotionEvent localMotionEvent = MotionEvent.obtain(l1, l1, 3, 0.0F, 0.0F, 0);
        if (paramBoolean) {
          localC.a(this, localView, localMotionEvent);
        } else {
          localC.b(this, localView, localMotionEvent);
        }
        localMotionEvent.recycle();
      }
      i1 += 1;
    }
    i1 = 0;
    while (i1 < i2)
    {
      ((f)getChildAt(i1).getLayoutParams()).h();
      i1 += 1;
    }
    l = null;
    i = false;
  }
  
  private boolean a(MotionEvent paramMotionEvent, int paramInt)
  {
    boolean bool1 = false;
    int i1 = 0;
    Object localObject1 = null;
    int i4 = paramMotionEvent.getActionMasked();
    List localList = e;
    a(localList);
    int i5 = localList.size();
    int i2 = 0;
    boolean bool2;
    for (;;)
    {
      bool2 = bool1;
      if (i2 >= i5) {
        break;
      }
      View localView = (View)localList.get(i2);
      Object localObject2 = (f)localView.getLayoutParams();
      c localC = ((f)localObject2).d();
      int i3 = 1;
      boolean bool3;
      if (((bool1) || (i1 != 0)) && (i4 != 0))
      {
        bool3 = bool1;
        i3 = i1;
        localObject2 = localObject1;
        if (localC != null)
        {
          localObject2 = localObject1;
          if (localObject1 == null)
          {
            long l1 = SystemClock.uptimeMillis();
            localObject2 = MotionEvent.obtain(l1, l1, 3, 0.0F, 0.0F, 0);
          }
          if (paramInt != 0)
          {
            if (paramInt == 1) {
              localC.b(this, localView, (MotionEvent)localObject2);
            }
          }
          else {
            localC.a(this, localView, (MotionEvent)localObject2);
          }
          bool3 = bool1;
          i3 = i1;
        }
      }
      else
      {
        bool2 = bool1;
        if (!bool1)
        {
          bool2 = bool1;
          if (localC != null)
          {
            if (paramInt != 0)
            {
              if (paramInt == 1) {
                bool1 = localC.b(this, localView, paramMotionEvent);
              }
            }
            else {
              bool1 = localC.a(this, localView, paramMotionEvent);
            }
            bool2 = bool1;
            if (bool1)
            {
              l = localView;
              bool2 = bool1;
            }
          }
        }
        bool3 = ((f)localObject2).b();
        bool1 = ((f)localObject2).b(this, localView);
        if ((bool1) && (!bool3)) {
          i1 = i3;
        } else {
          i1 = 0;
        }
        bool3 = bool2;
        i3 = i1;
        localObject2 = localObject1;
        if (bool1)
        {
          bool3 = bool2;
          i3 = i1;
          localObject2 = localObject1;
          if (i1 == 0) {
            break;
          }
        }
      }
      i2 += 1;
      bool1 = bool3;
      i1 = i3;
      localObject1 = localObject2;
    }
    localList.clear();
    return bool2;
  }
  
  private int b(int paramInt)
  {
    Object localObject = k;
    if (localObject == null)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("No keylines defined for ");
      ((StringBuilder)localObject).append(this);
      ((StringBuilder)localObject).append(" - attempted index lookup ");
      ((StringBuilder)localObject).append(paramInt);
      Log.e("CoordinatorLayout", ((StringBuilder)localObject).toString());
      return 0;
    }
    if ((paramInt >= 0) && (paramInt < localObject.length)) {
      return localObject[paramInt];
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Keyline index ");
    ((StringBuilder)localObject).append(paramInt);
    ((StringBuilder)localObject).append(" out of range for ");
    ((StringBuilder)localObject).append(this);
    Log.e("CoordinatorLayout", ((StringBuilder)localObject).toString());
    return 0;
  }
  
  private c0 b(c0 paramC0)
  {
    if (paramC0.g()) {
      return paramC0;
    }
    int i1 = 0;
    int i2 = getChildCount();
    for (c0 localC0 = paramC0; i1 < i2; localC0 = paramC0)
    {
      View localView = getChildAt(i1);
      paramC0 = localC0;
      if (u.h(localView))
      {
        c localC = ((f)localView.getLayoutParams()).d();
        paramC0 = localC0;
        if (localC != null)
        {
          localC0 = localC.a(this, localView, localC0);
          paramC0 = localC0;
          if (localC0.g()) {
            return localC0;
          }
        }
      }
      i1 += 1;
    }
    return localC0;
  }
  
  private void b(View paramView, int paramInt1, int paramInt2)
  {
    f localF = (f)paramView.getLayoutParams();
    int i1 = d.a(e(c), paramInt2);
    int i6 = i1 & 0x7;
    int i5 = i1 & 0x70;
    int i4 = getWidth();
    int i3 = getHeight();
    i1 = paramView.getMeasuredWidth();
    int i2 = paramView.getMeasuredHeight();
    if (paramInt2 == 1) {
      paramInt1 = i4 - paramInt1;
    }
    paramInt1 = b(paramInt1) - i1;
    paramInt2 = 0;
    if (i6 != 1)
    {
      if (i6 == 5) {
        paramInt1 += i1;
      }
    }
    else {
      paramInt1 += i1 / 2;
    }
    if (i5 != 16)
    {
      if (i5 == 80) {
        paramInt2 = 0 + i2;
      }
    }
    else {
      paramInt2 = 0 + i2 / 2;
    }
    paramInt1 = Math.max(getPaddingLeft() + leftMargin, Math.min(paramInt1, i4 - getPaddingRight() - i1 - rightMargin));
    paramInt2 = Math.max(getPaddingTop() + topMargin, Math.min(paramInt2, i3 - getPaddingBottom() - i2 - bottomMargin));
    paramView.layout(paramInt1, paramInt2, paramInt1 + i1, paramInt2 + i2);
  }
  
  private static int c(int paramInt)
  {
    if (paramInt == 0) {
      return 17;
    }
    return paramInt;
  }
  
  private static int d(int paramInt)
  {
    int i1 = paramInt;
    if ((paramInt & 0x7) == 0) {
      i1 = paramInt | 0x800003;
    }
    paramInt = i1;
    if ((i1 & 0x70) == 0) {
      paramInt = i1 | 0x30;
    }
    return paramInt;
  }
  
  private static Rect d()
  {
    Rect localRect2 = (Rect)z.a();
    Rect localRect1 = localRect2;
    if (localRect2 == null) {
      localRect1 = new Rect();
    }
    return localRect1;
  }
  
  private void d(View paramView, int paramInt)
  {
    f localF = (f)paramView.getLayoutParams();
    Rect localRect1 = d();
    localRect1.set(getPaddingLeft() + leftMargin, getPaddingTop() + topMargin, getWidth() - getPaddingRight() - rightMargin, getHeight() - getPaddingBottom() - bottomMargin);
    if ((p != null) && (u.h(this)) && (!u.h(paramView)))
    {
      left += p.c();
      top += p.e();
      right -= p.d();
      bottom -= p.b();
    }
    Rect localRect2 = d();
    d.a(d(c), paramView.getMeasuredWidth(), paramView.getMeasuredHeight(), localRect1, localRect2, paramInt);
    paramView.layout(left, top, right, bottom);
    a(localRect1);
    a(localRect2);
  }
  
  private static int e(int paramInt)
  {
    if (paramInt == 0) {
      return 8388661;
    }
    return paramInt;
  }
  
  private void e()
  {
    c.clear();
    d.a();
    int i1 = 0;
    int i3 = getChildCount();
    while (i1 < i3)
    {
      View localView1 = getChildAt(i1);
      f localF = d(localView1);
      localF.a(this, localView1);
      d.a(localView1);
      int i2 = 0;
      while (i2 < i3)
      {
        if (i2 != i1)
        {
          View localView2 = getChildAt(i2);
          if (localF.a(this, localView1, localView2))
          {
            if (!d.b(localView2)) {
              d.a(localView2);
            }
            d.a(localView2, localView1);
          }
        }
        i2 += 1;
      }
      i1 += 1;
    }
    c.addAll(d.b());
    Collections.reverse(c);
  }
  
  private void e(View paramView, int paramInt)
  {
    f localF = (f)paramView.getLayoutParams();
    int i1 = i;
    if (i1 != paramInt)
    {
      u.c(paramView, paramInt - i1);
      i = paramInt;
    }
  }
  
  private boolean e(View paramView)
  {
    return d.e(paramView);
  }
  
  private void f()
  {
    if (Build.VERSION.SDK_INT < 21) {
      return;
    }
    if (u.h(this))
    {
      if (t == null) {
        t = new a();
      }
      u.a(this, t);
      setSystemUiVisibility(1280);
      return;
    }
    u.a(this, null);
  }
  
  private void f(View paramView, int paramInt)
  {
    f localF = (f)paramView.getLayoutParams();
    int i1 = j;
    if (i1 != paramInt)
    {
      u.d(paramView, paramInt - i1);
      j = paramInt;
    }
  }
  
  final c0 a(c0 paramC0)
  {
    c0 localC0 = paramC0;
    if (!i.a(p, paramC0))
    {
      p = paramC0;
      boolean bool2 = true;
      boolean bool1;
      if ((paramC0 != null) && (paramC0.e() > 0)) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      q = bool1;
      if ((!q) && (getBackground() == null)) {
        bool1 = bool2;
      } else {
        bool1 = false;
      }
      setWillNotDraw(bool1);
      localC0 = b(paramC0);
      requestLayout();
    }
    return localC0;
  }
  
  void a()
  {
    if (j)
    {
      if (n == null) {
        n = new g();
      }
      getViewTreeObserver().addOnPreDrawListener(n);
    }
    o = true;
  }
  
  final void a(int paramInt)
  {
    int i3 = u.k(this);
    int i4 = c.size();
    Rect localRect1 = d();
    Rect localRect2 = d();
    Rect localRect3 = d();
    int i1 = 0;
    while (i1 < i4)
    {
      View localView = (View)c.get(i1);
      Object localObject1 = (f)localView.getLayoutParams();
      if ((paramInt != 0) || (localView.getVisibility() != 8))
      {
        int i2 = 0;
        Object localObject2;
        while (i2 < i1)
        {
          localObject2 = (View)c.get(i2);
          if (l == localObject2) {
            b(localView, i3);
          }
          i2 += 1;
        }
        a(localView, true, localRect2);
        if ((g != 0) && (!localRect2.isEmpty()))
        {
          i2 = d.a(g, i3);
          int i5 = i2 & 0x70;
          if (i5 != 48)
          {
            if (i5 == 80) {
              bottom = Math.max(bottom, getHeight() - top);
            }
          }
          else {
            top = Math.max(top, bottom);
          }
          i2 &= 0x7;
          if (i2 != 3)
          {
            if (i2 == 5) {
              right = Math.max(right, getWidth() - left);
            }
          }
          else {
            left = Math.max(left, right);
          }
        }
        if ((h != 0) && (localView.getVisibility() == 0)) {
          a(localView, localRect1, i3);
        }
        if (paramInt != 2)
        {
          b(localView, localRect3);
          if (!localRect3.equals(localRect2)) {
            c(localView, localRect2);
          }
        }
        else
        {
          i2 = i1 + 1;
          while (i2 < i4)
          {
            localObject1 = (View)c.get(i2);
            localObject2 = (f)((View)localObject1).getLayoutParams();
            c localC = ((f)localObject2).d();
            if ((localC != null) && (localC.a(this, (View)localObject1, localView))) {
              if ((paramInt == 0) && (((f)localObject2).e()))
              {
                ((f)localObject2).g();
              }
              else
              {
                boolean bool;
                if (paramInt != 2)
                {
                  bool = localC.b(this, (View)localObject1, localView);
                }
                else
                {
                  localC.c(this, (View)localObject1, localView);
                  bool = true;
                }
                if (paramInt == 1) {
                  ((f)localObject2).a(bool);
                }
              }
            }
            i2 += 1;
          }
        }
      }
      i1 += 1;
    }
    a(localRect1);
    a(localRect2);
    a(localRect3);
  }
  
  public void a(View paramView)
  {
    List localList = d.c(paramView);
    if ((localList != null) && (!localList.isEmpty()))
    {
      int i1 = 0;
      while (i1 < localList.size())
      {
        View localView = (View)localList.get(i1);
        c localC = ((f)localView.getLayoutParams()).d();
        if (localC != null) {
          localC.b(this, localView, paramView);
        }
        i1 += 1;
      }
    }
  }
  
  public void a(View paramView, int paramInt)
  {
    u.a(paramView, paramInt);
    int i2 = getChildCount();
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = getChildAt(i1);
      f localF = (f)localView.getLayoutParams();
      if (localF.a(paramInt))
      {
        c localC = localF.d();
        if (localC != null) {
          localC.a(this, localView, paramView, paramInt);
        }
        localF.b(paramInt);
        localF.g();
      }
      i1 += 1;
    }
    m = null;
  }
  
  public void a(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    measureChildWithMargins(paramView, paramInt1, paramInt2, paramInt3, paramInt4);
  }
  
  public void a(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    int i3 = getChildCount();
    int i2 = 0;
    int i1 = 0;
    while (i1 < i3)
    {
      View localView = getChildAt(i1);
      if (localView.getVisibility() != 8)
      {
        Object localObject = (f)localView.getLayoutParams();
        if (((f)localObject).a(paramInt5))
        {
          localObject = ((f)localObject).d();
          if (localObject != null)
          {
            ((c)localObject).a(this, localView, paramView, paramInt1, paramInt2, paramInt3, paramInt4, paramInt5);
            i2 = 1;
          }
        }
      }
      i1 += 1;
    }
    if (i2 != 0) {
      a(1);
    }
  }
  
  public void a(View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3)
  {
    int i6 = getChildCount();
    int i4 = 0;
    int i2 = 0;
    int i1 = 0;
    int i3 = 0;
    while (i3 < i6)
    {
      Object localObject1 = getChildAt(i3);
      if (((View)localObject1).getVisibility() != 8)
      {
        Object localObject2 = (f)((View)localObject1).getLayoutParams();
        if (((f)localObject2).a(paramInt3))
        {
          localObject2 = ((f)localObject2).d();
          if (localObject2 != null)
          {
            int[] arrayOfInt = g;
            arrayOfInt[1] = 0;
            arrayOfInt[0] = 0;
            ((c)localObject2).a(this, (View)localObject1, paramView, paramInt1, paramInt2, arrayOfInt, paramInt3);
            localObject1 = g;
            if (paramInt1 > 0) {
              i1 = Math.max(i4, localObject1[0]);
            } else {
              i1 = Math.min(i4, localObject1[0]);
            }
            localObject1 = g;
            if (paramInt2 > 0) {
              i2 = Math.max(i2, localObject1[1]);
            } else {
              i2 = Math.min(i2, localObject1[1]);
            }
            int i5 = 1;
            i4 = i1;
            i1 = i5;
          }
        }
      }
      i3 += 1;
    }
    paramArrayOfInt[0] = i4;
    paramArrayOfInt[1] = i2;
    if (i1 != 0) {
      a(1);
    }
  }
  
  void a(View paramView, int paramInt, Rect paramRect1, Rect paramRect2)
  {
    f localF = (f)paramView.getLayoutParams();
    int i1 = paramView.getMeasuredWidth();
    int i2 = paramView.getMeasuredHeight();
    a(paramView, paramInt, paramRect1, paramRect2, localF, i1, i2);
    a(localF, paramRect2, i1, i2);
  }
  
  void a(View paramView, Rect paramRect)
  {
    t.a(this, paramView, paramRect);
  }
  
  public void a(View paramView1, View paramView2, int paramInt1, int paramInt2)
  {
    u.a(paramView1, paramView2, paramInt1, paramInt2);
    m = paramView2;
    int i2 = getChildCount();
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = getChildAt(i1);
      Object localObject = (f)localView.getLayoutParams();
      if (((f)localObject).a(paramInt2))
      {
        localObject = ((f)localObject).d();
        if (localObject != null) {
          ((c)localObject).a(this, localView, paramView1, paramView2, paramInt1, paramInt2);
        }
      }
      i1 += 1;
    }
  }
  
  void a(View paramView, boolean paramBoolean, Rect paramRect)
  {
    if ((!paramView.isLayoutRequested()) && (paramView.getVisibility() != 8))
    {
      if (paramBoolean)
      {
        a(paramView, paramRect);
        return;
      }
      paramRect.set(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom());
      return;
    }
    paramRect.setEmpty();
  }
  
  public boolean a(View paramView, int paramInt1, int paramInt2)
  {
    Rect localRect = d();
    a(paramView, localRect);
    try
    {
      boolean bool = localRect.contains(paramInt1, paramInt2);
      return bool;
    }
    finally
    {
      a(localRect);
    }
  }
  
  public List<View> b(View paramView)
  {
    paramView = d.d(paramView);
    f.clear();
    if (paramView != null) {
      f.addAll(paramView);
    }
    return f;
  }
  
  void b()
  {
    int i4 = 0;
    int i2 = getChildCount();
    int i1 = 0;
    int i3;
    for (;;)
    {
      i3 = i4;
      if (i1 >= i2) {
        break;
      }
      if (e(getChildAt(i1)))
      {
        i3 = 1;
        break;
      }
      i1 += 1;
    }
    if (i3 != o)
    {
      if (i3 != 0)
      {
        a();
        return;
      }
      c();
    }
  }
  
  void b(View paramView, int paramInt)
  {
    f localF = (f)paramView.getLayoutParams();
    if (k != null)
    {
      Rect localRect1 = d();
      Rect localRect2 = d();
      Rect localRect3 = d();
      a(k, localRect1);
      int i1 = 0;
      a(paramView, false, localRect2);
      int i2 = paramView.getMeasuredWidth();
      int i3 = paramView.getMeasuredHeight();
      a(paramView, paramInt, localRect1, localRect3, localF, i2, i3);
      if (left == left)
      {
        paramInt = i1;
        if (top == top) {}
      }
      else
      {
        paramInt = 1;
      }
      a(localF, localRect3, i2, i3);
      i1 = left - left;
      i2 = top - top;
      if (i1 != 0) {
        u.c(paramView, i1);
      }
      if (i2 != 0) {
        u.d(paramView, i2);
      }
      if (paramInt != 0)
      {
        c localC = localF.d();
        if (localC != null) {
          localC.b(this, paramView, k);
        }
      }
      a(localRect1);
      a(localRect2);
      a(localRect3);
    }
  }
  
  void b(View paramView, Rect paramRect)
  {
    paramRect.set(((f)paramView.getLayoutParams()).f());
  }
  
  public boolean b(View paramView1, View paramView2, int paramInt1, int paramInt2)
  {
    int i2 = getChildCount();
    boolean bool1 = false;
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = getChildAt(i1);
      if (localView.getVisibility() != 8)
      {
        f localF = (f)localView.getLayoutParams();
        c localC = localF.d();
        if (localC != null)
        {
          boolean bool2 = localC.b(this, localView, paramView1, paramView2, paramInt1, paramInt2);
          localF.a(paramInt2, bool2);
          bool1 |= bool2;
        }
        else
        {
          localF.a(paramInt2, false);
        }
      }
      i1 += 1;
    }
    return bool1;
  }
  
  public List<View> c(View paramView)
  {
    paramView = d.c(paramView);
    f.clear();
    if (paramView != null) {
      f.addAll(paramView);
    }
    return f;
  }
  
  void c()
  {
    if ((j) && (n != null)) {
      getViewTreeObserver().removeOnPreDrawListener(n);
    }
    o = false;
  }
  
  public void c(View paramView, int paramInt)
  {
    f localF = (f)paramView.getLayoutParams();
    if (!localF.a())
    {
      View localView = k;
      if (localView != null)
      {
        a(paramView, localView, paramInt);
        return;
      }
      int i1 = e;
      if (i1 >= 0)
      {
        b(paramView, i1, paramInt);
        return;
      }
      d(paramView, paramInt);
      return;
    }
    throw new IllegalStateException("An anchor may not be changed after CoordinatorLayout measurement begins before layout is complete.");
  }
  
  void c(View paramView, Rect paramRect)
  {
    ((f)paramView.getLayoutParams()).a(paramRect);
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return ((paramLayoutParams instanceof f)) && (super.checkLayoutParams(paramLayoutParams));
  }
  
  f d(View paramView)
  {
    f localF = (f)paramView.getLayoutParams();
    if (!b)
    {
      if ((paramView instanceof b))
      {
        paramView = ((b)paramView).getBehavior();
        if (paramView == null) {
          Log.e("CoordinatorLayout", "Attached behavior class is null");
        }
        localF.a(paramView);
        b = true;
        return localF;
      }
      Object localObject = paramView.getClass();
      paramView = null;
      View localView;
      for (;;)
      {
        localView = paramView;
        if (localObject == null) {
          break;
        }
        d localD = (d)((Class)localObject).getAnnotation(d.class);
        paramView = localD;
        localView = paramView;
        if (localD != null) {
          break;
        }
        localObject = ((Class)localObject).getSuperclass();
      }
      if (localView != null) {
        try
        {
          localF.a((c)localView.value().getDeclaredConstructor(new Class[0]).newInstance(new Object[0]));
        }
        catch (Exception paramView)
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("Default behavior class ");
          ((StringBuilder)localObject).append(localView.value().getName());
          ((StringBuilder)localObject).append(" could not be instantiated. Did you forget");
          ((StringBuilder)localObject).append(" a default constructor?");
          Log.e("CoordinatorLayout", ((StringBuilder)localObject).toString(), paramView);
        }
      }
      b = true;
    }
    return localF;
  }
  
  protected boolean drawChild(Canvas paramCanvas, View paramView, long paramLong)
  {
    f localF = (f)paramView.getLayoutParams();
    c localC = a;
    if (localC != null)
    {
      float f1 = localC.c(this, paramView);
      if (f1 > 0.0F)
      {
        if (h == null) {
          h = new Paint();
        }
        h.setColor(a.b(this, paramView));
        h.setAlpha(a(Math.round(255.0F * f1), 0, 255));
        int i1 = paramCanvas.save();
        if (paramView.isOpaque()) {
          paramCanvas.clipRect(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom(), Region.Op.DIFFERENCE);
        }
        paramCanvas.drawRect(getPaddingLeft(), getPaddingTop(), getWidth() - getPaddingRight(), getHeight() - getPaddingBottom(), h);
        paramCanvas.restoreToCount(i1);
      }
    }
    return super.drawChild(paramCanvas, paramView, paramLong);
  }
  
  protected void drawableStateChanged()
  {
    super.drawableStateChanged();
    int[] arrayOfInt = getDrawableState();
    boolean bool2 = false;
    Drawable localDrawable = r;
    boolean bool1 = bool2;
    if (localDrawable != null)
    {
      bool1 = bool2;
      if (localDrawable.isStateful()) {
        bool1 = false | localDrawable.setState(arrayOfInt);
      }
    }
    if (bool1) {
      invalidate();
    }
  }
  
  protected f generateDefaultLayoutParams()
  {
    return new f(-2, -2);
  }
  
  public f generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new f(getContext(), paramAttributeSet);
  }
  
  protected f generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    if ((paramLayoutParams instanceof f)) {
      return new f((f)paramLayoutParams);
    }
    if ((paramLayoutParams instanceof ViewGroup.MarginLayoutParams)) {
      return new f((ViewGroup.MarginLayoutParams)paramLayoutParams);
    }
    return new f(paramLayoutParams);
  }
  
  final List<View> getDependencySortedChildren()
  {
    e();
    return Collections.unmodifiableList(c);
  }
  
  public final c0 getLastWindowInsets()
  {
    return p;
  }
  
  public int getNestedScrollAxes()
  {
    return u.a();
  }
  
  public Drawable getStatusBarBackground()
  {
    return r;
  }
  
  protected int getSuggestedMinimumHeight()
  {
    return Math.max(super.getSuggestedMinimumHeight(), getPaddingTop() + getPaddingBottom());
  }
  
  protected int getSuggestedMinimumWidth()
  {
    return Math.max(super.getSuggestedMinimumWidth(), getPaddingLeft() + getPaddingRight());
  }
  
  public void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    a(false);
    if (o)
    {
      if (n == null) {
        n = new g();
      }
      getViewTreeObserver().addOnPreDrawListener(n);
    }
    if ((p == null) && (u.h(this))) {
      u.C(this);
    }
    j = true;
  }
  
  public void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    a(false);
    if ((o) && (n != null)) {
      getViewTreeObserver().removeOnPreDrawListener(n);
    }
    View localView = m;
    if (localView != null) {
      onStopNestedScroll(localView);
    }
    j = false;
  }
  
  public void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    if ((q) && (r != null))
    {
      c0 localC0 = p;
      int i1;
      if (localC0 != null) {
        i1 = localC0.e();
      } else {
        i1 = 0;
      }
      if (i1 > 0)
      {
        r.setBounds(0, 0, getWidth(), i1);
        r.draw(paramCanvas);
      }
    }
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getActionMasked();
    if (i1 == 0) {
      a(true);
    }
    boolean bool = a(paramMotionEvent, 0);
    if ((i1 == 1) || (i1 == 3)) {
      a(true);
    }
    return bool;
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramInt2 = u.k(this);
    paramInt3 = c.size();
    paramInt1 = 0;
    while (paramInt1 < paramInt3)
    {
      View localView = (View)c.get(paramInt1);
      if (localView.getVisibility() != 8)
      {
        c localC = ((f)localView.getLayoutParams()).d();
        if ((localC == null) || (!localC.a(this, localView, paramInt2))) {
          c(localView, paramInt2);
        }
      }
      paramInt1 += 1;
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    e();
    b();
    int i12 = getPaddingLeft();
    int i13 = getPaddingTop();
    int i14 = getPaddingRight();
    int i15 = getPaddingBottom();
    int i16 = u.k(this);
    int i6 = 1;
    int i5;
    if (i16 == 1) {
      i5 = 1;
    } else {
      i5 = 0;
    }
    int i17 = View.MeasureSpec.getMode(paramInt1);
    int i18 = View.MeasureSpec.getSize(paramInt1);
    int i7 = View.MeasureSpec.getMode(paramInt2);
    int i19 = View.MeasureSpec.getSize(paramInt2);
    int i3 = getSuggestedMinimumWidth();
    int i1 = getSuggestedMinimumHeight();
    if ((p == null) || (!u.h(this))) {
      i6 = 0;
    }
    int i8 = c.size();
    int i9 = 0;
    int i2 = 0;
    while (i9 < i8)
    {
      View localView = (View)c.get(i9);
      if (localView.getVisibility() != 8)
      {
        f localF = (f)localView.getLayoutParams();
        int i4 = 0;
        int i10 = e;
        if ((i10 >= 0) && (i17 != 0))
        {
          i10 = b(i10);
          i11 = d.a(e(c), i16) & 0x7;
          if (((i11 == 3) && (i5 == 0)) || ((i11 == 5) && (i5 != 0))) {
            i4 = Math.max(0, i18 - i14 - i10);
          } else if (((i11 == 5) && (i5 == 0)) || ((i11 == 3) && (i5 != 0))) {
            i4 = Math.max(0, i10 - i12);
          } else {}
        }
        i10 = i3;
        i3 = i2;
        int i11 = i1;
        if ((i6 != 0) && (!u.h(localView)))
        {
          i1 = p.c();
          int i21 = p.d();
          i2 = p.e();
          int i20 = p.b();
          i1 = View.MeasureSpec.makeMeasureSpec(i18 - (i1 + i21), i17);
          i2 = View.MeasureSpec.makeMeasureSpec(i19 - (i2 + i20), i7);
        }
        else
        {
          i1 = paramInt1;
          i2 = paramInt2;
        }
        c localC = localF.d();
        if (localC != null) {
          if (localC.a(this, localView, i1, i4, i2, 0)) {
            break label437;
          }
        }
        a(localView, i1, i4, i2, 0);
        label437:
        i2 = Math.max(i10, i12 + i14 + localView.getMeasuredWidth() + leftMargin + rightMargin);
        i1 = Math.max(i11, i13 + i15 + localView.getMeasuredHeight() + topMargin + bottomMargin);
        i4 = View.combineMeasuredStates(i3, localView.getMeasuredState());
        i3 = i2;
        i2 = i4;
      }
      i9 += 1;
    }
    setMeasuredDimension(View.resolveSizeAndState(i3, paramInt1, 0xFF000000 & i2), View.resolveSizeAndState(i1, paramInt2, i2 << 16));
  }
  
  public boolean onNestedFling(View paramView, float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    int i2 = getChildCount();
    boolean bool1 = false;
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = getChildAt(i1);
      boolean bool2;
      if (localView.getVisibility() == 8)
      {
        bool2 = bool1;
      }
      else
      {
        Object localObject = (f)localView.getLayoutParams();
        if (!((f)localObject).a(0))
        {
          bool2 = bool1;
        }
        else
        {
          localObject = ((f)localObject).d();
          bool2 = bool1;
          if (localObject != null) {
            bool2 = ((c)localObject).a(this, localView, paramView, paramFloat1, paramFloat2, paramBoolean) | bool1;
          }
        }
      }
      i1 += 1;
      bool1 = bool2;
    }
    if (bool1) {
      a(1);
    }
    return bool1;
  }
  
  public boolean onNestedPreFling(View paramView, float paramFloat1, float paramFloat2)
  {
    boolean bool1 = false;
    int i2 = getChildCount();
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = getChildAt(i1);
      boolean bool2;
      if (localView.getVisibility() == 8)
      {
        bool2 = bool1;
      }
      else
      {
        Object localObject = (f)localView.getLayoutParams();
        if (!((f)localObject).a(0))
        {
          bool2 = bool1;
        }
        else
        {
          localObject = ((f)localObject).d();
          bool2 = bool1;
          if (localObject != null) {
            bool2 = bool1 | ((c)localObject).a(this, localView, paramView, paramFloat1, paramFloat2);
          }
        }
      }
      i1 += 1;
      bool1 = bool2;
    }
    return bool1;
  }
  
  public void onNestedPreScroll(View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt)
  {
    a(paramView, paramInt1, paramInt2, paramArrayOfInt, 0);
  }
  
  public void onNestedScroll(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    a(paramView, paramInt1, paramInt2, paramInt3, paramInt4, 0);
  }
  
  public void onNestedScrollAccepted(View paramView1, View paramView2, int paramInt)
  {
    a(paramView1, paramView2, paramInt, 0);
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof h))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    paramParcelable = (h)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.a());
    paramParcelable = e;
    int i1 = 0;
    int i2 = getChildCount();
    while (i1 < i2)
    {
      View localView = getChildAt(i1);
      int i3 = localView.getId();
      c localC = d(localView).d();
      if ((i3 != -1) && (localC != null))
      {
        Parcelable localParcelable = (Parcelable)paramParcelable.get(i3);
        if (localParcelable != null) {
          localC.a(this, localView, localParcelable);
        }
      }
      i1 += 1;
    }
  }
  
  protected Parcelable onSaveInstanceState()
  {
    h localH = new h(super.onSaveInstanceState());
    SparseArray localSparseArray = new SparseArray();
    int i1 = 0;
    int i2 = getChildCount();
    while (i1 < i2)
    {
      Object localObject = getChildAt(i1);
      int i3 = ((View)localObject).getId();
      c localC = ((f)((View)localObject).getLayoutParams()).d();
      if ((i3 != -1) && (localC != null))
      {
        localObject = localC.d(this, (View)localObject);
        if (localObject != null) {
          localSparseArray.append(i3, localObject);
        }
      }
      i1 += 1;
    }
    e = localSparseArray;
    return localH;
  }
  
  public boolean onStartNestedScroll(View paramView1, View paramView2, int paramInt)
  {
    return b(paramView1, paramView2, paramInt, 0);
  }
  
  public void onStopNestedScroll(View paramView)
  {
    a(paramView, 0);
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    boolean bool4 = false;
    boolean bool2 = false;
    Object localObject2 = null;
    Object localObject1 = null;
    int i1 = paramMotionEvent.getActionMasked();
    boolean bool1;
    boolean bool3;
    if (l == null)
    {
      boolean bool5 = a(paramMotionEvent, 1);
      bool2 = bool5;
      bool1 = bool4;
      bool3 = bool2;
      if (!bool5) {}
    }
    else
    {
      c localC = ((f)l.getLayoutParams()).d();
      bool1 = bool4;
      bool3 = bool2;
      if (localC != null)
      {
        bool1 = localC.b(this, l, paramMotionEvent);
        bool3 = bool2;
      }
    }
    if (l == null)
    {
      bool2 = bool1 | super.onTouchEvent(paramMotionEvent);
      paramMotionEvent = localObject2;
    }
    else
    {
      bool2 = bool1;
      paramMotionEvent = localObject2;
      if (bool3)
      {
        paramMotionEvent = localObject1;
        if (0 == 0)
        {
          long l1 = SystemClock.uptimeMillis();
          paramMotionEvent = MotionEvent.obtain(l1, l1, 3, 0.0F, 0.0F, 0);
        }
        super.onTouchEvent(paramMotionEvent);
        bool2 = bool1;
      }
    }
    if (paramMotionEvent != null) {
      paramMotionEvent.recycle();
    }
    if ((i1 == 1) || (i1 == 3)) {
      a(false);
    }
    return bool2;
  }
  
  public boolean requestChildRectangleOnScreen(View paramView, Rect paramRect, boolean paramBoolean)
  {
    c localC = ((f)paramView.getLayoutParams()).d();
    if ((localC != null) && (localC.a(this, paramView, paramRect, paramBoolean))) {
      return true;
    }
    return super.requestChildRectangleOnScreen(paramView, paramRect, paramBoolean);
  }
  
  public void requestDisallowInterceptTouchEvent(boolean paramBoolean)
  {
    super.requestDisallowInterceptTouchEvent(paramBoolean);
    if ((paramBoolean) && (!i))
    {
      a(false);
      i = true;
    }
  }
  
  public void setFitsSystemWindows(boolean paramBoolean)
  {
    super.setFitsSystemWindows(paramBoolean);
    f();
  }
  
  public void setOnHierarchyChangeListener(ViewGroup.OnHierarchyChangeListener paramOnHierarchyChangeListener)
  {
    s = paramOnHierarchyChangeListener;
  }
  
  public void setStatusBarBackground(Drawable paramDrawable)
  {
    Drawable localDrawable2 = r;
    if (localDrawable2 != paramDrawable)
    {
      Drawable localDrawable1 = null;
      if (localDrawable2 != null) {
        localDrawable2.setCallback(null);
      }
      if (paramDrawable != null) {
        localDrawable1 = paramDrawable.mutate();
      }
      r = localDrawable1;
      paramDrawable = r;
      if (paramDrawable != null)
      {
        if (paramDrawable.isStateful()) {
          r.setState(getDrawableState());
        }
        android.support.v4.graphics.drawable.a.a(r, u.k(this));
        paramDrawable = r;
        boolean bool;
        if (getVisibility() == 0) {
          bool = true;
        } else {
          bool = false;
        }
        paramDrawable.setVisible(bool, false);
        r.setCallback(this);
      }
      u.B(this);
    }
  }
  
  public void setStatusBarBackgroundColor(int paramInt)
  {
    setStatusBarBackground(new ColorDrawable(paramInt));
  }
  
  public void setStatusBarBackgroundResource(int paramInt)
  {
    Drawable localDrawable;
    if (paramInt != 0) {
      localDrawable = android.support.v4.content.a.c(getContext(), paramInt);
    } else {
      localDrawable = null;
    }
    setStatusBarBackground(localDrawable);
  }
  
  public void setVisibility(int paramInt)
  {
    super.setVisibility(paramInt);
    boolean bool;
    if (paramInt == 0) {
      bool = true;
    } else {
      bool = false;
    }
    Drawable localDrawable = r;
    if ((localDrawable != null) && (localDrawable.isVisible() != bool)) {
      r.setVisible(bool, false);
    }
  }
  
  protected boolean verifyDrawable(Drawable paramDrawable)
  {
    return (super.verifyDrawable(paramDrawable)) || (paramDrawable == r);
  }
  
  class a
    implements p
  {
    a() {}
    
    public c0 a(View paramView, c0 paramC0)
    {
      return a(paramC0);
    }
  }
  
  public static abstract interface b
  {
    public abstract CoordinatorLayout.c getBehavior();
  }
  
  public static abstract class c<V extends View>
  {
    public c() {}
    
    public c(Context paramContext, AttributeSet paramAttributeSet) {}
    
    public c0 a(CoordinatorLayout paramCoordinatorLayout, V paramV, c0 paramC0)
    {
      return paramC0;
    }
    
    public void a() {}
    
    public void a(CoordinatorLayout.f paramF) {}
    
    public void a(CoordinatorLayout paramCoordinatorLayout, V paramV, Parcelable paramParcelable) {}
    
    public void a(CoordinatorLayout paramCoordinatorLayout, V paramV, View paramView, int paramInt)
    {
      if (paramInt == 0) {
        d(paramCoordinatorLayout, paramV, paramView);
      }
    }
    
    @Deprecated
    public void a(CoordinatorLayout paramCoordinatorLayout, V paramV, View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {}
    
    public void a(CoordinatorLayout paramCoordinatorLayout, V paramV, View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
    {
      if (paramInt5 == 0) {
        a(paramCoordinatorLayout, paramV, paramView, paramInt1, paramInt2, paramInt3, paramInt4);
      }
    }
    
    @Deprecated
    public void a(CoordinatorLayout paramCoordinatorLayout, V paramV, View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt) {}
    
    public void a(CoordinatorLayout paramCoordinatorLayout, V paramV, View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3)
    {
      if (paramInt3 == 0) {
        a(paramCoordinatorLayout, paramV, paramView, paramInt1, paramInt2, paramArrayOfInt);
      }
    }
    
    @Deprecated
    public void a(CoordinatorLayout paramCoordinatorLayout, V paramV, View paramView1, View paramView2, int paramInt) {}
    
    public void a(CoordinatorLayout paramCoordinatorLayout, V paramV, View paramView1, View paramView2, int paramInt1, int paramInt2)
    {
      if (paramInt2 == 0) {
        a(paramCoordinatorLayout, paramV, paramView1, paramView2, paramInt1);
      }
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, V paramV)
    {
      return c(paramCoordinatorLayout, paramV) > 0.0F;
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, V paramV, int paramInt)
    {
      return false;
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, V paramV, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      return false;
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, V paramV, Rect paramRect)
    {
      return false;
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, V paramV, Rect paramRect, boolean paramBoolean)
    {
      return false;
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, V paramV, MotionEvent paramMotionEvent)
    {
      return false;
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, V paramV, View paramView)
    {
      return false;
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, V paramV, View paramView, float paramFloat1, float paramFloat2)
    {
      return false;
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, V paramV, View paramView, float paramFloat1, float paramFloat2, boolean paramBoolean)
    {
      return false;
    }
    
    public int b(CoordinatorLayout paramCoordinatorLayout, V paramV)
    {
      return -16777216;
    }
    
    public boolean b(CoordinatorLayout paramCoordinatorLayout, V paramV, MotionEvent paramMotionEvent)
    {
      return false;
    }
    
    public boolean b(CoordinatorLayout paramCoordinatorLayout, V paramV, View paramView)
    {
      return false;
    }
    
    @Deprecated
    public boolean b(CoordinatorLayout paramCoordinatorLayout, V paramV, View paramView1, View paramView2, int paramInt)
    {
      return false;
    }
    
    public boolean b(CoordinatorLayout paramCoordinatorLayout, V paramV, View paramView1, View paramView2, int paramInt1, int paramInt2)
    {
      if (paramInt2 == 0) {
        return b(paramCoordinatorLayout, paramV, paramView1, paramView2, paramInt1);
      }
      return false;
    }
    
    public float c(CoordinatorLayout paramCoordinatorLayout, V paramV)
    {
      return 0.0F;
    }
    
    public void c(CoordinatorLayout paramCoordinatorLayout, V paramV, View paramView) {}
    
    public Parcelable d(CoordinatorLayout paramCoordinatorLayout, V paramV)
    {
      return View.BaseSavedState.EMPTY_STATE;
    }
    
    @Deprecated
    public void d(CoordinatorLayout paramCoordinatorLayout, V paramV, View paramView) {}
  }
  
  @Deprecated
  @Retention(RetentionPolicy.RUNTIME)
  public static @interface d
  {
    Class<? extends CoordinatorLayout.c> value();
  }
  
  private class e
    implements ViewGroup.OnHierarchyChangeListener
  {
    e() {}
    
    public void onChildViewAdded(View paramView1, View paramView2)
    {
      ViewGroup.OnHierarchyChangeListener localOnHierarchyChangeListener = s;
      if (localOnHierarchyChangeListener != null) {
        localOnHierarchyChangeListener.onChildViewAdded(paramView1, paramView2);
      }
    }
    
    public void onChildViewRemoved(View paramView1, View paramView2)
    {
      a(2);
      ViewGroup.OnHierarchyChangeListener localOnHierarchyChangeListener = s;
      if (localOnHierarchyChangeListener != null) {
        localOnHierarchyChangeListener.onChildViewRemoved(paramView1, paramView2);
      }
    }
  }
  
  public static class f
    extends ViewGroup.MarginLayoutParams
  {
    CoordinatorLayout.c a;
    boolean b = false;
    public int c = 0;
    public int d = 0;
    public int e = -1;
    int f = -1;
    public int g = 0;
    public int h = 0;
    int i;
    int j;
    View k;
    View l;
    private boolean m;
    private boolean n;
    private boolean o;
    private boolean p;
    final Rect q = new Rect();
    
    public f(int paramInt1, int paramInt2)
    {
      super(paramInt2);
    }
    
    f(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
      TypedArray localTypedArray = paramContext.obtainStyledAttributes(paramAttributeSet, c.CoordinatorLayout_Layout);
      c = localTypedArray.getInteger(c.CoordinatorLayout_Layout_android_layout_gravity, 0);
      f = localTypedArray.getResourceId(c.CoordinatorLayout_Layout_layout_anchor, -1);
      d = localTypedArray.getInteger(c.CoordinatorLayout_Layout_layout_anchorGravity, 0);
      e = localTypedArray.getInteger(c.CoordinatorLayout_Layout_layout_keyline, -1);
      g = localTypedArray.getInt(c.CoordinatorLayout_Layout_layout_insetEdge, 0);
      h = localTypedArray.getInt(c.CoordinatorLayout_Layout_layout_dodgeInsetEdges, 0);
      b = localTypedArray.hasValue(c.CoordinatorLayout_Layout_layout_behavior);
      if (b) {
        a = CoordinatorLayout.a(paramContext, paramAttributeSet, localTypedArray.getString(c.CoordinatorLayout_Layout_layout_behavior));
      }
      localTypedArray.recycle();
      paramContext = a;
      if (paramContext != null) {
        paramContext.a(this);
      }
    }
    
    public f(f paramF)
    {
      super();
    }
    
    public f(ViewGroup.LayoutParams paramLayoutParams)
    {
      super();
    }
    
    public f(ViewGroup.MarginLayoutParams paramMarginLayoutParams)
    {
      super();
    }
    
    private void a(View paramView, CoordinatorLayout paramCoordinatorLayout)
    {
      k = paramCoordinatorLayout.findViewById(f);
      Object localObject = k;
      if (localObject != null)
      {
        if (localObject == paramCoordinatorLayout)
        {
          if (paramCoordinatorLayout.isInEditMode())
          {
            l = null;
            k = null;
            return;
          }
          throw new IllegalStateException("View can not be anchored to the the parent CoordinatorLayout");
        }
        View localView = k;
        for (localObject = ((View)localObject).getParent(); (localObject != paramCoordinatorLayout) && (localObject != null); localObject = ((ViewParent)localObject).getParent())
        {
          if (localObject == paramView)
          {
            if (paramCoordinatorLayout.isInEditMode())
            {
              l = null;
              k = null;
              return;
            }
            throw new IllegalStateException("Anchor must not be a descendant of the anchored view");
          }
          if ((localObject instanceof View)) {
            localView = (View)localObject;
          }
        }
        l = localView;
        return;
      }
      if (paramCoordinatorLayout.isInEditMode())
      {
        l = null;
        k = null;
        return;
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Could not find CoordinatorLayout descendant view with id ");
      ((StringBuilder)localObject).append(paramCoordinatorLayout.getResources().getResourceName(f));
      ((StringBuilder)localObject).append(" to anchor view ");
      ((StringBuilder)localObject).append(paramView);
      paramView = new IllegalStateException(((StringBuilder)localObject).toString());
      for (;;)
      {
        throw paramView;
      }
    }
    
    private boolean a(View paramView, int paramInt)
    {
      int i1 = d.a(getLayoutParamsg, paramInt);
      return (i1 != 0) && ((d.a(h, paramInt) & i1) == i1);
    }
    
    private boolean b(View paramView, CoordinatorLayout paramCoordinatorLayout)
    {
      if (k.getId() != f) {
        return false;
      }
      View localView = k;
      ViewParent localViewParent = k.getParent();
      while (localViewParent != paramCoordinatorLayout) {
        if ((localViewParent != null) && (localViewParent != paramView))
        {
          if ((localViewParent instanceof View)) {
            localView = (View)localViewParent;
          }
          localViewParent = localViewParent.getParent();
        }
        else
        {
          l = null;
          k = null;
          return false;
        }
      }
      l = localView;
      return true;
    }
    
    View a(CoordinatorLayout paramCoordinatorLayout, View paramView)
    {
      if (f == -1)
      {
        l = null;
        k = null;
        return null;
      }
      if ((k == null) || (!b(paramView, paramCoordinatorLayout))) {
        a(paramView, paramCoordinatorLayout);
      }
      return k;
    }
    
    void a(int paramInt, boolean paramBoolean)
    {
      if (paramInt != 0)
      {
        if (paramInt != 1) {
          return;
        }
        o = paramBoolean;
        return;
      }
      n = paramBoolean;
    }
    
    void a(Rect paramRect)
    {
      q.set(paramRect);
    }
    
    public void a(CoordinatorLayout.c paramC)
    {
      CoordinatorLayout.c localC = a;
      if (localC != paramC)
      {
        if (localC != null) {
          localC.a();
        }
        a = paramC;
        b = true;
        if (paramC != null) {
          paramC.a(this);
        }
      }
    }
    
    void a(boolean paramBoolean)
    {
      p = paramBoolean;
    }
    
    boolean a()
    {
      return (k == null) && (f != -1);
    }
    
    boolean a(int paramInt)
    {
      if (paramInt != 0)
      {
        if (paramInt != 1) {
          return false;
        }
        return o;
      }
      return n;
    }
    
    boolean a(CoordinatorLayout paramCoordinatorLayout, View paramView1, View paramView2)
    {
      if ((paramView2 != l) && (!a(paramView2, u.k(paramCoordinatorLayout))))
      {
        CoordinatorLayout.c localC = a;
        if ((localC == null) || (!localC.a(paramCoordinatorLayout, paramView1, paramView2))) {
          return false;
        }
      }
      return true;
    }
    
    void b(int paramInt)
    {
      a(paramInt, false);
    }
    
    boolean b()
    {
      if (a == null) {
        m = false;
      }
      return m;
    }
    
    boolean b(CoordinatorLayout paramCoordinatorLayout, View paramView)
    {
      boolean bool2 = m;
      if (bool2) {
        return true;
      }
      CoordinatorLayout.c localC = a;
      if (localC != null) {
        bool1 = localC.a(paramCoordinatorLayout, paramView);
      } else {
        bool1 = false;
      }
      boolean bool1 = bool2 | bool1;
      m = bool1;
      return bool1;
    }
    
    public int c()
    {
      return f;
    }
    
    public CoordinatorLayout.c d()
    {
      return a;
    }
    
    boolean e()
    {
      return p;
    }
    
    Rect f()
    {
      return q;
    }
    
    void g()
    {
      p = false;
    }
    
    void h()
    {
      m = false;
    }
  }
  
  class g
    implements ViewTreeObserver.OnPreDrawListener
  {
    g() {}
    
    public boolean onPreDraw()
    {
      a(0);
      return true;
    }
  }
  
  protected static class h
    extends android.support.v4.view.a
  {
    public static final Parcelable.Creator<h> CREATOR = new a();
    SparseArray<Parcelable> e;
    
    public h(Parcel paramParcel, ClassLoader paramClassLoader)
    {
      super(paramClassLoader);
      int j = paramParcel.readInt();
      int[] arrayOfInt = new int[j];
      paramParcel.readIntArray(arrayOfInt);
      paramParcel = paramParcel.readParcelableArray(paramClassLoader);
      e = new SparseArray(j);
      int i = 0;
      while (i < j)
      {
        e.append(arrayOfInt[i], paramParcel[i]);
        i += 1;
      }
    }
    
    public h(Parcelable paramParcelable)
    {
      super();
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      super.writeToParcel(paramParcel, paramInt);
      Object localObject = e;
      int i;
      if (localObject != null) {
        i = ((SparseArray)localObject).size();
      } else {
        i = 0;
      }
      paramParcel.writeInt(i);
      localObject = new int[i];
      Parcelable[] arrayOfParcelable = new Parcelable[i];
      int j = 0;
      while (j < i)
      {
        localObject[j] = e.keyAt(j);
        arrayOfParcelable[j] = ((Parcelable)e.valueAt(j));
        j += 1;
      }
      paramParcel.writeIntArray((int[])localObject);
      paramParcel.writeParcelableArray(arrayOfParcelable, paramInt);
    }
    
    static final class a
      implements Parcelable.ClassLoaderCreator<CoordinatorLayout.h>
    {
      a() {}
      
      public CoordinatorLayout.h createFromParcel(Parcel paramParcel)
      {
        return new CoordinatorLayout.h(paramParcel, null);
      }
      
      public CoordinatorLayout.h createFromParcel(Parcel paramParcel, ClassLoader paramClassLoader)
      {
        return new CoordinatorLayout.h(paramParcel, paramClassLoader);
      }
      
      public CoordinatorLayout.h[] newArray(int paramInt)
      {
        return new CoordinatorLayout.h[paramInt];
      }
    }
  }
  
  static class i
    implements Comparator<View>
  {
    i() {}
    
    public int a(View paramView1, View paramView2)
    {
      float f1 = u.s(paramView1);
      float f2 = u.s(paramView2);
      if (f1 > f2) {
        return -1;
      }
      if (f1 < f2) {
        return 1;
      }
      return 0;
    }
  }
}
