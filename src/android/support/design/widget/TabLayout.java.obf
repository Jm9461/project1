package android.support.design.widget;

import a.b.c.b;
import a.b.c.d;
import a.b.g.g.l;
import android.animation.Animator;
import android.animation.Animator.AnimatorListener;
import android.animation.AnimatorListenerAdapter;
import android.animation.ValueAnimator;
import android.animation.ValueAnimator.AnimatorUpdateListener;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.database.DataSetObserver;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuff.Mode;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.graphics.drawable.LayerDrawable;
import android.graphics.drawable.RippleDrawable;
import android.os.Build.VERSION;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.e;
import android.support.v4.view.ViewPager.i;
import android.support.v4.view.ViewPager.j;
import android.support.v4.view.q;
import android.support.v4.view.r;
import android.support.v4.view.u;
import android.support.v4.widget.p;
import android.support.v7.app.a.c;
import android.support.v7.widget.l1;
import android.text.Layout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.ViewParent;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityNodeInfo;
import android.widget.FrameLayout.LayoutParams;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.TextView;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Iterator;

@ViewPager.e
public class TabLayout
  extends HorizontalScrollView
{
  private static final a.b.g.g.j<g> Q = new l(16);
  int A;
  int B;
  boolean C;
  boolean D;
  boolean E;
  private c F;
  private final ArrayList<c> G = new ArrayList();
  private c H;
  private ValueAnimator I;
  ViewPager J;
  private q K;
  private DataSetObserver L;
  private h M;
  private b N;
  private boolean O;
  private final a.b.g.g.j<i> P = new a.b.g.g.k(12);
  private final ArrayList<g> c = new ArrayList();
  private g d;
  private final RectF e = new RectF();
  private final f f;
  int g;
  int h;
  int i;
  int j;
  int k;
  ColorStateList l;
  ColorStateList m;
  ColorStateList n;
  Drawable o;
  PorterDuff.Mode p;
  float q;
  float r;
  final int s;
  int t = Integer.MAX_VALUE;
  private final int u;
  private final int v;
  private final int w;
  private int x;
  int y;
  int z;
  
  public TabLayout(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public TabLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, b.tabStyle);
  }
  
  public TabLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    setHorizontalScrollBarEnabled(false);
    f = new f(paramContext);
    super.addView(f, 0, new FrameLayout.LayoutParams(-2, -1));
    TypedArray localTypedArray = android.support.design.internal.g.c(paramContext, paramAttributeSet, a.b.c.k.TabLayout, paramInt, a.b.c.j.Widget_Design_TabLayout, new int[] { a.b.c.k.TabLayout_tabTextAppearance });
    f.b(localTypedArray.getDimensionPixelSize(a.b.c.k.TabLayout_tabIndicatorHeight, -1));
    f.a(localTypedArray.getColor(a.b.c.k.TabLayout_tabIndicatorColor, 0));
    setSelectedTabIndicator(a.b.c.p.a.b(paramContext, localTypedArray, a.b.c.k.TabLayout_tabIndicator));
    setSelectedTabIndicatorGravity(localTypedArray.getInt(a.b.c.k.TabLayout_tabIndicatorGravity, 0));
    setTabIndicatorFullWidth(localTypedArray.getBoolean(a.b.c.k.TabLayout_tabIndicatorFullWidth, true));
    paramInt = localTypedArray.getDimensionPixelSize(a.b.c.k.TabLayout_tabPadding, 0);
    j = paramInt;
    i = paramInt;
    h = paramInt;
    g = paramInt;
    g = localTypedArray.getDimensionPixelSize(a.b.c.k.TabLayout_tabPaddingStart, g);
    h = localTypedArray.getDimensionPixelSize(a.b.c.k.TabLayout_tabPaddingTop, h);
    i = localTypedArray.getDimensionPixelSize(a.b.c.k.TabLayout_tabPaddingEnd, i);
    j = localTypedArray.getDimensionPixelSize(a.b.c.k.TabLayout_tabPaddingBottom, j);
    k = localTypedArray.getResourceId(a.b.c.k.TabLayout_tabTextAppearance, a.b.c.j.TextAppearance_Design_Tab);
    paramAttributeSet = paramContext.obtainStyledAttributes(k, a.b.h.a.j.TextAppearance);
    try
    {
      q = paramAttributeSet.getDimensionPixelSize(a.b.h.a.j.TextAppearance_android_textSize, 0);
      l = a.b.c.p.a.a(paramContext, paramAttributeSet, a.b.h.a.j.TextAppearance_android_textColor);
      paramAttributeSet.recycle();
      if (localTypedArray.hasValue(a.b.c.k.TabLayout_tabTextColor)) {
        l = a.b.c.p.a.a(paramContext, localTypedArray, a.b.c.k.TabLayout_tabTextColor);
      }
      if (localTypedArray.hasValue(a.b.c.k.TabLayout_tabSelectedTextColor))
      {
        paramInt = localTypedArray.getColor(a.b.c.k.TabLayout_tabSelectedTextColor, 0);
        l = a(l.getDefaultColor(), paramInt);
      }
      m = a.b.c.p.a.a(paramContext, localTypedArray, a.b.c.k.TabLayout_tabIconTint);
      p = android.support.design.internal.h.a(localTypedArray.getInt(a.b.c.k.TabLayout_tabIconTintMode, -1), null);
      n = a.b.c.p.a.a(paramContext, localTypedArray, a.b.c.k.TabLayout_tabRippleColor);
      z = localTypedArray.getInt(a.b.c.k.TabLayout_tabIndicatorAnimationDuration, 300);
      u = localTypedArray.getDimensionPixelSize(a.b.c.k.TabLayout_tabMinWidth, -1);
      v = localTypedArray.getDimensionPixelSize(a.b.c.k.TabLayout_tabMaxWidth, -1);
      s = localTypedArray.getResourceId(a.b.c.k.TabLayout_tabBackground, 0);
      x = localTypedArray.getDimensionPixelSize(a.b.c.k.TabLayout_tabContentStart, 0);
      B = localTypedArray.getInt(a.b.c.k.TabLayout_tabMode, 1);
      y = localTypedArray.getInt(a.b.c.k.TabLayout_tabGravity, 0);
      C = localTypedArray.getBoolean(a.b.c.k.TabLayout_tabInlineLabel, false);
      E = localTypedArray.getBoolean(a.b.c.k.TabLayout_tabUnboundedRipple, false);
      localTypedArray.recycle();
      paramContext = getResources();
      r = paramContext.getDimensionPixelSize(d.design_tab_text_size_2line);
      w = paramContext.getDimensionPixelSize(d.design_tab_scrollable_min_width);
      e();
      return;
    }
    finally
    {
      paramAttributeSet.recycle();
    }
  }
  
  private int a(int paramInt, float paramFloat)
  {
    int i2 = B;
    int i1 = 0;
    if (i2 == 0)
    {
      View localView2 = f.getChildAt(paramInt);
      View localView1;
      if (paramInt + 1 < f.getChildCount()) {
        localView1 = f.getChildAt(paramInt + 1);
      } else {
        localView1 = null;
      }
      if (localView2 != null) {
        paramInt = localView2.getWidth();
      } else {
        paramInt = 0;
      }
      if (localView1 != null) {
        i1 = localView1.getWidth();
      }
      i2 = localView2.getLeft() + paramInt / 2 - getWidth() / 2;
      paramInt = (int)((paramInt + i1) * 0.5F * paramFloat);
      if (u.k(this) == 0) {
        return i2 + paramInt;
      }
      return i2 - paramInt;
    }
    return 0;
  }
  
  private static ColorStateList a(int paramInt1, int paramInt2)
  {
    int[][] arrayOfInt = new int[2][];
    int[] arrayOfInt1 = new int[2];
    arrayOfInt[0] = HorizontalScrollView.SELECTED_STATE_SET;
    arrayOfInt1[0] = paramInt2;
    paramInt2 = 0 + 1;
    arrayOfInt[paramInt2] = HorizontalScrollView.EMPTY_STATE_SET;
    arrayOfInt1[paramInt2] = paramInt1;
    return new ColorStateList(arrayOfInt, arrayOfInt1);
  }
  
  private void a(g paramG, int paramInt)
  {
    paramG.b(paramInt);
    c.add(paramInt, paramG);
    int i1 = c.size();
    paramInt += 1;
    while (paramInt < i1)
    {
      ((g)c.get(paramInt)).b(paramInt);
      paramInt += 1;
    }
  }
  
  private void a(v paramV)
  {
    g localG = b();
    Object localObject = c;
    if (localObject != null) {
      localG.b((CharSequence)localObject);
    }
    localObject = d;
    if (localObject != null) {
      localG.a((Drawable)localObject);
    }
    int i1 = e;
    if (i1 != 0) {
      localG.a(i1);
    }
    if (!TextUtils.isEmpty(paramV.getContentDescription())) {
      localG.a(paramV.getContentDescription());
    }
    a(localG);
  }
  
  private void a(ViewPager paramViewPager, boolean paramBoolean1, boolean paramBoolean2)
  {
    Object localObject = J;
    if (localObject != null)
    {
      h localH = M;
      if (localH != null) {
        ((ViewPager)localObject).b(localH);
      }
      localObject = N;
      if (localObject != null) {
        J.b((ViewPager.i)localObject);
      }
    }
    localObject = H;
    if (localObject != null)
    {
      b((c)localObject);
      H = null;
    }
    if (paramViewPager != null)
    {
      J = paramViewPager;
      if (M == null) {
        M = new h(this);
      }
      M.a();
      paramViewPager.a(M);
      H = new j(paramViewPager);
      a(H);
      localObject = paramViewPager.getAdapter();
      if (localObject != null) {
        a((q)localObject, paramBoolean1);
      }
      if (N == null) {
        N = new b();
      }
      N.a(paramBoolean1);
      paramViewPager.a(N);
      a(paramViewPager.getCurrentItem(), 0.0F, true);
    }
    else
    {
      J = null;
      a(null, false);
    }
    O = paramBoolean2;
  }
  
  private void a(View paramView)
  {
    if ((paramView instanceof v))
    {
      a((v)paramView);
      return;
    }
    throw new IllegalArgumentException("Only TabItem instances can be added to TabLayout");
  }
  
  private void a(LinearLayout.LayoutParams paramLayoutParams)
  {
    if ((B == 1) && (y == 0))
    {
      width = 0;
      weight = 1.0F;
      return;
    }
    width = -2;
    weight = 0.0F;
  }
  
  private void c(int paramInt)
  {
    if (paramInt == -1) {
      return;
    }
    if ((getWindowToken() != null) && (u.y(this)) && (!f.a()))
    {
      int i1 = getScrollX();
      int i2 = a(paramInt, 0.0F);
      if (i1 != i2)
      {
        g();
        I.setIntValues(new int[] { i1, i2 });
        I.start();
      }
      f.a(paramInt, z);
      return;
    }
    a(paramInt, 0.0F, true);
  }
  
  private void d(int paramInt)
  {
    i localI = (i)f.getChildAt(paramInt);
    f.removeViewAt(paramInt);
    if (localI != null)
    {
      localI.a();
      P.a(localI);
    }
    requestLayout();
  }
  
  private void d(g paramG)
  {
    i localI = g;
    f.addView(localI, paramG.c(), f());
  }
  
  private i e(g paramG)
  {
    Object localObject1 = P;
    if (localObject1 != null) {
      localObject1 = (i)((a.b.g.g.j)localObject1).a();
    } else {
      localObject1 = null;
    }
    Object localObject2 = localObject1;
    if (localObject1 == null) {
      localObject2 = new i(getContext());
    }
    ((i)localObject2).a(paramG);
    ((LinearLayout)localObject2).setFocusable(true);
    ((LinearLayout)localObject2).setMinimumWidth(getTabMinWidth());
    if (TextUtils.isEmpty(g.a(paramG)))
    {
      ((LinearLayout)localObject2).setContentDescription(g.b(paramG));
      return localObject2;
    }
    ((LinearLayout)localObject2).setContentDescription(g.a(paramG));
    return localObject2;
  }
  
  private void e()
  {
    int i1 = 0;
    if (B == 0) {
      i1 = Math.max(0, x - g);
    }
    u.a(f, i1, 0, 0, 0);
    i1 = B;
    if (i1 != 0)
    {
      if (i1 == 1) {
        f.setGravity(1);
      }
    }
    else {
      f.setGravity(8388611);
    }
    a(true);
  }
  
  private LinearLayout.LayoutParams f()
  {
    LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams(-2, -1);
    a(localLayoutParams);
    return localLayoutParams;
  }
  
  private void f(g paramG)
  {
    int i1 = G.size() - 1;
    while (i1 >= 0)
    {
      ((c)G.get(i1)).b(paramG);
      i1 -= 1;
    }
  }
  
  private void g()
  {
    if (I == null)
    {
      I = new ValueAnimator();
      I.setInterpolator(a.b.c.l.a.b);
      I.setDuration(z);
      I.addUpdateListener(new a());
    }
  }
  
  private void g(g paramG)
  {
    int i1 = G.size() - 1;
    while (i1 >= 0)
    {
      ((c)G.get(i1)).a(paramG);
      i1 -= 1;
    }
  }
  
  private int getDefaultHeight()
  {
    int i3 = 0;
    int i1 = 0;
    int i4 = c.size();
    int i2;
    for (;;)
    {
      i2 = i3;
      if (i1 >= i4) {
        break;
      }
      g localG = (g)c.get(i1);
      if ((localG != null) && (localG.b() != null) && (!TextUtils.isEmpty(localG.d())))
      {
        i2 = 1;
        break;
      }
      i1 += 1;
    }
    if ((i2 != 0) && (!C)) {
      return 72;
    }
    return 48;
  }
  
  private int getTabMinWidth()
  {
    int i1 = u;
    if (i1 != -1) {
      return i1;
    }
    if (B == 0) {
      return w;
    }
    return 0;
  }
  
  private int getTabScrollRange()
  {
    return Math.max(0, f.getWidth() - getWidth() - getPaddingLeft() - getPaddingRight());
  }
  
  private void h()
  {
    int i1 = 0;
    int i2 = c.size();
    while (i1 < i2)
    {
      ((g)c.get(i1)).h();
      i1 += 1;
    }
  }
  
  private void h(g paramG)
  {
    int i1 = G.size() - 1;
    while (i1 >= 0)
    {
      ((c)G.get(i1)).c(paramG);
      i1 -= 1;
    }
  }
  
  private void setSelectedTabView(int paramInt)
  {
    int i2 = f.getChildCount();
    if (paramInt < i2)
    {
      int i1 = 0;
      while (i1 < i2)
      {
        View localView = f.getChildAt(i1);
        boolean bool2 = false;
        if (i1 == paramInt) {
          bool1 = true;
        } else {
          bool1 = false;
        }
        localView.setSelected(bool1);
        boolean bool1 = bool2;
        if (i1 == paramInt) {
          bool1 = true;
        }
        localView.setActivated(bool1);
        i1 += 1;
      }
    }
  }
  
  int a(int paramInt)
  {
    return Math.round(getResourcesgetDisplayMetricsdensity * paramInt);
  }
  
  protected g a()
  {
    g localG2 = (g)Q.a();
    g localG1 = localG2;
    if (localG2 == null) {
      localG1 = new g();
    }
    return localG1;
  }
  
  public void a(int paramInt, float paramFloat, boolean paramBoolean)
  {
    a(paramInt, paramFloat, paramBoolean, true);
  }
  
  void a(int paramInt, float paramFloat, boolean paramBoolean1, boolean paramBoolean2)
  {
    int i1 = Math.round(paramInt + paramFloat);
    if (i1 >= 0)
    {
      if (i1 >= f.getChildCount()) {
        return;
      }
      if (paramBoolean2) {
        f.a(paramInt, paramFloat);
      }
      ValueAnimator localValueAnimator = I;
      if ((localValueAnimator != null) && (localValueAnimator.isRunning())) {
        I.cancel();
      }
      scrollTo(a(paramInt, paramFloat), 0);
      if (paramBoolean1) {
        setSelectedTabView(i1);
      }
      return;
    }
  }
  
  public void a(c paramC)
  {
    if (!G.contains(paramC)) {
      G.add(paramC);
    }
  }
  
  public void a(g paramG)
  {
    a(paramG, c.isEmpty());
  }
  
  public void a(g paramG, int paramInt, boolean paramBoolean)
  {
    if (f == this)
    {
      a(paramG, paramInt);
      d(paramG);
      if (paramBoolean) {
        paramG.g();
      }
      return;
    }
    throw new IllegalArgumentException("Tab belongs to a different TabLayout.");
  }
  
  public void a(g paramG, boolean paramBoolean)
  {
    a(paramG, c.size(), paramBoolean);
  }
  
  public void a(ViewPager paramViewPager, boolean paramBoolean)
  {
    a(paramViewPager, paramBoolean, false);
  }
  
  void a(q paramQ, boolean paramBoolean)
  {
    q localQ = K;
    if (localQ != null)
    {
      DataSetObserver localDataSetObserver = L;
      if (localDataSetObserver != null) {
        localQ.c(localDataSetObserver);
      }
    }
    K = paramQ;
    if ((paramBoolean) && (paramQ != null))
    {
      if (L == null) {
        L = new e();
      }
      paramQ.a(L);
    }
    c();
  }
  
  void a(boolean paramBoolean)
  {
    int i1 = 0;
    while (i1 < f.getChildCount())
    {
      View localView = f.getChildAt(i1);
      localView.setMinimumWidth(getTabMinWidth());
      a((LinearLayout.LayoutParams)localView.getLayoutParams());
      if (paramBoolean) {
        localView.requestLayout();
      }
      i1 += 1;
    }
  }
  
  public void addView(View paramView)
  {
    a(paramView);
  }
  
  public void addView(View paramView, int paramInt)
  {
    a(paramView);
  }
  
  public void addView(View paramView, int paramInt, ViewGroup.LayoutParams paramLayoutParams)
  {
    a(paramView);
  }
  
  public void addView(View paramView, ViewGroup.LayoutParams paramLayoutParams)
  {
    a(paramView);
  }
  
  public g b()
  {
    g localG = a();
    f = this;
    g = e(localG);
    return localG;
  }
  
  public g b(int paramInt)
  {
    if ((paramInt >= 0) && (paramInt < getTabCount())) {
      return (g)c.get(paramInt);
    }
    return null;
  }
  
  public void b(c paramC)
  {
    G.remove(paramC);
  }
  
  void b(g paramG, boolean paramBoolean)
  {
    g localG = d;
    if (localG == paramG)
    {
      if (localG != null)
      {
        f(paramG);
        c(paramG.c());
      }
    }
    else
    {
      int i1;
      if (paramG != null) {
        i1 = paramG.c();
      } else {
        i1 = -1;
      }
      if (paramBoolean)
      {
        if (((localG == null) || (localG.c() == -1)) && (i1 != -1)) {
          a(i1, 0.0F, true);
        } else {
          c(i1);
        }
        if (i1 != -1) {
          setSelectedTabView(i1);
        }
      }
      d = paramG;
      if (localG != null) {
        h(localG);
      }
      if (paramG != null) {
        g(paramG);
      }
    }
  }
  
  protected boolean b(g paramG)
  {
    return Q.a(paramG);
  }
  
  void c()
  {
    d();
    Object localObject = K;
    if (localObject != null)
    {
      int i2 = ((q)localObject).a();
      int i1 = 0;
      while (i1 < i2)
      {
        localObject = b();
        ((g)localObject).b(K.a(i1));
        a((g)localObject, false);
        i1 += 1;
      }
      localObject = J;
      if ((localObject != null) && (i2 > 0))
      {
        i1 = ((ViewPager)localObject).getCurrentItem();
        if ((i1 != getSelectedTabPosition()) && (i1 < getTabCount())) {
          c(b(i1));
        }
      }
    }
  }
  
  void c(g paramG)
  {
    b(paramG, true);
  }
  
  public void d()
  {
    int i1 = f.getChildCount() - 1;
    while (i1 >= 0)
    {
      d(i1);
      i1 -= 1;
    }
    Iterator localIterator = c.iterator();
    while (localIterator.hasNext())
    {
      g localG = (g)localIterator.next();
      localIterator.remove();
      localG.f();
      b(localG);
    }
    d = null;
  }
  
  public FrameLayout.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return generateDefaultLayoutParams();
  }
  
  public int getSelectedTabPosition()
  {
    g localG = d;
    if (localG != null) {
      return localG.c();
    }
    return -1;
  }
  
  public int getTabCount()
  {
    return c.size();
  }
  
  public int getTabGravity()
  {
    return y;
  }
  
  public ColorStateList getTabIconTint()
  {
    return m;
  }
  
  public int getTabIndicatorGravity()
  {
    return A;
  }
  
  int getTabMaxWidth()
  {
    return t;
  }
  
  public int getTabMode()
  {
    return B;
  }
  
  public ColorStateList getTabRippleColor()
  {
    return n;
  }
  
  public Drawable getTabSelectedIndicator()
  {
    return o;
  }
  
  public ColorStateList getTabTextColors()
  {
    return l;
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    if (J == null)
    {
      ViewParent localViewParent = getParent();
      if ((localViewParent instanceof ViewPager)) {
        a((ViewPager)localViewParent, true, true);
      }
    }
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    if (O)
    {
      setupWithViewPager(null);
      O = false;
    }
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    int i1 = 0;
    while (i1 < f.getChildCount())
    {
      View localView = f.getChildAt(i1);
      if ((localView instanceof i)) {
        i.a((i)localView, paramCanvas);
      }
      i1 += 1;
    }
    super.onDraw(paramCanvas);
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i1 = a(getDefaultHeight()) + getPaddingTop() + getPaddingBottom();
    int i2 = View.MeasureSpec.getMode(paramInt2);
    if (i2 != Integer.MIN_VALUE)
    {
      if (i2 == 0) {
        paramInt2 = View.MeasureSpec.makeMeasureSpec(i1, 1073741824);
      }
    }
    else {
      paramInt2 = View.MeasureSpec.makeMeasureSpec(Math.min(i1, View.MeasureSpec.getSize(paramInt2)), 1073741824);
    }
    i2 = View.MeasureSpec.getSize(paramInt1);
    if (View.MeasureSpec.getMode(paramInt1) != 0)
    {
      i1 = v;
      if (i1 <= 0) {
        i1 = i2 - a(56);
      }
      t = i1;
    }
    super.onMeasure(paramInt1, paramInt2);
    if (getChildCount() == 1)
    {
      i2 = 0;
      paramInt1 = 0;
      View localView = getChildAt(0);
      i1 = 0;
      int i3 = B;
      if (i3 != 0)
      {
        if (i3 != 1) {
          paramInt1 = i1;
        } else if (localView.getMeasuredWidth() != getMeasuredWidth()) {
          paramInt1 = 1;
        }
      }
      else
      {
        paramInt1 = i2;
        if (localView.getMeasuredWidth() < getMeasuredWidth()) {
          paramInt1 = 1;
        }
      }
      if (paramInt1 != 0)
      {
        paramInt1 = HorizontalScrollView.getChildMeasureSpec(paramInt2, getPaddingTop() + getPaddingBottom(), getLayoutParamsheight);
        localView.measure(View.MeasureSpec.makeMeasureSpec(getMeasuredWidth(), 1073741824), paramInt1);
      }
    }
  }
  
  public void setInlineLabel(boolean paramBoolean)
  {
    if (C != paramBoolean)
    {
      C = paramBoolean;
      int i1 = 0;
      while (i1 < f.getChildCount())
      {
        View localView = f.getChildAt(i1);
        if ((localView instanceof i)) {
          ((i)localView).c();
        }
        i1 += 1;
      }
      e();
    }
  }
  
  public void setInlineLabelResource(int paramInt)
  {
    setInlineLabel(getResources().getBoolean(paramInt));
  }
  
  @Deprecated
  public void setOnTabSelectedListener(c paramC)
  {
    c localC = F;
    if (localC != null) {
      b(localC);
    }
    F = paramC;
    if (paramC != null) {
      a(paramC);
    }
  }
  
  void setScrollAnimatorListener(Animator.AnimatorListener paramAnimatorListener)
  {
    g();
    I.addListener(paramAnimatorListener);
  }
  
  public void setSelectedTabIndicator(int paramInt)
  {
    if (paramInt != 0)
    {
      setSelectedTabIndicator(a.b.h.c.a.a.c(getContext(), paramInt));
      return;
    }
    setSelectedTabIndicator(null);
  }
  
  public void setSelectedTabIndicator(Drawable paramDrawable)
  {
    if (o != paramDrawable)
    {
      o = paramDrawable;
      u.B(f);
    }
  }
  
  public void setSelectedTabIndicatorColor(int paramInt)
  {
    f.a(paramInt);
  }
  
  public void setSelectedTabIndicatorGravity(int paramInt)
  {
    if (A != paramInt)
    {
      A = paramInt;
      u.B(f);
    }
  }
  
  @Deprecated
  public void setSelectedTabIndicatorHeight(int paramInt)
  {
    f.b(paramInt);
  }
  
  public void setTabGravity(int paramInt)
  {
    if (y != paramInt)
    {
      y = paramInt;
      e();
    }
  }
  
  public void setTabIconTint(ColorStateList paramColorStateList)
  {
    if (m != paramColorStateList)
    {
      m = paramColorStateList;
      h();
    }
  }
  
  public void setTabIconTintResource(int paramInt)
  {
    setTabIconTint(a.b.h.c.a.a.b(getContext(), paramInt));
  }
  
  public void setTabIndicatorFullWidth(boolean paramBoolean)
  {
    D = paramBoolean;
    u.B(f);
  }
  
  public void setTabMode(int paramInt)
  {
    if (paramInt != B)
    {
      B = paramInt;
      e();
    }
  }
  
  public void setTabRippleColor(ColorStateList paramColorStateList)
  {
    if (n != paramColorStateList)
    {
      n = paramColorStateList;
      int i1 = 0;
      while (i1 < f.getChildCount())
      {
        paramColorStateList = f.getChildAt(i1);
        if ((paramColorStateList instanceof i)) {
          i.a((i)paramColorStateList, getContext());
        }
        i1 += 1;
      }
    }
  }
  
  public void setTabRippleColorResource(int paramInt)
  {
    setTabRippleColor(a.b.h.c.a.a.b(getContext(), paramInt));
  }
  
  public void setTabTextColors(ColorStateList paramColorStateList)
  {
    if (l != paramColorStateList)
    {
      l = paramColorStateList;
      h();
    }
  }
  
  @Deprecated
  public void setTabsFromPagerAdapter(q paramQ)
  {
    a(paramQ, false);
  }
  
  public void setUnboundedRipple(boolean paramBoolean)
  {
    if (E != paramBoolean)
    {
      E = paramBoolean;
      int i1 = 0;
      while (i1 < f.getChildCount())
      {
        View localView = f.getChildAt(i1);
        if ((localView instanceof i)) {
          i.a((i)localView, getContext());
        }
        i1 += 1;
      }
    }
  }
  
  public void setUnboundedRippleResource(int paramInt)
  {
    setUnboundedRipple(getResources().getBoolean(paramInt));
  }
  
  public void setupWithViewPager(ViewPager paramViewPager)
  {
    a(paramViewPager, true);
  }
  
  public boolean shouldDelayChildPressedState()
  {
    return getTabScrollRange() > 0;
  }
  
  class a
    implements ValueAnimator.AnimatorUpdateListener
  {
    a() {}
    
    public void onAnimationUpdate(ValueAnimator paramValueAnimator)
    {
      scrollTo(((Integer)paramValueAnimator.getAnimatedValue()).intValue(), 0);
    }
  }
  
  private class b
    implements ViewPager.i
  {
    private boolean a;
    
    b() {}
    
    public void a(ViewPager paramViewPager, q paramQ1, q paramQ2)
    {
      paramQ1 = TabLayout.this;
      if (J == paramViewPager) {
        paramQ1.a(paramQ2, a);
      }
    }
    
    void a(boolean paramBoolean)
    {
      a = paramBoolean;
    }
  }
  
  public static abstract interface c<T extends TabLayout.g>
  {
    public abstract void a(T paramT);
    
    public abstract void b(T paramT);
    
    public abstract void c(T paramT);
  }
  
  public static abstract interface d
    extends TabLayout.c<TabLayout.g>
  {}
  
  private class e
    extends DataSetObserver
  {
    e() {}
    
    public void onChanged()
    {
      c();
    }
    
    public void onInvalidated()
    {
      c();
    }
  }
  
  private class f
    extends LinearLayout
  {
    private int c;
    private final Paint d;
    private final GradientDrawable e;
    int f = -1;
    float g;
    private int h = -1;
    private int i = -1;
    private int j = -1;
    private ValueAnimator k;
    
    f(Context paramContext)
    {
      super();
      setWillNotDraw(false);
      d = new Paint();
      e = new GradientDrawable();
    }
    
    private void a(TabLayout.i paramI, RectF paramRectF)
    {
      int n = TabLayout.i.a(paramI);
      int m = n;
      if (n < a(24)) {
        m = a(24);
      }
      n = (paramI.getLeft() + paramI.getRight()) / 2;
      int i1 = m / 2;
      m /= 2;
      paramRectF.set(n - i1, 0.0F, m + n, 0.0F);
    }
    
    private void b()
    {
      View localView = getChildAt(f);
      int i1;
      int i2;
      if ((localView != null) && (localView.getWidth() > 0))
      {
        i1 = localView.getLeft();
        i2 = localView.getRight();
        TabLayout localTabLayout = TabLayout.this;
        int n = i1;
        int m = i2;
        if (!D)
        {
          n = i1;
          m = i2;
          if ((localView instanceof TabLayout.i))
          {
            a((TabLayout.i)localView, TabLayout.a(localTabLayout));
            n = (int)aleft;
            m = (int)aright;
          }
        }
        i1 = n;
        i2 = m;
        if (g > 0.0F)
        {
          i1 = n;
          i2 = m;
          if (f < getChildCount() - 1)
          {
            localView = getChildAt(f + 1);
            int i3 = localView.getLeft();
            int i4 = localView.getRight();
            localTabLayout = TabLayout.this;
            i2 = i3;
            i1 = i4;
            if (!D)
            {
              i2 = i3;
              i1 = i4;
              if ((localView instanceof TabLayout.i))
              {
                a((TabLayout.i)localView, TabLayout.a(localTabLayout));
                i2 = (int)aleft;
                i1 = (int)aright;
              }
            }
            float f1 = g;
            n = (int)(i2 * f1 + (1.0F - f1) * n);
            i2 = (int)(i1 * f1 + (1.0F - f1) * m);
            i1 = n;
          }
        }
      }
      else
      {
        i1 = -1;
        i2 = -1;
      }
      b(i1, i2);
    }
    
    void a(int paramInt)
    {
      if (d.getColor() != paramInt)
      {
        d.setColor(paramInt);
        u.B(this);
      }
    }
    
    void a(int paramInt, float paramFloat)
    {
      ValueAnimator localValueAnimator = k;
      if ((localValueAnimator != null) && (localValueAnimator.isRunning())) {
        k.cancel();
      }
      f = paramInt;
      g = paramFloat;
      b();
    }
    
    void a(final int paramInt1, int paramInt2)
    {
      Object localObject = k;
      if ((localObject != null) && (((ValueAnimator)localObject).isRunning())) {
        k.cancel();
      }
      localObject = getChildAt(paramInt1);
      if (localObject == null)
      {
        b();
        return;
      }
      final int m = ((View)localObject).getLeft();
      final int n = ((View)localObject).getRight();
      TabLayout localTabLayout = TabLayout.this;
      if ((!D) && ((localObject instanceof TabLayout.i)))
      {
        a((TabLayout.i)localObject, TabLayout.a(localTabLayout));
        m = (int)aleft;
        n = (int)aright;
      }
      final int i1 = i;
      final int i2 = j;
      if ((i1 == m) && (i2 == n)) {
        return;
      }
      localObject = new ValueAnimator();
      k = ((ValueAnimator)localObject);
      ((ValueAnimator)localObject).setInterpolator(a.b.c.l.a.b);
      ((ValueAnimator)localObject).setDuration(paramInt2);
      ((ValueAnimator)localObject).setFloatValues(new float[] { 0.0F, 1.0F });
      ((ValueAnimator)localObject).addUpdateListener(new a(i1, m, i2, n));
      ((ValueAnimator)localObject).addListener(new b(paramInt1));
      ((ValueAnimator)localObject).start();
    }
    
    boolean a()
    {
      int m = 0;
      int n = getChildCount();
      while (m < n)
      {
        if (getChildAt(m).getWidth() <= 0) {
          return true;
        }
        m += 1;
      }
      return false;
    }
    
    void b(int paramInt)
    {
      if (c != paramInt)
      {
        c = paramInt;
        u.B(this);
      }
    }
    
    void b(int paramInt1, int paramInt2)
    {
      if ((paramInt1 != i) || (paramInt2 != j))
      {
        i = paramInt1;
        j = paramInt2;
        u.B(this);
      }
    }
    
    public void draw(Canvas paramCanvas)
    {
      int m = 0;
      Object localObject = o;
      if (localObject != null) {
        m = ((Drawable)localObject).getIntrinsicHeight();
      }
      if (c >= 0) {
        m = c;
      }
      int i1 = 0;
      int n = 0;
      int i2 = A;
      if (i2 != 0)
      {
        if (i2 != 1)
        {
          if (i2 != 2)
          {
            if (i2 != 3)
            {
              m = i1;
            }
            else
            {
              m = 0;
              n = getHeight();
            }
          }
          else
          {
            i1 = 0;
            n = m;
            m = i1;
          }
        }
        else
        {
          n = (getHeight() - m) / 2;
          i1 = (getHeight() + m) / 2;
          m = n;
          n = i1;
        }
      }
      else
      {
        m = getHeight() - m;
        n = getHeight();
      }
      i1 = i;
      if ((i1 >= 0) && (j > i1))
      {
        localObject = o;
        if (localObject == null) {
          localObject = e;
        }
        localObject = android.support.v4.graphics.drawable.a.h((Drawable)localObject);
        ((Drawable)localObject).setBounds(i, m, j, n);
        Paint localPaint = d;
        if (localPaint != null) {
          if (Build.VERSION.SDK_INT == 21) {
            ((Drawable)localObject).setColorFilter(localPaint.getColor(), PorterDuff.Mode.SRC_IN);
          } else {
            android.support.v4.graphics.drawable.a.b((Drawable)localObject, localPaint.getColor());
          }
        }
        ((Drawable)localObject).draw(paramCanvas);
      }
      super.draw(paramCanvas);
    }
    
    protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
      ValueAnimator localValueAnimator = k;
      if ((localValueAnimator != null) && (localValueAnimator.isRunning()))
      {
        k.cancel();
        long l1 = k.getDuration();
        a(f, Math.round((1.0F - k.getAnimatedFraction()) * (float)l1));
        return;
      }
      b();
    }
    
    protected void onMeasure(int paramInt1, int paramInt2)
    {
      super.onMeasure(paramInt1, paramInt2);
      if (View.MeasureSpec.getMode(paramInt1) != 1073741824) {
        return;
      }
      Object localObject = TabLayout.this;
      if ((B == 1) && (y == 1))
      {
        int i2 = getChildCount();
        int n = 0;
        int m = 0;
        while (m < i2)
        {
          localObject = getChildAt(m);
          i1 = n;
          if (((View)localObject).getVisibility() == 0) {
            i1 = Math.max(n, ((View)localObject).getMeasuredWidth());
          }
          m += 1;
          n = i1;
        }
        if (n <= 0) {
          return;
        }
        int i1 = a(16);
        m = 0;
        if (n * i2 <= getMeasuredWidth() - i1 * 2)
        {
          i1 = 0;
          while (i1 < i2)
          {
            localObject = (LinearLayout.LayoutParams)getChildAt(i1).getLayoutParams();
            if ((width != n) || (weight != 0.0F))
            {
              width = n;
              weight = 0.0F;
              m = 1;
            }
            i1 += 1;
          }
        }
        else
        {
          localObject = TabLayout.this;
          y = 0;
          ((TabLayout)localObject).a(false);
          m = 1;
        }
        if (m != 0) {
          super.onMeasure(paramInt1, paramInt2);
        }
      }
    }
    
    public void onRtlPropertiesChanged(int paramInt)
    {
      super.onRtlPropertiesChanged(paramInt);
      if ((Build.VERSION.SDK_INT < 23) && (h != paramInt))
      {
        requestLayout();
        h = paramInt;
      }
    }
    
    class a
      implements ValueAnimator.AnimatorUpdateListener
    {
      a(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {}
      
      public void onAnimationUpdate(ValueAnimator paramValueAnimator)
      {
        float f = paramValueAnimator.getAnimatedFraction();
        b(a.b.c.l.a.a(i1, m, f), a.b.c.l.a.a(i2, n, f));
      }
    }
    
    class b
      extends AnimatorListenerAdapter
    {
      b(int paramInt) {}
      
      public void onAnimationEnd(Animator paramAnimator)
      {
        paramAnimator = TabLayout.f.this;
        f = paramInt1;
        g = 0.0F;
      }
    }
  }
  
  public static class g
  {
    private Drawable a;
    private CharSequence b;
    private CharSequence c;
    private int d = -1;
    private View e;
    public TabLayout f;
    public TabLayout.i g;
    
    public g() {}
    
    public g a(int paramInt)
    {
      a(LayoutInflater.from(g.getContext()).inflate(paramInt, g, false));
      return this;
    }
    
    public g a(Drawable paramDrawable)
    {
      a = paramDrawable;
      h();
      return this;
    }
    
    public g a(View paramView)
    {
      e = paramView;
      h();
      return this;
    }
    
    public g a(CharSequence paramCharSequence)
    {
      c = paramCharSequence;
      h();
      return this;
    }
    
    public View a()
    {
      return e;
    }
    
    public Drawable b()
    {
      return a;
    }
    
    public g b(CharSequence paramCharSequence)
    {
      if ((TextUtils.isEmpty(c)) && (!TextUtils.isEmpty(paramCharSequence))) {
        g.setContentDescription(paramCharSequence);
      }
      b = paramCharSequence;
      h();
      return this;
    }
    
    void b(int paramInt)
    {
      d = paramInt;
    }
    
    public int c()
    {
      return d;
    }
    
    public CharSequence d()
    {
      return b;
    }
    
    public boolean e()
    {
      TabLayout localTabLayout = f;
      if (localTabLayout != null) {
        return localTabLayout.getSelectedTabPosition() == d;
      }
      throw new IllegalArgumentException("Tab not attached to a TabLayout");
    }
    
    void f()
    {
      f = null;
      g = null;
      a = null;
      b = null;
      c = null;
      d = -1;
      e = null;
    }
    
    public void g()
    {
      TabLayout localTabLayout = f;
      if (localTabLayout != null)
      {
        localTabLayout.c(this);
        return;
      }
      throw new IllegalArgumentException("Tab not attached to a TabLayout");
    }
    
    void h()
    {
      TabLayout.i localI = g;
      if (localI != null) {
        localI.b();
      }
    }
  }
  
  public static class h
    implements ViewPager.j
  {
    private final WeakReference<TabLayout> c;
    private int d;
    private int e;
    
    public h(TabLayout paramTabLayout)
    {
      c = new WeakReference(paramTabLayout);
    }
    
    void a()
    {
      e = 0;
      d = 0;
    }
    
    public void a(int paramInt)
    {
      d = e;
      e = paramInt;
    }
    
    public void a(int paramInt1, float paramFloat, int paramInt2)
    {
      TabLayout localTabLayout = (TabLayout)c.get();
      if (localTabLayout != null)
      {
        paramInt2 = e;
        boolean bool2 = false;
        boolean bool1;
        if ((paramInt2 == 2) && (d != 1)) {
          bool1 = false;
        } else {
          bool1 = true;
        }
        if ((e != 2) || (d != 0)) {
          bool2 = true;
        }
        localTabLayout.a(paramInt1, paramFloat, bool1, bool2);
      }
    }
    
    public void b(int paramInt)
    {
      TabLayout localTabLayout = (TabLayout)c.get();
      if ((localTabLayout != null) && (localTabLayout.getSelectedTabPosition() != paramInt) && (paramInt < localTabLayout.getTabCount()))
      {
        int i = e;
        boolean bool;
        if ((i != 0) && ((i != 2) || (d != 0))) {
          bool = false;
        } else {
          bool = true;
        }
        localTabLayout.b(localTabLayout.b(paramInt), bool);
      }
    }
  }
  
  class i
    extends LinearLayout
  {
    private TabLayout.g c;
    private TextView d;
    private ImageView e;
    private View f;
    private TextView g;
    private ImageView h;
    private Drawable i;
    private int j = 2;
    
    public i(Context paramContext)
    {
      super();
      a(paramContext);
      u.a(this, g, h, i, j);
      setGravity(17);
      setOrientation(C ^ true);
      setClickable(true);
      u.a(this, r.a(getContext(), 1002));
    }
    
    private float a(Layout paramLayout, int paramInt, float paramFloat)
    {
      return paramLayout.getLineWidth(paramInt) * (paramFloat / paramLayout.getPaint().getTextSize());
    }
    
    private void a(Context paramContext)
    {
      int m = s;
      Object localObject = null;
      if (m != 0)
      {
        i = a.b.h.c.a.a.c(paramContext, m);
        paramContext = i;
        if ((paramContext != null) && (paramContext.isStateful())) {
          i.setState(getDrawableState());
        }
      }
      else
      {
        i = null;
      }
      paramContext = new GradientDrawable();
      paramContext.setColor(0);
      if (n != null)
      {
        GradientDrawable localGradientDrawable = new GradientDrawable();
        localGradientDrawable.setCornerRadius(1.0E-5F);
        localGradientDrawable.setColor(-1);
        ColorStateList localColorStateList = a.b.c.q.a.a(n);
        if (Build.VERSION.SDK_INT >= 21)
        {
          if (E) {
            paramContext = null;
          }
          if (!E) {
            localObject = localGradientDrawable;
          }
          paramContext = new RippleDrawable(localColorStateList, paramContext, (Drawable)localObject);
        }
        else
        {
          localObject = android.support.v4.graphics.drawable.a.h(localGradientDrawable);
          android.support.v4.graphics.drawable.a.a((Drawable)localObject, localColorStateList);
          paramContext = new LayerDrawable(new Drawable[] { paramContext, localObject });
        }
      }
      u.a(this, paramContext);
      invalidate();
    }
    
    private void a(Canvas paramCanvas)
    {
      Drawable localDrawable = i;
      if (localDrawable != null)
      {
        localDrawable.setBounds(getLeft(), getTop(), getRight(), getBottom());
        i.draw(paramCanvas);
      }
    }
    
    private void a(TextView paramTextView, ImageView paramImageView)
    {
      Object localObject1 = c;
      Object localObject3 = null;
      if ((localObject1 != null) && (((TabLayout.g)localObject1).b() != null)) {
        localObject1 = android.support.v4.graphics.drawable.a.h(c.b()).mutate();
      } else {
        localObject1 = null;
      }
      Object localObject2 = c;
      if (localObject2 != null) {
        localObject2 = ((TabLayout.g)localObject2).d();
      } else {
        localObject2 = null;
      }
      if (paramImageView != null) {
        if (localObject1 != null)
        {
          paramImageView.setImageDrawable((Drawable)localObject1);
          paramImageView.setVisibility(0);
          setVisibility(0);
        }
        else
        {
          paramImageView.setVisibility(8);
          paramImageView.setImageDrawable(null);
        }
      }
      boolean bool = TextUtils.isEmpty((CharSequence)localObject2) ^ true;
      if (paramTextView != null) {
        if (bool)
        {
          paramTextView.setText((CharSequence)localObject2);
          paramTextView.setVisibility(0);
          setVisibility(0);
        }
        else
        {
          paramTextView.setVisibility(8);
          paramTextView.setText(null);
        }
      }
      if (paramImageView != null)
      {
        paramTextView = (ViewGroup.MarginLayoutParams)paramImageView.getLayoutParams();
        int n = 0;
        int m = n;
        if (bool)
        {
          m = n;
          if (paramImageView.getVisibility() == 0) {
            m = a(8);
          }
        }
        if (C)
        {
          if (m != android.support.v4.view.g.a(paramTextView))
          {
            android.support.v4.view.g.a(paramTextView, m);
            bottomMargin = 0;
            paramImageView.setLayoutParams(paramTextView);
            paramImageView.requestLayout();
          }
        }
        else if (m != bottomMargin)
        {
          bottomMargin = m;
          android.support.v4.view.g.a(paramTextView, 0);
          paramImageView.setLayoutParams(paramTextView);
          paramImageView.requestLayout();
        }
      }
      paramTextView = c;
      if (paramTextView != null) {
        paramTextView = TabLayout.g.a(paramTextView);
      } else {
        paramTextView = null;
      }
      if (bool) {
        paramTextView = localObject3;
      }
      l1.a(this, paramTextView);
    }
    
    private int d()
    {
      int i2 = 0;
      int i3 = 0;
      int i1 = 0;
      View[] arrayOfView = new View[3];
      Object localObject = d;
      int n = 0;
      arrayOfView[0] = localObject;
      arrayOfView[1] = e;
      arrayOfView[2] = f;
      int i6 = arrayOfView.length;
      while (n < i6)
      {
        localObject = arrayOfView[n];
        int i5 = i2;
        int i4 = i3;
        int m = i1;
        if (localObject != null)
        {
          i5 = i2;
          i4 = i3;
          m = i1;
          if (((View)localObject).getVisibility() == 0)
          {
            i4 = ((View)localObject).getLeft();
            m = i4;
            if (i2 != 0) {
              m = Math.min(i3, i4);
            }
            i3 = m;
            i4 = ((View)localObject).getRight();
            m = i4;
            if (i2 != 0) {
              m = Math.max(i1, i4);
            }
            i5 = 1;
            i4 = i3;
          }
        }
        n += 1;
        i2 = i5;
        i3 = i4;
        i1 = m;
      }
      return i1 - i3;
    }
    
    void a()
    {
      a(null);
      setSelected(false);
    }
    
    void a(TabLayout.g paramG)
    {
      if (paramG != c)
      {
        c = paramG;
        b();
      }
    }
    
    final void b()
    {
      TabLayout.g localG = c;
      PorterDuff.Mode localMode = null;
      if (localG != null) {
        localObject1 = localG.a();
      } else {
        localObject1 = null;
      }
      if (localObject1 != null)
      {
        Object localObject2 = ((View)localObject1).getParent();
        if (localObject2 != this)
        {
          if (localObject2 != null) {
            ((ViewGroup)localObject2).removeView((View)localObject1);
          }
          addView((View)localObject1);
        }
        f = ((View)localObject1);
        localObject2 = d;
        if (localObject2 != null) {
          ((TextView)localObject2).setVisibility(8);
        }
        localObject2 = e;
        if (localObject2 != null)
        {
          ((ImageView)localObject2).setVisibility(8);
          e.setImageDrawable(null);
        }
        g = ((TextView)((View)localObject1).findViewById(16908308));
        localObject2 = g;
        if (localObject2 != null) {
          j = p.d((TextView)localObject2);
        }
        h = ((ImageView)((View)localObject1).findViewById(16908294));
      }
      else
      {
        localObject1 = f;
        if (localObject1 != null)
        {
          removeView((View)localObject1);
          f = null;
        }
        g = null;
        h = null;
      }
      Object localObject1 = f;
      boolean bool2 = false;
      if (localObject1 == null)
      {
        if (e == null)
        {
          localObject1 = (ImageView)LayoutInflater.from(getContext()).inflate(a.b.c.h.design_layout_tab_icon, this, false);
          addView((View)localObject1, 0);
          e = ((ImageView)localObject1);
        }
        if ((localG != null) && (localG.b() != null)) {
          localObject1 = android.support.v4.graphics.drawable.a.h(localG.b()).mutate();
        } else {
          localObject1 = localMode;
        }
        if (localObject1 != null)
        {
          android.support.v4.graphics.drawable.a.a((Drawable)localObject1, m);
          localMode = p;
          if (localMode != null) {
            android.support.v4.graphics.drawable.a.a((Drawable)localObject1, localMode);
          }
        }
        if (d == null)
        {
          localObject1 = (TextView)LayoutInflater.from(getContext()).inflate(a.b.c.h.design_layout_tab_text, this, false);
          addView((View)localObject1);
          d = ((TextView)localObject1);
          j = p.d(d);
        }
        p.d(d, k);
        localObject1 = l;
        if (localObject1 != null) {
          d.setTextColor((ColorStateList)localObject1);
        }
        a(d, e);
      }
      else if ((g != null) || (h != null))
      {
        a(g, h);
      }
      if ((localG != null) && (!TextUtils.isEmpty(TabLayout.g.a(localG)))) {
        setContentDescription(TabLayout.g.a(localG));
      }
      boolean bool1 = bool2;
      if (localG != null)
      {
        bool1 = bool2;
        if (localG.e()) {
          bool1 = true;
        }
      }
      setSelected(bool1);
    }
    
    final void c()
    {
      setOrientation(C ^ true);
      if ((g == null) && (h == null))
      {
        a(d, e);
        return;
      }
      a(g, h);
    }
    
    protected void drawableStateChanged()
    {
      super.drawableStateChanged();
      boolean bool2 = false;
      int[] arrayOfInt = getDrawableState();
      Drawable localDrawable = i;
      boolean bool1 = bool2;
      if (localDrawable != null)
      {
        bool1 = bool2;
        if (localDrawable.isStateful()) {
          bool1 = false | i.setState(arrayOfInt);
        }
      }
      if (bool1)
      {
        invalidate();
        invalidate();
      }
    }
    
    public void onInitializeAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent)
    {
      super.onInitializeAccessibilityEvent(paramAccessibilityEvent);
      paramAccessibilityEvent.setClassName(a.c.class.getName());
    }
    
    @TargetApi(14)
    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo paramAccessibilityNodeInfo)
    {
      super.onInitializeAccessibilityNodeInfo(paramAccessibilityNodeInfo);
      paramAccessibilityNodeInfo.setClassName(a.c.class.getName());
    }
    
    public void onMeasure(int paramInt1, int paramInt2)
    {
      int m = View.MeasureSpec.getSize(paramInt1);
      int n = View.MeasureSpec.getMode(paramInt1);
      int i1 = getTabMaxWidth();
      if ((i1 > 0) && ((n == 0) || (m > i1))) {
        paramInt1 = View.MeasureSpec.makeMeasureSpec(t, Integer.MIN_VALUE);
      }
      super.onMeasure(paramInt1, paramInt2);
      if (d != null)
      {
        float f2 = q;
        n = j;
        Object localObject = e;
        float f1;
        if ((localObject != null) && (((ImageView)localObject).getVisibility() == 0))
        {
          m = 1;
          f1 = f2;
        }
        else
        {
          localObject = d;
          f1 = f2;
          m = n;
          if (localObject != null)
          {
            f1 = f2;
            m = n;
            if (((TextView)localObject).getLineCount() > 1)
            {
              f1 = r;
              m = n;
            }
          }
        }
        f2 = d.getTextSize();
        int i2 = d.getLineCount();
        n = p.d(d);
        if ((f1 != f2) || ((n >= 0) && (m != n)))
        {
          i1 = 1;
          n = i1;
          if (B == 1)
          {
            n = i1;
            if (f1 > f2)
            {
              n = i1;
              if (i2 == 1)
              {
                localObject = d.getLayout();
                if (localObject != null)
                {
                  n = i1;
                  if (a((Layout)localObject, 0, f1) <= getMeasuredWidth() - getPaddingLeft() - getPaddingRight()) {}
                }
                else
                {
                  n = 0;
                }
              }
            }
          }
          if (n != 0)
          {
            d.setTextSize(0, f1);
            d.setMaxLines(m);
            super.onMeasure(paramInt1, paramInt2);
          }
        }
      }
    }
    
    public boolean performClick()
    {
      boolean bool = super.performClick();
      if (c != null)
      {
        if (!bool) {
          playSoundEffect(0);
        }
        c.g();
        return true;
      }
      return bool;
    }
    
    public void setSelected(boolean paramBoolean)
    {
      int m;
      if (isSelected() != paramBoolean) {
        m = 1;
      } else {
        m = 0;
      }
      super.setSelected(paramBoolean);
      if ((m != 0) && (paramBoolean) && (Build.VERSION.SDK_INT < 16)) {
        sendAccessibilityEvent(4);
      }
      Object localObject = d;
      if (localObject != null) {
        ((TextView)localObject).setSelected(paramBoolean);
      }
      localObject = e;
      if (localObject != null) {
        ((ImageView)localObject).setSelected(paramBoolean);
      }
      localObject = f;
      if (localObject != null) {
        ((View)localObject).setSelected(paramBoolean);
      }
    }
  }
  
  public static class j
    implements TabLayout.d
  {
    private final ViewPager a;
    
    public j(ViewPager paramViewPager)
    {
      a = paramViewPager;
    }
    
    public void a(TabLayout.g paramG)
    {
      a.setCurrentItem(paramG.c());
    }
    
    public void b(TabLayout.g paramG) {}
    
    public void c(TabLayout.g paramG) {}
  }
}
