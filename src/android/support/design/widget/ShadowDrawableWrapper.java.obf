package android.support.design.widget;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Path.FillType;
import android.graphics.RadialGradient;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Shader.TileMode;
import android.graphics.drawable.Drawable;
import android.support.v4.content.a;

public class r
  extends a.b.h.d.a.c
{
  static final double s = Math.cos(Math.toRadians(45.0D));
  final Paint d;
  final Paint e;
  final RectF f;
  float g;
  Path h;
  float i;
  float j;
  float k;
  private boolean l = true;
  private final int m;
  private final int n;
  private final int o;
  private boolean p = true;
  private float q;
  private boolean r = false;
  
  public r(Context paramContext, Drawable paramDrawable, float paramFloat1, float paramFloat2, float paramFloat3)
  {
    super(paramDrawable);
    m = a.a(paramContext, a.b.c.c.design_fab_shadow_start_color);
    n = a.a(paramContext, a.b.c.c.design_fab_shadow_mid_color);
    o = a.a(paramContext, a.b.c.c.design_fab_shadow_end_color);
    d = new Paint(5);
    d.setStyle(Paint.Style.FILL);
    g = Math.round(paramFloat1);
    f = new RectF();
    e = new Paint(d);
    e.setAntiAlias(false);
    a(paramFloat2, paramFloat3);
  }
  
  public static float a(float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      double d1 = paramFloat1;
      double d2 = s;
      double d3 = paramFloat2;
      Double.isNaN(d3);
      Double.isNaN(d1);
      return (float)(d1 + (1.0D - d2) * d3);
    }
    return paramFloat1;
  }
  
  private void a(Canvas paramCanvas)
  {
    int i3 = paramCanvas.save();
    paramCanvas.rotate(q, f.centerX(), f.centerY());
    float f4 = -g - j;
    float f5 = g;
    float f1 = f.width();
    int i2 = 1;
    if (f1 - f5 * 2.0F > 0.0F) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    if (f.height() - f5 * 2.0F <= 0.0F) {
      i2 = 0;
    }
    float f3 = k;
    f1 = f5 / (f5 + (f3 - 0.5F * f3));
    float f2 = f5 / (f5 + (f3 - 0.25F * f3));
    f3 = f5 / (f5 + (f3 - f3 * 1.0F));
    int i4 = paramCanvas.save();
    RectF localRectF = f;
    paramCanvas.translate(left + f5, top + f5);
    paramCanvas.scale(f1, f2);
    paramCanvas.drawPath(h, d);
    if (i1 != 0)
    {
      paramCanvas.scale(1.0F / f1, 1.0F);
      paramCanvas.drawRect(0.0F, f4, f.width() - f5 * 2.0F, -g, e);
    }
    paramCanvas.restoreToCount(i4);
    i4 = paramCanvas.save();
    localRectF = f;
    paramCanvas.translate(right - f5, bottom - f5);
    paramCanvas.scale(f1, f3);
    paramCanvas.rotate(180.0F);
    paramCanvas.drawPath(h, d);
    if (i1 != 0)
    {
      paramCanvas.scale(1.0F / f1, 1.0F);
      paramCanvas.drawRect(0.0F, f4, f.width() - f5 * 2.0F, -g + j, e);
    }
    paramCanvas.restoreToCount(i4);
    int i1 = paramCanvas.save();
    localRectF = f;
    paramCanvas.translate(left + f5, bottom - f5);
    paramCanvas.scale(f1, f3);
    paramCanvas.rotate(270.0F);
    paramCanvas.drawPath(h, d);
    if (i2 != 0)
    {
      paramCanvas.scale(1.0F / f3, 1.0F);
      paramCanvas.drawRect(0.0F, f4, f.height() - f5 * 2.0F, -g, e);
    }
    paramCanvas.restoreToCount(i1);
    i1 = paramCanvas.save();
    localRectF = f;
    paramCanvas.translate(right - f5, top + f5);
    paramCanvas.scale(f1, f2);
    paramCanvas.rotate(90.0F);
    paramCanvas.drawPath(h, d);
    if (i2 != 0)
    {
      paramCanvas.scale(1.0F / f2, 1.0F);
      paramCanvas.drawRect(0.0F, f4, f.height() - 2.0F * f5, -g, e);
    }
    paramCanvas.restoreToCount(i1);
    paramCanvas.restoreToCount(i3);
  }
  
  private void a(Rect paramRect)
  {
    float f1 = i;
    float f2 = 1.5F * f1;
    f.set(left + f1, top + f2, right - f1, bottom - f2);
    paramRect = a();
    RectF localRectF = f;
    paramRect.setBounds((int)left, (int)top, (int)right, (int)bottom);
    c();
  }
  
  public static float b(float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      double d1 = 1.5F * paramFloat1;
      double d2 = s;
      double d3 = paramFloat2;
      Double.isNaN(d3);
      Double.isNaN(d1);
      return (float)(d1 + (1.0D - d2) * d3);
    }
    return 1.5F * paramFloat1;
  }
  
  private static int c(float paramFloat)
  {
    int i1 = Math.round(paramFloat);
    if (i1 % 2 == 1) {
      return i1 - 1;
    }
    return i1;
  }
  
  private void c()
  {
    float f1 = g;
    Object localObject1 = new RectF(-f1, -f1, f1, f1);
    RectF localRectF = new RectF((RectF)localObject1);
    f1 = j;
    localRectF.inset(-f1, -f1);
    Object localObject2 = h;
    if (localObject2 == null) {
      h = new Path();
    } else {
      ((Path)localObject2).reset();
    }
    h.setFillType(Path.FillType.EVEN_ODD);
    h.moveTo(-g, 0.0F);
    h.rLineTo(-j, 0.0F);
    h.arcTo(localRectF, 180.0F, 90.0F, false);
    h.arcTo((RectF)localObject1, 270.0F, -90.0F, false);
    h.close();
    f1 = -top;
    if (f1 > 0.0F)
    {
      f2 = g / f1;
      float f3 = (1.0F - f2) / 2.0F;
      localObject2 = d;
      i1 = m;
      i2 = n;
      i3 = o;
      Shader.TileMode localTileMode = Shader.TileMode.CLAMP;
      ((Paint)localObject2).setShader(new RadialGradient(0.0F, 0.0F, f1, new int[] { 0, i1, i2, i3 }, new float[] { 0.0F, f2, f2 + f3, 1.0F }, localTileMode));
    }
    localObject2 = e;
    f1 = top;
    float f2 = top;
    int i1 = m;
    int i2 = n;
    int i3 = o;
    localObject1 = Shader.TileMode.CLAMP;
    ((Paint)localObject2).setShader(new LinearGradient(0.0F, f1, 0.0F, f2, new int[] { i1, i2, i3 }, new float[] { 0.0F, 0.5F, 1.0F }, (Shader.TileMode)localObject1));
    e.setAntiAlias(false);
  }
  
  public final void a(float paramFloat)
  {
    if (q != paramFloat)
    {
      q = paramFloat;
      invalidateSelf();
    }
  }
  
  public void a(float paramFloat1, float paramFloat2)
  {
    if ((paramFloat1 >= 0.0F) && (paramFloat2 >= 0.0F))
    {
      float f1 = c(paramFloat1);
      float f2 = c(paramFloat2);
      paramFloat1 = f1;
      if (f1 > f2)
      {
        paramFloat2 = f2;
        paramFloat1 = paramFloat2;
        if (!r)
        {
          r = true;
          paramFloat1 = paramFloat2;
        }
      }
      if ((k == paramFloat1) && (i == f2)) {
        return;
      }
      k = paramFloat1;
      i = f2;
      j = Math.round(1.5F * paramFloat1);
      l = true;
      invalidateSelf();
      return;
    }
    throw new IllegalArgumentException("invalid shadow size");
  }
  
  public void a(boolean paramBoolean)
  {
    p = paramBoolean;
    invalidateSelf();
  }
  
  public float b()
  {
    return k;
  }
  
  public void b(float paramFloat)
  {
    a(paramFloat, i);
  }
  
  public void draw(Canvas paramCanvas)
  {
    if (l)
    {
      a(getBounds());
      l = false;
    }
    a(paramCanvas);
    super.draw(paramCanvas);
  }
  
  public int getOpacity()
  {
    return -3;
  }
  
  public boolean getPadding(Rect paramRect)
  {
    int i1 = (int)Math.ceil(b(i, g, p));
    int i2 = (int)Math.ceil(a(i, g, p));
    paramRect.set(i2, i1, i2, i1);
    return true;
  }
  
  protected void onBoundsChange(Rect paramRect)
  {
    l = true;
  }
  
  public void setAlpha(int paramInt)
  {
    super.setAlpha(paramInt);
    d.setAlpha(paramInt);
    e.setAlpha(paramInt);
  }
}
