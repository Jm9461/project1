package android.support.design.widget;

import a.b.c.b;
import a.b.c.d;
import a.b.c.k;
import a.b.c.o.c;
import android.animation.Animator.AnimatorListener;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.PorterDuff.Mode;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.design.internal.g;
import android.support.v4.view.t;
import android.support.v4.view.u;
import android.support.v4.widget.r;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.MarginLayoutParams;
import android.widget.ImageButton;
import android.widget.ImageView.ScaleType;
import java.util.List;

@CoordinatorLayout.d(Behavior.class)
public class FloatingActionButton
  extends a0
  implements t, r, a.b.c.o.a
{
  private ColorStateList d;
  private PorterDuff.Mode e;
  private ColorStateList f;
  private PorterDuff.Mode g;
  private int h;
  private ColorStateList i;
  private int j;
  private int k;
  private int l;
  private int m;
  boolean n;
  final Rect o = new Rect();
  private final Rect p = new Rect();
  private final android.support.v7.widget.n q;
  private final c r;
  private l s;
  
  public FloatingActionButton(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public FloatingActionButton(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, b.floatingActionButtonStyle);
  }
  
  public FloatingActionButton(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    TypedArray localTypedArray = g.c(paramContext, paramAttributeSet, k.FloatingActionButton, paramInt, a.b.c.j.Widget_Design_FloatingActionButton, new int[0]);
    d = a.b.c.p.a.a(paramContext, localTypedArray, k.FloatingActionButton_backgroundTint);
    e = android.support.design.internal.h.a(localTypedArray.getInt(k.FloatingActionButton_backgroundTintMode, -1), null);
    i = a.b.c.p.a.a(paramContext, localTypedArray, k.FloatingActionButton_rippleColor);
    j = localTypedArray.getInt(k.FloatingActionButton_fabSize, -1);
    k = localTypedArray.getDimensionPixelSize(k.FloatingActionButton_fabCustomSize, 0);
    h = localTypedArray.getDimensionPixelSize(k.FloatingActionButton_borderWidth, 0);
    float f1 = localTypedArray.getDimension(k.FloatingActionButton_elevation, 0.0F);
    float f2 = localTypedArray.getDimension(k.FloatingActionButton_hoveredFocusedTranslationZ, 0.0F);
    float f3 = localTypedArray.getDimension(k.FloatingActionButton_pressedTranslationZ, 0.0F);
    n = localTypedArray.getBoolean(k.FloatingActionButton_useCompatPadding, false);
    m = localTypedArray.getDimensionPixelSize(k.FloatingActionButton_maxImageSize, 0);
    a.b.c.l.h localH = a.b.c.l.h.a(paramContext, localTypedArray, k.FloatingActionButton_showMotionSpec);
    paramContext = a.b.c.l.h.a(paramContext, localTypedArray, k.FloatingActionButton_hideMotionSpec);
    localTypedArray.recycle();
    q = new android.support.v7.widget.n(this);
    q.a(paramAttributeSet, paramInt);
    r = new c(this);
    getImpl().a(d, e, i, h);
    getImpl().a(f1);
    getImpl().b(f2);
    getImpl().d(f3);
    getImpl().a(m);
    getImpl().b(localH);
    getImpl().a(paramContext);
    setScaleType(ImageView.ScaleType.MATRIX);
  }
  
  private int a(int paramInt)
  {
    int i1 = k;
    if (i1 != 0) {
      return i1;
    }
    Resources localResources = getResources();
    if (paramInt != -1)
    {
      if (paramInt != 1) {
        return localResources.getDimensionPixelSize(d.design_fab_size_normal);
      }
      return localResources.getDimensionPixelSize(d.design_fab_size_mini);
    }
    if (Math.max(getConfigurationscreenWidthDp, getConfigurationscreenHeightDp) < 470) {
      return a(1);
    }
    return a(0);
  }
  
  private static int a(int paramInt1, int paramInt2)
  {
    int i1 = View.MeasureSpec.getMode(paramInt2);
    paramInt2 = View.MeasureSpec.getSize(paramInt2);
    if (i1 != Integer.MIN_VALUE)
    {
      if (i1 != 0)
      {
        if (i1 == 1073741824) {
          return paramInt2;
        }
        throw new IllegalArgumentException();
      }
      return paramInt1;
    }
    return Math.min(paramInt1, paramInt2);
  }
  
  private l.g a(final b paramB)
  {
    if (paramB == null) {
      return null;
    }
    return new a(paramB);
  }
  
  private l c()
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return new m(this, new c());
    }
    return new l(this, new c());
  }
  
  private void c(Rect paramRect)
  {
    int i1 = left;
    Rect localRect = o;
    left = (i1 + left);
    top += top;
    right -= right;
    bottom -= bottom;
  }
  
  private void d()
  {
    Drawable localDrawable = getDrawable();
    if (localDrawable == null) {
      return;
    }
    Object localObject = f;
    if (localObject == null)
    {
      android.support.v4.graphics.drawable.a.b(localDrawable);
      return;
    }
    int i1 = ((ColorStateList)localObject).getColorForState(getDrawableState(), 0);
    PorterDuff.Mode localMode = g;
    localObject = localMode;
    if (localMode == null) {
      localObject = PorterDuff.Mode.SRC_IN;
    }
    localDrawable.mutate().setColorFilter(android.support.v7.widget.j.a(i1, (PorterDuff.Mode)localObject));
  }
  
  private l getImpl()
  {
    if (s == null) {
      s = c();
    }
    return s;
  }
  
  public void a(Animator.AnimatorListener paramAnimatorListener)
  {
    getImpl().a(paramAnimatorListener);
  }
  
  void a(b paramB, boolean paramBoolean)
  {
    getImpl().a(a(paramB), paramBoolean);
  }
  
  public boolean a()
  {
    return r.b();
  }
  
  @Deprecated
  public boolean a(Rect paramRect)
  {
    if (u.y(this))
    {
      paramRect.set(0, 0, getWidth(), getHeight());
      c(paramRect);
      return true;
    }
    return false;
  }
  
  public void b(Animator.AnimatorListener paramAnimatorListener)
  {
    getImpl().b(paramAnimatorListener);
  }
  
  public void b(Rect paramRect)
  {
    paramRect.set(0, 0, getMeasuredWidth(), getMeasuredHeight());
    c(paramRect);
  }
  
  void b(b paramB, boolean paramBoolean)
  {
    getImpl().b(a(paramB), paramBoolean);
  }
  
  public boolean b()
  {
    return getImpl().i();
  }
  
  public void c(Animator.AnimatorListener paramAnimatorListener)
  {
    getImpl().c(paramAnimatorListener);
  }
  
  public void d(Animator.AnimatorListener paramAnimatorListener)
  {
    getImpl().d(paramAnimatorListener);
  }
  
  protected void drawableStateChanged()
  {
    super.drawableStateChanged();
    getImpl().a(getDrawableState());
  }
  
  public ColorStateList getBackgroundTintList()
  {
    return d;
  }
  
  public PorterDuff.Mode getBackgroundTintMode()
  {
    return e;
  }
  
  public float getCompatElevation()
  {
    return getImpl().c();
  }
  
  public float getCompatHoveredFocusedTranslationZ()
  {
    return getImpl().e();
  }
  
  public float getCompatPressedTranslationZ()
  {
    return getImpl().f();
  }
  
  public Drawable getContentBackground()
  {
    return getImpl().b();
  }
  
  public int getCustomSize()
  {
    return k;
  }
  
  public int getExpandedComponentIdHint()
  {
    return r.a();
  }
  
  public a.b.c.l.h getHideMotionSpec()
  {
    return getImpl().d();
  }
  
  @Deprecated
  public int getRippleColor()
  {
    ColorStateList localColorStateList = i;
    if (localColorStateList != null) {
      return localColorStateList.getDefaultColor();
    }
    return 0;
  }
  
  public ColorStateList getRippleColorStateList()
  {
    return i;
  }
  
  public a.b.c.l.h getShowMotionSpec()
  {
    return getImpl().g();
  }
  
  public int getSize()
  {
    return j;
  }
  
  int getSizeDimension()
  {
    return a(j);
  }
  
  public ColorStateList getSupportBackgroundTintList()
  {
    return getBackgroundTintList();
  }
  
  public PorterDuff.Mode getSupportBackgroundTintMode()
  {
    return getBackgroundTintMode();
  }
  
  public ColorStateList getSupportImageTintList()
  {
    return f;
  }
  
  public PorterDuff.Mode getSupportImageTintMode()
  {
    return g;
  }
  
  public boolean getUseCompatPadding()
  {
    return n;
  }
  
  public void jumpDrawablesToCurrentState()
  {
    super.jumpDrawablesToCurrentState();
    getImpl().j();
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    getImpl().m();
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    getImpl().o();
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i1 = getSizeDimension();
    l = ((i1 - m) / 2);
    getImpl().s();
    paramInt1 = Math.min(a(i1, paramInt1), a(i1, paramInt2));
    Rect localRect = o;
    setMeasuredDimension(left + paramInt1 + right, top + paramInt1 + bottom);
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof a.b.c.t.a))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    paramParcelable = (a.b.c.t.a)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.a());
    r.a((Bundle)e.get("expandableWidgetHelper"));
  }
  
  protected Parcelable onSaveInstanceState()
  {
    a.b.c.t.a localA = new a.b.c.t.a(super.onSaveInstanceState());
    e.put("expandableWidgetHelper", r.c());
    return localA;
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if ((paramMotionEvent.getAction() == 0) && (a(p)) && (!p.contains((int)paramMotionEvent.getX(), (int)paramMotionEvent.getY()))) {
      return false;
    }
    return super.onTouchEvent(paramMotionEvent);
  }
  
  public void setBackgroundColor(int paramInt)
  {
    Log.i("FloatingActionButton", "Setting a custom background is not supported.");
  }
  
  public void setBackgroundDrawable(Drawable paramDrawable)
  {
    Log.i("FloatingActionButton", "Setting a custom background is not supported.");
  }
  
  public void setBackgroundResource(int paramInt)
  {
    Log.i("FloatingActionButton", "Setting a custom background is not supported.");
  }
  
  public void setBackgroundTintList(ColorStateList paramColorStateList)
  {
    if (d != paramColorStateList)
    {
      d = paramColorStateList;
      getImpl().a(paramColorStateList);
    }
  }
  
  public void setBackgroundTintMode(PorterDuff.Mode paramMode)
  {
    if (e != paramMode)
    {
      e = paramMode;
      getImpl().a(paramMode);
    }
  }
  
  public void setCompatElevation(float paramFloat)
  {
    getImpl().a(paramFloat);
  }
  
  public void setCompatElevationResource(int paramInt)
  {
    setCompatElevation(getResources().getDimension(paramInt));
  }
  
  public void setCompatHoveredFocusedTranslationZ(float paramFloat)
  {
    getImpl().b(paramFloat);
  }
  
  public void setCompatHoveredFocusedTranslationZResource(int paramInt)
  {
    setCompatHoveredFocusedTranslationZ(getResources().getDimension(paramInt));
  }
  
  public void setCompatPressedTranslationZ(float paramFloat)
  {
    getImpl().d(paramFloat);
  }
  
  public void setCompatPressedTranslationZResource(int paramInt)
  {
    setCompatPressedTranslationZ(getResources().getDimension(paramInt));
  }
  
  public void setCustomSize(int paramInt)
  {
    if (paramInt >= 0)
    {
      k = paramInt;
      return;
    }
    throw new IllegalArgumentException("Custom size must be non-negative");
  }
  
  public void setExpandedComponentIdHint(int paramInt)
  {
    r.a(paramInt);
  }
  
  public void setHideMotionSpec(a.b.c.l.h paramH)
  {
    getImpl().a(paramH);
  }
  
  public void setHideMotionSpecResource(int paramInt)
  {
    setHideMotionSpec(a.b.c.l.h.a(getContext(), paramInt));
  }
  
  public void setImageDrawable(Drawable paramDrawable)
  {
    super.setImageDrawable(paramDrawable);
    getImpl().r();
  }
  
  public void setImageResource(int paramInt)
  {
    q.a(paramInt);
  }
  
  public void setRippleColor(int paramInt)
  {
    setRippleColor(ColorStateList.valueOf(paramInt));
  }
  
  public void setRippleColor(ColorStateList paramColorStateList)
  {
    if (i != paramColorStateList)
    {
      i = paramColorStateList;
      getImpl().b(i);
    }
  }
  
  public void setShowMotionSpec(a.b.c.l.h paramH)
  {
    getImpl().b(paramH);
  }
  
  public void setShowMotionSpecResource(int paramInt)
  {
    setShowMotionSpec(a.b.c.l.h.a(getContext(), paramInt));
  }
  
  public void setSize(int paramInt)
  {
    k = 0;
    if (paramInt != j)
    {
      j = paramInt;
      requestLayout();
    }
  }
  
  public void setSupportBackgroundTintList(ColorStateList paramColorStateList)
  {
    setBackgroundTintList(paramColorStateList);
  }
  
  public void setSupportBackgroundTintMode(PorterDuff.Mode paramMode)
  {
    setBackgroundTintMode(paramMode);
  }
  
  public void setSupportImageTintList(ColorStateList paramColorStateList)
  {
    if (f != paramColorStateList)
    {
      f = paramColorStateList;
      d();
    }
  }
  
  public void setSupportImageTintMode(PorterDuff.Mode paramMode)
  {
    if (g != paramMode)
    {
      g = paramMode;
      d();
    }
  }
  
  public void setUseCompatPadding(boolean paramBoolean)
  {
    if (n != paramBoolean)
    {
      n = paramBoolean;
      getImpl().n();
    }
  }
  
  protected static class BaseBehavior<T extends FloatingActionButton>
    extends CoordinatorLayout.c<T>
  {
    private Rect a;
    private FloatingActionButton.b b;
    private boolean c;
    
    public BaseBehavior()
    {
      c = true;
    }
    
    public BaseBehavior(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
      paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, k.FloatingActionButton_Behavior_Layout);
      c = paramContext.getBoolean(k.FloatingActionButton_Behavior_Layout_behavior_autoHide, true);
      paramContext.recycle();
    }
    
    private void a(CoordinatorLayout paramCoordinatorLayout, FloatingActionButton paramFloatingActionButton)
    {
      Rect localRect = o;
      if ((localRect != null) && (localRect.centerX() > 0) && (localRect.centerY() > 0))
      {
        CoordinatorLayout.f localF = (CoordinatorLayout.f)paramFloatingActionButton.getLayoutParams();
        int j = 0;
        int i = 0;
        if (paramFloatingActionButton.getRight() >= paramCoordinatorLayout.getWidth() - rightMargin) {
          i = right;
        } else if (paramFloatingActionButton.getLeft() <= leftMargin) {
          i = -left;
        }
        if (paramFloatingActionButton.getBottom() >= paramCoordinatorLayout.getHeight() - bottomMargin) {
          j = bottom;
        } else if (paramFloatingActionButton.getTop() <= topMargin) {
          j = -top;
        }
        if (j != 0) {
          u.d(paramFloatingActionButton, j);
        }
        if (i != 0) {
          u.c(paramFloatingActionButton, i);
        }
      }
    }
    
    private boolean a(CoordinatorLayout paramCoordinatorLayout, AppBarLayout paramAppBarLayout, FloatingActionButton paramFloatingActionButton)
    {
      if (!a(paramAppBarLayout, paramFloatingActionButton)) {
        return false;
      }
      if (a == null) {
        a = new Rect();
      }
      Rect localRect = a;
      j.a(paramCoordinatorLayout, paramAppBarLayout, localRect);
      if (bottom <= paramAppBarLayout.getMinimumHeightForVisibleOverlappingContent()) {
        paramFloatingActionButton.a(b, false);
      } else {
        paramFloatingActionButton.b(b, false);
      }
      return true;
    }
    
    private static boolean a(View paramView)
    {
      paramView = paramView.getLayoutParams();
      if ((paramView instanceof CoordinatorLayout.f)) {
        return ((CoordinatorLayout.f)paramView).d() instanceof BottomSheetBehavior;
      }
      return false;
    }
    
    private boolean a(View paramView, FloatingActionButton paramFloatingActionButton)
    {
      CoordinatorLayout.f localF = (CoordinatorLayout.f)paramFloatingActionButton.getLayoutParams();
      if (!c) {
        return false;
      }
      if (localF.c() != paramView.getId()) {
        return false;
      }
      return paramFloatingActionButton.getUserSetVisibility() == 0;
    }
    
    private boolean b(View paramView, FloatingActionButton paramFloatingActionButton)
    {
      if (!a(paramView, paramFloatingActionButton)) {
        return false;
      }
      CoordinatorLayout.f localF = (CoordinatorLayout.f)paramFloatingActionButton.getLayoutParams();
      if (paramView.getTop() < paramFloatingActionButton.getHeight() / 2 + topMargin) {
        paramFloatingActionButton.a(b, false);
      } else {
        paramFloatingActionButton.b(b, false);
      }
      return true;
    }
    
    public void a(CoordinatorLayout.f paramF)
    {
      if (h == 0) {
        h = 80;
      }
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, FloatingActionButton paramFloatingActionButton, int paramInt)
    {
      List localList = paramCoordinatorLayout.b(paramFloatingActionButton);
      int i = 0;
      int j = localList.size();
      while (i < j)
      {
        View localView = (View)localList.get(i);
        if ((localView instanceof AppBarLayout) ? !a(paramCoordinatorLayout, (AppBarLayout)localView, paramFloatingActionButton) : (a(localView)) && (b(localView, paramFloatingActionButton))) {
          break;
        }
        i += 1;
      }
      paramCoordinatorLayout.c(paramFloatingActionButton, paramInt);
      a(paramCoordinatorLayout, paramFloatingActionButton);
      return true;
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, FloatingActionButton paramFloatingActionButton, Rect paramRect)
    {
      paramCoordinatorLayout = o;
      paramRect.set(paramFloatingActionButton.getLeft() + left, paramFloatingActionButton.getTop() + top, paramFloatingActionButton.getRight() - right, paramFloatingActionButton.getBottom() - bottom);
      return true;
    }
    
    public boolean a(CoordinatorLayout paramCoordinatorLayout, FloatingActionButton paramFloatingActionButton, View paramView)
    {
      if ((paramView instanceof AppBarLayout)) {
        a(paramCoordinatorLayout, (AppBarLayout)paramView, paramFloatingActionButton);
      } else if (a(paramView)) {
        b(paramView, paramFloatingActionButton);
      }
      return false;
    }
  }
  
  public static class Behavior
    extends FloatingActionButton.BaseBehavior<FloatingActionButton>
  {
    public Behavior() {}
    
    public Behavior(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
    }
  }
  
  class a
    implements l.g
  {
    a(FloatingActionButton.b paramB) {}
    
    public void a()
    {
      paramB.b(FloatingActionButton.this);
    }
    
    public void b()
    {
      paramB.a(FloatingActionButton.this);
    }
  }
  
  public static abstract class b
  {
    public abstract void a(FloatingActionButton paramFloatingActionButton);
    
    public abstract void b(FloatingActionButton paramFloatingActionButton);
  }
  
  private class c
    implements s
  {
    c() {}
    
    public float a()
    {
      return getSizeDimension() / 2.0F;
    }
    
    public void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      o.set(paramInt1, paramInt2, paramInt3, paramInt4);
      FloatingActionButton localFloatingActionButton = FloatingActionButton.this;
      localFloatingActionButton.setPadding(FloatingActionButton.a(localFloatingActionButton) + paramInt1, FloatingActionButton.a(FloatingActionButton.this) + paramInt2, FloatingActionButton.a(FloatingActionButton.this) + paramInt3, FloatingActionButton.a(FloatingActionButton.this) + paramInt4);
    }
    
    public void a(Drawable paramDrawable)
    {
      FloatingActionButton.a(FloatingActionButton.this, paramDrawable);
    }
    
    public boolean b()
    {
      return n;
    }
  }
}
