package android.support.design.transformation;

import a.b.c.f;
import a.b.c.l.e;
import a.b.c.l.h;
import a.b.c.l.i;
import a.b.c.l.j;
import a.b.c.n.d.d;
import a.b.c.n.d.e;
import android.animation.Animator;
import android.animation.Animator.AnimatorListener;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.animation.TimeInterpolator;
import android.animation.ValueAnimator;
import android.animation.ValueAnimator.AnimatorUpdateListener;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.CoordinatorLayout.f;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.q;
import android.support.v4.view.u;
import android.util.AttributeSet;
import android.util.Property;
import android.view.View;
import android.view.ViewAnimationUtils;
import android.view.ViewGroup;
import android.widget.ImageView;
import java.util.ArrayList;
import java.util.List;

public abstract class FabTransformationBehavior
  extends ExpandableTransformationBehavior
{
  private final Rect c = new Rect();
  private final RectF d = new RectF();
  private final RectF e = new RectF();
  private final int[] f = new int[2];
  
  public FabTransformationBehavior() {}
  
  public FabTransformationBehavior(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
  }
  
  private float a(e paramE, i paramI, float paramFloat1, float paramFloat2)
  {
    long l1 = paramI.a();
    long l2 = paramI.b();
    paramE = a.a("expansion");
    float f1 = (float)(paramE.a() + paramE.b() + 17L - l1) / (float)l2;
    return a.b.c.l.a.a(paramFloat1, paramFloat2, paramI.c().getInterpolation(f1));
  }
  
  private float a(View paramView1, View paramView2, j paramJ)
  {
    RectF localRectF1 = d;
    RectF localRectF2 = e;
    a(paramView1, localRectF1);
    a(paramView2, localRectF2);
    localRectF2.offset(-c(paramView1, paramView2, paramJ), 0.0F);
    return localRectF1.centerX() - left;
  }
  
  private ViewGroup a(View paramView)
  {
    View localView = paramView.findViewById(f.mtrl_child_content_container);
    if (localView != null) {
      return c(localView);
    }
    if ((!(paramView instanceof b)) && (!(paramView instanceof a))) {
      return c(paramView);
    }
    return c(((ViewGroup)paramView).getChildAt(0));
  }
  
  private void a(View paramView, long paramLong, int paramInt1, int paramInt2, float paramFloat, List<Animator> paramList)
  {
    if ((Build.VERSION.SDK_INT >= 21) && (paramLong > 0L))
    {
      paramView = ViewAnimationUtils.createCircularReveal(paramView, paramInt1, paramInt2, paramFloat, paramFloat);
      paramView.setStartDelay(0L);
      paramView.setDuration(paramLong);
      paramList.add(paramView);
    }
  }
  
  private void a(View paramView, long paramLong1, long paramLong2, long paramLong3, int paramInt1, int paramInt2, float paramFloat, List<Animator> paramList)
  {
    if ((Build.VERSION.SDK_INT >= 21) && (paramLong1 + paramLong2 < paramLong3))
    {
      paramView = ViewAnimationUtils.createCircularReveal(paramView, paramInt1, paramInt2, paramFloat, paramFloat);
      paramView.setStartDelay(paramLong1 + paramLong2);
      paramView.setDuration(paramLong3 - (paramLong1 + paramLong2));
      paramList.add(paramView);
    }
  }
  
  private void a(View paramView, RectF paramRectF)
  {
    paramRectF.set(0.0F, 0.0F, paramView.getWidth(), paramView.getHeight());
    int[] arrayOfInt = f;
    paramView.getLocationInWindow(arrayOfInt);
    paramRectF.offsetTo(arrayOfInt[0], arrayOfInt[1]);
    paramRectF.offset((int)-paramView.getTranslationX(), (int)-paramView.getTranslationY());
  }
  
  private void a(View paramView, e paramE, i paramI1, i paramI2, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, RectF paramRectF)
  {
    paramFloat1 = a(paramE, paramI1, paramFloat1, paramFloat3);
    paramFloat2 = a(paramE, paramI2, paramFloat2, paramFloat4);
    paramI1 = c;
    paramView.getWindowVisibleDisplayFrame(paramI1);
    paramE = d;
    paramE.set(paramI1);
    paramI1 = e;
    a(paramView, paramI1);
    paramI1.offset(paramFloat1, paramFloat2);
    paramI1.intersect(paramE);
    paramRectF.set(paramI1);
  }
  
  private void a(View paramView1, View paramView2, boolean paramBoolean1, boolean paramBoolean2, e paramE, float paramFloat1, float paramFloat2, List<Animator> paramList, List<Animator.AnimatorListener> paramList1)
  {
    if (!(paramView2 instanceof a.b.c.n.d)) {
      return;
    }
    final a.b.c.n.d localD = (a.b.c.n.d)paramView2;
    float f2 = a(paramView1, paramView2, b);
    float f3 = b(paramView1, paramView2, b);
    ((FloatingActionButton)paramView1).a(c);
    float f1 = c.width() / 2.0F;
    i localI = a.a("expansion");
    if (paramBoolean1)
    {
      if (!paramBoolean2) {
        localD.setRevealInfo(new d.e(f2, f3, f1));
      }
      if (paramBoolean2) {
        f1 = getRevealInfoc;
      }
      paramView1 = a.b.c.n.a.a(localD, f2, f3, q.a(f2, f3, 0.0F, 0.0F, paramFloat1, paramFloat2));
      paramView1.addListener(new d(localD));
      a(paramView2, localI.a(), (int)f2, (int)f3, f1, paramList);
    }
    else
    {
      paramView1 = localI;
      paramFloat1 = getRevealInfoc;
      Animator localAnimator = a.b.c.n.a.a(localD, f2, f3, f1);
      a(paramView2, paramView1.a(), (int)f2, (int)f3, paramFloat1, paramList);
      a(paramView2, paramView1.a(), paramView1.b(), a.a(), (int)f2, (int)f3, f1, paramList);
      paramView1 = localAnimator;
    }
    localI.a(paramView1);
    paramList.add(paramView1);
    paramList1.add(a.b.c.n.a.a(localD));
  }
  
  private void a(View paramView1, View paramView2, boolean paramBoolean1, boolean paramBoolean2, e paramE, List<Animator> paramList, List<Animator.AnimatorListener> paramList1)
  {
    if (!(paramView2 instanceof ViewGroup)) {
      return;
    }
    if (((paramView2 instanceof a.b.c.n.d)) && (a.b.c.n.c.a == 0)) {
      return;
    }
    paramView1 = a(paramView2);
    if (paramView1 == null) {
      return;
    }
    if (paramBoolean1)
    {
      if (!paramBoolean2) {
        a.b.c.l.d.a.set(paramView1, Float.valueOf(0.0F));
      }
      paramView1 = ObjectAnimator.ofFloat(paramView1, a.b.c.l.d.a, new float[] { 1.0F });
    }
    else
    {
      paramView1 = ObjectAnimator.ofFloat(paramView1, a.b.c.l.d.a, new float[] { 0.0F });
    }
    a.a("contentFade").a(paramView1);
    paramList.add(paramView1);
  }
  
  private void a(View paramView1, View paramView2, boolean paramBoolean1, boolean paramBoolean2, e paramE, List<Animator> paramList, List<Animator.AnimatorListener> paramList1, RectF paramRectF)
  {
    float f1 = c(paramView1, paramView2, b);
    float f2 = d(paramView1, paramView2, b);
    if ((f1 != 0.0F) && (f2 != 0.0F))
    {
      if (((paramBoolean1) && (f2 < 0.0F)) || ((!paramBoolean1) && (f2 > 0.0F)))
      {
        paramList1 = a.a("translationXCurveUpwards");
        paramView1 = a.a("translationYCurveUpwards");
      }
      else
      {
        paramList1 = a.a("translationXCurveDownwards");
        paramView1 = a.a("translationYCurveDownwards");
      }
    }
    else
    {
      paramList1 = a.a("translationXLinear");
      paramView1 = a.a("translationYLinear");
    }
    if (paramBoolean1)
    {
      if (!paramBoolean2)
      {
        paramView2.setTranslationX(-f1);
        paramView2.setTranslationY(-f2);
      }
      ObjectAnimator localObjectAnimator2 = ObjectAnimator.ofFloat(paramView2, View.TRANSLATION_X, new float[] { 0.0F });
      ObjectAnimator localObjectAnimator1 = ObjectAnimator.ofFloat(paramView2, View.TRANSLATION_Y, new float[] { 0.0F });
      a(paramView2, paramE, paramList1, paramView1, -f1, -f2, 0.0F, 0.0F, paramRectF);
      paramView2 = localObjectAnimator2;
      paramE = localObjectAnimator1;
    }
    else
    {
      paramE = ObjectAnimator.ofFloat(paramView2, View.TRANSLATION_X, new float[] { -f1 });
      paramRectF = ObjectAnimator.ofFloat(paramView2, View.TRANSLATION_Y, new float[] { -f2 });
      paramView2 = paramE;
      paramE = paramRectF;
    }
    paramList1.a(paramView2);
    paramView1.a(paramE);
    paramList.add(paramView2);
    paramList.add(paramE);
  }
  
  private float b(View paramView1, View paramView2, j paramJ)
  {
    RectF localRectF1 = d;
    RectF localRectF2 = e;
    a(paramView1, localRectF1);
    a(paramView2, localRectF2);
    localRectF2.offset(0.0F, -d(paramView1, paramView2, paramJ));
    return localRectF1.centerY() - top;
  }
  
  private int b(View paramView)
  {
    ColorStateList localColorStateList = u.c(paramView);
    if (localColorStateList != null) {
      return localColorStateList.getColorForState(paramView.getDrawableState(), localColorStateList.getDefaultColor());
    }
    return 0;
  }
  
  private void b(View paramView1, View paramView2, boolean paramBoolean1, boolean paramBoolean2, e paramE, List<Animator> paramList, List<Animator.AnimatorListener> paramList1)
  {
    if (!(paramView2 instanceof a.b.c.n.d)) {
      return;
    }
    paramView2 = (a.b.c.n.d)paramView2;
    int i = b(paramView1);
    if (paramBoolean1)
    {
      if (!paramBoolean2) {
        paramView2.setCircularRevealScrimColor(i);
      }
      paramView1 = ObjectAnimator.ofInt(paramView2, d.d.a, new int[] { 0xFFFFFF & i });
    }
    else
    {
      paramView1 = ObjectAnimator.ofInt(paramView2, d.d.a, new int[] { i });
    }
    paramView1.setEvaluator(a.b.c.l.c.a());
    a.a("color").a(paramView1);
    paramList.add(paramView1);
  }
  
  private float c(View paramView1, View paramView2, j paramJ)
  {
    RectF localRectF1 = d;
    RectF localRectF2 = e;
    a(paramView1, localRectF1);
    a(paramView2, localRectF2);
    float f1 = 0.0F;
    int i = a & 0x7;
    if (i != 1)
    {
      if (i != 3)
      {
        if (i == 5) {
          f1 = right - right;
        }
      }
      else {
        f1 = left - left;
      }
    }
    else {
      f1 = localRectF2.centerX() - localRectF1.centerX();
    }
    return f1 + b;
  }
  
  private ViewGroup c(View paramView)
  {
    if ((paramView instanceof ViewGroup)) {
      return (ViewGroup)paramView;
    }
    return null;
  }
  
  @TargetApi(21)
  private void c(View paramView1, View paramView2, boolean paramBoolean1, boolean paramBoolean2, e paramE, List<Animator> paramList, List<Animator.AnimatorListener> paramList1)
  {
    float f1 = u.g(paramView2) - u.g(paramView1);
    if (paramBoolean1)
    {
      if (!paramBoolean2) {
        paramView2.setTranslationZ(-f1);
      }
      paramView1 = ObjectAnimator.ofFloat(paramView2, View.TRANSLATION_Z, new float[] { 0.0F });
    }
    else
    {
      paramView1 = ObjectAnimator.ofFloat(paramView2, View.TRANSLATION_Z, new float[] { -f1 });
    }
    a.a("elevation").a(paramView1);
    paramList.add(paramView1);
  }
  
  private float d(View paramView1, View paramView2, j paramJ)
  {
    RectF localRectF1 = d;
    RectF localRectF2 = e;
    a(paramView1, localRectF1);
    a(paramView2, localRectF2);
    float f1 = 0.0F;
    int i = a & 0x70;
    if (i != 16)
    {
      if (i != 48)
      {
        if (i == 80) {
          f1 = bottom - bottom;
        }
      }
      else {
        f1 = top - top;
      }
    }
    else {
      f1 = localRectF2.centerY() - localRectF1.centerY();
    }
    return f1 + c;
  }
  
  private void d(View paramView1, final View paramView2, boolean paramBoolean1, boolean paramBoolean2, e paramE, List<Animator> paramList, List<Animator.AnimatorListener> paramList1)
  {
    if ((paramView2 instanceof a.b.c.n.d))
    {
      if (!(paramView1 instanceof ImageView)) {
        return;
      }
      final a.b.c.n.d localD = (a.b.c.n.d)paramView2;
      final Drawable localDrawable = ((ImageView)paramView1).getDrawable();
      if (localDrawable == null) {
        return;
      }
      localDrawable.mutate();
      if (paramBoolean1)
      {
        if (!paramBoolean2) {
          localDrawable.setAlpha(255);
        }
        paramView1 = ObjectAnimator.ofInt(localDrawable, e.b, new int[] { 0 });
      }
      else
      {
        paramView1 = ObjectAnimator.ofInt(localDrawable, e.b, new int[] { 255 });
      }
      paramView1.addUpdateListener(new b(paramView2));
      a.a("iconFade").a(paramView1);
      paramList.add(paramView1);
      paramList1.add(new c(localD, localDrawable));
      return;
    }
  }
  
  protected abstract e a(Context paramContext, boolean paramBoolean);
  
  public void a(CoordinatorLayout.f paramF)
  {
    if (h == 0) {
      h = 80;
    }
  }
  
  public boolean a(CoordinatorLayout paramCoordinatorLayout, View paramView1, View paramView2)
  {
    if (paramView1.getVisibility() != 8)
    {
      boolean bool2 = paramView2 instanceof FloatingActionButton;
      boolean bool1 = false;
      if (bool2)
      {
        int i = ((FloatingActionButton)paramView2).getExpandedComponentIdHint();
        if ((i == 0) || (i == paramView1.getId())) {
          bool1 = true;
        }
        return bool1;
      }
      return false;
    }
    throw new IllegalStateException("This behavior cannot be attached to a GONE view. Set the view to INVISIBLE instead.");
  }
  
  protected AnimatorSet b(final View paramView1, final View paramView2, final boolean paramBoolean1, boolean paramBoolean2)
  {
    Object localObject = a(paramView2.getContext(), paramBoolean1);
    ArrayList localArrayList1 = new ArrayList();
    ArrayList localArrayList2 = new ArrayList();
    if (Build.VERSION.SDK_INT >= 21) {
      c(paramView1, paramView2, paramBoolean1, paramBoolean2, (e)localObject, localArrayList1, localArrayList2);
    }
    RectF localRectF = d;
    a(paramView1, paramView2, paramBoolean1, paramBoolean2, (e)localObject, localArrayList1, localArrayList2, localRectF);
    float f1 = localRectF.width();
    float f2 = localRectF.height();
    d(paramView1, paramView2, paramBoolean1, paramBoolean2, (e)localObject, localArrayList1, localArrayList2);
    a(paramView1, paramView2, paramBoolean1, paramBoolean2, (e)localObject, f1, f2, localArrayList1, localArrayList2);
    b(paramView1, paramView2, paramBoolean1, paramBoolean2, (e)localObject, localArrayList1, localArrayList2);
    a(paramView1, paramView2, paramBoolean1, paramBoolean2, (e)localObject, localArrayList1, localArrayList2);
    localObject = new AnimatorSet();
    a.b.c.l.b.a((AnimatorSet)localObject, localArrayList1);
    ((AnimatorSet)localObject).addListener(new a(paramBoolean1, paramView2, paramView1));
    int i = 0;
    int j = localArrayList2.size();
    while (i < j)
    {
      ((AnimatorSet)localObject).addListener((Animator.AnimatorListener)localArrayList2.get(i));
      i += 1;
    }
    return localObject;
  }
  
  class a
    extends AnimatorListenerAdapter
  {
    a(boolean paramBoolean, View paramView1, View paramView2) {}
    
    public void onAnimationEnd(Animator paramAnimator)
    {
      if (!paramBoolean1)
      {
        paramView2.setVisibility(4);
        paramView1.setAlpha(1.0F);
        paramView1.setVisibility(0);
      }
    }
    
    public void onAnimationStart(Animator paramAnimator)
    {
      if (paramBoolean1)
      {
        paramView2.setVisibility(0);
        paramView1.setAlpha(0.0F);
        paramView1.setVisibility(4);
      }
    }
  }
  
  class b
    implements ValueAnimator.AnimatorUpdateListener
  {
    b(View paramView) {}
    
    public void onAnimationUpdate(ValueAnimator paramValueAnimator)
    {
      paramView2.invalidate();
    }
  }
  
  class c
    extends AnimatorListenerAdapter
  {
    c(a.b.c.n.d paramD, Drawable paramDrawable) {}
    
    public void onAnimationEnd(Animator paramAnimator)
    {
      localD.setCircularRevealOverlayDrawable(null);
    }
    
    public void onAnimationStart(Animator paramAnimator)
    {
      localD.setCircularRevealOverlayDrawable(localDrawable);
    }
  }
  
  class d
    extends AnimatorListenerAdapter
  {
    d(a.b.c.n.d paramD) {}
    
    public void onAnimationEnd(Animator paramAnimator)
    {
      paramAnimator = localD.getRevealInfo();
      c = Float.MAX_VALUE;
      localD.setRevealInfo(paramAnimator);
    }
  }
  
  protected static class e
  {
    public h a;
    public j b;
    
    protected e() {}
  }
}
