package android.support.v7.widget;

import a.b.h.a.f;
import a.b.h.a.j;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.drawable.Drawable;
import android.support.v4.view.u;
import android.util.AttributeSet;
import android.view.ActionMode;
import android.view.ActionMode.Callback;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup.LayoutParams;
import android.widget.FrameLayout;
import android.widget.FrameLayout.LayoutParams;
import android.widget.HorizontalScrollView;

public class ActionBarContainer
  extends FrameLayout
{
  private boolean c;
  private View d;
  private View e;
  private View f;
  Drawable g;
  Drawable h;
  Drawable i;
  boolean j;
  boolean k;
  private int l;
  
  public ActionBarContainer(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public ActionBarContainer(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    u.a(this, new b(this));
    paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, j.ActionBar);
    g = paramContext.getDrawable(j.ActionBar_background);
    h = paramContext.getDrawable(j.ActionBar_backgroundStacked);
    l = paramContext.getDimensionPixelSize(j.ActionBar_height, -1);
    if (getId() == f.split_action_bar)
    {
      j = true;
      i = paramContext.getDrawable(j.ActionBar_backgroundSplit);
    }
    paramContext.recycle();
    boolean bool1 = j;
    boolean bool2 = false;
    if (bool1)
    {
      bool1 = bool2;
      if (i != null) {}
    }
    else
    {
      do
      {
        bool1 = true;
        break;
        bool1 = bool2;
        if (g != null) {
          break;
        }
        bool1 = bool2;
      } while (h == null);
    }
    setWillNotDraw(bool1);
  }
  
  private int a(View paramView)
  {
    FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)paramView.getLayoutParams();
    return paramView.getMeasuredHeight() + topMargin + bottomMargin;
  }
  
  private boolean b(View paramView)
  {
    return (paramView == null) || (paramView.getVisibility() == 8) || (paramView.getMeasuredHeight() == 0);
  }
  
  protected void drawableStateChanged()
  {
    super.drawableStateChanged();
    Drawable localDrawable = g;
    if ((localDrawable != null) && (localDrawable.isStateful())) {
      g.setState(getDrawableState());
    }
    localDrawable = h;
    if ((localDrawable != null) && (localDrawable.isStateful())) {
      h.setState(getDrawableState());
    }
    localDrawable = i;
    if ((localDrawable != null) && (localDrawable.isStateful())) {
      i.setState(getDrawableState());
    }
  }
  
  public View getTabContainer()
  {
    return d;
  }
  
  public void jumpDrawablesToCurrentState()
  {
    super.jumpDrawablesToCurrentState();
    Drawable localDrawable = g;
    if (localDrawable != null) {
      localDrawable.jumpToCurrentState();
    }
    localDrawable = h;
    if (localDrawable != null) {
      localDrawable.jumpToCurrentState();
    }
    localDrawable = i;
    if (localDrawable != null) {
      localDrawable.jumpToCurrentState();
    }
  }
  
  public void onFinishInflate()
  {
    super.onFinishInflate();
    e = findViewById(f.action_bar);
    f = findViewById(f.action_context_bar);
  }
  
  public boolean onHoverEvent(MotionEvent paramMotionEvent)
  {
    super.onHoverEvent(paramMotionEvent);
    return true;
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    return (c) || (super.onInterceptTouchEvent(paramMotionEvent));
  }
  
  public void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    Object localObject1 = d;
    if ((localObject1 != null) && (((View)localObject1).getVisibility() != 8)) {
      paramBoolean = true;
    } else {
      paramBoolean = false;
    }
    Object localObject2;
    if ((localObject1 != null) && (((View)localObject1).getVisibility() != 8))
    {
      paramInt2 = getMeasuredHeight();
      localObject2 = (FrameLayout.LayoutParams)((View)localObject1).getLayoutParams();
      ((View)localObject1).layout(paramInt1, paramInt2 - ((View)localObject1).getMeasuredHeight() - bottomMargin, paramInt3, paramInt2 - bottomMargin);
    }
    paramInt1 = 0;
    paramInt2 = 0;
    if (j)
    {
      localObject1 = i;
      if (localObject1 != null)
      {
        ((Drawable)localObject1).setBounds(0, 0, getMeasuredWidth(), getMeasuredHeight());
        paramInt1 = 1;
      }
    }
    else
    {
      if (g != null)
      {
        if (e.getVisibility() == 0)
        {
          g.setBounds(e.getLeft(), e.getTop(), e.getRight(), e.getBottom());
        }
        else
        {
          localObject2 = f;
          if ((localObject2 != null) && (((View)localObject2).getVisibility() == 0)) {
            g.setBounds(f.getLeft(), f.getTop(), f.getRight(), f.getBottom());
          } else {
            g.setBounds(0, 0, 0, 0);
          }
        }
        paramInt2 = 1;
      }
      k = paramBoolean;
      paramInt1 = paramInt2;
      if (paramBoolean)
      {
        localObject2 = h;
        paramInt1 = paramInt2;
        if (localObject2 != null)
        {
          ((Drawable)localObject2).setBounds(((View)localObject1).getLeft(), ((View)localObject1).getTop(), ((View)localObject1).getRight(), ((View)localObject1).getBottom());
          paramInt1 = 1;
        }
      }
    }
    if (paramInt1 != 0) {
      invalidate();
    }
  }
  
  public void onMeasure(int paramInt1, int paramInt2)
  {
    int m = paramInt2;
    if (e == null)
    {
      m = paramInt2;
      if (View.MeasureSpec.getMode(paramInt2) == Integer.MIN_VALUE)
      {
        int n = l;
        m = paramInt2;
        if (n >= 0) {
          m = View.MeasureSpec.makeMeasureSpec(Math.min(n, View.MeasureSpec.getSize(paramInt2)), Integer.MIN_VALUE);
        }
      }
    }
    super.onMeasure(paramInt1, m);
    if (e == null) {
      return;
    }
    paramInt2 = View.MeasureSpec.getMode(m);
    View localView = d;
    if ((localView != null) && (localView.getVisibility() != 8) && (paramInt2 != 1073741824))
    {
      if (!b(e)) {
        paramInt1 = a(e);
      } else if (!b(f)) {
        paramInt1 = a(f);
      } else {
        paramInt1 = 0;
      }
      if (paramInt2 == Integer.MIN_VALUE) {
        paramInt2 = View.MeasureSpec.getSize(m);
      } else {
        paramInt2 = Integer.MAX_VALUE;
      }
      setMeasuredDimension(getMeasuredWidth(), Math.min(a(d) + paramInt1, paramInt2));
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    super.onTouchEvent(paramMotionEvent);
    return true;
  }
  
  public void setPrimaryBackground(Drawable paramDrawable)
  {
    Drawable localDrawable = g;
    if (localDrawable != null)
    {
      localDrawable.setCallback(null);
      unscheduleDrawable(g);
    }
    g = paramDrawable;
    if (paramDrawable != null)
    {
      paramDrawable.setCallback(this);
      paramDrawable = e;
      if (paramDrawable != null) {
        g.setBounds(paramDrawable.getLeft(), e.getTop(), e.getRight(), e.getBottom());
      }
    }
    boolean bool2 = j;
    boolean bool1 = true;
    if (bool2)
    {
      if (i != null) {}
    }
    else {
      while ((g == null) && (h == null)) {
        break;
      }
    }
    bool1 = false;
    setWillNotDraw(bool1);
    invalidate();
  }
  
  public void setSplitBackground(Drawable paramDrawable)
  {
    Drawable localDrawable = i;
    if (localDrawable != null)
    {
      localDrawable.setCallback(null);
      unscheduleDrawable(i);
    }
    i = paramDrawable;
    boolean bool2 = false;
    if (paramDrawable != null)
    {
      paramDrawable.setCallback(this);
      if (j)
      {
        paramDrawable = i;
        if (paramDrawable != null) {
          paramDrawable.setBounds(0, 0, getMeasuredWidth(), getMeasuredHeight());
        }
      }
    }
    boolean bool1;
    if (j)
    {
      bool1 = bool2;
      if (i != null) {}
    }
    else
    {
      do
      {
        bool1 = true;
        break;
        bool1 = bool2;
        if (g != null) {
          break;
        }
        bool1 = bool2;
      } while (h == null);
    }
    setWillNotDraw(bool1);
    invalidate();
  }
  
  public void setStackedBackground(Drawable paramDrawable)
  {
    Drawable localDrawable = h;
    if (localDrawable != null)
    {
      localDrawable.setCallback(null);
      unscheduleDrawable(h);
    }
    h = paramDrawable;
    if (paramDrawable != null)
    {
      paramDrawable.setCallback(this);
      if (k)
      {
        paramDrawable = h;
        if (paramDrawable != null) {
          paramDrawable.setBounds(d.getLeft(), d.getTop(), d.getRight(), d.getBottom());
        }
      }
    }
    boolean bool2 = j;
    boolean bool1 = true;
    if (bool2)
    {
      if (i != null) {}
    }
    else {
      while ((g == null) && (h == null)) {
        break;
      }
    }
    bool1 = false;
    setWillNotDraw(bool1);
    invalidate();
  }
  
  public void setTabContainer(b1 paramB1)
  {
    Object localObject = d;
    if (localObject != null) {
      removeView((View)localObject);
    }
    d = paramB1;
    if (paramB1 != null)
    {
      addView(paramB1);
      localObject = paramB1.getLayoutParams();
      width = -1;
      height = -2;
      paramB1.setAllowCollapse(false);
    }
  }
  
  public void setTransitioning(boolean paramBoolean)
  {
    c = paramBoolean;
    int m;
    if (paramBoolean) {
      m = 393216;
    } else {
      m = 262144;
    }
    setDescendantFocusability(m);
  }
  
  public void setVisibility(int paramInt)
  {
    super.setVisibility(paramInt);
    boolean bool;
    if (paramInt == 0) {
      bool = true;
    } else {
      bool = false;
    }
    Drawable localDrawable = g;
    if (localDrawable != null) {
      localDrawable.setVisible(bool, false);
    }
    localDrawable = h;
    if (localDrawable != null) {
      localDrawable.setVisible(bool, false);
    }
    localDrawable = i;
    if (localDrawable != null) {
      localDrawable.setVisible(bool, false);
    }
  }
  
  public ActionMode startActionModeForChild(View paramView, ActionMode.Callback paramCallback)
  {
    return null;
  }
  
  public ActionMode startActionModeForChild(View paramView, ActionMode.Callback paramCallback, int paramInt)
  {
    if (paramInt != 0) {
      return super.startActionModeForChild(paramView, paramCallback, paramInt);
    }
    return null;
  }
  
  protected boolean verifyDrawable(Drawable paramDrawable)
  {
    return ((paramDrawable == g) && (!j)) || ((paramDrawable == h) && (k)) || ((paramDrawable == i) && (j)) || (super.verifyDrawable(paramDrawable));
  }
}
