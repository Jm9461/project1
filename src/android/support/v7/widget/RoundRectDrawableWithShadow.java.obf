package android.support.v7.widget;

import a.b.h.b.b;
import a.b.h.b.c;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Path.FillType;
import android.graphics.RadialGradient;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Shader.TileMode;
import android.graphics.drawable.Drawable;

class y0
  extends Drawable
{
  private static final double q = Math.cos(Math.toRadians(45.0D));
  static a r;
  private final int a;
  private Paint b;
  private Paint c;
  private Paint d;
  private final RectF e;
  private float f;
  private Path g;
  private float h;
  private float i;
  private float j;
  private ColorStateList k;
  private boolean l = true;
  private final int m;
  private final int n;
  private boolean o = true;
  private boolean p = false;
  
  y0(Resources paramResources, ColorStateList paramColorStateList, float paramFloat1, float paramFloat2, float paramFloat3)
  {
    m = paramResources.getColor(b.cardview_shadow_start_color);
    n = paramResources.getColor(b.cardview_shadow_end_color);
    a = paramResources.getDimensionPixelSize(c.cardview_compat_inset_shadow);
    b = new Paint(5);
    b(paramColorStateList);
    c = new Paint(5);
    c.setStyle(Paint.Style.FILL);
    f = ((int)(0.5F + paramFloat1));
    e = new RectF();
    d = new Paint(c);
    d.setAntiAlias(false);
    a(paramFloat2, paramFloat3);
  }
  
  static float a(float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      double d1 = paramFloat1;
      double d2 = q;
      double d3 = paramFloat2;
      Double.isNaN(d3);
      Double.isNaN(d1);
      return (float)(d1 + (1.0D - d2) * d3);
    }
    return paramFloat1;
  }
  
  private void a(float paramFloat1, float paramFloat2)
  {
    if (paramFloat1 >= 0.0F)
    {
      if (paramFloat2 >= 0.0F)
      {
        float f1 = d(paramFloat1);
        float f2 = d(paramFloat2);
        paramFloat1 = f1;
        if (f1 > f2)
        {
          paramFloat2 = f2;
          paramFloat1 = paramFloat2;
          if (!p)
          {
            p = true;
            paramFloat1 = paramFloat2;
          }
        }
        if ((j == paramFloat1) && (h == f2)) {
          return;
        }
        j = paramFloat1;
        h = f2;
        i = ((int)(1.5F * paramFloat1 + a + 0.5F));
        l = true;
        invalidateSelf();
        return;
      }
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("Invalid max shadow size ");
      localStringBuilder.append(paramFloat2);
      localStringBuilder.append(". Must be >= 0");
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Invalid shadow size ");
    localStringBuilder.append(paramFloat1);
    localStringBuilder.append(". Must be >= 0");
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  private void a(Canvas paramCanvas)
  {
    float f2 = f;
    float f1 = -f2 - i;
    f2 = f2 + a + j / 2.0F;
    float f3 = e.width();
    int i2 = 1;
    if (f3 - f2 * 2.0F > 0.0F) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    if (e.height() - f2 * 2.0F <= 0.0F) {
      i2 = 0;
    }
    int i3 = paramCanvas.save();
    RectF localRectF = e;
    paramCanvas.translate(left + f2, top + f2);
    paramCanvas.drawPath(g, c);
    if (i1 != 0) {
      paramCanvas.drawRect(0.0F, f1, e.width() - f2 * 2.0F, -f, d);
    }
    paramCanvas.restoreToCount(i3);
    i3 = paramCanvas.save();
    localRectF = e;
    paramCanvas.translate(right - f2, bottom - f2);
    paramCanvas.rotate(180.0F);
    paramCanvas.drawPath(g, c);
    if (i1 != 0) {
      paramCanvas.drawRect(0.0F, f1, e.width() - f2 * 2.0F, -f + i, d);
    }
    paramCanvas.restoreToCount(i3);
    int i1 = paramCanvas.save();
    localRectF = e;
    paramCanvas.translate(left + f2, bottom - f2);
    paramCanvas.rotate(270.0F);
    paramCanvas.drawPath(g, c);
    if (i2 != 0) {
      paramCanvas.drawRect(0.0F, f1, e.height() - f2 * 2.0F, -f, d);
    }
    paramCanvas.restoreToCount(i1);
    i1 = paramCanvas.save();
    localRectF = e;
    paramCanvas.translate(right - f2, top + f2);
    paramCanvas.rotate(90.0F);
    paramCanvas.drawPath(g, c);
    if (i2 != 0) {
      paramCanvas.drawRect(0.0F, f1, e.height() - 2.0F * f2, -f, d);
    }
    paramCanvas.restoreToCount(i1);
  }
  
  static float b(float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      double d1 = 1.5F * paramFloat1;
      double d2 = q;
      double d3 = paramFloat2;
      Double.isNaN(d3);
      Double.isNaN(d1);
      return (float)(d1 + (1.0D - d2) * d3);
    }
    return 1.5F * paramFloat1;
  }
  
  private void b(ColorStateList paramColorStateList)
  {
    if (paramColorStateList == null) {
      paramColorStateList = ColorStateList.valueOf(0);
    }
    k = paramColorStateList;
    b.setColor(k.getColorForState(getState(), k.getDefaultColor()));
  }
  
  private void b(Rect paramRect)
  {
    float f1 = h;
    float f2 = 1.5F * f1;
    e.set(left + f1, top + f2, right - f1, bottom - f2);
    g();
  }
  
  private int d(float paramFloat)
  {
    int i1 = (int)(0.5F + paramFloat);
    if (i1 % 2 == 1) {
      return i1 - 1;
    }
    return i1;
  }
  
  private void g()
  {
    float f1 = f;
    Object localObject1 = new RectF(-f1, -f1, f1, f1);
    Object localObject2 = new RectF((RectF)localObject1);
    f1 = i;
    ((RectF)localObject2).inset(-f1, -f1);
    Path localPath = g;
    if (localPath == null) {
      g = new Path();
    } else {
      localPath.reset();
    }
    g.setFillType(Path.FillType.EVEN_ODD);
    g.moveTo(-f, 0.0F);
    g.rLineTo(-i, 0.0F);
    g.arcTo((RectF)localObject2, 180.0F, 90.0F, false);
    g.arcTo((RectF)localObject1, 270.0F, -90.0F, false);
    g.close();
    f1 = f;
    float f2 = i;
    float f3 = f1 / (f1 + f2);
    localObject1 = c;
    int i1 = m;
    int i2 = n;
    localObject2 = Shader.TileMode.CLAMP;
    ((Paint)localObject1).setShader(new RadialGradient(0.0F, 0.0F, f1 + f2, new int[] { i1, i1, i2 }, new float[] { 0.0F, f3, 1.0F }, (Shader.TileMode)localObject2));
    localObject1 = d;
    f3 = f;
    f1 = -f3;
    f2 = i;
    f3 = -f3;
    i1 = m;
    i2 = n;
    localObject2 = Shader.TileMode.CLAMP;
    ((Paint)localObject1).setShader(new LinearGradient(0.0F, f1 + f2, 0.0F, f3 - f2, new int[] { i1, i1, i2 }, new float[] { 0.0F, 0.5F, 1.0F }, (Shader.TileMode)localObject2));
    d.setAntiAlias(false);
  }
  
  ColorStateList a()
  {
    return k;
  }
  
  void a(float paramFloat)
  {
    if (paramFloat >= 0.0F)
    {
      paramFloat = (int)(0.5F + paramFloat);
      if (f == paramFloat) {
        return;
      }
      f = paramFloat;
      l = true;
      invalidateSelf();
      return;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Invalid radius ");
    localStringBuilder.append(paramFloat);
    localStringBuilder.append(". Must be >= 0");
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  void a(ColorStateList paramColorStateList)
  {
    b(paramColorStateList);
    invalidateSelf();
  }
  
  void a(Rect paramRect)
  {
    getPadding(paramRect);
  }
  
  void a(boolean paramBoolean)
  {
    o = paramBoolean;
    invalidateSelf();
  }
  
  float b()
  {
    return f;
  }
  
  void b(float paramFloat)
  {
    a(j, paramFloat);
  }
  
  float c()
  {
    return h;
  }
  
  void c(float paramFloat)
  {
    a(paramFloat, h);
  }
  
  float d()
  {
    float f1 = h;
    f1 = Math.max(f1, f + a + f1 * 1.5F / 2.0F);
    return (h * 1.5F + a) * 2.0F + f1 * 2.0F;
  }
  
  public void draw(Canvas paramCanvas)
  {
    if (l)
    {
      b(getBounds());
      l = false;
    }
    paramCanvas.translate(0.0F, j / 2.0F);
    a(paramCanvas);
    paramCanvas.translate(0.0F, -j / 2.0F);
    r.a(paramCanvas, e, f, b);
  }
  
  float e()
  {
    float f1 = h;
    f1 = Math.max(f1, f + a + f1 / 2.0F);
    return (h + a) * 2.0F + f1 * 2.0F;
  }
  
  float f()
  {
    return j;
  }
  
  public int getOpacity()
  {
    return -3;
  }
  
  public boolean getPadding(Rect paramRect)
  {
    int i1 = (int)Math.ceil(b(h, f, o));
    int i2 = (int)Math.ceil(a(h, f, o));
    paramRect.set(i2, i1, i2, i1);
    return true;
  }
  
  public boolean isStateful()
  {
    ColorStateList localColorStateList = k;
    return ((localColorStateList != null) && (localColorStateList.isStateful())) || (super.isStateful());
  }
  
  protected void onBoundsChange(Rect paramRect)
  {
    super.onBoundsChange(paramRect);
    l = true;
  }
  
  protected boolean onStateChange(int[] paramArrayOfInt)
  {
    ColorStateList localColorStateList = k;
    int i1 = localColorStateList.getColorForState(paramArrayOfInt, localColorStateList.getDefaultColor());
    if (b.getColor() == i1) {
      return false;
    }
    b.setColor(i1);
    l = true;
    invalidateSelf();
    return true;
  }
  
  public void setAlpha(int paramInt)
  {
    b.setAlpha(paramInt);
    c.setAlpha(paramInt);
    d.setAlpha(paramInt);
  }
  
  public void setColorFilter(ColorFilter paramColorFilter)
  {
    b.setColorFilter(paramColorFilter);
  }
  
  static abstract interface a
  {
    public abstract void a(Canvas paramCanvas, RectF paramRectF, float paramFloat, Paint paramPaint);
  }
}
