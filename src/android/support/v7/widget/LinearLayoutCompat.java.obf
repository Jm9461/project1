package android.support.v7.widget;

import a.b.h.a.j;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.drawable.Drawable;
import android.support.v4.view.d;
import android.support.v4.view.u;
import android.util.AttributeSet;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityNodeInfo;

public class o0
  extends ViewGroup
{
  private boolean c = true;
  private int d = -1;
  private int e = 0;
  private int f;
  private int g = 8388659;
  private int h;
  private float i;
  private boolean j;
  private int[] k;
  private int[] l;
  private Drawable m;
  private int n;
  private int o;
  private int p;
  private int q;
  
  public o0(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public o0(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public o0(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    paramContext = j1.a(paramContext, paramAttributeSet, j.LinearLayoutCompat, paramInt, 0);
    paramInt = paramContext.d(j.LinearLayoutCompat_android_orientation, -1);
    if (paramInt >= 0) {
      setOrientation(paramInt);
    }
    paramInt = paramContext.d(j.LinearLayoutCompat_android_gravity, -1);
    if (paramInt >= 0) {
      setGravity(paramInt);
    }
    boolean bool = paramContext.a(j.LinearLayoutCompat_android_baselineAligned, true);
    if (!bool) {
      setBaselineAligned(bool);
    }
    i = paramContext.b(j.LinearLayoutCompat_android_weightSum, -1.0F);
    d = paramContext.d(j.LinearLayoutCompat_android_baselineAlignedChildIndex, -1);
    j = paramContext.a(j.LinearLayoutCompat_measureWithLargestChild, false);
    setDividerDrawable(paramContext.b(j.LinearLayoutCompat_divider));
    p = paramContext.d(j.LinearLayoutCompat_showDividers, 0);
    q = paramContext.c(j.LinearLayoutCompat_dividerPadding, 0);
    paramContext.a();
  }
  
  private void a(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramView.layout(paramInt1, paramInt2, paramInt1 + paramInt3, paramInt2 + paramInt4);
  }
  
  private void c(int paramInt1, int paramInt2)
  {
    int i2 = View.MeasureSpec.makeMeasureSpec(getMeasuredHeight(), 1073741824);
    int i1 = 0;
    while (i1 < paramInt1)
    {
      View localView = a(i1);
      if (localView.getVisibility() != 8)
      {
        a localA = (a)localView.getLayoutParams();
        if (height == -1)
        {
          int i3 = width;
          width = localView.getMeasuredWidth();
          measureChildWithMargins(localView, paramInt2, 0, i2, 0);
          width = i3;
        }
      }
      i1 += 1;
    }
  }
  
  private void d(int paramInt1, int paramInt2)
  {
    int i2 = View.MeasureSpec.makeMeasureSpec(getMeasuredWidth(), 1073741824);
    int i1 = 0;
    while (i1 < paramInt1)
    {
      View localView = a(i1);
      if (localView.getVisibility() != 8)
      {
        a localA = (a)localView.getLayoutParams();
        if (width == -1)
        {
          int i3 = height;
          height = localView.getMeasuredHeight();
          measureChildWithMargins(localView, i2, 0, paramInt2, 0);
          height = i3;
        }
      }
      i1 += 1;
    }
  }
  
  int a(View paramView)
  {
    return 0;
  }
  
  int a(View paramView, int paramInt)
  {
    return 0;
  }
  
  View a(int paramInt)
  {
    return getChildAt(paramInt);
  }
  
  void a(int paramInt1, int paramInt2)
  {
    h = 0;
    int i12 = getVirtualChildCount();
    int i6 = View.MeasureSpec.getMode(paramInt1);
    int i18 = View.MeasureSpec.getMode(paramInt2);
    if ((k == null) || (l == null))
    {
      k = new int[4];
      l = new int[4];
    }
    int[] arrayOfInt1 = k;
    int[] arrayOfInt2 = l;
    arrayOfInt1[3] = -1;
    arrayOfInt1[2] = -1;
    arrayOfInt1[1] = -1;
    arrayOfInt1[0] = -1;
    arrayOfInt2[3] = -1;
    arrayOfInt2[2] = -1;
    arrayOfInt2[1] = -1;
    arrayOfInt2[0] = -1;
    boolean bool1 = c;
    int i9 = 0;
    boolean bool2 = j;
    int i11;
    if (i6 == 1073741824) {
      i11 = 1;
    } else {
      i11 = 0;
    }
    int i3 = 0;
    int i1 = 0;
    int i8 = 0;
    int i5 = 1;
    int i10 = 0;
    float f1 = 0.0F;
    int i7 = 0;
    int i2 = 0;
    int i4 = 0;
    Object localObject1;
    int i14;
    Object localObject2;
    int i16;
    while (i7 < i12)
    {
      View localView = a(i7);
      if (localView == null)
      {
        h += c(i7);
        i13 = i3;
        i3 = i2;
        i2 = i13;
      }
      else if (localView.getVisibility() == 8)
      {
        i7 += a(localView, i7);
        i13 = i3;
        i3 = i2;
        i2 = i13;
      }
      else
      {
        if (b(i7)) {
          h += n;
        }
        localObject1 = (a)localView.getLayoutParams();
        f1 += a;
        if ((i6 == 1073741824) && (width == 0) && (a > 0.0F))
        {
          if (i11 != 0)
          {
            h += leftMargin + rightMargin;
          }
          else
          {
            i13 = h;
            h = Math.max(i13, leftMargin + i13 + rightMargin);
          }
          if (bool1)
          {
            i13 = View.MeasureSpec.makeMeasureSpec(0, 0);
            localView.measure(i13, i13);
          }
          else
          {
            i9 = 1;
          }
        }
        else
        {
          if ((width == 0) && (a > 0.0F))
          {
            width = -2;
            i13 = 0;
          }
          else
          {
            i13 = Integer.MIN_VALUE;
          }
          if (f1 == 0.0F) {
            i14 = h;
          } else {
            i14 = 0;
          }
          a(localView, i7, paramInt1, i14, paramInt2, 0);
          if (i13 != Integer.MIN_VALUE) {
            width = i13;
          }
          localObject2 = localObject1;
          i13 = localView.getMeasuredWidth();
          if (i11 != 0)
          {
            h += leftMargin + i13 + rightMargin + b(localView);
          }
          else
          {
            i14 = h;
            h = Math.max(i14, i14 + i13 + leftMargin + rightMargin + b(localView));
          }
          if (bool2) {
            i1 = Math.max(i13, i1);
          }
        }
        i13 = i4;
        i15 = i7;
        i7 = 0;
        i14 = i7;
        i4 = i8;
        if (i18 != 1073741824)
        {
          i14 = i7;
          i4 = i8;
          if (height == -1)
          {
            i4 = 1;
            i14 = 1;
          }
        }
        i7 = topMargin + bottomMargin;
        i8 = localView.getMeasuredHeight() + i7;
        i16 = View.combineMeasuredStates(i3, localView.getMeasuredState());
        if (bool1)
        {
          int i19 = localView.getBaseline();
          if (i19 != -1)
          {
            int i17 = b;
            i3 = i17;
            if (i17 < 0) {
              i3 = g;
            }
            i3 = ((i3 & 0x70) >> 4 & 0xFFFFFFFE) >> 1;
            arrayOfInt1[i3] = Math.max(arrayOfInt1[i3], i19);
            arrayOfInt2[i3] = Math.max(arrayOfInt2[i3], i8 - i19);
          }
          else {}
        }
        i10 = Math.max(i10, i8);
        if ((i5 != 0) && (height == -1)) {
          i3 = 1;
        } else {
          i3 = 0;
        }
        if (a > 0.0F)
        {
          if (i14 == 0) {
            i7 = i8;
          }
          i5 = Math.max(i13, i7);
        }
        else
        {
          if (i14 == 0) {
            i7 = i8;
          }
          i2 = Math.max(i2, i7);
          i5 = i13;
        }
        i8 = a(localView, i15);
        i7 = i3;
        i13 = i5;
        i3 = i2;
        i2 = i16;
        i14 = i15 + i8;
        i8 = i4;
        i5 = i7;
        i7 = i14;
        i4 = i13;
      }
      i7 += 1;
      i13 = i2;
      i2 = i3;
      i3 = i13;
    }
    int i13 = i4;
    i4 = i10;
    i10 = i1;
    if ((h > 0) && (b(i12))) {
      h += n;
    }
    if ((arrayOfInt1[1] == -1) && (arrayOfInt1[0] == -1) && (arrayOfInt1[2] == -1) && (arrayOfInt1[3] == -1)) {
      i1 = i4;
    } else {
      i1 = Math.max(i4, Math.max(arrayOfInt1[3], Math.max(arrayOfInt1[0], Math.max(arrayOfInt1[1], arrayOfInt1[2]))) + Math.max(arrayOfInt2[3], Math.max(arrayOfInt2[0], Math.max(arrayOfInt2[1], arrayOfInt2[2]))));
    }
    i4 = i3;
    if (bool2)
    {
      i3 = i6;
      if ((i3 != Integer.MIN_VALUE) && (i3 != 0)) {
        break label1297;
      }
      h = 0;
      i3 = 0;
      i7 = i1;
      while (i3 < i12)
      {
        localObject1 = a(i3);
        if (localObject1 == null)
        {
          h += c(i3);
          i1 = i3;
        }
        else if (((View)localObject1).getVisibility() == 8)
        {
          i1 = i3 + a((View)localObject1, i3);
        }
        else
        {
          localObject2 = (a)((View)localObject1).getLayoutParams();
          if (i11 != 0)
          {
            i14 = h;
            i15 = leftMargin;
            i1 = i3;
            h = (i14 + (i15 + i10 + rightMargin + b((View)localObject1)));
          }
          else
          {
            i1 = i3;
            i3 = h;
            h = Math.max(i3, i3 + i10 + leftMargin + rightMargin + b((View)localObject1));
          }
        }
        i3 = i1 + 1;
      }
      i1 = i7;
    }
    label1297:
    i7 = i6;
    h += getPaddingLeft() + getPaddingRight();
    i6 = View.resolveSizeAndState(Math.max(h, getSuggestedMinimumWidth()), paramInt1, 0);
    i3 = i6 & 0xFFFFFF;
    int i15 = i3 - h;
    if ((i9 == 0) && ((i15 == 0) || (f1 <= 0.0F)))
    {
      i2 = Math.max(i2, i13);
      if ((bool2) && (i7 != 1073741824))
      {
        i7 = 0;
        while (i7 < i12)
        {
          localObject1 = a(i7);
          if ((localObject1 != null) && (((View)localObject1).getVisibility() != 8)) {
            if (getLayoutParamsa > 0.0F) {
              ((View)localObject1).measure(View.MeasureSpec.makeMeasureSpec(i10, 1073741824), View.MeasureSpec.makeMeasureSpec(((View)localObject1).getMeasuredHeight(), 1073741824));
            } else {}
          }
          i7 += 1;
        }
      }
      i7 = i12;
      i3 = i2;
    }
    else
    {
      float f2 = i;
      if (f2 > 0.0F) {
        f1 = f2;
      }
      arrayOfInt1[3] = -1;
      arrayOfInt1[2] = -1;
      arrayOfInt1[1] = -1;
      arrayOfInt1[0] = -1;
      arrayOfInt2[3] = -1;
      arrayOfInt2[2] = -1;
      arrayOfInt2[1] = -1;
      arrayOfInt2[0] = -1;
      i16 = -1;
      h = 0;
      i1 = 0;
      i14 = i2;
      i2 = i4;
      i9 = i13;
      i3 = i12;
      i12 = i1;
      i4 = i6;
      i1 = i15;
      i10 = i7;
      i7 = i16;
      i6 = i14;
      while (i12 < i3)
      {
        localObject1 = a(i12);
        if ((localObject1 != null) && (((View)localObject1).getVisibility() != 8))
        {
          localObject2 = (a)((View)localObject1).getLayoutParams();
          f2 = a;
          if (f2 > 0.0F)
          {
            i14 = (int)(i1 * f2 / f1);
            i16 = ViewGroup.getChildMeasureSpec(paramInt2, getPaddingTop() + getPaddingBottom() + topMargin + bottomMargin, height);
            if ((width == 0) && (i10 == 1073741824))
            {
              if (i14 > 0) {
                i13 = i14;
              } else {
                i13 = 0;
              }
              ((View)localObject1).measure(View.MeasureSpec.makeMeasureSpec(i13, 1073741824), i16);
            }
            else
            {
              i15 = ((View)localObject1).getMeasuredWidth() + i14;
              i13 = i15;
              if (i15 < 0) {
                i13 = 0;
              }
              ((View)localObject1).measure(View.MeasureSpec.makeMeasureSpec(i13, 1073741824), i16);
            }
            i2 = View.combineMeasuredStates(i2, ((View)localObject1).getMeasuredState() & 0xFF000000);
            f1 -= f2;
            i1 -= i14;
          }
          if (i11 != 0)
          {
            h += ((View)localObject1).getMeasuredWidth() + leftMargin + rightMargin + b((View)localObject1);
          }
          else
          {
            i13 = h;
            h = Math.max(i13, ((View)localObject1).getMeasuredWidth() + i13 + leftMargin + rightMargin + b((View)localObject1));
          }
          if ((i18 != 1073741824) && (height == -1)) {
            i13 = 1;
          } else {
            i13 = 0;
          }
          i16 = topMargin + bottomMargin;
          i15 = ((View)localObject1).getMeasuredHeight() + i16;
          i14 = Math.max(i7, i15);
          if (i13 != 0) {
            i7 = i16;
          } else {
            i7 = i15;
          }
          i7 = Math.max(i6, i7);
          if ((i5 != 0) && (height == -1)) {
            i5 = 1;
          } else {
            i5 = 0;
          }
          if (bool1)
          {
            i16 = ((View)localObject1).getBaseline();
            if (i16 != -1)
            {
              i13 = b;
              i6 = i13;
              if (i13 < 0) {
                i6 = g;
              }
              i6 = ((i6 & 0x70) >> 4 & 0xFFFFFFFE) >> 1;
              arrayOfInt1[i6] = Math.max(arrayOfInt1[i6], i16);
              arrayOfInt2[i6] = Math.max(arrayOfInt2[i6], i15 - i16);
            }
            else {}
          }
          i6 = i7;
          i7 = i14;
        }
        i12 += 1;
      }
      h += getPaddingLeft() + getPaddingRight();
      if ((arrayOfInt1[1] == -1) && (arrayOfInt1[0] == -1) && (arrayOfInt1[2] == -1))
      {
        i1 = i7;
        if (arrayOfInt1[3] == -1) {}
      }
      else
      {
        i1 = Math.max(i7, Math.max(arrayOfInt1[3], Math.max(arrayOfInt1[0], Math.max(arrayOfInt1[1], arrayOfInt1[2]))) + Math.max(arrayOfInt2[3], Math.max(arrayOfInt2[0], Math.max(arrayOfInt2[1], arrayOfInt2[2]))));
      }
      i9 = i6;
      i7 = i3;
      i6 = i4;
      i3 = i9;
      i4 = i2;
    }
    i2 = i1;
    if (i5 == 0)
    {
      i2 = i1;
      if (i18 != 1073741824) {
        i2 = i3;
      }
    }
    setMeasuredDimension(i6 | 0xFF000000 & i4, View.resolveSizeAndState(Math.max(i2 + (getPaddingTop() + getPaddingBottom()), getSuggestedMinimumHeight()), paramInt2, i4 << 16));
    if (i8 != 0)
    {
      c(i7, paramInt1);
      return;
    }
  }
  
  void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    boolean bool1 = r1.a(this);
    int i7 = getPaddingTop();
    int i8 = paramInt4 - paramInt2;
    int i9 = getPaddingBottom();
    int i10 = getPaddingBottom();
    int i5 = getVirtualChildCount();
    int i11 = g;
    boolean bool2 = c;
    int[] arrayOfInt1 = k;
    int[] arrayOfInt2 = l;
    int i4 = u.k(this);
    paramInt2 = d.a(i11 & 0x800007, i4);
    if (paramInt2 != 1)
    {
      if (paramInt2 != 5) {
        paramInt1 = getPaddingLeft();
      } else {
        paramInt1 = getPaddingLeft() + paramInt3 - paramInt1 - h;
      }
    }
    else {
      paramInt1 = getPaddingLeft() + (paramInt3 - paramInt1 - h) / 2;
    }
    int i2;
    int i3;
    if (bool1)
    {
      i2 = i5 - 1;
      i3 = -1;
    }
    else
    {
      i2 = 0;
      i3 = 1;
    }
    paramInt2 = 0;
    int i1 = i8;
    paramInt3 = i7;
    paramInt4 = paramInt1;
    while (paramInt2 < i5)
    {
      int i13 = i2 + i3 * paramInt2;
      View localView = a(i13);
      if (localView == null)
      {
        paramInt4 += c(i13);
      }
      else if (localView.getVisibility() != 8)
      {
        int i12 = localView.getMeasuredWidth();
        int i14 = localView.getMeasuredHeight();
        a localA = (a)localView.getLayoutParams();
        if ((bool2) && (height != -1)) {
          paramInt1 = localView.getBaseline();
        } else {
          paramInt1 = -1;
        }
        int i6 = b;
        if (i6 < 0) {
          i6 = i11 & 0x70;
        }
        i6 &= 0x70;
        if (i6 != 16)
        {
          if (i6 != 48)
          {
            if (i6 != 80)
            {
              paramInt1 = paramInt3;
            }
            else
            {
              i6 = i8 - i9 - i14 - bottomMargin;
              if (paramInt1 != -1)
              {
                int i15 = localView.getMeasuredHeight();
                paramInt1 = i6 - (arrayOfInt2[2] - (i15 - paramInt1));
              }
              else
              {
                paramInt1 = i6;
              }
            }
          }
          else
          {
            i6 = topMargin + paramInt3;
            if (paramInt1 != -1) {
              paramInt1 = i6 + (arrayOfInt1[1] - paramInt1);
            } else {
              paramInt1 = i6;
            }
          }
        }
        else {
          paramInt1 = (i8 - i7 - i10 - i14) / 2 + paramInt3 + topMargin - bottomMargin;
        }
        i6 = paramInt4;
        if (b(i13)) {
          i6 = paramInt4 + n;
        }
        paramInt4 = i6 + leftMargin;
        a(localView, paramInt4 + a(localView), paramInt1, i12, i14);
        paramInt1 = rightMargin;
        i6 = b(localView);
        paramInt2 += a(localView, i13);
        paramInt4 += i12 + paramInt1 + i6;
      }
      paramInt2 += 1;
    }
  }
  
  void a(Canvas paramCanvas)
  {
    int i3 = getVirtualChildCount();
    boolean bool = r1.a(this);
    int i1 = 0;
    View localView;
    a localA;
    while (i1 < i3)
    {
      localView = a(i1);
      if ((localView != null) && (localView.getVisibility() != 8) && (b(i1)))
      {
        localA = (a)localView.getLayoutParams();
        int i2;
        if (bool) {
          i2 = localView.getRight() + rightMargin;
        } else {
          i2 = localView.getLeft() - leftMargin - n;
        }
        b(paramCanvas, i2);
      }
      i1 += 1;
    }
    if (b(i3))
    {
      localView = a(i3 - 1);
      if (localView == null)
      {
        if (bool) {
          i1 = getPaddingLeft();
        } else {
          i1 = getWidth() - getPaddingRight() - n;
        }
      }
      else
      {
        localA = (a)localView.getLayoutParams();
        if (bool) {
          i1 = localView.getLeft() - leftMargin - n;
        } else {
          i1 = localView.getRight() + rightMargin;
        }
      }
      b(paramCanvas, i1);
    }
  }
  
  void a(Canvas paramCanvas, int paramInt)
  {
    m.setBounds(getPaddingLeft() + q, paramInt, getWidth() - getPaddingRight() - q, o + paramInt);
    m.draw(paramCanvas);
  }
  
  void a(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    measureChildWithMargins(paramView, paramInt2, paramInt3, paramInt4, paramInt5);
  }
  
  int b(View paramView)
  {
    return 0;
  }
  
  void b(int paramInt1, int paramInt2)
  {
    h = 0;
    int i7 = 0;
    float f1 = 0.0F;
    int i9 = getVirtualChildCount();
    int i18 = View.MeasureSpec.getMode(paramInt1);
    int i4 = View.MeasureSpec.getMode(paramInt2);
    int i15 = d;
    boolean bool = j;
    int i8 = 0;
    int i6 = 0;
    int i5 = 0;
    int i1 = 0;
    int i2 = 0;
    int i11 = 0;
    int i10 = 0;
    int i3 = 1;
    Object localObject2;
    Object localObject1;
    int i14;
    int i13;
    int i17;
    while (i10 < i9)
    {
      localObject2 = a(i10);
      if (localObject2 == null)
      {
        h += c(i10);
      }
      else if (((View)localObject2).getVisibility() == 8)
      {
        i10 += a((View)localObject2, i10);
      }
      else
      {
        if (b(i10)) {
          h += o;
        }
        localObject1 = (a)((View)localObject2).getLayoutParams();
        f1 += a;
        if ((i4 == 1073741824) && (height == 0) && (a > 0.0F))
        {
          i11 = h;
          h = Math.max(i11, topMargin + i11 + bottomMargin);
          i12 = 1;
        }
        else
        {
          if ((height == 0) && (a > 0.0F))
          {
            height = -2;
            i12 = 0;
          }
          else
          {
            i12 = Integer.MIN_VALUE;
          }
          if (f1 == 0.0F) {
            i14 = h;
          } else {
            i14 = 0;
          }
          Object localObject3 = localObject1;
          i13 = i2;
          a((View)localObject2, i10, paramInt1, 0, paramInt2, i14);
          if (i12 != Integer.MIN_VALUE) {
            height = i12;
          }
          i14 = ((View)localObject2).getMeasuredHeight();
          i2 = h;
          h = Math.max(i2, i2 + i14 + topMargin + bottomMargin + b((View)localObject2));
          i2 = i13;
          i12 = i11;
          if (bool)
          {
            i2 = Math.max(i14, i13);
            i12 = i11;
          }
        }
        i11 = i1;
        if ((i15 >= 0) && (i15 == i10 + 1)) {
          e = h;
        }
        if ((i10 < i15) && (a > 0.0F)) {
          throw new RuntimeException("A child of LinearLayout with index less than mBaselineAlignedChildIndex has weight > 0, which won't work.  Either remove the weight, or don't set mBaselineAlignedChildIndex.");
        }
        i14 = 0;
        i13 = i14;
        i1 = i8;
        if (i18 != 1073741824)
        {
          i13 = i14;
          i1 = i8;
          if (width == -1)
          {
            i1 = 1;
            i13 = 1;
          }
        }
        i8 = leftMargin + rightMargin;
        i14 = ((View)localObject2).getMeasuredWidth() + i8;
        i16 = Math.max(i5, i14);
        i17 = View.combineMeasuredStates(i7, ((View)localObject2).getMeasuredState());
        if ((i3 != 0) && (width == -1)) {
          i3 = 1;
        } else {
          i3 = 0;
        }
        if (a > 0.0F)
        {
          if (i13 == 0) {
            i8 = i14;
          }
          i7 = Math.max(i11, i8);
          i5 = i6;
          i6 = i7;
        }
        else
        {
          if (i13 == 0) {
            i8 = i14;
          }
          i5 = Math.max(i6, i8);
          i6 = i11;
        }
        i10 += a((View)localObject2, i10);
        i7 = i16;
        i13 = i17;
        i14 = i6;
        i8 = i1;
        i11 = i12;
        i6 = i5;
        i1 = i14;
        i5 = i7;
        i7 = i13;
      }
      i10 += 1;
    }
    i10 = i7;
    i7 = i5;
    int i12 = i1;
    if ((h > 0) && (b(i9))) {
      h += o;
    }
    int i16 = i9;
    if (bool)
    {
      i1 = i4;
      if ((i1 == Integer.MIN_VALUE) || (i1 == 0))
      {
        h = 0;
        i1 = 0;
        while (i1 < i16)
        {
          localObject1 = a(i1);
          if (localObject1 == null)
          {
            h += c(i1);
          }
          else if (((View)localObject1).getVisibility() == 8)
          {
            i1 += a((View)localObject1, i1);
          }
          else
          {
            localObject2 = (a)((View)localObject1).getLayoutParams();
            i9 = h;
            h = Math.max(i9, i9 + i2 + topMargin + bottomMargin + b((View)localObject1));
          }
          i1 += 1;
        }
      }
    }
    h += getPaddingTop() + getPaddingBottom();
    int i19 = View.resolveSizeAndState(Math.max(h, getSuggestedMinimumHeight()), paramInt2, 0);
    i9 = i19 & 0xFFFFFF;
    i1 = i9 - h;
    if ((i11 == 0) && ((i1 == 0) || (f1 <= 0.0F)))
    {
      i6 = Math.max(i6, i12);
      if (bool)
      {
        if (i4 != 1073741824)
        {
          i5 = 0;
          i4 = i9;
          while (i5 < i16)
          {
            localObject1 = a(i5);
            if ((localObject1 != null) && (((View)localObject1).getVisibility() != 8)) {
              if (getLayoutParamsa > 0.0F) {
                ((View)localObject1).measure(View.MeasureSpec.makeMeasureSpec(((View)localObject1).getMeasuredWidth(), 1073741824), View.MeasureSpec.makeMeasureSpec(i2, 1073741824));
              } else {}
            }
            i5 += 1;
          }
          i2 = i1;
          i1 = i7;
        }
        else
        {
          i2 = i1;
          i1 = i7;
        }
      }
      else
      {
        i2 = i1;
        i1 = i7;
      }
      i2 = i6;
      i4 = i1;
    }
    else
    {
      float f2 = i;
      if (f2 > 0.0F) {
        f1 = f2;
      }
      h = 0;
      i17 = 0;
      i11 = i6;
      i13 = i1;
      i14 = i5;
      i6 = i15;
      i7 = i2;
      i9 = i12;
      i1 = i10;
      i2 = i11;
      i10 = i4;
      i11 = i17;
      i5 = i13;
      i4 = i14;
      while (i11 < i16)
      {
        localObject1 = a(i11);
        if (((View)localObject1).getVisibility() != 8)
        {
          localObject2 = (a)((View)localObject1).getLayoutParams();
          f2 = a;
          if (f2 > 0.0F)
          {
            i13 = (int)(i5 * f2 / f1);
            i14 = getPaddingLeft();
            i15 = getPaddingRight();
            f1 -= f2;
            i17 = leftMargin;
            int i20 = rightMargin;
            i12 = i5 - i13;
            i14 = ViewGroup.getChildMeasureSpec(paramInt1, i14 + i15 + i17 + i20, width);
            if ((height == 0) && (i10 == 1073741824))
            {
              if (i13 > 0) {
                i5 = i13;
              } else {
                i5 = 0;
              }
              ((View)localObject1).measure(i14, View.MeasureSpec.makeMeasureSpec(i5, 1073741824));
            }
            else
            {
              i13 = ((View)localObject1).getMeasuredHeight() + i13;
              i5 = i13;
              if (i13 < 0) {
                i5 = 0;
              }
              ((View)localObject1).measure(i14, View.MeasureSpec.makeMeasureSpec(i5, 1073741824));
            }
            i1 = View.combineMeasuredStates(i1, ((View)localObject1).getMeasuredState() & 0xFF00);
            i5 = i12;
          }
          i13 = leftMargin + rightMargin;
          i14 = ((View)localObject1).getMeasuredWidth() + i13;
          i12 = Math.max(i4, i14);
          if ((i18 != 1073741824) && (width == -1)) {
            i4 = 1;
          } else {
            i4 = 0;
          }
          if (i4 != 0) {
            i4 = i13;
          } else {
            i4 = i14;
          }
          i13 = Math.max(i2, i4);
          if ((i3 != 0) && (width == -1)) {
            i2 = 1;
          } else {
            i2 = 0;
          }
          i3 = h;
          h = Math.max(i3, i3 + ((View)localObject1).getMeasuredHeight() + topMargin + bottomMargin + b((View)localObject1));
          i4 = i12;
          i3 = i2;
          i2 = i13;
        }
        i11 += 1;
      }
      h += getPaddingTop() + getPaddingBottom();
      i10 = i1;
    }
    i1 = i4;
    if (i3 == 0)
    {
      i1 = i4;
      if (i18 != 1073741824) {
        i1 = i2;
      }
    }
    setMeasuredDimension(View.resolveSizeAndState(Math.max(i1 + (getPaddingLeft() + getPaddingRight()), getSuggestedMinimumWidth()), paramInt1, i10), i19);
    if (i8 != 0) {
      d(i16, paramInt2);
    }
  }
  
  void b(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i2 = getPaddingLeft();
    int i3 = paramInt3 - paramInt1;
    int i4 = getPaddingRight();
    int i5 = getPaddingRight();
    int i6 = getVirtualChildCount();
    int i7 = g;
    paramInt1 = i7 & 0x70;
    if (paramInt1 != 16)
    {
      if (paramInt1 != 80) {
        paramInt1 = getPaddingTop();
      } else {
        paramInt1 = getPaddingTop() + paramInt4 - paramInt2 - h;
      }
    }
    else {
      paramInt1 = getPaddingTop() + (paramInt4 - paramInt2 - h) / 2;
    }
    paramInt2 = 0;
    for (paramInt3 = i2;; paramInt3 = paramInt4)
    {
      paramInt4 = paramInt3;
      if (paramInt2 >= i6) {
        break;
      }
      View localView = a(paramInt2);
      if (localView == null)
      {
        paramInt1 += c(paramInt2);
      }
      else if (localView.getVisibility() != 8)
      {
        int i9 = localView.getMeasuredWidth();
        int i8 = localView.getMeasuredHeight();
        a localA = (a)localView.getLayoutParams();
        paramInt3 = b;
        if (paramInt3 < 0) {
          paramInt3 = i7 & 0x800007;
        }
        paramInt3 = d.a(paramInt3, u.k(this)) & 0x7;
        if (paramInt3 != 1)
        {
          if (paramInt3 != 5) {
            paramInt3 = leftMargin + paramInt4;
          } else {
            paramInt3 = i3 - i4 - i9 - rightMargin;
          }
        }
        else {
          paramInt3 = (i3 - i2 - i5 - i9) / 2 + paramInt4 + leftMargin - rightMargin;
        }
        int i1 = paramInt1;
        if (b(paramInt2)) {
          i1 = paramInt1 + o;
        }
        paramInt1 = i1 + topMargin;
        a(localView, paramInt3, paramInt1 + a(localView), i9, i8);
        paramInt3 = bottomMargin;
        i1 = b(localView);
        paramInt2 += a(localView, paramInt2);
        paramInt1 += i8 + paramInt3 + i1;
      }
      paramInt2 += 1;
    }
  }
  
  void b(Canvas paramCanvas)
  {
    int i2 = getVirtualChildCount();
    int i1 = 0;
    View localView;
    a localA;
    while (i1 < i2)
    {
      localView = a(i1);
      if ((localView != null) && (localView.getVisibility() != 8) && (b(i1)))
      {
        localA = (a)localView.getLayoutParams();
        a(paramCanvas, localView.getTop() - topMargin - o);
      }
      i1 += 1;
    }
    if (b(i2))
    {
      localView = a(i2 - 1);
      if (localView == null)
      {
        i1 = getHeight() - getPaddingBottom() - o;
      }
      else
      {
        localA = (a)localView.getLayoutParams();
        i1 = localView.getBottom() + bottomMargin;
      }
      a(paramCanvas, i1);
    }
  }
  
  void b(Canvas paramCanvas, int paramInt)
  {
    m.setBounds(paramInt, getPaddingTop() + q, n + paramInt, getHeight() - getPaddingBottom() - q);
    m.draw(paramCanvas);
  }
  
  protected boolean b(int paramInt)
  {
    boolean bool2 = false;
    boolean bool1 = false;
    if (paramInt == 0)
    {
      if ((p & 0x1) != 0) {
        bool1 = true;
      }
      return bool1;
    }
    if (paramInt == getChildCount())
    {
      bool1 = bool2;
      if ((p & 0x4) != 0) {
        bool1 = true;
      }
      return bool1;
    }
    if ((p & 0x2) != 0)
    {
      paramInt -= 1;
      while (paramInt >= 0)
      {
        if (getChildAt(paramInt).getVisibility() != 8) {
          return true;
        }
        paramInt -= 1;
      }
      return false;
    }
    return false;
  }
  
  int c(int paramInt)
  {
    return 0;
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return paramLayoutParams instanceof a;
  }
  
  protected a generateDefaultLayoutParams()
  {
    int i1 = f;
    if (i1 == 0) {
      return new a(-2, -2);
    }
    if (i1 == 1) {
      return new a(-1, -2);
    }
    return null;
  }
  
  public a generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new a(getContext(), paramAttributeSet);
  }
  
  protected a generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return new a(paramLayoutParams);
  }
  
  public int getBaseline()
  {
    if (d < 0) {
      return super.getBaseline();
    }
    int i1 = getChildCount();
    int i2 = d;
    if (i1 > i2)
    {
      View localView = getChildAt(i2);
      int i3 = localView.getBaseline();
      if (i3 == -1)
      {
        if (d == 0) {
          return -1;
        }
        throw new RuntimeException("mBaselineAlignedChildIndex of LinearLayout points to a View that doesn't know how to get its baseline.");
      }
      i2 = e;
      i1 = i2;
      if (f == 1)
      {
        int i4 = g & 0x70;
        i1 = i2;
        if (i4 != 48) {
          if (i4 != 16)
          {
            if (i4 != 80) {
              i1 = i2;
            } else {
              i1 = getBottom() - getTop() - getPaddingBottom() - h;
            }
          }
          else {
            i1 = i2 + (getBottom() - getTop() - getPaddingTop() - getPaddingBottom() - h) / 2;
          }
        }
      }
      return getLayoutParamstopMargin + i1 + i3;
    }
    throw new RuntimeException("mBaselineAlignedChildIndex of LinearLayout set to an index that is out of bounds.");
  }
  
  public int getBaselineAlignedChildIndex()
  {
    return d;
  }
  
  public Drawable getDividerDrawable()
  {
    return m;
  }
  
  public int getDividerPadding()
  {
    return q;
  }
  
  public int getDividerWidth()
  {
    return n;
  }
  
  public int getGravity()
  {
    return g;
  }
  
  public int getOrientation()
  {
    return f;
  }
  
  public int getShowDividers()
  {
    return p;
  }
  
  int getVirtualChildCount()
  {
    return getChildCount();
  }
  
  public float getWeightSum()
  {
    return i;
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    if (m == null) {
      return;
    }
    if (f == 1)
    {
      b(paramCanvas);
      return;
    }
    a(paramCanvas);
  }
  
  public void onInitializeAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent)
  {
    super.onInitializeAccessibilityEvent(paramAccessibilityEvent);
    paramAccessibilityEvent.setClassName(o0.class.getName());
  }
  
  public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo paramAccessibilityNodeInfo)
  {
    super.onInitializeAccessibilityNodeInfo(paramAccessibilityNodeInfo);
    paramAccessibilityNodeInfo.setClassName(o0.class.getName());
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if (f == 1)
    {
      b(paramInt1, paramInt2, paramInt3, paramInt4);
      return;
    }
    a(paramInt1, paramInt2, paramInt3, paramInt4);
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    if (f == 1)
    {
      b(paramInt1, paramInt2);
      return;
    }
    a(paramInt1, paramInt2);
  }
  
  public void setBaselineAligned(boolean paramBoolean)
  {
    c = paramBoolean;
  }
  
  public void setBaselineAlignedChildIndex(int paramInt)
  {
    if ((paramInt >= 0) && (paramInt < getChildCount()))
    {
      d = paramInt;
      return;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("base aligned child index out of range (0, ");
    localStringBuilder.append(getChildCount());
    localStringBuilder.append(")");
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  public void setDividerDrawable(Drawable paramDrawable)
  {
    if (paramDrawable == m) {
      return;
    }
    m = paramDrawable;
    boolean bool = false;
    if (paramDrawable != null)
    {
      n = paramDrawable.getIntrinsicWidth();
      o = paramDrawable.getIntrinsicHeight();
    }
    else
    {
      n = 0;
      o = 0;
    }
    if (paramDrawable == null) {
      bool = true;
    }
    setWillNotDraw(bool);
    requestLayout();
  }
  
  public void setDividerPadding(int paramInt)
  {
    q = paramInt;
  }
  
  public void setGravity(int paramInt)
  {
    if (g != paramInt)
    {
      int i1 = paramInt;
      if ((0x800007 & paramInt) == 0) {
        i1 = paramInt | 0x800003;
      }
      paramInt = i1;
      if ((i1 & 0x70) == 0) {
        paramInt = i1 | 0x30;
      }
      g = paramInt;
      requestLayout();
    }
  }
  
  public void setHorizontalGravity(int paramInt)
  {
    paramInt &= 0x800007;
    int i1 = g;
    if ((0x800007 & i1) != paramInt)
    {
      g = (0xFF7FFFF8 & i1 | paramInt);
      requestLayout();
    }
  }
  
  public void setMeasureWithLargestChildEnabled(boolean paramBoolean)
  {
    j = paramBoolean;
  }
  
  public void setOrientation(int paramInt)
  {
    if (f != paramInt)
    {
      f = paramInt;
      requestLayout();
    }
  }
  
  public void setShowDividers(int paramInt)
  {
    if (paramInt != p) {
      requestLayout();
    }
    p = paramInt;
  }
  
  public void setVerticalGravity(int paramInt)
  {
    paramInt &= 0x70;
    int i1 = g;
    if ((i1 & 0x70) != paramInt)
    {
      g = (i1 & 0xFFFFFF8F | paramInt);
      requestLayout();
    }
  }
  
  public void setWeightSum(float paramFloat)
  {
    i = Math.max(0.0F, paramFloat);
  }
  
  public boolean shouldDelayChildPressedState()
  {
    return false;
  }
  
  public static class a
    extends ViewGroup.MarginLayoutParams
  {
    public float a;
    public int b = -1;
    
    public a(int paramInt1, int paramInt2)
    {
      super(paramInt2);
      a = 0.0F;
    }
    
    public a(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
      paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, j.LinearLayoutCompat_Layout);
      a = paramContext.getFloat(j.LinearLayoutCompat_Layout_android_layout_weight, 0.0F);
      b = paramContext.getInt(j.LinearLayoutCompat_Layout_android_layout_gravity, -1);
      paramContext.recycle();
    }
    
    public a(ViewGroup.LayoutParams paramLayoutParams)
    {
      super();
    }
  }
}
