package android.support.v7.widget;

import android.content.Context;
import android.graphics.Rect;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import android.support.v4.view.d0.c;
import android.support.v4.view.d0.c.c;
import android.util.AttributeSet;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.accessibility.AccessibilityEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.List;

public class StaggeredGridLayoutManager
  extends RecyclerView.o
  implements RecyclerView.z.a
{
  boolean A = false;
  private BitSet B;
  int C = -1;
  int D = Integer.MIN_VALUE;
  d E = new d();
  private int F = 2;
  private boolean G;
  private boolean H;
  private e I;
  private int J;
  private final Rect K = new Rect();
  private final b L = new b();
  private boolean M = false;
  private boolean N = true;
  private int[] O;
  private final Runnable P = new a();
  private int s = -1;
  f[] t;
  t0 u;
  t0 v;
  private int w;
  private int x;
  private final n0 y;
  boolean z = false;
  
  public StaggeredGridLayoutManager(Context paramContext, AttributeSet paramAttributeSet, int paramInt1, int paramInt2)
  {
    paramContext = RecyclerView.o.a(paramContext, paramAttributeSet, paramInt1, paramInt2);
    i(a);
    j(b);
    c(c);
    y = new n0();
    M();
  }
  
  private void M()
  {
    u = t0.a(this, w);
    v = t0.a(this, 1 - w);
  }
  
  private void N()
  {
    if (v.d() == 1073741824) {
      return;
    }
    float f1 = 0.0F;
    int k = e();
    int i = 0;
    View localView;
    while (i < k)
    {
      localView = c(i);
      float f3 = v.b(localView);
      if (f3 >= f1)
      {
        float f2 = f3;
        if (((c)localView.getLayoutParams()).f()) {
          f2 = 1.0F * f3 / s;
        }
        f1 = Math.max(f1, f2);
      }
      i += 1;
    }
    int m = x;
    int j = Math.round(s * f1);
    i = j;
    if (v.d() == Integer.MIN_VALUE) {
      i = Math.min(j, v.g());
    }
    k(i);
    if (x == m) {
      return;
    }
    i = 0;
    while (i < k)
    {
      localView = c(i);
      c localC = (c)localView.getLayoutParams();
      if (!f)
      {
        int n;
        if ((L()) && (w == 1))
        {
          j = s;
          n = e.e;
          localView.offsetLeftAndRight(-(j - 1 - n) * x - -(j - 1 - n) * m);
        }
        else
        {
          n = e.e;
          j = x * n;
          n *= m;
          if (w == 1) {
            localView.offsetLeftAndRight(j - n);
          } else {
            localView.offsetTopAndBottom(j - n);
          }
        }
      }
      i += 1;
    }
  }
  
  private void O()
  {
    if ((w != 1) && (L()))
    {
      A = (z ^ true);
      return;
    }
    A = z;
  }
  
  private int a(RecyclerView.v paramV, n0 paramN0, RecyclerView.a0 paramA0)
  {
    B.set(0, s, true);
    int i;
    if (y.i)
    {
      if (e == 1) {
        i = Integer.MAX_VALUE;
      } else {
        i = Integer.MIN_VALUE;
      }
    }
    else if (e == 1) {
      i = g + b;
    } else {
      i = f - b;
    }
    e(e, i);
    if (A) {
      m = u.b();
    } else {
      m = u.f();
    }
    for (int j = 0; paramN0.a(paramA0); k = 1)
    {
      if ((!y.i) && (B.isEmpty())) {
        break;
      }
      View localView = paramN0.a(paramV);
      c localC = (c)localView.getLayoutParams();
      int i3 = localC.a();
      j = E.d(i3);
      int i2;
      if (j == -1) {
        i2 = 1;
      } else {
        i2 = 0;
      }
      f localF;
      if (i2 != 0)
      {
        if (f) {
          localF = t[0];
        } else {
          localF = a(paramN0);
        }
        E.a(i3, localF);
      }
      else
      {
        localF = t[j];
      }
      e = localF;
      if (e == 1) {
        b(localView);
      } else {
        b(localView, 0);
      }
      a(localView, localC, false);
      int i1;
      StaggeredGridLayoutManager.d.a localA;
      int n;
      if (e == 1)
      {
        if (f) {
          j = r(m);
        } else {
          j = localF.a(m);
        }
        i1 = u.b(localView);
        if ((i2 != 0) && (f))
        {
          localA = n(j);
          d = -1;
          c = i3;
          E.a(localA);
        }
        n = j;
        i1 += j;
      }
      else
      {
        if (f) {
          j = u(m);
        } else {
          j = localF.b(m);
        }
        n = u.b(localView);
        if ((i2 != 0) && (f))
        {
          localA = o(j);
          d = 1;
          c = i3;
          E.a(localA);
        }
        i1 = j;
        n = j - n;
      }
      if ((f) && (d == -1)) {
        if (i2 != 0)
        {
          M = true;
        }
        else
        {
          boolean bool;
          if (e == 1) {
            bool = D() ^ true;
          } else {
            bool = E() ^ true;
          }
          if (bool)
          {
            localA = E.c(i3);
            if (localA != null) {
              f = true;
            }
            M = true;
          }
        }
      }
      a(localView, localC, paramN0);
      if ((L()) && (w == 1))
      {
        if (f) {
          k = v.b();
        } else {
          k = v.b() - (s - 1 - e) * x;
        }
        i3 = v.b(localView);
        i2 = k;
        k -= i3;
        i3 = i2;
      }
      else
      {
        if (f) {
          k = v.f();
        } else {
          k = e * x + v.f();
        }
        i3 = v.b(localView);
        i2 = k;
        i3 += k;
        k = i2;
      }
      if (w == 1) {
        a(localView, k, n, i3, i1);
      } else {
        a(localView, n, k, i1, i3);
      }
      if (f) {
        e(y.e, i);
      } else {
        a(localF, y.e, i);
      }
      a(paramV, y);
      if ((y.h) && (localView.hasFocusable())) {
        if (f) {
          B.clear();
        } else {
          B.set(e, false);
        }
      }
    }
    int m = 0;
    if (k == 0) {
      a(paramV, y);
    }
    if (y.e == -1)
    {
      i = u(u.f());
      i = u.f() - i;
    }
    else
    {
      i = r(u.b()) - u.b();
    }
    int k = m;
    if (i > 0) {
      k = Math.min(b, i);
    }
    return k;
  }
  
  private f a(n0 paramN0)
  {
    int i;
    int j;
    int k;
    if (v(e))
    {
      i = s - 1;
      j = -1;
      k = -1;
    }
    else
    {
      i = 0;
      j = s;
      k = 1;
    }
    f localF;
    int i1;
    int n;
    if (e == 1)
    {
      paramN0 = null;
      m = Integer.MAX_VALUE;
      i2 = u.f();
      while (i != j)
      {
        localF = t[i];
        i1 = localF.a(i2);
        n = m;
        if (i1 < m)
        {
          paramN0 = localF;
          n = i1;
        }
        i += k;
        m = n;
      }
      return paramN0;
    }
    paramN0 = null;
    int m = Integer.MIN_VALUE;
    int i2 = u.b();
    while (i != j)
    {
      localF = t[i];
      i1 = localF.b(i2);
      n = m;
      if (i1 > m)
      {
        paramN0 = localF;
        n = i1;
      }
      i += k;
      m = n;
    }
    return paramN0;
  }
  
  private void a(RecyclerView.v paramV, int paramInt)
  {
    int i = e() - 1;
    while (i >= 0)
    {
      View localView = c(i);
      if ((u.d(localView) >= paramInt) && (u.f(localView) >= paramInt))
      {
        c localC = (c)localView.getLayoutParams();
        if (f)
        {
          int j = 0;
          while (j < s)
          {
            if (t[j].a.size() == 1) {
              return;
            }
            j += 1;
          }
          j = 0;
          while (j < s)
          {
            t[j].j();
            j += 1;
          }
        }
        else
        {
          if (e.a.size() == 1) {
            return;
          }
          e.j();
        }
        a(localView, paramV);
        i -= 1;
      }
      else {}
    }
  }
  
  private void a(RecyclerView.v paramV, RecyclerView.a0 paramA0, boolean paramBoolean)
  {
    int i = r(Integer.MIN_VALUE);
    if (i == Integer.MIN_VALUE) {
      return;
    }
    i = u.b() - i;
    if (i > 0)
    {
      i -= -c(-i, paramV, paramA0);
      if ((paramBoolean) && (i > 0)) {
        u.a(i);
      }
      return;
    }
  }
  
  private void a(RecyclerView.v paramV, n0 paramN0)
  {
    if (a)
    {
      if (i) {
        return;
      }
      if (b == 0)
      {
        if (e == -1)
        {
          a(paramV, g);
          return;
        }
        b(paramV, f);
        return;
      }
      if (e == -1)
      {
        i = f;
        i -= s(i);
        if (i < 0) {
          i = g;
        } else {
          i = g - Math.min(i, b);
        }
        a(paramV, i);
        return;
      }
      int i = t(g) - g;
      if (i < 0) {
        i = f;
      } else {
        i = f + Math.min(i, b);
      }
      b(paramV, i);
      return;
    }
  }
  
  private void a(b paramB)
  {
    Object localObject = I;
    int i = e;
    if (i > 0) {
      if (i == s)
      {
        int j = 0;
        while (j < s)
        {
          t[j].c();
          localObject = I;
          int k = f[j];
          i = k;
          if (k != Integer.MIN_VALUE) {
            if (k) {
              i = k + u.b();
            } else {
              i = k + u.f();
            }
          }
          t[j].d(i);
          j += 1;
        }
      }
      else
      {
        ((e)localObject).b();
        localObject = I;
        c = d;
      }
    }
    localObject = I;
    H = l;
    c(j);
    O();
    localObject = I;
    i = c;
    if (i != -1)
    {
      C = i;
      c = k;
    }
    else
    {
      c = A;
    }
    paramB = I;
    if (g > 1)
    {
      localObject = E;
      a = h;
      b = i;
    }
  }
  
  private void a(f paramF, int paramInt1, int paramInt2)
  {
    int i = paramF.f();
    if (paramInt1 == -1)
    {
      if (paramF.h() + i <= paramInt2) {
        B.set(e, false);
      }
      return;
    }
    if (paramF.g() - i >= paramInt2) {
      B.set(e, false);
    }
  }
  
  private void a(View paramView, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    a(paramView, K);
    c localC = (c)paramView.getLayoutParams();
    int i = leftMargin;
    Rect localRect = K;
    paramInt1 = c(paramInt1, i + left, rightMargin + right);
    i = topMargin;
    localRect = K;
    paramInt2 = c(paramInt2, i + top, bottomMargin + bottom);
    if (paramBoolean) {
      paramBoolean = b(paramView, paramInt1, paramInt2, localC);
    } else {
      paramBoolean = a(paramView, paramInt1, paramInt2, localC);
    }
    if (paramBoolean) {
      paramView.measure(paramInt1, paramInt2);
    }
  }
  
  private void a(View paramView, c paramC, n0 paramN0)
  {
    if (e == 1)
    {
      if (f)
      {
        p(paramView);
        return;
      }
      e.a(paramView);
      return;
    }
    if (f)
    {
      q(paramView);
      return;
    }
    e.c(paramView);
  }
  
  private void a(View paramView, c paramC, boolean paramBoolean)
  {
    if (f)
    {
      if (w == 1)
      {
        a(paramView, J, RecyclerView.o.a(h(), i(), p() + m(), height, true), paramBoolean);
        return;
      }
      a(paramView, RecyclerView.o.a(q(), r(), n() + o(), width, true), J, paramBoolean);
      return;
    }
    if (w == 1)
    {
      a(paramView, RecyclerView.o.a(x, r(), 0, width, false), RecyclerView.o.a(h(), i(), p() + m(), height, true), paramBoolean);
      return;
    }
    a(paramView, RecyclerView.o.a(q(), r(), n() + o(), width, true), RecyclerView.o.a(x, i(), 0, height, false), paramBoolean);
  }
  
  private boolean a(f paramF)
  {
    if (A)
    {
      if (paramF.g() < u.b())
      {
        ArrayList localArrayList = a;
        return bgetsize1f ^ true;
      }
    }
    else if (paramF.h() > u.f()) {
      return ba.get(0)).f ^ true;
    }
    return false;
  }
  
  private void b(int paramInt1, int paramInt2, int paramInt3)
  {
    int k;
    if (A) {
      k = I();
    } else {
      k = H();
    }
    int j;
    int i;
    if (paramInt3 == 8)
    {
      if (paramInt1 < paramInt2)
      {
        j = paramInt2 + 1;
        i = paramInt1;
      }
      else
      {
        j = paramInt1 + 1;
        i = paramInt2;
      }
    }
    else
    {
      i = paramInt1;
      j = paramInt1 + paramInt2;
    }
    E.e(i);
    if (paramInt3 != 1)
    {
      if (paramInt3 != 2)
      {
        if (paramInt3 == 8)
        {
          E.b(paramInt1, 1);
          E.a(paramInt2, 1);
        }
      }
      else {
        E.b(paramInt1, paramInt2);
      }
    }
    else {
      E.a(paramInt1, paramInt2);
    }
    if (j <= k) {
      return;
    }
    if (A) {
      paramInt1 = H();
    } else {
      paramInt1 = I();
    }
    if (i <= paramInt1) {
      y();
    }
  }
  
  private void b(int paramInt, RecyclerView.a0 paramA0)
  {
    n0 localN0 = y;
    boolean bool2 = false;
    b = 0;
    c = paramInt;
    int k = 0;
    int m = 0;
    int i = k;
    int j = m;
    boolean bool1;
    if (w())
    {
      int n = paramA0.b();
      i = k;
      j = m;
      if (n != -1)
      {
        boolean bool3 = A;
        if (n < paramInt) {
          bool1 = true;
        } else {
          bool1 = false;
        }
        if (bool3 == bool1)
        {
          j = u.g();
          i = k;
        }
        else
        {
          i = u.g();
          j = m;
        }
      }
    }
    if (f())
    {
      y.f = (u.f() - i);
      y.g = (u.b() + j);
    }
    else
    {
      y.g = (u.a() + j);
      y.f = (-i);
    }
    paramA0 = y;
    h = false;
    a = true;
    if ((u.d() == 0) && (u.a() == 0)) {
      bool1 = true;
    } else {
      bool1 = bool2;
    }
    i = bool1;
  }
  
  private void b(RecyclerView.v paramV, int paramInt)
  {
    while (e() > 0)
    {
      View localView = c(0);
      if ((u.a(localView) <= paramInt) && (u.e(localView) <= paramInt))
      {
        c localC = (c)localView.getLayoutParams();
        if (f)
        {
          int i = 0;
          while (i < s)
          {
            if (t[i].a.size() == 1) {
              return;
            }
            i += 1;
          }
          i = 0;
          while (i < s)
          {
            t[i].k();
            i += 1;
          }
        }
        else
        {
          if (e.a.size() == 1) {
            return;
          }
          e.k();
        }
        a(localView, paramV);
      }
      else {}
    }
  }
  
  private void b(RecyclerView.v paramV, RecyclerView.a0 paramA0, boolean paramBoolean)
  {
    int i = u(Integer.MAX_VALUE);
    if (i == Integer.MAX_VALUE) {
      return;
    }
    i -= u.f();
    if (i > 0)
    {
      i -= c(i, paramV, paramA0);
      if ((paramBoolean) && (i > 0)) {
        u.a(-i);
      }
      return;
    }
  }
  
  private int c(int paramInt1, int paramInt2, int paramInt3)
  {
    if ((paramInt2 == 0) && (paramInt3 == 0)) {
      return paramInt1;
    }
    int i = View.MeasureSpec.getMode(paramInt1);
    if ((i != Integer.MIN_VALUE) && (i != 1073741824)) {
      return paramInt1;
    }
    return View.MeasureSpec.makeMeasureSpec(Math.max(0, View.MeasureSpec.getSize(paramInt1) - paramInt2 - paramInt3), i);
  }
  
  private void c(RecyclerView.v paramV, RecyclerView.a0 paramA0, boolean paramBoolean)
  {
    b localB = L;
    if (((I != null) || (C != -1)) && (paramA0.a() == 0))
    {
      b(paramV);
      localB.b();
      return;
    }
    boolean bool = e;
    int j = 1;
    if ((bool) && (C == -1) && (I == null)) {
      i = 0;
    } else {
      i = 1;
    }
    if (i != 0)
    {
      localB.b();
      if (I != null)
      {
        a(localB);
      }
      else
      {
        O();
        c = A;
      }
      b(paramA0, localB);
      e = true;
    }
    if ((I == null) && (C == -1) && ((c != G) || (L() != H)))
    {
      E.a();
      d = true;
    }
    Object localObject;
    if (e() > 0)
    {
      localObject = I;
      if ((localObject == null) || (e < 1)) {
        if (d)
        {
          i = 0;
          while (i < s)
          {
            t[i].c();
            k = b;
            if (k != Integer.MIN_VALUE) {
              t[i].d(k);
            }
            i += 1;
          }
        }
        else
        {
          if ((i == 0) && (L.f != null)) {
            i = 0;
          }
          while (i < s)
          {
            localObject = t[i];
            ((f)localObject).c();
            ((f)localObject).d(L.f[i]);
            i += 1;
            continue;
            i = 0;
            while (i < s)
            {
              t[i].a(A, b);
              i += 1;
            }
            L.a(t);
          }
        }
      }
    }
    a(paramV);
    y.a = false;
    M = false;
    k(v.g());
    b(a, paramA0);
    if (c)
    {
      w(-1);
      a(paramV, y, paramA0);
      w(1);
      localObject = y;
      c = (a + d);
      a(paramV, (n0)localObject, paramA0);
    }
    else
    {
      w(1);
      a(paramV, y, paramA0);
      w(-1);
      localObject = y;
      c = (a + d);
      a(paramV, (n0)localObject, paramA0);
    }
    N();
    if (e() > 0) {
      if (A)
      {
        a(paramV, paramA0, true);
        b(paramV, paramA0, false);
      }
      else
      {
        b(paramV, paramA0, true);
        a(paramV, paramA0, false);
      }
    }
    int k = 0;
    int i = k;
    if (paramBoolean)
    {
      i = k;
      if (!paramA0.d())
      {
        if ((F == 0) || (e() <= 0) || ((M) || (J() == null))) {
          j = 0;
        }
        i = k;
        if (j != 0)
        {
          a(P);
          i = k;
          if (F()) {
            i = 1;
          }
        }
      }
    }
    if (paramA0.d()) {
      L.b();
    }
    G = c;
    H = L();
    if (i != 0)
    {
      L.b();
      c(paramV, paramA0, false);
    }
  }
  
  private boolean c(RecyclerView.a0 paramA0, b paramB)
  {
    int i;
    if (G) {
      i = q(paramA0.a());
    } else {
      i = p(paramA0.a());
    }
    a = i;
    b = Integer.MIN_VALUE;
    return true;
  }
  
  private void e(int paramInt1, int paramInt2)
  {
    int i = 0;
    while (i < s)
    {
      if (!t[i].a.isEmpty()) {
        a(t[i], paramInt1, paramInt2);
      }
      i += 1;
    }
  }
  
  private int h(RecyclerView.a0 paramA0)
  {
    if (e() == 0) {
      return 0;
    }
    return a1.a(paramA0, u, b(N ^ true), a(N ^ true), this, N);
  }
  
  private int i(RecyclerView.a0 paramA0)
  {
    if (e() == 0) {
      return 0;
    }
    return a1.a(paramA0, u, b(N ^ true), a(N ^ true), this, N, A);
  }
  
  private int j(RecyclerView.a0 paramA0)
  {
    if (e() == 0) {
      return 0;
    }
    return a1.b(paramA0, u, b(N ^ true), a(N ^ true), this, N);
  }
  
  private int l(int paramInt)
  {
    int j = e();
    int i = -1;
    if (j == 0)
    {
      paramInt = i;
      if (A) {
        paramInt = 1;
      }
      return paramInt;
    }
    int k;
    if (paramInt < H()) {
      k = 1;
    } else {
      k = 0;
    }
    if (k != A) {
      return -1;
    }
    return 1;
  }
  
  private int m(int paramInt)
  {
    if (paramInt != 1)
    {
      if (paramInt != 2)
      {
        if (paramInt != 17)
        {
          if (paramInt != 33)
          {
            if (paramInt != 66)
            {
              if (paramInt != 130) {
                return Integer.MIN_VALUE;
              }
              if (w == 1) {
                return 1;
              }
              return Integer.MIN_VALUE;
            }
            if (w == 0) {
              return 1;
            }
            return Integer.MIN_VALUE;
          }
          if (w == 1) {
            return -1;
          }
          return Integer.MIN_VALUE;
        }
        if (w == 0) {
          return -1;
        }
        return Integer.MIN_VALUE;
      }
      if (w == 1) {
        return 1;
      }
      if (L()) {
        return -1;
      }
      return 1;
    }
    if (w == 1) {
      return -1;
    }
    if (L()) {
      return 1;
    }
    return -1;
  }
  
  private StaggeredGridLayoutManager.d.a n(int paramInt)
  {
    StaggeredGridLayoutManager.d.a localA = new StaggeredGridLayoutManager.d.a();
    e = new int[s];
    int i = 0;
    while (i < s)
    {
      e[i] = (paramInt - t[i].a(paramInt));
      i += 1;
    }
    return localA;
  }
  
  private StaggeredGridLayoutManager.d.a o(int paramInt)
  {
    StaggeredGridLayoutManager.d.a localA = new StaggeredGridLayoutManager.d.a();
    e = new int[s];
    int i = 0;
    while (i < s)
    {
      e[i] = (t[i].b(paramInt) - paramInt);
      i += 1;
    }
    return localA;
  }
  
  private int p(int paramInt)
  {
    int j = e();
    int i = 0;
    while (i < j)
    {
      int k = l(c(i));
      if ((k >= 0) && (k < paramInt)) {
        return k;
      }
      i += 1;
    }
    return 0;
  }
  
  private void p(View paramView)
  {
    int i = s - 1;
    while (i >= 0)
    {
      t[i].a(paramView);
      i -= 1;
    }
  }
  
  private int q(int paramInt)
  {
    int i = e() - 1;
    while (i >= 0)
    {
      int j = l(c(i));
      if ((j >= 0) && (j < paramInt)) {
        return j;
      }
      i -= 1;
    }
    return 0;
  }
  
  private void q(View paramView)
  {
    int i = s - 1;
    while (i >= 0)
    {
      t[i].c(paramView);
      i -= 1;
    }
  }
  
  private int r(int paramInt)
  {
    int j = t[0].a(paramInt);
    int i = 1;
    while (i < s)
    {
      int m = t[i].a(paramInt);
      int k = j;
      if (m > j) {
        k = m;
      }
      i += 1;
      j = k;
    }
    return j;
  }
  
  private int s(int paramInt)
  {
    int j = t[0].b(paramInt);
    int i = 1;
    while (i < s)
    {
      int m = t[i].b(paramInt);
      int k = j;
      if (m > j) {
        k = m;
      }
      i += 1;
      j = k;
    }
    return j;
  }
  
  private int t(int paramInt)
  {
    int j = t[0].a(paramInt);
    int i = 1;
    while (i < s)
    {
      int m = t[i].a(paramInt);
      int k = j;
      if (m < j) {
        k = m;
      }
      i += 1;
      j = k;
    }
    return j;
  }
  
  private int u(int paramInt)
  {
    int j = t[0].b(paramInt);
    int i = 1;
    while (i < s)
    {
      int m = t[i].b(paramInt);
      int k = j;
      if (m < j) {
        k = m;
      }
      i += 1;
      j = k;
    }
    return j;
  }
  
  private boolean v(int paramInt)
  {
    int i;
    if (w == 0)
    {
      if (paramInt == -1) {
        i = 1;
      } else {
        i = 0;
      }
      return i != A;
    }
    if (paramInt == -1) {
      i = 1;
    } else {
      i = 0;
    }
    if (i == A) {
      i = 1;
    } else {
      i = 0;
    }
    return i == L();
  }
  
  private void w(int paramInt)
  {
    n0 localN0 = y;
    e = paramInt;
    boolean bool2 = A;
    int i = 1;
    boolean bool1;
    if (paramInt == -1) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    if (bool2 == bool1) {
      paramInt = i;
    } else {
      paramInt = -1;
    }
    d = paramInt;
  }
  
  public boolean C()
  {
    return I == null;
  }
  
  boolean D()
  {
    int j = t[0].a(Integer.MIN_VALUE);
    int i = 1;
    while (i < s)
    {
      if (t[i].a(Integer.MIN_VALUE) != j) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  boolean E()
  {
    int j = t[0].b(Integer.MIN_VALUE);
    int i = 1;
    while (i < s)
    {
      if (t[i].b(Integer.MIN_VALUE) != j) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  boolean F()
  {
    if ((e() != 0) && (F != 0))
    {
      if (!t()) {
        return false;
      }
      int i;
      int j;
      if (A)
      {
        i = I();
        j = H();
      }
      else
      {
        i = H();
        j = I();
      }
      if ((i == 0) && (J() != null))
      {
        E.a();
        z();
        y();
        return true;
      }
      if (!M) {
        return false;
      }
      int k;
      if (A) {
        k = -1;
      } else {
        k = 1;
      }
      StaggeredGridLayoutManager.d.a localA1 = E.a(i, j + 1, k, true);
      if (localA1 == null)
      {
        M = false;
        E.b(j + 1);
        return false;
      }
      StaggeredGridLayoutManager.d.a localA2 = E.a(i, c, k * -1, true);
      if (localA2 == null) {
        E.b(c);
      } else {
        E.b(c + 1);
      }
      z();
      y();
      return true;
    }
    return false;
  }
  
  int G()
  {
    View localView;
    if (A) {
      localView = a(true);
    } else {
      localView = b(true);
    }
    if (localView == null) {
      return -1;
    }
    return l(localView);
  }
  
  int H()
  {
    if (e() == 0) {
      return 0;
    }
    return l(c(0));
  }
  
  int I()
  {
    int i = e();
    if (i == 0) {
      return 0;
    }
    return l(c(i - 1));
  }
  
  View J()
  {
    int i = e() - 1;
    BitSet localBitSet = new BitSet(s);
    localBitSet.set(0, s, true);
    int j = w;
    int m = -1;
    if ((j == 1) && (L())) {
      j = 1;
    } else {
      j = -1;
    }
    int k;
    if (A)
    {
      k = 0 - 1;
    }
    else
    {
      n = 0;
      k = i + 1;
      i = n;
    }
    if (i < k) {
      m = 1;
    }
    int n = i;
    while (n != k)
    {
      View localView = c(n);
      c localC = (c)localView.getLayoutParams();
      if (localBitSet.get(e.e))
      {
        if (a(e)) {
          return localView;
        }
        localBitSet.clear(e.e);
      }
      if ((!f) && (n + m != k))
      {
        Object localObject = c(n + m);
        int i1 = 0;
        i = 0;
        int i2;
        if (A)
        {
          i1 = u.a(localView);
          i2 = u.a((View)localObject);
          if (i1 < i2) {
            return localView;
          }
          if (i1 == i2) {
            i = 1;
          }
        }
        else
        {
          i2 = u.d(localView);
          int i3 = u.d((View)localObject);
          if (i2 > i3) {
            return localView;
          }
          i = i1;
          if (i2 == i3) {
            i = 1;
          }
        }
        if (i != 0)
        {
          localObject = (c)((View)localObject).getLayoutParams();
          if (e.e - e.e < 0) {
            i = 1;
          } else {
            i = 0;
          }
          if (j < 0) {
            i1 = 1;
          } else {
            i1 = 0;
          }
          if (i != i1) {
            return localView;
          }
        }
      }
      n += m;
    }
    return null;
  }
  
  public void K()
  {
    E.a();
    y();
  }
  
  boolean L()
  {
    return j() == 1;
  }
  
  public int a(int paramInt, RecyclerView.v paramV, RecyclerView.a0 paramA0)
  {
    return c(paramInt, paramV, paramA0);
  }
  
  public int a(RecyclerView.a0 paramA0)
  {
    return h(paramA0);
  }
  
  public int a(RecyclerView.v paramV, RecyclerView.a0 paramA0)
  {
    if (w == 1) {
      return s;
    }
    return super.a(paramV, paramA0);
  }
  
  public RecyclerView.p a(Context paramContext, AttributeSet paramAttributeSet)
  {
    return new c(paramContext, paramAttributeSet);
  }
  
  public RecyclerView.p a(ViewGroup.LayoutParams paramLayoutParams)
  {
    if ((paramLayoutParams instanceof ViewGroup.MarginLayoutParams)) {
      return new c((ViewGroup.MarginLayoutParams)paramLayoutParams);
    }
    return new c(paramLayoutParams);
  }
  
  public View a(View paramView, int paramInt, RecyclerView.v paramV, RecyclerView.a0 paramA0)
  {
    if (e() == 0) {
      return null;
    }
    paramView = c(paramView);
    if (paramView == null) {
      return null;
    }
    O();
    int k = m(paramInt);
    if (k == Integer.MIN_VALUE) {
      return null;
    }
    Object localObject = (c)paramView.getLayoutParams();
    boolean bool1 = f;
    localObject = e;
    if (k == 1) {
      paramInt = I();
    } else {
      paramInt = H();
    }
    b(paramInt, paramA0);
    w(k);
    n0 localN0 = y;
    c = (d + paramInt);
    b = ((int)(u.g() * 0.33333334F));
    localN0 = y;
    h = true;
    int j = 0;
    a = false;
    a(paramV, localN0, paramA0);
    G = A;
    if (!bool1)
    {
      paramV = ((f)localObject).a(paramInt, k);
      if ((paramV != null) && (paramV != paramView)) {
        return paramV;
      }
    }
    if (v(k))
    {
      i = s - 1;
      while (i >= 0)
      {
        paramV = t[i].a(paramInt, k);
        if ((paramV != null) && (paramV != paramView)) {
          return paramV;
        }
        i -= 1;
      }
    }
    else
    {
      i = 0;
      while (i < s)
      {
        paramV = t[i].a(paramInt, k);
        if ((paramV != null) && (paramV != paramView)) {
          return paramV;
        }
        i += 1;
      }
    }
    boolean bool2 = z;
    if (k == -1) {
      i = 1;
    } else {
      i = 0;
    }
    paramInt = j;
    if ((bool2 ^ true) == i) {
      paramInt = 1;
    }
    if (!bool1)
    {
      if (paramInt != 0) {
        i = ((f)localObject).d();
      } else {
        i = ((f)localObject).e();
      }
      paramV = b(i);
      if ((paramV != null) && (paramV != paramView)) {
        return paramV;
      }
    }
    if (v(k))
    {
      i = s - 1;
      while (i >= 0)
      {
        if (i != e)
        {
          if (paramInt != 0) {
            j = t[i].d();
          } else {
            j = t[i].e();
          }
          paramV = b(j);
          if ((paramV != null) && (paramV != paramView)) {
            return paramV;
          }
        }
        i -= 1;
      }
      return null;
    }
    int i = 0;
    while (i < s)
    {
      if (paramInt != 0) {
        j = t[i].d();
      } else {
        j = t[i].e();
      }
      paramV = b(j);
      if ((paramV != null) && (paramV != paramView)) {
        return paramV;
      }
      i += 1;
    }
    return null;
  }
  
  View a(boolean paramBoolean)
  {
    int j = u.f();
    int k = u.b();
    Object localObject1 = null;
    int i = e() - 1;
    while (i >= 0)
    {
      View localView = c(i);
      int m = u.d(localView);
      int n = u.a(localView);
      Object localObject2 = localObject1;
      if (n > j) {
        if (m >= k)
        {
          localObject2 = localObject1;
        }
        else if (n > k)
        {
          if (!paramBoolean) {
            return localView;
          }
          localObject2 = localObject1;
          if (localObject1 == null) {
            localObject2 = localView;
          }
        }
        else
        {
          return localView;
        }
      }
      i -= 1;
      localObject1 = localObject2;
    }
    return localObject1;
  }
  
  public void a(int paramInt1, int paramInt2, RecyclerView.a0 paramA0, RecyclerView.o.c paramC)
  {
    if (w != 0) {
      paramInt1 = paramInt2;
    }
    if (e() != 0)
    {
      if (paramInt1 == 0) {
        return;
      }
      a(paramInt1, paramA0);
      Object localObject = O;
      if ((localObject == null) || (localObject.length < s)) {
        O = new int[s];
      }
      paramInt1 = 0;
      paramInt2 = 0;
      while (paramInt2 < s)
      {
        localObject = y;
        int j;
        if (d == -1)
        {
          i = f;
          j = i - t[paramInt2].b(i);
        }
        else
        {
          j = t[paramInt2].a(g) - y.g;
        }
        int i = paramInt1;
        if (j >= 0)
        {
          O[paramInt1] = j;
          i = paramInt1 + 1;
        }
        paramInt2 += 1;
        paramInt1 = i;
      }
      Arrays.sort(O, 0, paramInt1);
      paramInt2 = 0;
      while ((paramInt2 < paramInt1) && (y.a(paramA0)))
      {
        paramC.a(y.c, O[paramInt2]);
        localObject = y;
        c += d;
        paramInt2 += 1;
      }
      return;
    }
  }
  
  void a(int paramInt, RecyclerView.a0 paramA0)
  {
    int i;
    int j;
    if (paramInt > 0)
    {
      i = 1;
      j = I();
    }
    else
    {
      i = -1;
      j = H();
    }
    y.a = true;
    b(j, paramA0);
    w(i);
    paramA0 = y;
    c = (d + j);
    b = Math.abs(paramInt);
  }
  
  public void a(Rect paramRect, int paramInt1, int paramInt2)
  {
    int i = n() + o();
    int j = p() + m();
    if (w == 1)
    {
      paramInt2 = RecyclerView.o.a(paramInt2, paramRect.height() + j, k());
      paramInt1 = RecyclerView.o.a(paramInt1, x * s + i, l());
    }
    else
    {
      paramInt1 = RecyclerView.o.a(paramInt1, paramRect.width() + i, l());
      paramInt2 = RecyclerView.o.a(paramInt2, x * s + j, k());
    }
    c(paramInt1, paramInt2);
  }
  
  public void a(Parcelable paramParcelable)
  {
    if ((paramParcelable instanceof e))
    {
      I = ((e)paramParcelable);
      y();
    }
  }
  
  public void a(RecyclerView.v paramV, RecyclerView.a0 paramA0, View paramView, c paramC)
  {
    paramV = paramView.getLayoutParams();
    if (!(paramV instanceof c))
    {
      super.a(paramView, paramC);
      return;
    }
    paramV = (c)paramV;
    int i;
    if (w == 0)
    {
      j = paramV.e();
      if (f) {
        i = s;
      } else {
        i = 1;
      }
      paramC.b(c.c.a(j, i, -1, -1, f, false));
      return;
    }
    int j = paramV.e();
    if (f) {
      i = s;
    } else {
      i = 1;
    }
    paramC.b(c.c.a(-1, -1, j, i, f, false));
  }
  
  public void a(RecyclerView paramRecyclerView, int paramInt1, int paramInt2)
  {
    b(paramInt1, paramInt2, 1);
  }
  
  public void a(RecyclerView paramRecyclerView, int paramInt1, int paramInt2, int paramInt3)
  {
    b(paramInt1, paramInt2, 8);
  }
  
  public void a(RecyclerView paramRecyclerView, int paramInt1, int paramInt2, Object paramObject)
  {
    b(paramInt1, paramInt2, 4);
  }
  
  public void a(AccessibilityEvent paramAccessibilityEvent)
  {
    super.a(paramAccessibilityEvent);
    if (e() > 0)
    {
      View localView1 = b(false);
      View localView2 = a(false);
      if (localView1 != null)
      {
        if (localView2 == null) {
          return;
        }
        int i = l(localView1);
        int j = l(localView2);
        if (i < j)
        {
          paramAccessibilityEvent.setFromIndex(i);
          paramAccessibilityEvent.setToIndex(j);
          return;
        }
        paramAccessibilityEvent.setFromIndex(j);
        paramAccessibilityEvent.setToIndex(i);
        return;
      }
      return;
    }
  }
  
  public void a(String paramString)
  {
    if (I == null) {
      super.a(paramString);
    }
  }
  
  public boolean a()
  {
    return w == 0;
  }
  
  boolean a(RecyclerView.a0 paramA0, b paramB)
  {
    boolean bool2 = paramA0.d();
    boolean bool1 = false;
    if (!bool2)
    {
      int i = C;
      if (i == -1) {
        return false;
      }
      if ((i >= 0) && (i < paramA0.a()))
      {
        paramA0 = I;
        if ((paramA0 != null) && (c != -1) && (e >= 1))
        {
          b = Integer.MIN_VALUE;
          a = C;
          return true;
        }
        paramA0 = b(C);
        if (paramA0 != null)
        {
          if (A) {
            i = I();
          } else {
            i = H();
          }
          a = i;
          if (D != Integer.MIN_VALUE)
          {
            if (c)
            {
              b = (u.b() - D - u.a(paramA0));
              return true;
            }
            b = (u.f() + D - u.d(paramA0));
            return true;
          }
          if (u.b(paramA0) > u.g())
          {
            if (c) {
              i = u.b();
            } else {
              i = u.f();
            }
            b = i;
            return true;
          }
          i = u.d(paramA0) - u.f();
          if (i < 0)
          {
            b = (-i);
            return true;
          }
          i = u.b() - u.a(paramA0);
          if (i < 0)
          {
            b = i;
            return true;
          }
          b = Integer.MIN_VALUE;
        }
        else
        {
          a = C;
          i = D;
          if (i == Integer.MIN_VALUE)
          {
            if (l(a) == 1) {
              bool1 = true;
            }
            c = bool1;
            paramB.a();
          }
          else
          {
            paramB.a(i);
          }
          d = true;
        }
        return true;
      }
      C = -1;
      D = Integer.MIN_VALUE;
      return false;
    }
    return false;
  }
  
  public boolean a(RecyclerView.p paramP)
  {
    return paramP instanceof c;
  }
  
  public int b(int paramInt, RecyclerView.v paramV, RecyclerView.a0 paramA0)
  {
    return c(paramInt, paramV, paramA0);
  }
  
  public int b(RecyclerView.a0 paramA0)
  {
    return i(paramA0);
  }
  
  public int b(RecyclerView.v paramV, RecyclerView.a0 paramA0)
  {
    if (w == 0) {
      return s;
    }
    return super.b(paramV, paramA0);
  }
  
  View b(boolean paramBoolean)
  {
    int j = u.f();
    int k = u.b();
    int m = e();
    Object localObject1 = null;
    int i = 0;
    while (i < m)
    {
      View localView = c(i);
      int n = u.d(localView);
      Object localObject2 = localObject1;
      if (u.a(localView) > j) {
        if (n >= k)
        {
          localObject2 = localObject1;
        }
        else if (n < j)
        {
          if (!paramBoolean) {
            return localView;
          }
          localObject2 = localObject1;
          if (localObject1 == null) {
            localObject2 = localView;
          }
        }
        else
        {
          return localView;
        }
      }
      i += 1;
      localObject1 = localObject2;
    }
    return localObject1;
  }
  
  void b(RecyclerView.a0 paramA0, b paramB)
  {
    if (a(paramA0, paramB)) {
      return;
    }
    if (c(paramA0, paramB)) {
      return;
    }
    paramB.a();
    a = 0;
  }
  
  public void b(RecyclerView paramRecyclerView, int paramInt1, int paramInt2)
  {
    b(paramInt1, paramInt2, 2);
  }
  
  public void b(RecyclerView paramRecyclerView, RecyclerView.v paramV)
  {
    super.b(paramRecyclerView, paramV);
    a(P);
    int i = 0;
    while (i < s)
    {
      t[i].c();
      i += 1;
    }
    paramRecyclerView.requestLayout();
  }
  
  public boolean b()
  {
    return w == 1;
  }
  
  int c(int paramInt, RecyclerView.v paramV, RecyclerView.a0 paramA0)
  {
    if (e() != 0)
    {
      if (paramInt == 0) {
        return 0;
      }
      a(paramInt, paramA0);
      int i = a(paramV, y, paramA0);
      if (y.b >= i) {
        if (paramInt < 0) {
          paramInt = -i;
        } else {
          paramInt = i;
        }
      }
      u.a(-paramInt);
      G = A;
      paramA0 = y;
      b = 0;
      a(paramV, paramA0);
      return paramInt;
    }
    return 0;
  }
  
  public int c(RecyclerView.a0 paramA0)
  {
    return j(paramA0);
  }
  
  public RecyclerView.p c()
  {
    if (w == 0) {
      return new c(-2, -1);
    }
    return new c(-1, -2);
  }
  
  public void c(boolean paramBoolean)
  {
    a(null);
    e localE = I;
    if ((localE != null) && (j != paramBoolean)) {
      j = paramBoolean;
    }
    z = paramBoolean;
    y();
  }
  
  public int d(RecyclerView.a0 paramA0)
  {
    return h(paramA0);
  }
  
  public void d(int paramInt)
  {
    super.d(paramInt);
    int i = 0;
    while (i < s)
    {
      t[i].c(paramInt);
      i += 1;
    }
  }
  
  public void d(RecyclerView paramRecyclerView)
  {
    E.a();
    y();
  }
  
  public int e(RecyclerView.a0 paramA0)
  {
    return i(paramA0);
  }
  
  public void e(int paramInt)
  {
    super.e(paramInt);
    int i = 0;
    while (i < s)
    {
      t[i].c(paramInt);
      i += 1;
    }
  }
  
  public void e(RecyclerView.v paramV, RecyclerView.a0 paramA0)
  {
    c(paramV, paramA0, true);
  }
  
  public int f(RecyclerView.a0 paramA0)
  {
    return j(paramA0);
  }
  
  public void f(int paramInt)
  {
    if (paramInt == 0) {
      F();
    }
  }
  
  public void g(RecyclerView.a0 paramA0)
  {
    super.g(paramA0);
    C = -1;
    D = Integer.MIN_VALUE;
    I = null;
    L.b();
  }
  
  public void h(int paramInt)
  {
    e localE = I;
    if ((localE != null) && (c != paramInt)) {
      localE.a();
    }
    C = paramInt;
    D = Integer.MIN_VALUE;
    y();
  }
  
  public void i(int paramInt)
  {
    if ((paramInt != 0) && (paramInt != 1)) {
      throw new IllegalArgumentException("invalid orientation.");
    }
    a(null);
    if (paramInt == w) {
      return;
    }
    w = paramInt;
    t0 localT0 = u;
    u = v;
    v = localT0;
    y();
  }
  
  public void j(int paramInt)
  {
    a(null);
    if (paramInt != s)
    {
      K();
      s = paramInt;
      B = new BitSet(s);
      t = new f[s];
      paramInt = 0;
      while (paramInt < s)
      {
        t[paramInt] = new f(paramInt);
        paramInt += 1;
      }
      y();
    }
  }
  
  void k(int paramInt)
  {
    x = (paramInt / s);
    J = View.MeasureSpec.makeMeasureSpec(paramInt, v.d());
  }
  
  public boolean u()
  {
    return F != 0;
  }
  
  public Parcelable x()
  {
    e localE = I;
    if (localE != null) {
      return new e(localE);
    }
    localE = new e();
    j = z;
    k = G;
    l = H;
    d localD = E;
    if (localD != null)
    {
      int[] arrayOfInt = a;
      if (arrayOfInt != null)
      {
        h = arrayOfInt;
        g = h.length;
        i = b;
        break label117;
      }
    }
    g = 0;
    label117:
    if (e() > 0)
    {
      if (G) {
        i = I();
      } else {
        i = H();
      }
      c = i;
      d = G();
      int i = s;
      e = i;
      f = new int[i];
      int j = 0;
      while (j < s)
      {
        int k;
        if (G)
        {
          k = t[j].a(Integer.MIN_VALUE);
          i = k;
          if (k != Integer.MIN_VALUE) {
            i = k - u.b();
          }
        }
        else
        {
          k = t[j].b(Integer.MIN_VALUE);
          i = k;
          if (k != Integer.MIN_VALUE) {
            i = k - u.f();
          }
        }
        f[j] = i;
        j += 1;
      }
      return localE;
    }
    c = -1;
    d = -1;
    e = 0;
    return localE;
  }
  
  class a
    implements Runnable
  {
    a() {}
    
    public void run()
    {
      F();
    }
  }
  
  class b
  {
    int a;
    int b;
    boolean c;
    boolean d;
    boolean e;
    int[] f;
    
    b()
    {
      b();
    }
    
    void a()
    {
      int i;
      if (c) {
        i = u.b();
      } else {
        i = u.f();
      }
      b = i;
    }
    
    void a(int paramInt)
    {
      if (c)
      {
        b = (u.b() - paramInt);
        return;
      }
      b = (u.f() + paramInt);
    }
    
    void a(StaggeredGridLayoutManager.f[] paramArrayOfF)
    {
      int j = paramArrayOfF.length;
      int[] arrayOfInt = f;
      if ((arrayOfInt == null) || (arrayOfInt.length < j)) {
        f = new int[t.length];
      }
      int i = 0;
      while (i < j)
      {
        f[i] = paramArrayOfF[i].b(Integer.MIN_VALUE);
        i += 1;
      }
    }
    
    void b()
    {
      a = -1;
      b = Integer.MIN_VALUE;
      c = false;
      d = false;
      e = false;
      int[] arrayOfInt = f;
      if (arrayOfInt != null) {
        Arrays.fill(arrayOfInt, -1);
      }
    }
  }
  
  public static class c
    extends RecyclerView.p
  {
    StaggeredGridLayoutManager.f e;
    boolean f;
    
    public c(int paramInt1, int paramInt2)
    {
      super(paramInt2);
    }
    
    public c(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
    }
    
    public c(ViewGroup.LayoutParams paramLayoutParams)
    {
      super();
    }
    
    public c(ViewGroup.MarginLayoutParams paramMarginLayoutParams)
    {
      super();
    }
    
    public final int e()
    {
      StaggeredGridLayoutManager.f localF = e;
      if (localF == null) {
        return -1;
      }
      return e;
    }
    
    public boolean f()
    {
      return f;
    }
  }
  
  static class d
  {
    int[] a;
    List<a> b;
    
    d() {}
    
    private void c(int paramInt1, int paramInt2)
    {
      Object localObject = b;
      if (localObject == null) {
        return;
      }
      int i = ((List)localObject).size() - 1;
      while (i >= 0)
      {
        localObject = (a)b.get(i);
        int j = c;
        if (j >= paramInt1) {
          c = (j + paramInt2);
        }
        i -= 1;
      }
    }
    
    private void d(int paramInt1, int paramInt2)
    {
      Object localObject = b;
      if (localObject == null) {
        return;
      }
      int i = ((List)localObject).size() - 1;
      while (i >= 0)
      {
        localObject = (a)b.get(i);
        int j = c;
        if (j >= paramInt1) {
          if (j < paramInt1 + paramInt2) {
            b.remove(i);
          } else {
            c = (j - paramInt2);
          }
        }
        i -= 1;
      }
    }
    
    private int g(int paramInt)
    {
      if (b == null) {
        return -1;
      }
      a localA = c(paramInt);
      if (localA != null) {
        b.remove(localA);
      }
      int k = -1;
      int m = b.size();
      int i = 0;
      int j;
      for (;;)
      {
        j = k;
        if (i >= m) {
          break;
        }
        if (b.get(i)).c >= paramInt)
        {
          j = i;
          break;
        }
        i += 1;
      }
      if (j != -1)
      {
        localA = (a)b.get(j);
        b.remove(j);
        return c;
      }
      return -1;
    }
    
    public a a(int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean)
    {
      Object localObject = b;
      if (localObject == null) {
        return null;
      }
      int j = ((List)localObject).size();
      int i = 0;
      while (i < j)
      {
        localObject = (a)b.get(i);
        int k = c;
        if (k >= paramInt2) {
          return null;
        }
        if ((k >= paramInt1) && ((paramInt3 == 0) || (d == paramInt3) || ((paramBoolean) && (f)))) {
          return localObject;
        }
        i += 1;
      }
      return null;
    }
    
    void a()
    {
      int[] arrayOfInt = a;
      if (arrayOfInt != null) {
        Arrays.fill(arrayOfInt, -1);
      }
      b = null;
    }
    
    void a(int paramInt)
    {
      int[] arrayOfInt1 = a;
      if (arrayOfInt1 == null)
      {
        a = new int[Math.max(paramInt, 10) + 1];
        Arrays.fill(a, -1);
        return;
      }
      if (paramInt >= arrayOfInt1.length)
      {
        arrayOfInt1 = a;
        a = new int[f(paramInt)];
        System.arraycopy(arrayOfInt1, 0, a, 0, arrayOfInt1.length);
        int[] arrayOfInt2 = a;
        Arrays.fill(arrayOfInt2, arrayOfInt1.length, arrayOfInt2.length, -1);
      }
    }
    
    void a(int paramInt1, int paramInt2)
    {
      int[] arrayOfInt = a;
      if (arrayOfInt != null)
      {
        if (paramInt1 >= arrayOfInt.length) {
          return;
        }
        a(paramInt1 + paramInt2);
        arrayOfInt = a;
        System.arraycopy(arrayOfInt, paramInt1, arrayOfInt, paramInt1 + paramInt2, arrayOfInt.length - paramInt1 - paramInt2);
        Arrays.fill(a, paramInt1, paramInt1 + paramInt2, -1);
        c(paramInt1, paramInt2);
        return;
      }
    }
    
    void a(int paramInt, StaggeredGridLayoutManager.f paramF)
    {
      a(paramInt);
      a[paramInt] = e;
    }
    
    public void a(a paramA)
    {
      if (b == null) {
        b = new ArrayList();
      }
      int j = b.size();
      int i = 0;
      while (i < j)
      {
        a localA = (a)b.get(i);
        if (c == c) {
          b.remove(i);
        }
        if (c >= c)
        {
          b.add(i, paramA);
          return;
        }
        i += 1;
      }
      b.add(paramA);
    }
    
    int b(int paramInt)
    {
      List localList = b;
      if (localList != null)
      {
        int i = localList.size() - 1;
        while (i >= 0)
        {
          if (b.get(i)).c >= paramInt) {
            b.remove(i);
          }
          i -= 1;
        }
      }
      return e(paramInt);
    }
    
    void b(int paramInt1, int paramInt2)
    {
      int[] arrayOfInt = a;
      if (arrayOfInt != null)
      {
        if (paramInt1 >= arrayOfInt.length) {
          return;
        }
        a(paramInt1 + paramInt2);
        arrayOfInt = a;
        System.arraycopy(arrayOfInt, paramInt1 + paramInt2, arrayOfInt, paramInt1, arrayOfInt.length - paramInt1 - paramInt2);
        arrayOfInt = a;
        Arrays.fill(arrayOfInt, arrayOfInt.length - paramInt2, arrayOfInt.length, -1);
        d(paramInt1, paramInt2);
        return;
      }
    }
    
    public a c(int paramInt)
    {
      Object localObject = b;
      if (localObject == null) {
        return null;
      }
      int i = ((List)localObject).size() - 1;
      while (i >= 0)
      {
        localObject = (a)b.get(i);
        if (c == paramInt) {
          return localObject;
        }
        i -= 1;
      }
      return null;
    }
    
    int d(int paramInt)
    {
      int[] arrayOfInt = a;
      if ((arrayOfInt != null) && (paramInt < arrayOfInt.length)) {
        return arrayOfInt[paramInt];
      }
      return -1;
    }
    
    int e(int paramInt)
    {
      int[] arrayOfInt = a;
      if (arrayOfInt == null) {
        return -1;
      }
      if (paramInt >= arrayOfInt.length) {
        return -1;
      }
      int i = g(paramInt);
      if (i == -1)
      {
        arrayOfInt = a;
        Arrays.fill(arrayOfInt, paramInt, arrayOfInt.length, -1);
        return a.length;
      }
      Arrays.fill(a, paramInt, i + 1, -1);
      return i + 1;
    }
    
    int f(int paramInt)
    {
      int i = a.length;
      while (i <= paramInt) {
        i *= 2;
      }
      return i;
    }
    
    static class a
      implements Parcelable
    {
      public static final Parcelable.Creator<a> CREATOR = new a();
      int c;
      int d;
      int[] e;
      boolean f;
      
      a() {}
      
      a(Parcel paramParcel)
      {
        c = paramParcel.readInt();
        d = paramParcel.readInt();
        int i = paramParcel.readInt();
        boolean bool = true;
        if (i != 1) {
          bool = false;
        }
        f = bool;
        i = paramParcel.readInt();
        if (i > 0)
        {
          e = new int[i];
          paramParcel.readIntArray(e);
        }
      }
      
      int a(int paramInt)
      {
        int[] arrayOfInt = e;
        if (arrayOfInt == null) {
          return 0;
        }
        return arrayOfInt[paramInt];
      }
      
      public int describeContents()
      {
        return 0;
      }
      
      public String toString()
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("FullSpanItem{mPosition=");
        localStringBuilder.append(c);
        localStringBuilder.append(", mGapDir=");
        localStringBuilder.append(d);
        localStringBuilder.append(", mHasUnwantedGapAfter=");
        localStringBuilder.append(f);
        localStringBuilder.append(", mGapPerSpan=");
        localStringBuilder.append(Arrays.toString(e));
        localStringBuilder.append('}');
        return localStringBuilder.toString();
      }
      
      public void writeToParcel(Parcel paramParcel, int paramInt)
      {
        throw new Runtime("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.provideAs(TypeTransformer.java:780)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.e1expr(TypeTransformer.java:496)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:713)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.enexpr(TypeTransformer.java:698)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:719)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.s1stmt(TypeTransformer.java:810)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.sxStmt(TypeTransformer.java:840)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:206)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
      }
      
      static final class a
        implements Parcelable.Creator<StaggeredGridLayoutManager.d.a>
      {
        a() {}
        
        public StaggeredGridLayoutManager.d.a createFromParcel(Parcel paramParcel)
        {
          return new StaggeredGridLayoutManager.d.a(paramParcel);
        }
        
        public StaggeredGridLayoutManager.d.a[] newArray(int paramInt)
        {
          return new StaggeredGridLayoutManager.d.a[paramInt];
        }
      }
    }
  }
  
  public static class e
    implements Parcelable
  {
    public static final Parcelable.Creator<e> CREATOR = new a();
    int c;
    int d;
    int e;
    int[] f;
    int g;
    int[] h;
    List<StaggeredGridLayoutManager.d.a> i;
    boolean j;
    boolean k;
    boolean l;
    
    public e() {}
    
    e(Parcel paramParcel)
    {
      c = paramParcel.readInt();
      d = paramParcel.readInt();
      e = paramParcel.readInt();
      int m = e;
      if (m > 0)
      {
        f = new int[m];
        paramParcel.readIntArray(f);
      }
      g = paramParcel.readInt();
      m = g;
      if (m > 0)
      {
        h = new int[m];
        paramParcel.readIntArray(h);
      }
      m = paramParcel.readInt();
      boolean bool2 = false;
      if (m == 1) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      j = bool1;
      if (paramParcel.readInt() == 1) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      k = bool1;
      boolean bool1 = bool2;
      if (paramParcel.readInt() == 1) {
        bool1 = true;
      }
      l = bool1;
      i = paramParcel.readArrayList(StaggeredGridLayoutManager.d.a.class.getClassLoader());
    }
    
    public e(e paramE)
    {
      e = e;
      c = c;
      d = d;
      f = f;
      g = g;
      h = h;
      j = j;
      k = k;
      l = l;
      i = i;
    }
    
    void a()
    {
      f = null;
      e = 0;
      c = -1;
      d = -1;
    }
    
    void b()
    {
      f = null;
      e = 0;
      g = 0;
      h = null;
      i = null;
    }
    
    public int describeContents()
    {
      return 0;
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      throw new Runtime("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.provideAs(TypeTransformer.java:780)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.e1expr(TypeTransformer.java:496)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:713)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.enexpr(TypeTransformer.java:698)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:719)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.s1stmt(TypeTransformer.java:810)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.sxStmt(TypeTransformer.java:840)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:206)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
    }
    
    static final class a
      implements Parcelable.Creator<StaggeredGridLayoutManager.e>
    {
      a() {}
      
      public StaggeredGridLayoutManager.e createFromParcel(Parcel paramParcel)
      {
        return new StaggeredGridLayoutManager.e(paramParcel);
      }
      
      public StaggeredGridLayoutManager.e[] newArray(int paramInt)
      {
        return new StaggeredGridLayoutManager.e[paramInt];
      }
    }
  }
  
  class f
  {
    ArrayList<View> a = new ArrayList();
    int b = Integer.MIN_VALUE;
    int c = Integer.MIN_VALUE;
    int d = 0;
    final int e;
    
    f(int paramInt)
    {
      e = paramInt;
    }
    
    int a(int paramInt)
    {
      int i = c;
      if (i != Integer.MIN_VALUE) {
        return i;
      }
      if (a.size() == 0) {
        return paramInt;
      }
      a();
      return c;
    }
    
    int a(int paramInt1, int paramInt2, boolean paramBoolean)
    {
      return a(paramInt1, paramInt2, false, false, paramBoolean);
    }
    
    int a(int paramInt1, int paramInt2, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
    {
      int m = u.f();
      int n = u.b();
      int i;
      if (paramInt2 > paramInt1) {
        i = 1;
      } else {
        i = -1;
      }
      while (paramInt1 != paramInt2)
      {
        View localView = (View)a.get(paramInt1);
        int i1 = u.d(localView);
        int i2 = u.a(localView);
        int k = 0;
        int j;
        if (paramBoolean3 ? i1 <= n : i1 < n) {
          j = 1;
        } else {
          j = 0;
        }
        if (paramBoolean3 ? i2 >= m : i2 > m) {
          k = 1;
        }
        if ((j != 0) && (k != 0)) {
          if ((paramBoolean1) && (paramBoolean2))
          {
            if ((i1 >= m) && (i2 <= n)) {
              return l(localView);
            }
          }
          else
          {
            if (paramBoolean2) {
              return l(localView);
            }
            if ((i1 < m) || (i2 > n)) {
              return l(localView);
            }
          }
        }
        paramInt1 += i;
      }
      return -1;
    }
    
    public View a(int paramInt1, int paramInt2)
    {
      View localView2 = null;
      View localView1 = null;
      StaggeredGridLayoutManager localStaggeredGridLayoutManager;
      if (paramInt2 == -1)
      {
        int i = a.size();
        paramInt2 = 0;
        while (paramInt2 < i)
        {
          localView2 = (View)a.get(paramInt2);
          localStaggeredGridLayoutManager = StaggeredGridLayoutManager.this;
          if ((z) && (localStaggeredGridLayoutManager.l(localView2) <= paramInt1)) {
            break;
          }
          localStaggeredGridLayoutManager = StaggeredGridLayoutManager.this;
          if (((!z) && (localStaggeredGridLayoutManager.l(localView2) >= paramInt1)) || (!localView2.hasFocusable())) {
            break;
          }
          localView1 = localView2;
          paramInt2 += 1;
        }
        return localView1;
      }
      paramInt2 = a.size() - 1;
      localView1 = localView2;
      while (paramInt2 >= 0)
      {
        localView2 = (View)a.get(paramInt2);
        localStaggeredGridLayoutManager = StaggeredGridLayoutManager.this;
        if ((z) && (localStaggeredGridLayoutManager.l(localView2) >= paramInt1)) {
          break;
        }
        localStaggeredGridLayoutManager = StaggeredGridLayoutManager.this;
        if ((!z) && (localStaggeredGridLayoutManager.l(localView2) <= paramInt1)) {
          return localView1;
        }
        if (!localView2.hasFocusable()) {
          break;
        }
        localView1 = localView2;
        paramInt2 -= 1;
      }
      return localView1;
    }
    
    void a()
    {
      Object localObject = a;
      localObject = (View)((ArrayList)localObject).get(((ArrayList)localObject).size() - 1);
      StaggeredGridLayoutManager.c localC = b((View)localObject);
      c = u.a((View)localObject);
      if (f)
      {
        localObject = E.c(localC.a());
        if ((localObject != null) && (d == 1)) {
          c += ((StaggeredGridLayoutManager.d.a)localObject).a(e);
        }
      }
    }
    
    void a(View paramView)
    {
      StaggeredGridLayoutManager.c localC = b(paramView);
      e = this;
      a.add(paramView);
      c = Integer.MIN_VALUE;
      if (a.size() == 1) {
        b = Integer.MIN_VALUE;
      }
      if ((localC.c()) || (localC.b())) {
        d += u.b(paramView);
      }
    }
    
    void a(boolean paramBoolean, int paramInt)
    {
      int i;
      if (paramBoolean) {
        i = a(Integer.MIN_VALUE);
      } else {
        i = b(Integer.MIN_VALUE);
      }
      c();
      if (i == Integer.MIN_VALUE) {
        return;
      }
      if (((paramBoolean) && (i < u.b())) || ((!paramBoolean) && (i > u.f()))) {
        return;
      }
      int j = i;
      if (paramInt != Integer.MIN_VALUE) {
        j = i + paramInt;
      }
      c = j;
      b = j;
    }
    
    int b(int paramInt)
    {
      int i = b;
      if (i != Integer.MIN_VALUE) {
        return i;
      }
      if (a.size() == 0) {
        return paramInt;
      }
      b();
      return b;
    }
    
    StaggeredGridLayoutManager.c b(View paramView)
    {
      return (StaggeredGridLayoutManager.c)paramView.getLayoutParams();
    }
    
    void b()
    {
      Object localObject = (View)a.get(0);
      StaggeredGridLayoutManager.c localC = b((View)localObject);
      b = u.d((View)localObject);
      if (f)
      {
        localObject = E.c(localC.a());
        if ((localObject != null) && (d == -1)) {
          b -= ((StaggeredGridLayoutManager.d.a)localObject).a(e);
        }
      }
    }
    
    void c()
    {
      a.clear();
      i();
      d = 0;
    }
    
    void c(int paramInt)
    {
      int i = b;
      if (i != Integer.MIN_VALUE) {
        b = (i + paramInt);
      }
      i = c;
      if (i != Integer.MIN_VALUE) {
        c = (i + paramInt);
      }
    }
    
    void c(View paramView)
    {
      StaggeredGridLayoutManager.c localC = b(paramView);
      e = this;
      a.add(0, paramView);
      b = Integer.MIN_VALUE;
      if (a.size() == 1) {
        c = Integer.MIN_VALUE;
      }
      if ((localC.c()) || (localC.b())) {
        d += u.b(paramView);
      }
    }
    
    public int d()
    {
      if (z) {
        return a(a.size() - 1, -1, true);
      }
      return a(0, a.size(), true);
    }
    
    void d(int paramInt)
    {
      b = paramInt;
      c = paramInt;
    }
    
    public int e()
    {
      if (z) {
        return a(0, a.size(), true);
      }
      return a(a.size() - 1, -1, true);
    }
    
    public int f()
    {
      return d;
    }
    
    int g()
    {
      int i = c;
      if (i != Integer.MIN_VALUE) {
        return i;
      }
      a();
      return c;
    }
    
    int h()
    {
      int i = b;
      if (i != Integer.MIN_VALUE) {
        return i;
      }
      b();
      return b;
    }
    
    void i()
    {
      b = Integer.MIN_VALUE;
      c = Integer.MIN_VALUE;
    }
    
    void j()
    {
      int i = a.size();
      View localView = (View)a.remove(i - 1);
      StaggeredGridLayoutManager.c localC = b(localView);
      e = null;
      if ((localC.c()) || (localC.b())) {
        d -= u.b(localView);
      }
      if (i == 1) {
        b = Integer.MIN_VALUE;
      }
      c = Integer.MIN_VALUE;
    }
    
    void k()
    {
      View localView = (View)a.remove(0);
      StaggeredGridLayoutManager.c localC = b(localView);
      e = null;
      if (a.size() == 0) {
        c = Integer.MIN_VALUE;
      }
      if ((localC.c()) || (localC.b())) {
        d -= u.b(localView);
      }
      b = Integer.MIN_VALUE;
    }
  }
}
