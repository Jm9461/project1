package android.support.v7.widget;

import a.b.h.a.f;
import a.b.h.a.g;
import a.b.h.a.j;
import a.b.h.f.b;
import android.content.Context;
import android.support.v4.view.u;
import android.support.v7.view.menu.h;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.accessibility.AccessibilityEvent;
import android.widget.LinearLayout;
import android.widget.TextView;

public class ActionBarContextView
  extends a
{
  private CharSequence k;
  private CharSequence l;
  private View m;
  private View n;
  private LinearLayout o;
  private TextView p;
  private TextView q;
  private int r;
  private int s;
  private boolean t;
  private int u;
  
  public ActionBarContextView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public ActionBarContextView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, a.b.h.a.a.actionModeStyle);
  }
  
  public ActionBarContextView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    paramContext = j1.a(paramContext, paramAttributeSet, j.ActionMode, paramInt, 0);
    u.a(this, paramContext.b(j.ActionMode_background));
    r = paramContext.g(j.ActionMode_titleTextStyle, 0);
    s = paramContext.g(j.ActionMode_subtitleTextStyle, 0);
    g = paramContext.f(j.ActionMode_height, 0);
    u = paramContext.g(j.ActionMode_closeItemLayout, g.abc_action_mode_close_item_material);
    paramContext.a();
  }
  
  private void e()
  {
    if (o == null)
    {
      LayoutInflater.from(getContext()).inflate(g.abc_action_bar_title_item, this);
      o = ((LinearLayout)getChildAt(getChildCount() - 1));
      p = ((TextView)o.findViewById(f.action_bar_title));
      q = ((TextView)o.findViewById(f.action_bar_subtitle));
      if (r != 0) {
        p.setTextAppearance(getContext(), r);
      }
      if (s != 0) {
        q.setTextAppearance(getContext(), s);
      }
    }
    p.setText(k);
    q.setText(l);
    boolean bool2 = TextUtils.isEmpty(k);
    boolean bool1 = TextUtils.isEmpty(l) ^ true;
    Object localObject = q;
    int j = 0;
    if (bool1) {
      i = 0;
    } else {
      i = 8;
    }
    ((TextView)localObject).setVisibility(i);
    localObject = o;
    int i = j;
    if (!(bool2 ^ true)) {
      if (bool1) {
        i = j;
      } else {
        i = 8;
      }
    }
    ((LinearLayout)localObject).setVisibility(i);
    if (o.getParent() == null) {
      addView(o);
    }
  }
  
  public void a()
  {
    if (m == null)
    {
      c();
      return;
    }
  }
  
  public void a(final b paramB)
  {
    Object localObject = m;
    if (localObject == null)
    {
      m = LayoutInflater.from(getContext()).inflate(u, this, false);
      addView(m);
    }
    else if (((View)localObject).getParent() == null)
    {
      addView(m);
    }
    m.findViewById(f.action_mode_close_button).setOnClickListener(new a(paramB));
    paramB = (h)paramB.c();
    localObject = f;
    if (localObject != null) {
      ((c)localObject).e();
    }
    f = new c(getContext());
    f.c(true);
    localObject = new ViewGroup.LayoutParams(-2, -1);
    paramB.a(f, d);
    e = ((ActionMenuView)f.b(this));
    u.a(e, null);
    addView(e, (ViewGroup.LayoutParams)localObject);
  }
  
  public boolean b()
  {
    return t;
  }
  
  public void c()
  {
    removeAllViews();
    n = null;
    e = null;
  }
  
  public boolean d()
  {
    c localC = f;
    if (localC != null) {
      return localC.k();
    }
    return false;
  }
  
  protected ViewGroup.LayoutParams generateDefaultLayoutParams()
  {
    return new ViewGroup.MarginLayoutParams(-1, -2);
  }
  
  public ViewGroup.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new ViewGroup.MarginLayoutParams(getContext(), paramAttributeSet);
  }
  
  public CharSequence getSubtitle()
  {
    return l;
  }
  
  public CharSequence getTitle()
  {
    return k;
  }
  
  public void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    c localC = f;
    if (localC != null)
    {
      localC.g();
      f.h();
    }
  }
  
  public void onInitializeAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent)
  {
    if (paramAccessibilityEvent.getEventType() == 32)
    {
      paramAccessibilityEvent.setSource(this);
      paramAccessibilityEvent.setClassName(getClass().getName());
      paramAccessibilityEvent.setPackageName(getContext().getPackageName());
      paramAccessibilityEvent.setContentDescription(k);
      return;
    }
    super.onInitializeAccessibilityEvent(paramAccessibilityEvent);
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramBoolean = r1.a(this);
    int i;
    if (paramBoolean) {
      i = paramInt3 - paramInt1 - getPaddingRight();
    } else {
      i = getPaddingLeft();
    }
    int j = getPaddingTop();
    int i1 = paramInt4 - paramInt2 - getPaddingTop() - getPaddingBottom();
    Object localObject = m;
    if ((localObject != null) && (((View)localObject).getVisibility() != 8))
    {
      localObject = (ViewGroup.MarginLayoutParams)m.getLayoutParams();
      if (paramBoolean) {
        paramInt2 = rightMargin;
      } else {
        paramInt2 = leftMargin;
      }
      if (paramBoolean) {
        paramInt4 = leftMargin;
      } else {
        paramInt4 = rightMargin;
      }
      paramInt2 = a.a(i, paramInt2, paramBoolean);
      paramInt2 = a.a(paramInt2 + a(m, paramInt2, j, i1, paramBoolean), paramInt4, paramBoolean);
    }
    else
    {
      paramInt2 = i;
    }
    localObject = o;
    paramInt4 = paramInt2;
    if (localObject != null)
    {
      paramInt4 = paramInt2;
      if (n == null)
      {
        paramInt4 = paramInt2;
        if (((LinearLayout)localObject).getVisibility() != 8) {
          paramInt4 = paramInt2 + a(o, paramInt2, j, i1, paramBoolean);
        }
      }
    }
    localObject = n;
    if (localObject != null) {
      a((View)localObject, paramInt4, j, i1, paramBoolean);
    }
    if (paramBoolean) {
      paramInt1 = getPaddingLeft();
    } else {
      paramInt1 = paramInt3 - paramInt1 - getPaddingRight();
    }
    localObject = e;
    if (localObject != null) {
      a((View)localObject, paramInt1, j, i1, paramBoolean ^ true);
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i = View.MeasureSpec.getMode(paramInt1);
    int i1 = 1073741824;
    if (i == 1073741824)
    {
      if (View.MeasureSpec.getMode(paramInt2) != 0)
      {
        int i4 = View.MeasureSpec.getSize(paramInt1);
        i = g;
        if (i <= 0) {
          i = View.MeasureSpec.getSize(paramInt2);
        }
        int i5 = getPaddingTop() + getPaddingBottom();
        paramInt1 = i4 - getPaddingLeft() - getPaddingRight();
        int i2 = i - i5;
        int j = View.MeasureSpec.makeMeasureSpec(i2, Integer.MIN_VALUE);
        localObject = m;
        int i3 = 0;
        paramInt2 = paramInt1;
        if (localObject != null)
        {
          paramInt1 = a((View)localObject, paramInt1, j, 0);
          localObject = (ViewGroup.MarginLayoutParams)m.getLayoutParams();
          paramInt2 = paramInt1 - (leftMargin + rightMargin);
        }
        localObject = e;
        paramInt1 = paramInt2;
        if (localObject != null)
        {
          paramInt1 = paramInt2;
          if (((ViewGroup)localObject).getParent() == this) {
            paramInt1 = a(e, paramInt2, j, 0);
          }
        }
        localObject = o;
        paramInt2 = paramInt1;
        if (localObject != null)
        {
          paramInt2 = paramInt1;
          if (n == null) {
            if (t)
            {
              paramInt2 = View.MeasureSpec.makeMeasureSpec(0, 0);
              o.measure(paramInt2, j);
              int i6 = o.getMeasuredWidth();
              if (i6 <= paramInt1) {
                j = 1;
              } else {
                j = 0;
              }
              paramInt2 = paramInt1;
              if (j != 0) {
                paramInt2 = paramInt1 - i6;
              }
              localObject = o;
              if (j != 0) {
                paramInt1 = i3;
              } else {
                paramInt1 = 8;
              }
              ((LinearLayout)localObject).setVisibility(paramInt1);
            }
            else
            {
              paramInt2 = a((View)localObject, paramInt1, j, 0);
            }
          }
        }
        localObject = n;
        if (localObject != null)
        {
          localObject = ((View)localObject).getLayoutParams();
          if (width != -2) {
            paramInt1 = 1073741824;
          } else {
            paramInt1 = Integer.MIN_VALUE;
          }
          j = width;
          if (j >= 0) {
            paramInt2 = Math.min(j, paramInt2);
          }
          if (height != -2) {
            j = i1;
          } else {
            j = Integer.MIN_VALUE;
          }
          i1 = height;
          if (i1 >= 0) {
            i1 = Math.min(i1, i2);
          } else {
            i1 = i2;
          }
          n.measure(View.MeasureSpec.makeMeasureSpec(paramInt2, paramInt1), View.MeasureSpec.makeMeasureSpec(i1, j));
        }
        if (g <= 0)
        {
          paramInt2 = 0;
          i1 = getChildCount();
          paramInt1 = 0;
          while (paramInt1 < i1)
          {
            j = getChildAt(paramInt1).getMeasuredHeight() + i5;
            i = paramInt2;
            if (j > paramInt2) {
              i = j;
            }
            paramInt1 += 1;
            paramInt2 = i;
          }
          setMeasuredDimension(i4, paramInt2);
          return;
        }
        setMeasuredDimension(i4, i);
        return;
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(getClass().getSimpleName());
      ((StringBuilder)localObject).append(" can only be used ");
      ((StringBuilder)localObject).append("with android:layout_height=\"wrap_content\"");
      throw new IllegalStateException(((StringBuilder)localObject).toString());
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append(getClass().getSimpleName());
    ((StringBuilder)localObject).append(" can only be used ");
    ((StringBuilder)localObject).append("with android:layout_width=\"match_parent\" (or fill_parent)");
    localObject = new IllegalStateException(((StringBuilder)localObject).toString());
    for (;;)
    {
      throw ((Throwable)localObject);
    }
  }
  
  public void setContentHeight(int paramInt)
  {
    g = paramInt;
  }
  
  public void setCustomView(View paramView)
  {
    Object localObject = n;
    if (localObject != null) {
      removeView((View)localObject);
    }
    n = paramView;
    if (paramView != null)
    {
      localObject = o;
      if (localObject != null)
      {
        removeView((View)localObject);
        o = null;
      }
    }
    if (paramView != null) {
      addView(paramView);
    }
    requestLayout();
  }
  
  public void setSubtitle(CharSequence paramCharSequence)
  {
    l = paramCharSequence;
    e();
  }
  
  public void setTitle(CharSequence paramCharSequence)
  {
    k = paramCharSequence;
    e();
  }
  
  public void setTitleOptional(boolean paramBoolean)
  {
    if (paramBoolean != t) {
      requestLayout();
    }
    t = paramBoolean;
  }
  
  public boolean shouldDelayChildPressedState()
  {
    return false;
  }
  
  class a
    implements View.OnClickListener
  {
    a(b paramB) {}
    
    public void onClick(View paramView)
    {
      paramB.a();
    }
  }
}
