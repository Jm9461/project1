package android.support.v7.widget;

import a.b.h.a.a;
import a.b.h.a.f;
import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.res.Configuration;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.support.v4.view.n;
import android.support.v4.view.o;
import android.support.v4.view.u;
import android.support.v7.view.menu.p.a;
import android.util.AttributeSet;
import android.view.Menu;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.ViewPropertyAnimator;
import android.view.Window.Callback;
import android.widget.FrameLayout;
import android.widget.OverScroller;

public class ActionBarOverlayLayout
  extends ViewGroup
  implements e0, n
{
  static final int[] D = { a.actionBarSize, 16842841 };
  private final Runnable A = new b();
  private final Runnable B = new c();
  private final o C;
  private int c;
  private int d = 0;
  private ContentFrameLayout e;
  ActionBarContainer f;
  private f0 g;
  private Drawable h;
  private boolean i;
  private boolean j;
  private boolean k;
  private boolean l;
  boolean m;
  private int n;
  private int o;
  private final Rect p = new Rect();
  private final Rect q = new Rect();
  private final Rect r = new Rect();
  private final Rect s = new Rect();
  private final Rect t = new Rect();
  private final Rect u = new Rect();
  private final Rect v = new Rect();
  private d w;
  private OverScroller x;
  ViewPropertyAnimator y;
  final AnimatorListenerAdapter z = new a();
  
  public ActionBarOverlayLayout(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public ActionBarOverlayLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    a(paramContext);
    C = new o(this);
  }
  
  private f0 a(View paramView)
  {
    if ((paramView instanceof f0)) {
      return (f0)paramView;
    }
    if ((paramView instanceof Toolbar)) {
      return ((Toolbar)paramView).getWrapper();
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Can't make a decor toolbar out of ");
    localStringBuilder.append(paramView.getClass().getSimpleName());
    throw new IllegalStateException(localStringBuilder.toString());
  }
  
  private void a(Context paramContext)
  {
    TypedArray localTypedArray = getContext().getTheme().obtainStyledAttributes(D);
    boolean bool2 = false;
    c = localTypedArray.getDimensionPixelSize(0, 0);
    h = localTypedArray.getDrawable(1);
    if (h == null) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    setWillNotDraw(bool1);
    localTypedArray.recycle();
    boolean bool1 = bool2;
    if (getApplicationInfotargetSdkVersion < 19) {
      bool1 = true;
    }
    i = bool1;
    x = new OverScroller(paramContext);
  }
  
  private boolean a(float paramFloat1, float paramFloat2)
  {
    x.fling(0, 0, 0, (int)paramFloat2, 0, 0, Integer.MIN_VALUE, Integer.MAX_VALUE);
    return x.getFinalY() > f.getHeight();
  }
  
  private boolean a(View paramView, Rect paramRect, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4)
  {
    boolean bool2 = false;
    paramView = (e)paramView.getLayoutParams();
    boolean bool1 = bool2;
    int i1;
    int i2;
    if (paramBoolean1)
    {
      i1 = leftMargin;
      i2 = left;
      bool1 = bool2;
      if (i1 != i2)
      {
        bool1 = true;
        leftMargin = i2;
      }
    }
    paramBoolean1 = bool1;
    if (paramBoolean2)
    {
      i1 = topMargin;
      i2 = top;
      paramBoolean1 = bool1;
      if (i1 != i2)
      {
        paramBoolean1 = true;
        topMargin = i2;
      }
    }
    paramBoolean2 = paramBoolean1;
    if (paramBoolean4)
    {
      i1 = rightMargin;
      i2 = right;
      paramBoolean2 = paramBoolean1;
      if (i1 != i2)
      {
        paramBoolean2 = true;
        rightMargin = i2;
      }
    }
    paramBoolean1 = paramBoolean2;
    if (paramBoolean3)
    {
      i1 = bottomMargin;
      i2 = bottom;
      paramBoolean1 = paramBoolean2;
      if (i1 != i2)
      {
        paramBoolean1 = true;
        bottomMargin = i2;
      }
    }
    return paramBoolean1;
  }
  
  private void k()
  {
    h();
    B.run();
  }
  
  private void l()
  {
    h();
    postDelayed(B, 600L);
  }
  
  private void m()
  {
    h();
    postDelayed(A, 600L);
  }
  
  private void n()
  {
    h();
    A.run();
  }
  
  public void a(int paramInt)
  {
    j();
    if (paramInt != 2)
    {
      if (paramInt != 5)
      {
        if (paramInt != 109) {
          return;
        }
        setOverlayMode(true);
        return;
      }
      g.o();
      return;
    }
    g.m();
  }
  
  public void a(Menu paramMenu, p.a paramA)
  {
    j();
    g.a(paramMenu, paramA);
  }
  
  public boolean a()
  {
    j();
    return g.a();
  }
  
  public boolean b()
  {
    j();
    return g.b();
  }
  
  public boolean c()
  {
    j();
    return g.c();
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return paramLayoutParams instanceof e;
  }
  
  public boolean d()
  {
    j();
    return g.d();
  }
  
  public void draw(Canvas paramCanvas)
  {
    super.draw(paramCanvas);
    if ((h != null) && (!i))
    {
      int i1;
      if (f.getVisibility() == 0) {
        i1 = (int)(f.getBottom() + f.getTranslationY() + 0.5F);
      } else {
        i1 = 0;
      }
      h.setBounds(0, i1, getWidth(), h.getIntrinsicHeight() + i1);
      h.draw(paramCanvas);
    }
  }
  
  public void e()
  {
    j();
    g.e();
  }
  
  public boolean f()
  {
    j();
    return g.f();
  }
  
  protected boolean fitSystemWindows(Rect paramRect)
  {
    j();
    if ((u.r(this) & 0x100) == 0) {}
    boolean bool = a(f, paramRect, true, true, false, true);
    s.set(paramRect);
    r1.a(this, s, p);
    if (!t.equals(s))
    {
      bool = true;
      t.set(s);
    }
    if (!q.equals(p))
    {
      bool = true;
      q.set(p);
    }
    if (bool) {
      requestLayout();
    }
    return true;
  }
  
  public void g()
  {
    j();
    g.g();
  }
  
  protected e generateDefaultLayoutParams()
  {
    return new e(-1, -1);
  }
  
  public e generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new e(getContext(), paramAttributeSet);
  }
  
  protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return new e(paramLayoutParams);
  }
  
  public int getActionBarHideOffset()
  {
    ActionBarContainer localActionBarContainer = f;
    if (localActionBarContainer != null) {
      return -(int)localActionBarContainer.getTranslationY();
    }
    return 0;
  }
  
  public int getNestedScrollAxes()
  {
    return C.a();
  }
  
  public CharSequence getTitle()
  {
    j();
    return g.getTitle();
  }
  
  void h()
  {
    removeCallbacks(A);
    removeCallbacks(B);
    ViewPropertyAnimator localViewPropertyAnimator = y;
    if (localViewPropertyAnimator != null) {
      localViewPropertyAnimator.cancel();
    }
  }
  
  public boolean i()
  {
    return j;
  }
  
  void j()
  {
    if (e == null)
    {
      e = ((ContentFrameLayout)findViewById(f.action_bar_activity_content));
      f = ((ActionBarContainer)findViewById(f.action_bar_container));
      g = a(findViewById(f.action_bar));
    }
  }
  
  protected void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    a(getContext());
    u.C(this);
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    h();
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramInt2 = getChildCount();
    paramInt3 = getPaddingLeft();
    getPaddingRight();
    paramInt4 = getPaddingTop();
    getPaddingBottom();
    paramInt1 = 0;
    while (paramInt1 < paramInt2)
    {
      View localView = getChildAt(paramInt1);
      if (localView.getVisibility() != 8)
      {
        e localE = (e)localView.getLayoutParams();
        int i1 = localView.getMeasuredWidth();
        int i2 = localView.getMeasuredHeight();
        int i3 = leftMargin + paramInt3;
        int i4 = topMargin + paramInt4;
        localView.layout(i3, i4, i3 + i1, i4 + i2);
      }
      paramInt1 += 1;
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    j();
    int i1 = 0;
    measureChildWithMargins(f, paramInt1, 0, paramInt2, 0);
    Object localObject = (e)f.getLayoutParams();
    int i6 = Math.max(0, f.getMeasuredWidth() + leftMargin + rightMargin);
    int i5 = Math.max(0, f.getMeasuredHeight() + topMargin + bottomMargin);
    int i4 = View.combineMeasuredStates(0, f.getMeasuredState());
    if ((u.r(this) & 0x100) != 0) {
      i2 = 1;
    } else {
      i2 = 0;
    }
    if (i2 != 0)
    {
      i3 = c;
      i1 = i3;
      if (k)
      {
        i1 = i3;
        if (f.getTabContainer() != null) {
          i1 = i3 + c;
        }
      }
    }
    else if (f.getVisibility() != 8)
    {
      i1 = f.getMeasuredHeight();
    }
    r.set(p);
    u.set(s);
    if ((!j) && (i2 == 0))
    {
      localObject = r;
      top += i1;
      bottom += 0;
    }
    else
    {
      localObject = u;
      top += i1;
      bottom += 0;
    }
    a(e, r, true, true, true, true);
    if (!v.equals(u))
    {
      v.set(u);
      e.a(u);
    }
    measureChildWithMargins(e, paramInt1, 0, paramInt2, 0);
    localObject = (e)e.getLayoutParams();
    i1 = Math.max(i6, e.getMeasuredWidth() + leftMargin + rightMargin);
    int i2 = Math.max(i5, e.getMeasuredHeight() + topMargin + bottomMargin);
    int i3 = View.combineMeasuredStates(i4, e.getMeasuredState());
    i4 = getPaddingLeft();
    i5 = getPaddingRight();
    i2 = Math.max(i2 + (getPaddingTop() + getPaddingBottom()), getSuggestedMinimumHeight());
    setMeasuredDimension(View.resolveSizeAndState(Math.max(i1 + (i4 + i5), getSuggestedMinimumWidth()), paramInt1, i3), View.resolveSizeAndState(i2, paramInt2, i3 << 16));
  }
  
  public boolean onNestedFling(View paramView, float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    if ((l) && (paramBoolean))
    {
      if (a(paramFloat1, paramFloat2)) {
        k();
      } else {
        n();
      }
      m = true;
      return true;
    }
    return false;
  }
  
  public boolean onNestedPreFling(View paramView, float paramFloat1, float paramFloat2)
  {
    return false;
  }
  
  public void onNestedPreScroll(View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt) {}
  
  public void onNestedScroll(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    n += paramInt2;
    setActionBarHideOffset(n);
  }
  
  public void onNestedScrollAccepted(View paramView1, View paramView2, int paramInt)
  {
    C.a(paramView1, paramView2, paramInt);
    n = getActionBarHideOffset();
    h();
    paramView1 = w;
    if (paramView1 != null) {
      paramView1.b();
    }
  }
  
  public boolean onStartNestedScroll(View paramView1, View paramView2, int paramInt)
  {
    if (((paramInt & 0x2) != 0) && (f.getVisibility() == 0)) {
      return l;
    }
    return false;
  }
  
  public void onStopNestedScroll(View paramView)
  {
    if ((l) && (!m)) {
      if (n <= f.getHeight()) {
        m();
      } else {
        l();
      }
    }
    paramView = w;
    if (paramView != null) {
      paramView.d();
    }
  }
  
  public void onWindowSystemUiVisibilityChanged(int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      super.onWindowSystemUiVisibilityChanged(paramInt);
    }
    j();
    int i3 = o;
    o = paramInt;
    boolean bool = true;
    int i1;
    if ((paramInt & 0x4) == 0) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    int i2;
    if ((paramInt & 0x100) != 0) {
      i2 = 1;
    } else {
      i2 = 0;
    }
    d localD = w;
    if (localD != null)
    {
      if (i2 != 0) {
        bool = false;
      }
      localD.a(bool);
      if ((i1 == 0) && (i2 != 0)) {
        w.c();
      } else {
        w.a();
      }
    }
    if ((((i3 ^ paramInt) & 0x100) != 0) && (w != null)) {
      u.C(this);
    }
  }
  
  protected void onWindowVisibilityChanged(int paramInt)
  {
    super.onWindowVisibilityChanged(paramInt);
    d = paramInt;
    d localD = w;
    if (localD != null) {
      localD.a(paramInt);
    }
  }
  
  public void setActionBarHideOffset(int paramInt)
  {
    h();
    paramInt = Math.max(0, Math.min(paramInt, f.getHeight()));
    f.setTranslationY(-paramInt);
  }
  
  public void setActionBarVisibilityCallback(d paramD)
  {
    w = paramD;
    if (getWindowToken() != null)
    {
      w.a(d);
      if (o != 0)
      {
        onWindowSystemUiVisibilityChanged(o);
        u.C(this);
      }
    }
  }
  
  public void setHasNonEmbeddedTabs(boolean paramBoolean)
  {
    k = paramBoolean;
  }
  
  public void setHideOnContentScrollEnabled(boolean paramBoolean)
  {
    if (paramBoolean != l)
    {
      l = paramBoolean;
      if (!paramBoolean)
      {
        h();
        setActionBarHideOffset(0);
      }
    }
  }
  
  public void setIcon(int paramInt)
  {
    j();
    g.setIcon(paramInt);
  }
  
  public void setIcon(Drawable paramDrawable)
  {
    j();
    g.setIcon(paramDrawable);
  }
  
  public void setLogo(int paramInt)
  {
    j();
    g.b(paramInt);
  }
  
  public void setOverlayMode(boolean paramBoolean)
  {
    j = paramBoolean;
    if ((paramBoolean) && (getContextgetApplicationInfotargetSdkVersion < 19)) {
      paramBoolean = true;
    } else {
      paramBoolean = false;
    }
    i = paramBoolean;
  }
  
  public void setShowingForActionMode(boolean paramBoolean) {}
  
  public void setUiOptions(int paramInt) {}
  
  public void setWindowCallback(Window.Callback paramCallback)
  {
    j();
    g.setWindowCallback(paramCallback);
  }
  
  public void setWindowTitle(CharSequence paramCharSequence)
  {
    j();
    g.setWindowTitle(paramCharSequence);
  }
  
  public boolean shouldDelayChildPressedState()
  {
    return false;
  }
  
  class a
    extends AnimatorListenerAdapter
  {
    a() {}
    
    public void onAnimationCancel(Animator paramAnimator)
    {
      paramAnimator = ActionBarOverlayLayout.this;
      y = null;
      m = false;
    }
    
    public void onAnimationEnd(Animator paramAnimator)
    {
      paramAnimator = ActionBarOverlayLayout.this;
      y = null;
      m = false;
    }
  }
  
  class b
    implements Runnable
  {
    b() {}
    
    public void run()
    {
      h();
      ActionBarOverlayLayout localActionBarOverlayLayout = ActionBarOverlayLayout.this;
      y = f.animate().translationY(0.0F).setListener(z);
    }
  }
  
  class c
    implements Runnable
  {
    c() {}
    
    public void run()
    {
      h();
      ActionBarOverlayLayout localActionBarOverlayLayout = ActionBarOverlayLayout.this;
      y = f.animate().translationY(-f.getHeight()).setListener(z);
    }
  }
  
  public static abstract interface d
  {
    public abstract void a();
    
    public abstract void a(int paramInt);
    
    public abstract void a(boolean paramBoolean);
    
    public abstract void b();
    
    public abstract void c();
    
    public abstract void d();
  }
  
  public static class e
    extends ViewGroup.MarginLayoutParams
  {
    public e(int paramInt1, int paramInt2)
    {
      super(paramInt2);
    }
    
    public e(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
    }
    
    public e(ViewGroup.LayoutParams paramLayoutParams)
    {
      super();
    }
  }
}
