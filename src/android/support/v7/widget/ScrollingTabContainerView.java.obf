package android.support.v7.widget;

import android.content.Context;
import android.content.res.Configuration;
import android.graphics.drawable.Drawable;
import android.support.v7.app.a.c;
import android.text.TextUtils;
import android.text.TextUtils.TruncateAt;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.animation.DecelerateInterpolator;
import android.widget.AbsListView.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.BaseAdapter;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.Spinner;
import android.widget.TextView;

public class b1
  extends HorizontalScrollView
  implements AdapterView.OnItemSelectedListener
{
  Runnable c;
  private c d;
  o0 e;
  private Spinner f;
  private boolean g;
  int h;
  int i;
  private int j;
  private int k;
  
  static
  {
    new DecelerateInterpolator();
  }
  
  private Spinner a()
  {
    v localV = new v(getContext(), null, a.b.h.a.a.actionDropDownStyle);
    localV.setLayoutParams(new o0.a(-2, -1));
    localV.setOnItemSelectedListener(this);
    return localV;
  }
  
  private boolean b()
  {
    Spinner localSpinner = f;
    return (localSpinner != null) && (localSpinner.getParent() == this);
  }
  
  private void c()
  {
    if (b()) {
      return;
    }
    if (f == null) {
      f = a();
    }
    removeView(e);
    addView(f, new ViewGroup.LayoutParams(-2, -1));
    if (f.getAdapter() == null) {
      f.setAdapter(new b());
    }
    Runnable localRunnable = c;
    if (localRunnable != null)
    {
      removeCallbacks(localRunnable);
      c = null;
    }
    f.setSelection(k);
  }
  
  private boolean d()
  {
    if (!b()) {
      return false;
    }
    removeView(f);
    addView(e, new ViewGroup.LayoutParams(-2, -1));
    setTabSelected(f.getSelectedItemPosition());
    return false;
  }
  
  d a(a.c paramC, boolean paramBoolean)
  {
    paramC = new d(getContext(), paramC, paramBoolean);
    if (paramBoolean)
    {
      paramC.setBackgroundDrawable(null);
      paramC.setLayoutParams(new AbsListView.LayoutParams(-1, j));
      return paramC;
    }
    paramC.setFocusable(true);
    if (d == null) {
      d = new c();
    }
    paramC.setOnClickListener(d);
    return paramC;
  }
  
  public void a(int paramInt)
  {
    final View localView = e.getChildAt(paramInt);
    Runnable localRunnable = c;
    if (localRunnable != null) {
      removeCallbacks(localRunnable);
    }
    c = new a(localView);
    post(c);
  }
  
  public void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    Runnable localRunnable = c;
    if (localRunnable != null) {
      post(localRunnable);
    }
  }
  
  protected void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    paramConfiguration = a.b.h.f.a.a(getContext());
    setContentHeight(paramConfiguration.e());
    i = paramConfiguration.d();
  }
  
  public void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    Runnable localRunnable = c;
    if (localRunnable != null) {
      removeCallbacks(localRunnable);
    }
  }
  
  public void onItemSelected(AdapterView<?> paramAdapterView, View paramView, int paramInt, long paramLong)
  {
    ((d)paramView).a().e();
  }
  
  public void onMeasure(int paramInt1, int paramInt2)
  {
    int m = View.MeasureSpec.getMode(paramInt1);
    paramInt2 = 1;
    boolean bool;
    if (m == 1073741824) {
      bool = true;
    } else {
      bool = false;
    }
    setFillViewport(bool);
    int n = e.getChildCount();
    if ((n > 1) && ((m == 1073741824) || (m == Integer.MIN_VALUE)))
    {
      if (n > 2) {
        h = ((int)(View.MeasureSpec.getSize(paramInt1) * 0.4F));
      } else {
        h = (View.MeasureSpec.getSize(paramInt1) / 2);
      }
      h = Math.min(h, i);
    }
    else
    {
      h = -1;
    }
    m = View.MeasureSpec.makeMeasureSpec(j, 1073741824);
    if ((bool) || (!g)) {
      paramInt2 = 0;
    }
    if (paramInt2 != 0)
    {
      e.measure(0, m);
      if (e.getMeasuredWidth() > View.MeasureSpec.getSize(paramInt1)) {
        c();
      } else {
        d();
      }
    }
    else
    {
      d();
    }
    paramInt2 = getMeasuredWidth();
    super.onMeasure(paramInt1, m);
    paramInt1 = getMeasuredWidth();
    if ((bool) && (paramInt2 != paramInt1)) {
      setTabSelected(k);
    }
  }
  
  public void onNothingSelected(AdapterView<?> paramAdapterView) {}
  
  public void setAllowCollapse(boolean paramBoolean)
  {
    g = paramBoolean;
  }
  
  public void setContentHeight(int paramInt)
  {
    j = paramInt;
    requestLayout();
  }
  
  public void setTabSelected(int paramInt)
  {
    k = paramInt;
    int n = e.getChildCount();
    int m = 0;
    while (m < n)
    {
      localObject = e.getChildAt(m);
      boolean bool;
      if (m == paramInt) {
        bool = true;
      } else {
        bool = false;
      }
      ((View)localObject).setSelected(bool);
      if (bool) {
        a(paramInt);
      }
      m += 1;
    }
    Object localObject = f;
    if ((localObject != null) && (paramInt >= 0)) {
      ((Spinner)localObject).setSelection(paramInt);
    }
  }
  
  class a
    implements Runnable
  {
    a(View paramView) {}
    
    public void run()
    {
      int i = localView.getLeft();
      int j = (getWidth() - localView.getWidth()) / 2;
      smoothScrollTo(i - j, 0);
      c = null;
    }
  }
  
  private class b
    extends BaseAdapter
  {
    b() {}
    
    public int getCount()
    {
      return e.getChildCount();
    }
    
    public Object getItem(int paramInt)
    {
      return ((b1.d)e.getChildAt(paramInt)).a();
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      if (paramView == null) {
        return a((a.c)getItem(paramInt), true);
      }
      ((b1.d)paramView).a((a.c)getItem(paramInt));
      return paramView;
    }
  }
  
  private class c
    implements View.OnClickListener
  {
    c() {}
    
    public void onClick(View paramView)
    {
      ((b1.d)paramView).a().e();
      int j = e.getChildCount();
      int i = 0;
      while (i < j)
      {
        View localView = e.getChildAt(i);
        boolean bool;
        if (localView == paramView) {
          bool = true;
        } else {
          bool = false;
        }
        localView.setSelected(bool);
        i += 1;
      }
    }
  }
  
  private class d
    extends LinearLayout
  {
    private final int[] c = { 16842964 };
    private a.c d;
    private TextView e;
    private ImageView f;
    private View g;
    
    public d(Context paramContext, a.c paramC, boolean paramBoolean)
    {
      super(null, a.b.h.a.a.actionBarTabStyle);
      d = paramC;
      this$1 = j1.a(paramContext, null, c, a.b.h.a.a.actionBarTabStyle, 0);
      if (g(0)) {
        setBackgroundDrawable(b(0));
      }
      a();
      if (paramBoolean) {
        setGravity(8388627);
      }
      b();
    }
    
    public a.c a()
    {
      return d;
    }
    
    public void a(a.c paramC)
    {
      d = paramC;
      b();
    }
    
    public void b()
    {
      a.c localC = d;
      Object localObject2 = localC.b();
      Object localObject1 = null;
      if (localObject2 != null)
      {
        localObject1 = ((View)localObject2).getParent();
        if (localObject1 != this)
        {
          if (localObject1 != null) {
            ((ViewGroup)localObject1).removeView((View)localObject2);
          }
          addView((View)localObject2);
        }
        g = ((View)localObject2);
        localObject1 = e;
        if (localObject1 != null) {
          ((TextView)localObject1).setVisibility(8);
        }
        localObject1 = f;
        if (localObject1 != null)
        {
          ((ImageView)localObject1).setVisibility(8);
          f.setImageDrawable(null);
        }
        return;
      }
      localObject2 = g;
      if (localObject2 != null)
      {
        removeView((View)localObject2);
        g = null;
      }
      Object localObject3 = localC.c();
      localObject2 = localC.d();
      Object localObject4;
      if (localObject3 != null)
      {
        if (f == null)
        {
          localObject4 = new o(getContext());
          LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams(-2, -2);
          gravity = 16;
          ((ImageView)localObject4).setLayoutParams(localLayoutParams);
          addView((View)localObject4, 0);
          f = ((ImageView)localObject4);
        }
        f.setImageDrawable((Drawable)localObject3);
        f.setVisibility(0);
      }
      else
      {
        localObject3 = f;
        if (localObject3 != null)
        {
          ((ImageView)localObject3).setVisibility(8);
          f.setImageDrawable(null);
        }
      }
      boolean bool = TextUtils.isEmpty((CharSequence)localObject2) ^ true;
      if (bool)
      {
        if (e == null)
        {
          localObject3 = new AppCompatTextView(getContext(), null, a.b.h.a.a.actionBarTabTextStyle);
          ((TextView)localObject3).setEllipsize(TextUtils.TruncateAt.END);
          localObject4 = new LinearLayout.LayoutParams(-2, -2);
          gravity = 16;
          ((TextView)localObject3).setLayoutParams((ViewGroup.LayoutParams)localObject4);
          addView((View)localObject3);
          e = ((TextView)localObject3);
        }
        e.setText((CharSequence)localObject2);
        e.setVisibility(0);
      }
      else
      {
        localObject2 = e;
        if (localObject2 != null)
        {
          ((TextView)localObject2).setVisibility(8);
          e.setText(null);
        }
      }
      localObject2 = f;
      if (localObject2 != null) {
        ((ImageView)localObject2).setContentDescription(localC.a());
      }
      if (!bool) {
        localObject1 = localC.a();
      }
      l1.a(this, (CharSequence)localObject1);
    }
    
    public void onInitializeAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent)
    {
      super.onInitializeAccessibilityEvent(paramAccessibilityEvent);
      paramAccessibilityEvent.setClassName(a.c.class.getName());
    }
    
    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo paramAccessibilityNodeInfo)
    {
      super.onInitializeAccessibilityNodeInfo(paramAccessibilityNodeInfo);
      paramAccessibilityNodeInfo.setClassName(a.c.class.getName());
    }
    
    public void onMeasure(int paramInt1, int paramInt2)
    {
      super.onMeasure(paramInt1, paramInt2);
      if (h > 0)
      {
        paramInt1 = getMeasuredWidth();
        int i = h;
        if (paramInt1 > i) {
          super.onMeasure(View.MeasureSpec.makeMeasureSpec(i, 1073741824), paramInt2);
        }
      }
    }
    
    public void setSelected(boolean paramBoolean)
    {
      int i;
      if (isSelected() != paramBoolean) {
        i = 1;
      } else {
        i = 0;
      }
      super.setSelected(paramBoolean);
      if ((i != 0) && (paramBoolean)) {
        sendAccessibilityEvent(4);
      }
    }
  }
}
