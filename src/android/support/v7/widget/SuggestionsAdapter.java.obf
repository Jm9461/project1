package android.support.v7.widget;

import a.b.h.a.f;
import android.app.SearchManager;
import android.app.SearchableInfo;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Context;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.content.res.Resources.Theme;
import android.database.Cursor;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Drawable.ConstantState;
import android.net.Uri;
import android.net.Uri.Builder;
import android.os.Bundle;
import android.support.v4.widget.d;
import android.support.v4.widget.o;
import android.text.SpannableString;
import android.text.TextUtils;
import android.text.style.TextAppearanceSpan;
import android.util.Log;
import android.util.TypedValue;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.WeakHashMap;

class d1
  extends o
  implements View.OnClickListener
{
  private int A = -1;
  private final SearchView n;
  private final SearchableInfo o;
  private final Context p;
  private final WeakHashMap<String, Drawable.ConstantState> q;
  private final int r;
  private boolean s = false;
  private int t = 1;
  private ColorStateList u;
  private int v = -1;
  private int w = -1;
  private int x = -1;
  private int y = -1;
  private int z = -1;
  
  public d1(Context paramContext, SearchView paramSearchView, SearchableInfo paramSearchableInfo, WeakHashMap<String, Drawable.ConstantState> paramWeakHashMap)
  {
    super(paramContext, paramSearchView.getSuggestionRowLayout(), null, true);
    SearchManager localSearchManager = (SearchManager)f.getSystemService("search");
    n = paramSearchView;
    o = paramSearchableInfo;
    r = paramSearchView.getSuggestionCommitIconResId();
    p = paramContext;
    q = paramWeakHashMap;
  }
  
  private Drawable a(ComponentName paramComponentName)
  {
    Object localObject = f.getPackageManager();
    try
    {
      ActivityInfo localActivityInfo = ((PackageManager)localObject).getActivityInfo(paramComponentName, 128);
      int i = localActivityInfo.getIconResource();
      if (i == 0) {
        return null;
      }
      localObject = ((PackageManager)localObject).getDrawable(paramComponentName.getPackageName(), i, applicationInfo);
      if (localObject == null)
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("Invalid icon resource ");
        ((StringBuilder)localObject).append(i);
        ((StringBuilder)localObject).append(" for ");
        ((StringBuilder)localObject).append(paramComponentName.flattenToShortString());
        Log.w("SuggestionsAdapter", ((StringBuilder)localObject).toString());
        return null;
      }
      return localObject;
    }
    catch (PackageManager.NameNotFoundException paramComponentName)
    {
      Log.w("SuggestionsAdapter", paramComponentName.toString());
    }
    return null;
  }
  
  private Drawable a(String paramString)
  {
    paramString = (Drawable.ConstantState)q.get(paramString);
    if (paramString == null) {
      return null;
    }
    return paramString.newDrawable();
  }
  
  private static String a(Cursor paramCursor, int paramInt)
  {
    if (paramInt == -1) {
      return null;
    }
    try
    {
      paramCursor = paramCursor.getString(paramInt);
      return paramCursor;
    }
    catch (Exception paramCursor)
    {
      Log.e("SuggestionsAdapter", "unexpected error retrieving valid column from cursor, did the remote process die?", paramCursor);
    }
    return null;
  }
  
  public static String a(Cursor paramCursor, String paramString)
  {
    return a(paramCursor, paramCursor.getColumnIndex(paramString));
  }
  
  private void a(ImageView paramImageView, Drawable paramDrawable, int paramInt)
  {
    paramImageView.setImageDrawable(paramDrawable);
    if (paramDrawable == null)
    {
      paramImageView.setVisibility(paramInt);
      return;
    }
    paramImageView.setVisibility(0);
    paramDrawable.setVisible(false, false);
    paramDrawable.setVisible(true, false);
  }
  
  private void a(TextView paramTextView, CharSequence paramCharSequence)
  {
    paramTextView.setText(paramCharSequence);
    if (TextUtils.isEmpty(paramCharSequence))
    {
      paramTextView.setVisibility(8);
      return;
    }
    paramTextView.setVisibility(0);
  }
  
  private void a(String paramString, Drawable paramDrawable)
  {
    if (paramDrawable != null) {
      q.put(paramString, paramDrawable.getConstantState());
    }
  }
  
  private Drawable b(ComponentName paramComponentName)
  {
    String str = paramComponentName.flattenToShortString();
    boolean bool = q.containsKey(str);
    Object localObject = null;
    if (bool)
    {
      paramComponentName = (Drawable.ConstantState)q.get(str);
      if (paramComponentName == null) {
        return null;
      }
      return paramComponentName.newDrawable(p.getResources());
    }
    Drawable localDrawable = a(paramComponentName);
    if (localDrawable == null) {
      paramComponentName = localObject;
    } else {
      paramComponentName = localDrawable.getConstantState();
    }
    q.put(str, paramComponentName);
    return localDrawable;
  }
  
  private Drawable b(Uri paramUri)
  {
    try
    {
      boolean bool = "android.resource".equals(paramUri.getScheme());
      Object localObject1;
      if (bool) {
        try
        {
          Drawable localDrawable = a(paramUri);
          return localDrawable;
        }
        catch (Resources.NotFoundException localNotFoundException)
        {
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append("Resource does not exist: ");
          ((StringBuilder)localObject1).append(paramUri);
          throw new FileNotFoundException(((StringBuilder)localObject1).toString());
        }
      }
      InputStream localInputStream = p.getContentResolver().openInputStream(paramUri);
      if (localInputStream != null) {
        try
        {
          localObject1 = Drawable.createFromStream(localInputStream, null);
          StringBuilder localStringBuilder3;
          try
          {
            localInputStream.close();
            return localObject1;
          }
          catch (IOException localIOException1)
          {
            localStringBuilder3 = new StringBuilder();
            localStringBuilder3.append("Error closing icon stream for ");
            localStringBuilder3.append(paramUri);
            Log.e("SuggestionsAdapter", localStringBuilder3.toString(), localIOException1);
            return localObject1;
          }
          localStringBuilder1 = new StringBuilder();
        }
        finally
        {
          try
          {
            localIOException1.close();
          }
          catch (IOException localIOException2)
          {
            localStringBuilder3 = new StringBuilder();
            localStringBuilder3.append("Error closing icon stream for ");
            localStringBuilder3.append(paramUri);
            Log.e("SuggestionsAdapter", localStringBuilder3.toString(), localIOException2);
          }
        }
      }
      StringBuilder localStringBuilder1;
      localStringBuilder1.append("Failed to open ");
      localStringBuilder1.append(paramUri);
      throw new FileNotFoundException(localStringBuilder1.toString());
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      StringBuilder localStringBuilder2 = new StringBuilder();
      localStringBuilder2.append("Icon not found: ");
      localStringBuilder2.append(paramUri);
      localStringBuilder2.append(", ");
      localStringBuilder2.append(localFileNotFoundException.getMessage());
      Log.w("SuggestionsAdapter", localStringBuilder2.toString());
    }
    return null;
  }
  
  private Drawable b(String paramString)
  {
    if ((paramString != null) && (!paramString.isEmpty()))
    {
      if ("0".equals(paramString)) {
        return null;
      }
      try
      {
        int i = Integer.parseInt(paramString);
        Object localObject = new StringBuilder();
        ((StringBuilder)localObject).append("android.resource://");
        ((StringBuilder)localObject).append(p.getPackageName());
        ((StringBuilder)localObject).append("/");
        ((StringBuilder)localObject).append(i);
        localObject = ((StringBuilder)localObject).toString();
        Drawable localDrawable2 = a((String)localObject);
        if (localDrawable2 != null) {
          return localDrawable2;
        }
        localDrawable2 = android.support.v4.content.a.c(p, i);
        a((String)localObject, localDrawable2);
        return localDrawable2;
      }
      catch (Resources.NotFoundException localNotFoundException)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Icon resource not found: ");
        localStringBuilder.append(paramString);
        Log.w("SuggestionsAdapter", localStringBuilder.toString());
        return null;
      }
      catch (NumberFormatException localNumberFormatException)
      {
        Drawable localDrawable1 = a(paramString);
        if (localDrawable1 != null) {
          return localDrawable1;
        }
        localDrawable1 = b(Uri.parse(paramString));
        a(paramString, localDrawable1);
        return localDrawable1;
      }
    }
    return null;
  }
  
  private CharSequence b(CharSequence paramCharSequence)
  {
    if (u == null)
    {
      localObject = new TypedValue();
      f.getTheme().resolveAttribute(a.b.h.a.a.textColorSearchUrl, (TypedValue)localObject, true);
      u = f.getResources().getColorStateList(resourceId);
    }
    Object localObject = new SpannableString(paramCharSequence);
    ((SpannableString)localObject).setSpan(new TextAppearanceSpan(null, 0, 0, u, null), 0, paramCharSequence.length(), 33);
    return localObject;
  }
  
  private Drawable d(Cursor paramCursor)
  {
    paramCursor = b(o.getSearchActivity());
    if (paramCursor != null) {
      return paramCursor;
    }
    return f.getPackageManager().getDefaultActivityIcon();
  }
  
  private Drawable e(Cursor paramCursor)
  {
    int i = y;
    if (i == -1) {
      return null;
    }
    Drawable localDrawable = b(paramCursor.getString(i));
    if (localDrawable != null) {
      return localDrawable;
    }
    return d(paramCursor);
  }
  
  private Drawable f(Cursor paramCursor)
  {
    int i = z;
    if (i == -1) {
      return null;
    }
    return b(paramCursor.getString(i));
  }
  
  private void g(Cursor paramCursor)
  {
    if (paramCursor != null) {
      paramCursor = paramCursor.getExtras();
    } else {
      paramCursor = null;
    }
    if ((paramCursor != null) && (paramCursor.getBoolean("in_progress"))) {}
  }
  
  Cursor a(SearchableInfo paramSearchableInfo, String paramString, int paramInt)
  {
    if (paramSearchableInfo == null) {
      return null;
    }
    Object localObject = paramSearchableInfo.getSuggestAuthority();
    if (localObject == null) {
      return null;
    }
    localObject = new Uri.Builder().scheme("content").authority((String)localObject).query("").fragment("");
    String str = paramSearchableInfo.getSuggestPath();
    if (str != null) {
      ((Uri.Builder)localObject).appendEncodedPath(str);
    }
    ((Uri.Builder)localObject).appendPath("search_suggest_query");
    str = paramSearchableInfo.getSuggestSelection();
    if (str != null)
    {
      paramSearchableInfo = new String[] { paramString };
    }
    else
    {
      ((Uri.Builder)localObject).appendPath(paramString);
      paramSearchableInfo = null;
    }
    if (paramInt > 0) {
      ((Uri.Builder)localObject).appendQueryParameter("limit", String.valueOf(paramInt));
    }
    paramString = ((Uri.Builder)localObject).build();
    return f.getContentResolver().query(paramString, null, str, paramSearchableInfo, null);
  }
  
  public Cursor a(CharSequence paramCharSequence)
  {
    if (paramCharSequence == null) {
      paramCharSequence = "";
    } else {
      paramCharSequence = paramCharSequence.toString();
    }
    if (n.getVisibility() == 0)
    {
      if (n.getWindowVisibility() != 0) {
        return null;
      }
      try
      {
        paramCharSequence = a(o, paramCharSequence, 50);
        if (paramCharSequence != null)
        {
          paramCharSequence.getCount();
          return paramCharSequence;
        }
        return null;
      }
      catch (RuntimeException paramCharSequence)
      {
        Log.w("SuggestionsAdapter", "Search suggestions query threw an exception.", paramCharSequence);
        return null;
      }
    }
    return null;
  }
  
  Drawable a(Uri paramUri)
  {
    String str = paramUri.getAuthority();
    if (!TextUtils.isEmpty(str)) {
      try
      {
        Resources localResources = f.getPackageManager().getResourcesForApplication(str);
        List localList = paramUri.getPathSegments();
        if (localList != null)
        {
          int i = localList.size();
          if (i == 1)
          {
            try
            {
              i = Integer.parseInt((String)localList.get(0));
            }
            catch (NumberFormatException localNumberFormatException)
            {
              localStringBuilder1 = new StringBuilder();
              localStringBuilder1.append("Single path segment is not a resource ID: ");
              localStringBuilder1.append(paramUri);
              throw new FileNotFoundException(localStringBuilder1.toString());
            }
          }
          else
          {
            if (i != 2) {
              break label181;
            }
            i = localResources.getIdentifier((String)localList.get(1), (String)localList.get(0), localStringBuilder1);
          }
          if (i != 0) {
            return localResources.getDrawable(i);
          }
          localStringBuilder1 = new StringBuilder();
          localStringBuilder1.append("No resource found for: ");
          localStringBuilder1.append(paramUri);
          throw new FileNotFoundException(localStringBuilder1.toString());
          label181:
          localStringBuilder1 = new StringBuilder();
          localStringBuilder1.append("More than two path segments: ");
          localStringBuilder1.append(paramUri);
          throw new FileNotFoundException(localStringBuilder1.toString());
        }
        StringBuilder localStringBuilder1 = new StringBuilder();
        localStringBuilder1.append("No path: ");
        localStringBuilder1.append(paramUri);
        throw new FileNotFoundException(localStringBuilder1.toString());
      }
      catch (PackageManager.NameNotFoundException localNameNotFoundException)
      {
        localStringBuilder2 = new StringBuilder();
        localStringBuilder2.append("No package found for authority: ");
        localStringBuilder2.append(paramUri);
        throw new FileNotFoundException(localStringBuilder2.toString());
      }
    }
    StringBuilder localStringBuilder2 = new StringBuilder();
    localStringBuilder2.append("No authority: ");
    localStringBuilder2.append(paramUri);
    throw new FileNotFoundException(localStringBuilder2.toString());
  }
  
  public CharSequence a(Cursor paramCursor)
  {
    if (paramCursor == null) {
      return null;
    }
    String str = a(paramCursor, "suggest_intent_query");
    if (str != null) {
      return str;
    }
    if (o.shouldRewriteQueryFromData())
    {
      str = a(paramCursor, "suggest_intent_data");
      if (str != null) {
        return str;
      }
    }
    if (o.shouldRewriteQueryFromText())
    {
      paramCursor = a(paramCursor, "suggest_text_1");
      if (paramCursor != null) {
        return paramCursor;
      }
    }
    return null;
  }
  
  public void a(int paramInt)
  {
    t = paramInt;
  }
  
  public void a(View paramView, Context paramContext, Cursor paramCursor)
  {
    paramContext = (a)paramView.getTag();
    int i = 0;
    int j = A;
    if (j != -1) {
      i = paramCursor.getInt(j);
    }
    if (a != null)
    {
      paramView = a(paramCursor, v);
      a(a, paramView);
    }
    if (b != null)
    {
      paramView = a(paramCursor, x);
      if (paramView != null) {
        paramView = b(paramView);
      } else {
        paramView = a(paramCursor, w);
      }
      TextView localTextView;
      if (TextUtils.isEmpty(paramView))
      {
        localTextView = a;
        if (localTextView != null)
        {
          localTextView.setSingleLine(false);
          a.setMaxLines(2);
        }
      }
      else
      {
        localTextView = a;
        if (localTextView != null)
        {
          localTextView.setSingleLine(true);
          a.setMaxLines(1);
        }
      }
      a(b, paramView);
    }
    paramView = c;
    if (paramView != null) {
      a(paramView, e(paramCursor), 4);
    }
    paramView = d;
    if (paramView != null) {
      a(paramView, f(paramCursor), 8);
    }
    j = t;
    if ((j != 2) && ((j != 1) || ((i & 0x1) == 0)))
    {
      e.setVisibility(8);
      return;
    }
    e.setVisibility(0);
    e.setTag(a.getText());
    e.setOnClickListener(this);
  }
  
  public View b(Context paramContext, Cursor paramCursor, ViewGroup paramViewGroup)
  {
    paramContext = super.b(paramContext, paramCursor, paramViewGroup);
    paramContext.setTag(new a(paramContext));
    ((ImageView)paramContext.findViewById(f.edit_query)).setImageResource(r);
    return paramContext;
  }
  
  public void b(Cursor paramCursor)
  {
    if (s)
    {
      Log.w("SuggestionsAdapter", "Tried to change cursor after adapter was closed.");
      if (paramCursor != null) {
        paramCursor.close();
      }
      return;
    }
    try
    {
      super.b(paramCursor);
      if (paramCursor != null)
      {
        v = paramCursor.getColumnIndex("suggest_text_1");
        w = paramCursor.getColumnIndex("suggest_text_2");
        x = paramCursor.getColumnIndex("suggest_text_2_url");
        y = paramCursor.getColumnIndex("suggest_icon_1");
        z = paramCursor.getColumnIndex("suggest_icon_2");
        A = paramCursor.getColumnIndex("suggest_flags");
      }
      return;
    }
    catch (Exception paramCursor)
    {
      Log.e("SuggestionsAdapter", "error changing cursor and caching columns", paramCursor);
    }
  }
  
  public View getDropDownView(int paramInt, View paramView, ViewGroup paramViewGroup)
  {
    try
    {
      paramView = super.getDropDownView(paramInt, paramView, paramViewGroup);
      return paramView;
    }
    catch (RuntimeException paramView)
    {
      Log.w("SuggestionsAdapter", "Search suggestions cursor threw exception.", paramView);
      paramViewGroup = a(f, e, paramViewGroup);
      if (paramViewGroup != null) {
        getTaga.setText(paramView.toString());
      }
    }
    return paramViewGroup;
  }
  
  public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
  {
    try
    {
      paramView = super.getView(paramInt, paramView, paramViewGroup);
      return paramView;
    }
    catch (RuntimeException paramView)
    {
      Log.w("SuggestionsAdapter", "Search suggestions cursor threw exception.", paramView);
      paramViewGroup = b(f, e, paramViewGroup);
      if (paramViewGroup != null) {
        getTaga.setText(paramView.toString());
      }
    }
    return paramViewGroup;
  }
  
  public boolean hasStableIds()
  {
    return false;
  }
  
  public void notifyDataSetChanged()
  {
    super.notifyDataSetChanged();
    g(a());
  }
  
  public void notifyDataSetInvalidated()
  {
    super.notifyDataSetInvalidated();
    g(a());
  }
  
  public void onClick(View paramView)
  {
    paramView = paramView.getTag();
    if ((paramView instanceof CharSequence)) {
      n.a((CharSequence)paramView);
    }
  }
  
  private static final class a
  {
    public final TextView a;
    public final TextView b;
    public final ImageView c;
    public final ImageView d;
    public final ImageView e;
    
    public a(View paramView)
    {
      a = ((TextView)paramView.findViewById(16908308));
      b = ((TextView)paramView.findViewById(16908309));
      c = ((ImageView)paramView.findViewById(16908295));
      d = ((ImageView)paramView.findViewById(16908296));
      e = ((ImageView)paramView.findViewById(f.edit_query));
    }
  }
}
