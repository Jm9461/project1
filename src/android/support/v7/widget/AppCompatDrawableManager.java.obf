package android.support.v7.widget;

import a.b.d.a.i;
import a.b.g.g.f;
import a.b.g.g.g;
import a.b.g.g.n;
import a.b.g.g.o;
import a.b.h.a.e;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.Resources.Theme;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffColorFilter;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Drawable.ConstantState;
import android.graphics.drawable.LayerDrawable;
import android.os.Build.VERSION;
import android.util.AttributeSet;
import android.util.Log;
import android.util.TypedValue;
import android.util.Xml;
import java.lang.ref.WeakReference;
import java.util.WeakHashMap;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

public final class j
{
  private static final PorterDuff.Mode g = PorterDuff.Mode.SRC_IN;
  private static j h;
  private static final c i = new c(6);
  private static final int[] j = { e.abc_textfield_search_default_mtrl_alpha, e.abc_textfield_default_mtrl_alpha, e.abc_ab_share_pack_mtrl_alpha };
  private static final int[] k = { e.abc_ic_commit_search_api_mtrl_alpha, e.abc_seekbar_tick_mark_material, e.abc_ic_menu_share_mtrl_alpha, e.abc_ic_menu_copy_mtrl_am_alpha, e.abc_ic_menu_cut_mtrl_alpha, e.abc_ic_menu_selectall_mtrl_alpha, e.abc_ic_menu_paste_mtrl_am_alpha };
  private static final int[] l = { e.abc_textfield_activated_mtrl_alpha, e.abc_textfield_search_activated_mtrl_alpha, e.abc_cab_background_top_mtrl_alpha, e.abc_text_cursor_material, e.abc_text_select_handle_left_mtrl_dark, e.abc_text_select_handle_middle_mtrl_dark, e.abc_text_select_handle_right_mtrl_dark, e.abc_text_select_handle_left_mtrl_light, e.abc_text_select_handle_middle_mtrl_light, e.abc_text_select_handle_right_mtrl_light };
  private static final int[] m = { e.abc_popup_background_mtrl_mult, e.abc_cab_background_internal_bg, e.abc_menu_hardkey_panel_mtrl_mult };
  private static final int[] n = { e.abc_tab_indicator_material, e.abc_textfield_search_material };
  private static final int[] o = { e.abc_btn_check_material, e.abc_btn_radio_material };
  private WeakHashMap<Context, o<ColorStateList>> a;
  private a.b.g.g.a<String, d> b;
  private o<String> c;
  private final WeakHashMap<Context, f<WeakReference<Drawable.ConstantState>>> d = new WeakHashMap(0);
  private TypedValue e;
  private boolean f;
  
  public j() {}
  
  private static long a(TypedValue paramTypedValue)
  {
    return assetCookie << 32 | data;
  }
  
  static PorterDuff.Mode a(int paramInt)
  {
    PorterDuff.Mode localMode = null;
    if (paramInt == e.abc_switch_thumb_material) {
      localMode = PorterDuff.Mode.MULTIPLY;
    }
    return localMode;
  }
  
  public static PorterDuffColorFilter a(int paramInt, PorterDuff.Mode paramMode)
  {
    try
    {
      PorterDuffColorFilter localPorterDuffColorFilter2 = i.a(paramInt, paramMode);
      PorterDuffColorFilter localPorterDuffColorFilter1 = localPorterDuffColorFilter2;
      if (localPorterDuffColorFilter2 == null)
      {
        localPorterDuffColorFilter1 = new PorterDuffColorFilter(paramInt, paramMode);
        i.a(paramInt, paramMode, localPorterDuffColorFilter1);
      }
      return localPorterDuffColorFilter1;
    }
    finally {}
  }
  
  private static PorterDuffColorFilter a(ColorStateList paramColorStateList, PorterDuff.Mode paramMode, int[] paramArrayOfInt)
  {
    if ((paramColorStateList != null) && (paramMode != null)) {
      return a(paramColorStateList.getColorForState(paramArrayOfInt, 0), paramMode);
    }
    return null;
  }
  
  private Drawable a(Context paramContext, int paramInt, boolean paramBoolean, Drawable paramDrawable)
  {
    Object localObject = b(paramContext, paramInt);
    if (localObject != null)
    {
      paramContext = paramDrawable;
      if (h0.a(paramDrawable)) {
        paramContext = paramDrawable.mutate();
      }
      paramContext = android.support.v4.graphics.drawable.a.h(paramContext);
      android.support.v4.graphics.drawable.a.a(paramContext, (ColorStateList)localObject);
      paramDrawable = a(paramInt);
      if (paramDrawable != null) {
        android.support.v4.graphics.drawable.a.a(paramContext, paramDrawable);
      }
      return paramContext;
    }
    if (paramInt == e.abc_seekbar_track_material)
    {
      localObject = (LayerDrawable)paramDrawable;
      a(((LayerDrawable)localObject).findDrawableByLayerId(16908288), e1.b(paramContext, a.b.h.a.a.colorControlNormal), g);
      a(((LayerDrawable)localObject).findDrawableByLayerId(16908303), e1.b(paramContext, a.b.h.a.a.colorControlNormal), g);
      a(((LayerDrawable)localObject).findDrawableByLayerId(16908301), e1.b(paramContext, a.b.h.a.a.colorControlActivated), g);
      return paramDrawable;
    }
    if ((paramInt != e.abc_ratingbar_material) && (paramInt != e.abc_ratingbar_indicator_material) && (paramInt != e.abc_ratingbar_small_material))
    {
      if ((!a(paramContext, paramInt, paramDrawable)) && (paramBoolean)) {
        return null;
      }
    }
    else
    {
      localObject = (LayerDrawable)paramDrawable;
      a(((LayerDrawable)localObject).findDrawableByLayerId(16908288), e1.a(paramContext, a.b.h.a.a.colorControlNormal), g);
      a(((LayerDrawable)localObject).findDrawableByLayerId(16908303), e1.b(paramContext, a.b.h.a.a.colorControlActivated), g);
      a(((LayerDrawable)localObject).findDrawableByLayerId(16908301), e1.b(paramContext, a.b.h.a.a.colorControlActivated), g);
    }
    return paramDrawable;
  }
  
  private Drawable a(Context paramContext, long paramLong)
  {
    try
    {
      f localF = (f)d.get(paramContext);
      if (localF == null) {
        return null;
      }
      Object localObject = (WeakReference)localF.b(paramLong);
      if (localObject != null)
      {
        localObject = (Drawable.ConstantState)((WeakReference)localObject).get();
        if (localObject != null)
        {
          paramContext = ((Drawable.ConstantState)localObject).newDrawable(paramContext.getResources());
          return paramContext;
        }
        localF.a(paramLong);
      }
      return null;
    }
    finally {}
  }
  
  public static j a()
  {
    try
    {
      if (h == null)
      {
        h = new j();
        a(h);
      }
      j localJ = h;
      return localJ;
    }
    finally {}
  }
  
  private void a(Context paramContext, int paramInt, ColorStateList paramColorStateList)
  {
    if (a == null) {
      a = new WeakHashMap();
    }
    o localO2 = (o)a.get(paramContext);
    o localO1 = localO2;
    if (localO2 == null)
    {
      localO1 = new o();
      a.put(paramContext, localO1);
    }
    localO1.a(paramInt, paramColorStateList);
  }
  
  private static void a(Drawable paramDrawable, int paramInt, PorterDuff.Mode paramMode)
  {
    Drawable localDrawable = paramDrawable;
    if (h0.a(paramDrawable)) {
      localDrawable = paramDrawable.mutate();
    }
    if (paramMode == null) {
      paramMode = g;
    }
    localDrawable.setColorFilter(a(paramInt, paramMode));
  }
  
  static void a(Drawable paramDrawable, h1 paramH1, int[] paramArrayOfInt)
  {
    if ((h0.a(paramDrawable)) && (paramDrawable.mutate() != paramDrawable))
    {
      Log.d("AppCompatDrawableManag", "Mutated drawable is not the same instance as the input.");
      return;
    }
    if ((!d) && (!c))
    {
      paramDrawable.clearColorFilter();
    }
    else
    {
      ColorStateList localColorStateList;
      if (d) {
        localColorStateList = a;
      } else {
        localColorStateList = null;
      }
      if (c) {
        paramH1 = b;
      } else {
        paramH1 = g;
      }
      paramDrawable.setColorFilter(a(localColorStateList, paramH1, paramArrayOfInt));
    }
    if (Build.VERSION.SDK_INT <= 23) {
      paramDrawable.invalidateSelf();
    }
  }
  
  private static void a(j paramJ)
  {
    if (Build.VERSION.SDK_INT < 24)
    {
      paramJ.a("vector", new e());
      paramJ.a("animated-vector", new b());
      paramJ.a("animated-selector", new a());
    }
  }
  
  private void a(String paramString, d paramD)
  {
    if (b == null) {
      b = new a.b.g.g.a();
    }
    b.put(paramString, paramD);
  }
  
  static boolean a(Context paramContext, int paramInt, Drawable paramDrawable)
  {
    Object localObject2 = g;
    int i1 = 0;
    int i2 = 0;
    int i4 = -1;
    Object localObject1;
    int i3;
    if (a(j, paramInt))
    {
      i2 = a.b.h.a.a.colorControlNormal;
      i1 = 1;
      localObject1 = localObject2;
      i3 = i4;
    }
    else if (a(l, paramInt))
    {
      i2 = a.b.h.a.a.colorControlActivated;
      i1 = 1;
      localObject1 = localObject2;
      i3 = i4;
    }
    else if (a(m, paramInt))
    {
      i2 = 16842801;
      i1 = 1;
      localObject1 = PorterDuff.Mode.MULTIPLY;
      i3 = i4;
    }
    else if (paramInt == e.abc_list_divider_mtrl_alpha)
    {
      i2 = 16842800;
      i1 = 1;
      i3 = Math.round(40.8F);
      localObject1 = localObject2;
    }
    else
    {
      localObject1 = localObject2;
      i3 = i4;
      if (paramInt == e.abc_dialog_material_background)
      {
        i2 = 16842801;
        i1 = 1;
        i3 = i4;
        localObject1 = localObject2;
      }
    }
    if (i1 != 0)
    {
      localObject2 = paramDrawable;
      if (h0.a(paramDrawable)) {
        localObject2 = paramDrawable.mutate();
      }
      ((Drawable)localObject2).setColorFilter(a(e1.b(paramContext, i2), (PorterDuff.Mode)localObject1));
      if (i3 != -1) {
        ((Drawable)localObject2).setAlpha(i3);
      }
      return true;
    }
    return false;
  }
  
  private boolean a(Context paramContext, long paramLong, Drawable paramDrawable)
  {
    try
    {
      Drawable.ConstantState localConstantState = paramDrawable.getConstantState();
      if (localConstantState != null)
      {
        f localF = (f)d.get(paramContext);
        paramDrawable = localF;
        if (localF == null)
        {
          paramDrawable = new f();
          d.put(paramContext, paramDrawable);
        }
        paramDrawable.c(paramLong, new WeakReference(localConstantState));
        return true;
      }
      return false;
    }
    finally {}
  }
  
  private static boolean a(Drawable paramDrawable)
  {
    return ((paramDrawable instanceof i)) || ("android.graphics.drawable.VectorDrawable".equals(paramDrawable.getClass().getName()));
  }
  
  private static boolean a(int[] paramArrayOfInt, int paramInt)
  {
    int i2 = paramArrayOfInt.length;
    int i1 = 0;
    while (i1 < i2)
    {
      if (paramArrayOfInt[i1] == paramInt) {
        return true;
      }
      i1 += 1;
    }
    return false;
  }
  
  private void b(Context paramContext)
  {
    if (f) {
      return;
    }
    f = true;
    paramContext = a(paramContext, e.abc_vector_test);
    if ((paramContext != null) && (a(paramContext))) {
      return;
    }
    f = false;
    throw new IllegalStateException("This app has been built with an incorrect configuration. Please configure your build for VectorDrawableCompat.");
  }
  
  private ColorStateList c(Context paramContext)
  {
    return c(paramContext, 0);
  }
  
  private ColorStateList c(Context paramContext, int paramInt)
  {
    int[][] arrayOfInt = new int[4][];
    int[] arrayOfInt1 = new int[4];
    int i1 = e1.b(paramContext, a.b.h.a.a.colorControlHighlight);
    int i2 = e1.a(paramContext, a.b.h.a.a.colorButtonNormal);
    arrayOfInt[0] = e1.b;
    arrayOfInt1[0] = i2;
    i2 = 0 + 1;
    arrayOfInt[i2] = e1.d;
    arrayOfInt1[i2] = a.b.g.a.a.b(i1, paramInt);
    i2 += 1;
    arrayOfInt[i2] = e1.c;
    arrayOfInt1[i2] = a.b.g.a.a.b(i1, paramInt);
    i1 = i2 + 1;
    arrayOfInt[i1] = e1.f;
    arrayOfInt1[i1] = paramInt;
    return new ColorStateList(arrayOfInt, arrayOfInt1);
  }
  
  private ColorStateList d(Context paramContext)
  {
    return c(paramContext, e1.b(paramContext, a.b.h.a.a.colorAccent));
  }
  
  private Drawable d(Context paramContext, int paramInt)
  {
    if (e == null) {
      e = new TypedValue();
    }
    TypedValue localTypedValue = e;
    paramContext.getResources().getValue(paramInt, localTypedValue, true);
    long l1 = a(localTypedValue);
    Object localObject = a(paramContext, l1);
    if (localObject != null) {
      return localObject;
    }
    if (paramInt == e.abc_cab_background_top_material) {
      localObject = new LayerDrawable(new Drawable[] { a(paramContext, e.abc_cab_background_internal_bg), a(paramContext, e.abc_cab_background_top_mtrl_alpha) });
    }
    if (localObject != null)
    {
      ((Drawable)localObject).setChangingConfigurations(changingConfigurations);
      a(paramContext, l1, (Drawable)localObject);
    }
    return localObject;
  }
  
  private ColorStateList e(Context paramContext)
  {
    return c(paramContext, e1.b(paramContext, a.b.h.a.a.colorButtonNormal));
  }
  
  private ColorStateList e(Context paramContext, int paramInt)
  {
    Object localObject2 = a;
    Object localObject1 = null;
    if (localObject2 != null)
    {
      localObject2 = (o)((WeakHashMap)localObject2).get(paramContext);
      paramContext = localObject1;
      if (localObject2 != null) {
        paramContext = (ColorStateList)((o)localObject2).b(paramInt);
      }
      return paramContext;
    }
    return null;
  }
  
  private ColorStateList f(Context paramContext)
  {
    int[][] arrayOfInt = new int[3][];
    int[] arrayOfInt1 = new int[3];
    ColorStateList localColorStateList = e1.c(paramContext, a.b.h.a.a.colorSwitchThumbNormal);
    int i1;
    if ((localColorStateList != null) && (localColorStateList.isStateful()))
    {
      arrayOfInt[0] = e1.b;
      arrayOfInt1[0] = localColorStateList.getColorForState(arrayOfInt[0], 0);
      i1 = 0 + 1;
      arrayOfInt[i1] = e1.e;
      arrayOfInt1[i1] = e1.b(paramContext, a.b.h.a.a.colorControlActivated);
      i1 += 1;
      arrayOfInt[i1] = e1.f;
      arrayOfInt1[i1] = localColorStateList.getDefaultColor();
    }
    else
    {
      arrayOfInt[0] = e1.b;
      arrayOfInt1[0] = e1.a(paramContext, a.b.h.a.a.colorSwitchThumbNormal);
      i1 = 0 + 1;
      arrayOfInt[i1] = e1.e;
      arrayOfInt1[i1] = e1.b(paramContext, a.b.h.a.a.colorControlActivated);
      i1 += 1;
      arrayOfInt[i1] = e1.f;
      arrayOfInt1[i1] = e1.b(paramContext, a.b.h.a.a.colorSwitchThumbNormal);
    }
    return new ColorStateList(arrayOfInt, arrayOfInt1);
  }
  
  private Drawable f(Context paramContext, int paramInt)
  {
    Object localObject1 = b;
    if ((localObject1 != null) && (!((n)localObject1).isEmpty()))
    {
      localObject1 = c;
      if (localObject1 != null)
      {
        localObject1 = (String)((o)localObject1).b(paramInt);
        if (!"appcompat_skip_skip".equals(localObject1))
        {
          if ((localObject1 != null) && (b.get(localObject1) == null)) {
            return null;
          }
        }
        else {
          return null;
        }
      }
      else
      {
        c = new o();
      }
      if (e == null) {
        e = new TypedValue();
      }
      TypedValue localTypedValue = e;
      Object localObject3 = paramContext.getResources();
      ((Resources)localObject3).getValue(paramInt, localTypedValue, true);
      long l1 = a(localTypedValue);
      Drawable localDrawable = a(paramContext, l1);
      if (localDrawable != null) {
        return localDrawable;
      }
      Object localObject2 = string;
      localObject1 = localDrawable;
      if (localObject2 != null)
      {
        localObject1 = localDrawable;
        if (((CharSequence)localObject2).toString().endsWith(".xml"))
        {
          localObject2 = localDrawable;
          try
          {
            localObject3 = ((Resources)localObject3).getXml(paramInt);
            localObject2 = localDrawable;
            AttributeSet localAttributeSet = Xml.asAttributeSet((XmlPullParser)localObject3);
            int i1;
            do
            {
              localObject2 = localDrawable;
              i1 = ((XmlPullParser)localObject3).next();
            } while ((i1 != 2) && (i1 != 1));
            if (i1 == 2)
            {
              localObject2 = localDrawable;
              localObject1 = ((XmlPullParser)localObject3).getName();
              localObject2 = localDrawable;
              c.a(paramInt, localObject1);
              localObject2 = localDrawable;
              d localD = (d)b.get(localObject1);
              localObject1 = localDrawable;
              if (localD != null)
              {
                localObject2 = localDrawable;
                localObject1 = localD.a(paramContext, (XmlPullParser)localObject3, localAttributeSet, paramContext.getTheme());
              }
              if (localObject1 != null)
              {
                localObject2 = localObject1;
                ((Drawable)localObject1).setChangingConfigurations(changingConfigurations);
                localObject2 = localObject1;
                a(paramContext, l1, (Drawable)localObject1);
              }
            }
            else
            {
              localObject2 = localDrawable;
              throw new XmlPullParserException("No start tag found");
            }
          }
          catch (Exception paramContext)
          {
            Log.e("AppCompatDrawableManag", "Exception while inflating drawable", paramContext);
            localObject1 = localObject2;
          }
        }
      }
    }
    for (;;)
    {
      if (localObject1 == null) {
        c.a(paramInt, "appcompat_skip_skip");
      }
      return localObject1;
      return null;
    }
  }
  
  public Drawable a(Context paramContext, int paramInt)
  {
    try
    {
      paramContext = a(paramContext, paramInt, false);
      return paramContext;
    }
    finally
    {
      paramContext = finally;
      throw paramContext;
    }
  }
  
  Drawable a(Context paramContext, int paramInt, boolean paramBoolean)
  {
    try
    {
      b(paramContext);
      Object localObject2 = f(paramContext, paramInt);
      Object localObject1 = localObject2;
      if (localObject2 == null) {
        localObject1 = d(paramContext, paramInt);
      }
      localObject2 = localObject1;
      if (localObject1 == null) {
        localObject2 = android.support.v4.content.a.c(paramContext, paramInt);
      }
      localObject1 = localObject2;
      if (localObject2 != null) {
        localObject1 = a(paramContext, paramInt, paramBoolean, (Drawable)localObject2);
      }
      if (localObject1 != null) {
        h0.b((Drawable)localObject1);
      }
      return localObject1;
    }
    finally {}
  }
  
  Drawable a(Context paramContext, o1 paramO1, int paramInt)
  {
    try
    {
      Drawable localDrawable2 = f(paramContext, paramInt);
      Drawable localDrawable1 = localDrawable2;
      if (localDrawable2 == null) {
        localDrawable1 = paramO1.a(paramInt);
      }
      if (localDrawable1 != null)
      {
        paramContext = a(paramContext, paramInt, false, localDrawable1);
        return paramContext;
      }
      return null;
    }
    finally {}
  }
  
  public void a(Context paramContext)
  {
    try
    {
      paramContext = (f)d.get(paramContext);
      if (paramContext != null) {
        paramContext.a();
      }
      return;
    }
    finally {}
  }
  
  ColorStateList b(Context paramContext, int paramInt)
  {
    try
    {
      ColorStateList localColorStateList1 = e(paramContext, paramInt);
      ColorStateList localColorStateList2 = localColorStateList1;
      if (localColorStateList1 == null)
      {
        if (paramInt == e.abc_edit_text_material) {
          localColorStateList1 = a.b.h.c.a.a.b(paramContext, a.b.h.a.c.abc_tint_edittext);
        } else if (paramInt == e.abc_switch_track_mtrl_alpha) {
          localColorStateList1 = a.b.h.c.a.a.b(paramContext, a.b.h.a.c.abc_tint_switch_track);
        } else if (paramInt == e.abc_switch_thumb_material) {
          localColorStateList1 = f(paramContext);
        } else if (paramInt == e.abc_btn_default_mtrl_shape) {
          localColorStateList1 = e(paramContext);
        } else if (paramInt == e.abc_btn_borderless_material) {
          localColorStateList1 = c(paramContext);
        } else if (paramInt == e.abc_btn_colored_material) {
          localColorStateList1 = d(paramContext);
        } else if ((paramInt != e.abc_spinner_mtrl_am_alpha) && (paramInt != e.abc_spinner_textfield_background_material))
        {
          if (a(k, paramInt)) {
            localColorStateList1 = e1.c(paramContext, a.b.h.a.a.colorControlNormal);
          } else if (a(n, paramInt)) {
            localColorStateList1 = a.b.h.c.a.a.b(paramContext, a.b.h.a.c.abc_tint_default);
          } else if (a(o, paramInt)) {
            localColorStateList1 = a.b.h.c.a.a.b(paramContext, a.b.h.a.c.abc_tint_btn_checkable);
          } else if (paramInt == e.abc_seekbar_thumb_material) {
            localColorStateList1 = a.b.h.c.a.a.b(paramContext, a.b.h.a.c.abc_tint_seek_thumb);
          }
        }
        else {
          localColorStateList1 = a.b.h.c.a.a.b(paramContext, a.b.h.a.c.abc_tint_spinner);
        }
        localColorStateList2 = localColorStateList1;
        if (localColorStateList1 != null)
        {
          a(paramContext, paramInt, localColorStateList1);
          localColorStateList2 = localColorStateList1;
        }
      }
      return localColorStateList2;
    }
    finally {}
  }
  
  static class a
    implements j.d
  {
    a() {}
    
    public Drawable a(Context paramContext, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme)
    {
      try
      {
        paramContext = a.b.h.d.a.a.b(paramContext, paramContext.getResources(), paramXmlPullParser, paramAttributeSet, paramTheme);
        return paramContext;
      }
      catch (Exception paramContext)
      {
        Log.e("AsldcInflateDelegate", "Exception while inflating <animated-selector>", paramContext);
      }
      return null;
    }
  }
  
  private static class b
    implements j.d
  {
    b() {}
    
    public Drawable a(Context paramContext, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme)
    {
      try
      {
        paramContext = a.b.d.a.c.a(paramContext, paramContext.getResources(), paramXmlPullParser, paramAttributeSet, paramTheme);
        return paramContext;
      }
      catch (Exception paramContext)
      {
        Log.e("AvdcInflateDelegate", "Exception while inflating <animated-vector>", paramContext);
      }
      return null;
    }
  }
  
  private static class c
    extends g<Integer, PorterDuffColorFilter>
  {
    public c(int paramInt)
    {
      super();
    }
    
    private static int b(int paramInt, PorterDuff.Mode paramMode)
    {
      return (1 * 31 + paramInt) * 31 + paramMode.hashCode();
    }
    
    PorterDuffColorFilter a(int paramInt, PorterDuff.Mode paramMode)
    {
      return (PorterDuffColorFilter)b(Integer.valueOf(b(paramInt, paramMode)));
    }
    
    PorterDuffColorFilter a(int paramInt, PorterDuff.Mode paramMode, PorterDuffColorFilter paramPorterDuffColorFilter)
    {
      return (PorterDuffColorFilter)a(Integer.valueOf(b(paramInt, paramMode)), paramPorterDuffColorFilter);
    }
  }
  
  private static abstract interface d
  {
    public abstract Drawable a(Context paramContext, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme);
  }
  
  private static class e
    implements j.d
  {
    e() {}
    
    public Drawable a(Context paramContext, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme)
    {
      try
      {
        paramContext = i.createFromXmlInner(paramContext.getResources(), paramXmlPullParser, paramAttributeSet, paramTheme);
        return paramContext;
      }
      catch (Exception paramContext)
      {
        Log.e("VdcInflateDelegate", "Exception while inflating <vector>", paramContext);
      }
      return null;
    }
  }
}
