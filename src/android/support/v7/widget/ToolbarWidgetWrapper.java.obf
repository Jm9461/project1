package android.support.v7.widget;

import a.b.h.a.e;
import a.b.h.a.f;
import a.b.h.a.j;
import android.content.Context;
import android.graphics.drawable.Drawable;
import android.support.v4.view.a0;
import android.support.v4.view.u;
import android.support.v4.view.y;
import android.support.v7.app.a.a;
import android.support.v7.view.menu.b;
import android.support.v7.view.menu.h.a;
import android.support.v7.view.menu.p.a;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.Window.Callback;

public class k1
  implements f0
{
  Toolbar a;
  private int b;
  private View c;
  private View d;
  private Drawable e;
  private Drawable f;
  private Drawable g;
  private boolean h;
  CharSequence i;
  private CharSequence j;
  private CharSequence k;
  Window.Callback l;
  boolean m;
  private c n;
  private int o = 0;
  private int p = 0;
  private Drawable q;
  
  public k1(Toolbar paramToolbar, boolean paramBoolean)
  {
    this(paramToolbar, paramBoolean, a.b.h.a.h.abc_action_bar_up_description, e.abc_ic_ab_back_material);
  }
  
  public k1(Toolbar paramToolbar, boolean paramBoolean, int paramInt1, int paramInt2)
  {
    a = paramToolbar;
    i = paramToolbar.getTitle();
    j = paramToolbar.getSubtitle();
    boolean bool;
    if (i != null) {
      bool = true;
    } else {
      bool = false;
    }
    h = bool;
    g = paramToolbar.getNavigationIcon();
    paramToolbar = j1.a(paramToolbar.getContext(), null, j.ActionBar, a.b.h.a.a.actionBarStyle, 0);
    q = paramToolbar.b(j.ActionBar_homeAsUpIndicator);
    if (paramBoolean)
    {
      Object localObject = paramToolbar.e(j.ActionBar_title);
      if (!TextUtils.isEmpty((CharSequence)localObject)) {
        setTitle((CharSequence)localObject);
      }
      localObject = paramToolbar.e(j.ActionBar_subtitle);
      if (!TextUtils.isEmpty((CharSequence)localObject)) {
        b((CharSequence)localObject);
      }
      localObject = paramToolbar.b(j.ActionBar_logo);
      if (localObject != null) {
        c((Drawable)localObject);
      }
      localObject = paramToolbar.b(j.ActionBar_icon);
      if (localObject != null) {
        setIcon((Drawable)localObject);
      }
      if (g == null)
      {
        localObject = q;
        if (localObject != null) {
          b((Drawable)localObject);
        }
      }
      d(paramToolbar.d(j.ActionBar_displayOptions, 0));
      paramInt2 = paramToolbar.g(j.ActionBar_customNavigationLayout, 0);
      if (paramInt2 != 0)
      {
        a(LayoutInflater.from(a.getContext()).inflate(paramInt2, a, false));
        d(b | 0x10);
      }
      paramInt2 = paramToolbar.f(j.ActionBar_height, 0);
      if (paramInt2 > 0)
      {
        localObject = a.getLayoutParams();
        height = paramInt2;
        a.setLayoutParams((ViewGroup.LayoutParams)localObject);
      }
      paramInt2 = paramToolbar.b(j.ActionBar_contentInsetStart, -1);
      int i1 = paramToolbar.b(j.ActionBar_contentInsetEnd, -1);
      if ((paramInt2 >= 0) || (i1 >= 0)) {
        a.b(Math.max(paramInt2, 0), Math.max(i1, 0));
      }
      paramInt2 = paramToolbar.g(j.ActionBar_titleTextStyle, 0);
      if (paramInt2 != 0)
      {
        localObject = a;
        ((Toolbar)localObject).b(((ViewGroup)localObject).getContext(), paramInt2);
      }
      paramInt2 = paramToolbar.g(j.ActionBar_subtitleTextStyle, 0);
      if (paramInt2 != 0)
      {
        localObject = a;
        ((Toolbar)localObject).a(((ViewGroup)localObject).getContext(), paramInt2);
      }
      paramInt2 = paramToolbar.g(j.ActionBar_popupTheme, 0);
      if (paramInt2 != 0) {
        a.setPopupTheme(paramInt2);
      }
    }
    else
    {
      b = p();
    }
    paramToolbar.a();
    e(paramInt1);
    k = a.getNavigationContentDescription();
    a.setNavigationOnClickListener(new a());
  }
  
  private void c(CharSequence paramCharSequence)
  {
    i = paramCharSequence;
    if ((b & 0x8) != 0) {
      a.setTitle(paramCharSequence);
    }
  }
  
  private int p()
  {
    int i1 = 11;
    if (a.getNavigationIcon() != null)
    {
      i1 = 0xB | 0x4;
      q = a.getNavigationIcon();
    }
    return i1;
  }
  
  private void q()
  {
    if ((b & 0x4) != 0)
    {
      if (TextUtils.isEmpty(k))
      {
        a.setNavigationContentDescription(p);
        return;
      }
      a.setNavigationContentDescription(k);
    }
  }
  
  private void r()
  {
    if ((b & 0x4) != 0)
    {
      Toolbar localToolbar = a;
      Drawable localDrawable = g;
      if (localDrawable == null) {
        localDrawable = q;
      }
      localToolbar.setNavigationIcon(localDrawable);
      return;
    }
    a.setNavigationIcon(null);
  }
  
  private void s()
  {
    Drawable localDrawable = null;
    int i1 = b;
    if ((i1 & 0x2) != 0) {
      if ((i1 & 0x1) != 0)
      {
        localDrawable = f;
        if (localDrawable == null) {
          localDrawable = e;
        }
      }
      else
      {
        localDrawable = e;
      }
    }
    a.setLogo(localDrawable);
  }
  
  public y a(final int paramInt, long paramLong)
  {
    y localY = u.a(a);
    float f1;
    if (paramInt == 0) {
      f1 = 1.0F;
    } else {
      f1 = 0.0F;
    }
    localY.a(f1);
    localY.a(paramLong);
    localY.a(new b(paramInt));
    return localY;
  }
  
  public void a(int paramInt)
  {
    a.setVisibility(paramInt);
  }
  
  public void a(Drawable paramDrawable)
  {
    u.a(a, paramDrawable);
  }
  
  public void a(p.a paramA, h.a paramA1)
  {
    a.a(paramA, paramA1);
  }
  
  public void a(b1 paramB1)
  {
    Object localObject = c;
    if (localObject != null)
    {
      localObject = ((View)localObject).getParent();
      Toolbar localToolbar = a;
      if (localObject == localToolbar) {
        localToolbar.removeView(c);
      }
    }
    c = paramB1;
    if ((paramB1 != null) && (o == 2))
    {
      a.addView(c, 0);
      localObject = (Toolbar.e)c.getLayoutParams();
      width = -2;
      height = -2;
      a = 8388691;
      paramB1.setAllowCollapse(true);
    }
  }
  
  public void a(Menu paramMenu, p.a paramA)
  {
    if (n == null)
    {
      n = new c(a.getContext());
      n.a(f.action_menu_presenter);
    }
    n.a(paramA);
    a.a((android.support.v7.view.menu.h)paramMenu, n);
  }
  
  public void a(View paramView)
  {
    View localView = d;
    if ((localView != null) && ((b & 0x10) != 0)) {
      a.removeView(localView);
    }
    d = paramView;
    if ((paramView != null) && ((b & 0x10) != 0)) {
      a.addView(d);
    }
  }
  
  public void a(CharSequence paramCharSequence)
  {
    k = paramCharSequence;
    q();
  }
  
  public void a(boolean paramBoolean) {}
  
  public boolean a()
  {
    return a.h();
  }
  
  public void b(int paramInt)
  {
    Drawable localDrawable;
    if (paramInt != 0) {
      localDrawable = a.b.h.c.a.a.c(k(), paramInt);
    } else {
      localDrawable = null;
    }
    c(localDrawable);
  }
  
  public void b(Drawable paramDrawable)
  {
    g = paramDrawable;
    r();
  }
  
  public void b(CharSequence paramCharSequence)
  {
    j = paramCharSequence;
    if ((b & 0x8) != 0) {
      a.setSubtitle(paramCharSequence);
    }
  }
  
  public void b(boolean paramBoolean)
  {
    a.setCollapsible(paramBoolean);
  }
  
  public boolean b()
  {
    return a.i();
  }
  
  public void c(int paramInt)
  {
    String str;
    if (paramInt == 0) {
      str = null;
    } else {
      str = k().getString(paramInt);
    }
    a(str);
  }
  
  public void c(Drawable paramDrawable)
  {
    f = paramDrawable;
    s();
  }
  
  public boolean c()
  {
    return a.g();
  }
  
  public void collapseActionView()
  {
    a.c();
  }
  
  public void d(int paramInt)
  {
    int i1 = b ^ paramInt;
    b = paramInt;
    if (i1 != 0)
    {
      if ((i1 & 0x4) != 0)
      {
        if ((paramInt & 0x4) != 0) {
          q();
        }
        r();
      }
      if ((i1 & 0x3) != 0) {
        s();
      }
      if ((i1 & 0x8) != 0) {
        if ((paramInt & 0x8) != 0)
        {
          a.setTitle(i);
          a.setSubtitle(j);
        }
        else
        {
          a.setTitle(null);
          a.setSubtitle(null);
        }
      }
      if ((i1 & 0x10) != 0)
      {
        View localView = d;
        if (localView != null)
        {
          if ((paramInt & 0x10) != 0)
          {
            a.addView(localView);
            return;
          }
          a.removeView(localView);
        }
      }
    }
  }
  
  public boolean d()
  {
    return a.k();
  }
  
  public void e()
  {
    m = true;
  }
  
  public void e(int paramInt)
  {
    if (paramInt == p) {
      return;
    }
    p = paramInt;
    if (TextUtils.isEmpty(a.getNavigationContentDescription())) {
      c(p);
    }
  }
  
  public boolean f()
  {
    return a.b();
  }
  
  public void g()
  {
    a.d();
  }
  
  public CharSequence getTitle()
  {
    return a.getTitle();
  }
  
  public int h()
  {
    return b;
  }
  
  public Menu i()
  {
    return a.getMenu();
  }
  
  public ViewGroup j()
  {
    return a;
  }
  
  public Context k()
  {
    return a.getContext();
  }
  
  public int l()
  {
    return o;
  }
  
  public void m()
  {
    Log.i("ToolbarWidgetWrapper", "Progress display unsupported");
  }
  
  public boolean n()
  {
    return a.f();
  }
  
  public void o()
  {
    Log.i("ToolbarWidgetWrapper", "Progress display unsupported");
  }
  
  public void setIcon(int paramInt)
  {
    Drawable localDrawable;
    if (paramInt != 0) {
      localDrawable = a.b.h.c.a.a.c(k(), paramInt);
    } else {
      localDrawable = null;
    }
    setIcon(localDrawable);
  }
  
  public void setIcon(Drawable paramDrawable)
  {
    e = paramDrawable;
    s();
  }
  
  public void setTitle(CharSequence paramCharSequence)
  {
    h = true;
    c(paramCharSequence);
  }
  
  public void setWindowCallback(Window.Callback paramCallback)
  {
    l = paramCallback;
  }
  
  public void setWindowTitle(CharSequence paramCharSequence)
  {
    if (!h) {
      c(paramCharSequence);
    }
  }
  
  class a
    implements View.OnClickListener
  {
    final android.support.v7.view.menu.a c = new android.support.v7.view.menu.a(a.getContext(), 0, 16908332, 0, 0, i);
    
    a() {}
    
    public void onClick(View paramView)
    {
      paramView = k1.this;
      Window.Callback localCallback = l;
      if ((localCallback != null) && (m)) {
        localCallback.onMenuItemSelected(0, c);
      }
    }
  }
  
  class b
    extends a0
  {
    private boolean a = false;
    
    b(int paramInt) {}
    
    public void a(View paramView)
    {
      if (!a) {
        a.setVisibility(paramInt);
      }
    }
    
    public void b(View paramView)
    {
      a.setVisibility(0);
    }
    
    public void c(View paramView)
    {
      a = true;
    }
  }
}
