package android.support.v7.widget;

import a.b.h.a.j;
import android.content.Context;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.ClassLoaderCreator;
import android.os.Parcelable.Creator;
import android.support.v4.view.d;
import android.support.v4.view.u;
import android.support.v7.app.a.a;
import android.support.v7.view.menu.h;
import android.support.v7.view.menu.h.a;
import android.support.v7.view.menu.k;
import android.support.v7.view.menu.p;
import android.support.v7.view.menu.p.a;
import android.support.v7.view.menu.v;
import android.text.TextUtils;
import android.text.TextUtils.TruncateAt;
import android.util.AttributeSet;
import android.view.ContextThemeWrapper;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import java.util.ArrayList;
import java.util.List;

public class Toolbar
  extends ViewGroup
{
  private CharSequence A;
  private int B;
  private int C;
  private boolean D;
  private boolean E;
  private final ArrayList<View> F = new ArrayList();
  private final ArrayList<View> G = new ArrayList();
  private final int[] H = new int[2];
  f I;
  private final ActionMenuView.e J = new a();
  private k1 K;
  private c L;
  private d M;
  private p.a N;
  private h.a O;
  private boolean P;
  private final Runnable Q = new b();
  private ActionMenuView c;
  private TextView d;
  private TextView e;
  private ImageButton f;
  private ImageView g;
  private Drawable h;
  private CharSequence i;
  ImageButton j;
  View k;
  private Context l;
  private int m;
  private int n;
  private int o;
  int p;
  private int q;
  private int r;
  private int s;
  private int t;
  private int u;
  private z0 v;
  private int w;
  private int x;
  private int y = 8388627;
  private CharSequence z;
  
  public Toolbar(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public Toolbar(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, a.b.h.a.a.toolbarStyle);
  }
  
  public Toolbar(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    paramContext = j1.a(getContext(), paramAttributeSet, j.Toolbar, paramInt, 0);
    n = paramContext.g(j.Toolbar_titleTextAppearance, 0);
    o = paramContext.g(j.Toolbar_subtitleTextAppearance, 0);
    y = paramContext.e(j.Toolbar_android_gravity, y);
    p = paramContext.e(j.Toolbar_buttonGravity, 48);
    int i1 = paramContext.b(j.Toolbar_titleMargin, 0);
    paramInt = i1;
    if (paramContext.g(j.Toolbar_titleMargins)) {
      paramInt = paramContext.b(j.Toolbar_titleMargins, i1);
    }
    u = paramInt;
    t = paramInt;
    s = paramInt;
    r = paramInt;
    paramInt = paramContext.b(j.Toolbar_titleMarginStart, -1);
    if (paramInt >= 0) {
      r = paramInt;
    }
    paramInt = paramContext.b(j.Toolbar_titleMarginEnd, -1);
    if (paramInt >= 0) {
      s = paramInt;
    }
    paramInt = paramContext.b(j.Toolbar_titleMarginTop, -1);
    if (paramInt >= 0) {
      t = paramInt;
    }
    paramInt = paramContext.b(j.Toolbar_titleMarginBottom, -1);
    if (paramInt >= 0) {
      u = paramInt;
    }
    q = paramContext.c(j.Toolbar_maxButtonHeight, -1);
    paramInt = paramContext.b(j.Toolbar_contentInsetStart, Integer.MIN_VALUE);
    i1 = paramContext.b(j.Toolbar_contentInsetEnd, Integer.MIN_VALUE);
    int i2 = paramContext.c(j.Toolbar_contentInsetLeft, 0);
    int i3 = paramContext.c(j.Toolbar_contentInsetRight, 0);
    l();
    v.a(i2, i3);
    if ((paramInt != Integer.MIN_VALUE) || (i1 != Integer.MIN_VALUE)) {
      v.b(paramInt, i1);
    }
    w = paramContext.b(j.Toolbar_contentInsetStartWithNavigation, Integer.MIN_VALUE);
    x = paramContext.b(j.Toolbar_contentInsetEndWithActions, Integer.MIN_VALUE);
    h = paramContext.b(j.Toolbar_collapseIcon);
    i = paramContext.e(j.Toolbar_collapseContentDescription);
    paramAttributeSet = paramContext.e(j.Toolbar_title);
    if (!TextUtils.isEmpty(paramAttributeSet)) {
      setTitle(paramAttributeSet);
    }
    paramAttributeSet = paramContext.e(j.Toolbar_subtitle);
    if (!TextUtils.isEmpty(paramAttributeSet)) {
      setSubtitle(paramAttributeSet);
    }
    l = getContext();
    setPopupTheme(paramContext.g(j.Toolbar_popupTheme, 0));
    paramAttributeSet = paramContext.b(j.Toolbar_navigationIcon);
    if (paramAttributeSet != null) {
      setNavigationIcon(paramAttributeSet);
    }
    paramAttributeSet = paramContext.e(j.Toolbar_navigationContentDescription);
    if (!TextUtils.isEmpty(paramAttributeSet)) {
      setNavigationContentDescription(paramAttributeSet);
    }
    paramAttributeSet = paramContext.b(j.Toolbar_logo);
    if (paramAttributeSet != null) {
      setLogo(paramAttributeSet);
    }
    paramAttributeSet = paramContext.e(j.Toolbar_logoDescription);
    if (!TextUtils.isEmpty(paramAttributeSet)) {
      setLogoDescription(paramAttributeSet);
    }
    if (paramContext.g(j.Toolbar_titleTextColor)) {
      setTitleTextColor(paramContext.a(j.Toolbar_titleTextColor, -1));
    }
    if (paramContext.g(j.Toolbar_subtitleTextColor)) {
      setSubtitleTextColor(paramContext.a(j.Toolbar_subtitleTextColor, -1));
    }
    paramContext.a();
  }
  
  private int a(int paramInt)
  {
    int i1 = u.k(this);
    int i2 = d.a(paramInt, i1) & 0x7;
    if (i2 != 1)
    {
      paramInt = 3;
      if ((i2 != 3) && (i2 != 5))
      {
        if (i1 == 1) {
          paramInt = 5;
        }
        return paramInt;
      }
    }
    return i2;
  }
  
  private int a(View paramView)
  {
    paramView = (ViewGroup.MarginLayoutParams)paramView.getLayoutParams();
    return android.support.v4.view.g.b(paramView) + android.support.v4.view.g.a(paramView);
  }
  
  private int a(View paramView, int paramInt)
  {
    e localE = (e)paramView.getLayoutParams();
    int i2 = paramView.getMeasuredHeight();
    if (paramInt > 0) {
      paramInt = (i2 - paramInt) / 2;
    } else {
      paramInt = 0;
    }
    int i1 = b(a);
    if (i1 != 48)
    {
      if (i1 != 80)
      {
        int i3 = getPaddingTop();
        paramInt = getPaddingBottom();
        int i4 = getHeight();
        i1 = (i4 - i3 - paramInt - i2) / 2;
        if (i1 < topMargin)
        {
          paramInt = topMargin;
        }
        else
        {
          i2 = i4 - paramInt - i2 - i1 - i3;
          i4 = bottomMargin;
          paramInt = i1;
          if (i2 < i4) {
            paramInt = Math.max(0, i1 - (i4 - i2));
          }
        }
        return i3 + paramInt;
      }
      return getHeight() - getPaddingBottom() - i2 - bottomMargin - paramInt;
    }
    return getPaddingTop() - paramInt;
  }
  
  private int a(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt)
  {
    ViewGroup.MarginLayoutParams localMarginLayoutParams = (ViewGroup.MarginLayoutParams)paramView.getLayoutParams();
    int i1 = leftMargin - paramArrayOfInt[0];
    int i2 = rightMargin - paramArrayOfInt[1];
    int i3 = Math.max(0, i1) + Math.max(0, i2);
    paramArrayOfInt[0] = Math.max(0, -i1);
    paramArrayOfInt[1] = Math.max(0, -i2);
    paramView.measure(ViewGroup.getChildMeasureSpec(paramInt1, getPaddingLeft() + getPaddingRight() + i3 + paramInt2, width), ViewGroup.getChildMeasureSpec(paramInt3, getPaddingTop() + getPaddingBottom() + topMargin + bottomMargin + paramInt4, height));
    return paramView.getMeasuredWidth() + i3;
  }
  
  private int a(View paramView, int paramInt1, int[] paramArrayOfInt, int paramInt2)
  {
    e localE = (e)paramView.getLayoutParams();
    int i1 = leftMargin - paramArrayOfInt[0];
    paramInt1 += Math.max(0, i1);
    paramArrayOfInt[0] = Math.max(0, -i1);
    paramInt2 = a(paramView, paramInt2);
    i1 = paramView.getMeasuredWidth();
    paramView.layout(paramInt1, paramInt2, paramInt1 + i1, paramView.getMeasuredHeight() + paramInt2);
    return paramInt1 + (rightMargin + i1);
  }
  
  private int a(List<View> paramList, int[] paramArrayOfInt)
  {
    int i4 = paramArrayOfInt[0];
    int i3 = paramArrayOfInt[1];
    int i2 = 0;
    int i5 = paramList.size();
    int i1 = 0;
    while (i1 < i5)
    {
      paramArrayOfInt = (View)paramList.get(i1);
      e localE = (e)paramArrayOfInt.getLayoutParams();
      i4 = leftMargin - i4;
      i3 = rightMargin - i3;
      int i6 = Math.max(0, i4);
      int i7 = Math.max(0, i3);
      i4 = Math.max(0, -i4);
      i3 = Math.max(0, -i3);
      i2 += paramArrayOfInt.getMeasuredWidth() + i6 + i7;
      i1 += 1;
    }
    return i2;
  }
  
  private void a(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    ViewGroup.MarginLayoutParams localMarginLayoutParams = (ViewGroup.MarginLayoutParams)paramView.getLayoutParams();
    int i1 = ViewGroup.getChildMeasureSpec(paramInt1, getPaddingLeft() + getPaddingRight() + leftMargin + rightMargin + paramInt2, width);
    paramInt2 = ViewGroup.getChildMeasureSpec(paramInt3, getPaddingTop() + getPaddingBottom() + topMargin + bottomMargin + paramInt4, height);
    paramInt3 = View.MeasureSpec.getMode(paramInt2);
    paramInt1 = paramInt2;
    if (paramInt3 != 1073741824)
    {
      paramInt1 = paramInt2;
      if (paramInt5 >= 0)
      {
        if (paramInt3 != 0) {
          paramInt5 = Math.min(View.MeasureSpec.getSize(paramInt2), paramInt5);
        }
        paramInt1 = View.MeasureSpec.makeMeasureSpec(paramInt5, 1073741824);
      }
    }
    paramView.measure(i1, paramInt1);
  }
  
  private void a(View paramView, boolean paramBoolean)
  {
    Object localObject = paramView.getLayoutParams();
    if (localObject == null) {
      localObject = generateDefaultLayoutParams();
    } else if (!checkLayoutParams((ViewGroup.LayoutParams)localObject)) {
      localObject = generateLayoutParams((ViewGroup.LayoutParams)localObject);
    } else {
      localObject = (e)localObject;
    }
    b = 1;
    if ((paramBoolean) && (k != null))
    {
      paramView.setLayoutParams((ViewGroup.LayoutParams)localObject);
      G.add(paramView);
      return;
    }
    addView(paramView, (ViewGroup.LayoutParams)localObject);
  }
  
  private void a(List<View> paramList, int paramInt)
  {
    int i2 = u.k(this);
    int i1 = 1;
    if (i2 != 1) {
      i1 = 0;
    }
    int i3 = getChildCount();
    i2 = d.a(paramInt, u.k(this));
    paramList.clear();
    View localView;
    e localE;
    if (i1 != 0)
    {
      paramInt = i3 - 1;
      while (paramInt >= 0)
      {
        localView = getChildAt(paramInt);
        localE = (e)localView.getLayoutParams();
        if ((b == 0) && (d(localView)) && (a(a) == i2)) {
          paramList.add(localView);
        }
        paramInt -= 1;
      }
      return;
    }
    paramInt = 0;
    while (paramInt < i3)
    {
      localView = getChildAt(paramInt);
      localE = (e)localView.getLayoutParams();
      if ((b == 0) && (d(localView)) && (a(a) == i2)) {
        paramList.add(localView);
      }
      paramInt += 1;
    }
  }
  
  private int b(int paramInt)
  {
    paramInt &= 0x70;
    if ((paramInt != 16) && (paramInt != 48) && (paramInt != 80)) {
      return y & 0x70;
    }
    return paramInt;
  }
  
  private int b(View paramView)
  {
    paramView = (ViewGroup.MarginLayoutParams)paramView.getLayoutParams();
    return topMargin + bottomMargin;
  }
  
  private int b(View paramView, int paramInt1, int[] paramArrayOfInt, int paramInt2)
  {
    e localE = (e)paramView.getLayoutParams();
    int i1 = rightMargin - paramArrayOfInt[1];
    paramInt1 -= Math.max(0, i1);
    paramArrayOfInt[1] = Math.max(0, -i1);
    paramInt2 = a(paramView, paramInt2);
    i1 = paramView.getMeasuredWidth();
    paramView.layout(paramInt1 - i1, paramInt2, paramInt1, paramView.getMeasuredHeight() + paramInt2);
    return paramInt1 - (leftMargin + i1);
  }
  
  private boolean c(View paramView)
  {
    return (paramView.getParent() == this) || (G.contains(paramView));
  }
  
  private boolean d(View paramView)
  {
    return (paramView != null) && (paramView.getParent() == this) && (paramView.getVisibility() != 8);
  }
  
  private MenuInflater getMenuInflater()
  {
    return new a.b.h.f.g(getContext());
  }
  
  private void l()
  {
    if (v == null) {
      v = new z0();
    }
  }
  
  private void m()
  {
    if (g == null) {
      g = new o(getContext());
    }
  }
  
  private void n()
  {
    o();
    if (c.j() == null)
    {
      h localH = (h)c.getMenu();
      if (M == null) {
        M = new d();
      }
      c.setExpandedActionViewsExclusive(true);
      localH.a(M, l);
    }
  }
  
  private void o()
  {
    if (c == null)
    {
      c = new ActionMenuView(getContext());
      c.setPopupTheme(m);
      c.setOnMenuItemClickListener(J);
      c.a(N, O);
      e localE = generateDefaultLayoutParams();
      a = (0x800005 | p & 0x70);
      c.setLayoutParams(localE);
      a(c, false);
    }
  }
  
  private void p()
  {
    if (f == null)
    {
      f = new m(getContext(), null, a.b.h.a.a.toolbarNavigationButtonStyle);
      e localE = generateDefaultLayoutParams();
      a = (0x800003 | p & 0x70);
      f.setLayoutParams(localE);
    }
  }
  
  private void q()
  {
    removeCallbacks(Q);
    post(Q);
  }
  
  private boolean r()
  {
    if (!P) {
      return false;
    }
    int i2 = getChildCount();
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = getChildAt(i1);
      if ((d(localView)) && (localView.getMeasuredWidth() > 0) && (localView.getMeasuredHeight() > 0)) {
        return false;
      }
      i1 += 1;
    }
    return true;
  }
  
  void a()
  {
    int i1 = G.size() - 1;
    while (i1 >= 0)
    {
      addView((View)G.get(i1));
      i1 -= 1;
    }
    G.clear();
  }
  
  public void a(int paramInt1, int paramInt2)
  {
    l();
    v.a(paramInt1, paramInt2);
  }
  
  public void a(Context paramContext, int paramInt)
  {
    o = paramInt;
    TextView localTextView = e;
    if (localTextView != null) {
      localTextView.setTextAppearance(paramContext, paramInt);
    }
  }
  
  public void a(h paramH, c paramC)
  {
    if ((paramH == null) && (c == null)) {
      return;
    }
    o();
    h localH = c.j();
    if (localH == paramH) {
      return;
    }
    if (localH != null)
    {
      localH.b(L);
      localH.b(M);
    }
    if (M == null) {
      M = new d();
    }
    paramC.b(true);
    if (paramH != null)
    {
      paramH.a(paramC, l);
      paramH.a(M, l);
    }
    else
    {
      paramC.a(l, null);
      M.a(l, null);
      paramC.a(true);
      M.a(true);
    }
    c.setPopupTheme(m);
    c.setPresenter(paramC);
    L = paramC;
  }
  
  public void a(p.a paramA, h.a paramA1)
  {
    N = paramA;
    O = paramA1;
    ActionMenuView localActionMenuView = c;
    if (localActionMenuView != null) {
      localActionMenuView.a(paramA, paramA1);
    }
  }
  
  public void b(int paramInt1, int paramInt2)
  {
    l();
    v.b(paramInt1, paramInt2);
  }
  
  public void b(Context paramContext, int paramInt)
  {
    n = paramInt;
    TextView localTextView = d;
    if (localTextView != null) {
      localTextView.setTextAppearance(paramContext, paramInt);
    }
  }
  
  public boolean b()
  {
    if (getVisibility() == 0)
    {
      ActionMenuView localActionMenuView = c;
      if ((localActionMenuView != null) && (localActionMenuView.i())) {
        return true;
      }
    }
    return false;
  }
  
  public void c()
  {
    Object localObject = M;
    if (localObject == null) {
      localObject = null;
    } else {
      localObject = d;
    }
    if (localObject != null) {
      ((k)localObject).collapseActionView();
    }
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return (super.checkLayoutParams(paramLayoutParams)) && ((paramLayoutParams instanceof e));
  }
  
  public void d()
  {
    ActionMenuView localActionMenuView = c;
    if (localActionMenuView != null) {
      localActionMenuView.d();
    }
  }
  
  void e()
  {
    if (j == null)
    {
      j = new m(getContext(), null, a.b.h.a.a.toolbarNavigationButtonStyle);
      j.setImageDrawable(h);
      j.setContentDescription(i);
      e localE = generateDefaultLayoutParams();
      a = (0x800003 | p & 0x70);
      b = 2;
      j.setLayoutParams(localE);
      j.setOnClickListener(new c());
    }
  }
  
  public boolean f()
  {
    d localD = M;
    return (localD != null) && (d != null);
  }
  
  public boolean g()
  {
    ActionMenuView localActionMenuView = c;
    return (localActionMenuView != null) && (localActionMenuView.f());
  }
  
  protected e generateDefaultLayoutParams()
  {
    return new e(-2, -2);
  }
  
  public e generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new e(getContext(), paramAttributeSet);
  }
  
  protected e generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    if ((paramLayoutParams instanceof e)) {
      return new e((e)paramLayoutParams);
    }
    if ((paramLayoutParams instanceof a.a)) {
      return new e((a.a)paramLayoutParams);
    }
    if ((paramLayoutParams instanceof ViewGroup.MarginLayoutParams)) {
      return new e((ViewGroup.MarginLayoutParams)paramLayoutParams);
    }
    return new e(paramLayoutParams);
  }
  
  public int getContentInsetEnd()
  {
    z0 localZ0 = v;
    if (localZ0 != null) {
      return localZ0.a();
    }
    return 0;
  }
  
  public int getContentInsetEndWithActions()
  {
    int i1 = x;
    if (i1 != Integer.MIN_VALUE) {
      return i1;
    }
    return getContentInsetEnd();
  }
  
  public int getContentInsetLeft()
  {
    z0 localZ0 = v;
    if (localZ0 != null) {
      return localZ0.b();
    }
    return 0;
  }
  
  public int getContentInsetRight()
  {
    z0 localZ0 = v;
    if (localZ0 != null) {
      return localZ0.c();
    }
    return 0;
  }
  
  public int getContentInsetStart()
  {
    z0 localZ0 = v;
    if (localZ0 != null) {
      return localZ0.d();
    }
    return 0;
  }
  
  public int getContentInsetStartWithNavigation()
  {
    int i1 = w;
    if (i1 != Integer.MIN_VALUE) {
      return i1;
    }
    return getContentInsetStart();
  }
  
  public int getCurrentContentInsetEnd()
  {
    int i1 = 0;
    Object localObject = c;
    if (localObject != null)
    {
      localObject = ((ActionMenuView)localObject).j();
      if ((localObject != null) && (((h)localObject).hasVisibleItems())) {
        i1 = 1;
      } else {
        i1 = 0;
      }
    }
    if (i1 != 0) {
      return Math.max(getContentInsetEnd(), Math.max(x, 0));
    }
    return getContentInsetEnd();
  }
  
  public int getCurrentContentInsetLeft()
  {
    if (u.k(this) == 1) {
      return getCurrentContentInsetEnd();
    }
    return getCurrentContentInsetStart();
  }
  
  public int getCurrentContentInsetRight()
  {
    if (u.k(this) == 1) {
      return getCurrentContentInsetStart();
    }
    return getCurrentContentInsetEnd();
  }
  
  public int getCurrentContentInsetStart()
  {
    if (getNavigationIcon() != null) {
      return Math.max(getContentInsetStart(), Math.max(w, 0));
    }
    return getContentInsetStart();
  }
  
  public Drawable getLogo()
  {
    ImageView localImageView = g;
    if (localImageView != null) {
      return localImageView.getDrawable();
    }
    return null;
  }
  
  public CharSequence getLogoDescription()
  {
    ImageView localImageView = g;
    if (localImageView != null) {
      return localImageView.getContentDescription();
    }
    return null;
  }
  
  public Menu getMenu()
  {
    n();
    return c.getMenu();
  }
  
  public CharSequence getNavigationContentDescription()
  {
    ImageButton localImageButton = f;
    if (localImageButton != null) {
      return localImageButton.getContentDescription();
    }
    return null;
  }
  
  public Drawable getNavigationIcon()
  {
    ImageButton localImageButton = f;
    if (localImageButton != null) {
      return localImageButton.getDrawable();
    }
    return null;
  }
  
  c getOuterActionMenuPresenter()
  {
    return L;
  }
  
  public Drawable getOverflowIcon()
  {
    n();
    return c.getOverflowIcon();
  }
  
  Context getPopupContext()
  {
    return l;
  }
  
  public int getPopupTheme()
  {
    return m;
  }
  
  public CharSequence getSubtitle()
  {
    return A;
  }
  
  public CharSequence getTitle()
  {
    return z;
  }
  
  public int getTitleMarginBottom()
  {
    return u;
  }
  
  public int getTitleMarginEnd()
  {
    return s;
  }
  
  public int getTitleMarginStart()
  {
    return r;
  }
  
  public int getTitleMarginTop()
  {
    return t;
  }
  
  public f0 getWrapper()
  {
    if (K == null) {
      K = new k1(this, true);
    }
    return K;
  }
  
  public boolean h()
  {
    ActionMenuView localActionMenuView = c;
    return (localActionMenuView != null) && (localActionMenuView.g());
  }
  
  public boolean i()
  {
    ActionMenuView localActionMenuView = c;
    return (localActionMenuView != null) && (localActionMenuView.h());
  }
  
  void j()
  {
    int i1 = getChildCount() - 1;
    while (i1 >= 0)
    {
      View localView = getChildAt(i1);
      if ((getLayoutParamsb != 2) && (localView != c))
      {
        removeViewAt(i1);
        G.add(localView);
      }
      i1 -= 1;
    }
  }
  
  public boolean k()
  {
    ActionMenuView localActionMenuView = c;
    return (localActionMenuView != null) && (localActionMenuView.k());
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    removeCallbacks(Q);
  }
  
  public boolean onHoverEvent(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getActionMasked();
    if (i1 == 9) {
      E = false;
    }
    if (!E)
    {
      boolean bool = super.onHoverEvent(paramMotionEvent);
      if ((i1 == 9) && (!bool)) {
        E = true;
      }
    }
    if ((i1 == 10) || (i1 == 3)) {
      E = false;
    }
    return true;
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i3;
    if (u.k(this) == 1) {
      i3 = 1;
    } else {
      i3 = 0;
    }
    int i7 = getWidth();
    int i6 = getHeight();
    int i2 = getPaddingLeft();
    int i8 = getPaddingRight();
    int i5 = getPaddingTop();
    int i9 = getPaddingBottom();
    int i1 = i2;
    int i4 = i7 - i8;
    int[] arrayOfInt = H;
    arrayOfInt[1] = 0;
    arrayOfInt[0] = 0;
    paramInt1 = u.l(this);
    if (paramInt1 >= 0) {
      paramInt3 = Math.min(paramInt1, paramInt4 - paramInt2);
    } else {
      paramInt3 = 0;
    }
    paramInt1 = i1;
    paramInt2 = i4;
    if (d(f)) {
      if (i3 != 0)
      {
        paramInt2 = b(f, i4, arrayOfInt, paramInt3);
        paramInt1 = i1;
      }
      else
      {
        paramInt1 = a(f, i1, arrayOfInt, paramInt3);
        paramInt2 = i4;
      }
    }
    paramInt4 = paramInt1;
    i1 = paramInt2;
    if (d(j)) {
      if (i3 != 0)
      {
        i1 = b(j, paramInt2, arrayOfInt, paramInt3);
        paramInt4 = paramInt1;
      }
      else
      {
        paramInt4 = a(j, paramInt1, arrayOfInt, paramInt3);
        i1 = paramInt2;
      }
    }
    paramInt2 = paramInt4;
    paramInt1 = i1;
    if (d(c)) {
      if (i3 != 0)
      {
        paramInt2 = a(c, paramInt4, arrayOfInt, paramInt3);
        paramInt1 = i1;
      }
      else
      {
        paramInt1 = b(c, i1, arrayOfInt, paramInt3);
        paramInt2 = paramInt4;
      }
    }
    i1 = getCurrentContentInsetLeft();
    paramInt4 = getCurrentContentInsetRight();
    arrayOfInt[0] = Math.max(0, i1 - paramInt2);
    arrayOfInt[1] = Math.max(0, paramInt4 - (i7 - i8 - paramInt1));
    paramInt2 = Math.max(paramInt2, i1);
    paramInt4 = Math.min(paramInt1, i7 - i8 - paramInt4);
    paramInt1 = paramInt2;
    i1 = paramInt4;
    if (d(k)) {
      if (i3 != 0)
      {
        i1 = b(k, paramInt4, arrayOfInt, paramInt3);
        paramInt1 = paramInt2;
      }
      else
      {
        paramInt1 = a(k, paramInt2, arrayOfInt, paramInt3);
        i1 = paramInt4;
      }
    }
    paramInt2 = paramInt1;
    paramInt4 = i1;
    if (d(g)) {
      if (i3 != 0)
      {
        paramInt4 = b(g, i1, arrayOfInt, paramInt3);
        paramInt2 = paramInt1;
      }
      else
      {
        paramInt2 = a(g, paramInt1, arrayOfInt, paramInt3);
        paramInt4 = i1;
      }
    }
    paramBoolean = d(d);
    boolean bool = d(e);
    paramInt1 = 0;
    Object localObject1;
    if (paramBoolean)
    {
      localObject1 = (e)d.getLayoutParams();
      paramInt1 = 0 + (topMargin + d.getMeasuredHeight() + bottomMargin);
    }
    i4 = paramInt1;
    if (bool)
    {
      localObject1 = (e)e.getLayoutParams();
      i4 = paramInt1 + (topMargin + e.getMeasuredHeight() + bottomMargin);
    }
    if ((!paramBoolean) && (!bool))
    {
      paramInt1 = paramInt2;
      paramInt2 = paramInt4;
    }
    else
    {
      if (paramBoolean) {
        localObject1 = d;
      } else {
        localObject1 = e;
      }
      if (bool) {
        localObject2 = e;
      } else {
        localObject2 = d;
      }
      localObject1 = (e)((View)localObject1).getLayoutParams();
      Object localObject2 = (e)((View)localObject2).getLayoutParams();
      if (paramBoolean) {
        if (d.getMeasuredWidth() > 0) {
          break label689;
        }
      }
      if ((bool) && (e.getMeasuredWidth() > 0)) {
        label689:
        i1 = 1;
      } else {
        i1 = 0;
      }
      paramInt1 = y & 0x70;
      if (paramInt1 != 48)
      {
        if (paramInt1 != 80)
        {
          paramInt1 = (i6 - i5 - i9 - i4) / 2;
          int i10 = topMargin;
          int i11 = t;
          if (paramInt1 < i10 + i11)
          {
            paramInt1 = i10 + i11;
          }
          else
          {
            i4 = i6 - i9 - i4 - paramInt1 - i5;
            i6 = bottomMargin;
            i9 = u;
            if (i4 < i6 + i9) {
              paramInt1 = Math.max(0, paramInt1 - (bottomMargin + i9 - i4));
            }
          }
          paramInt1 = i5 + paramInt1;
        }
        else
        {
          paramInt1 = i6 - i9 - bottomMargin - u - i4;
        }
      }
      else {
        paramInt1 = getPaddingTop() + topMargin + t;
      }
      i4 = paramInt2;
      if (i3 != 0)
      {
        if (i1 != 0) {
          paramInt2 = r;
        } else {
          paramInt2 = 0;
        }
        i3 = paramInt2 - arrayOfInt[1];
        paramInt2 = paramInt4 - Math.max(0, i3);
        arrayOfInt[1] = Math.max(0, -i3);
        i3 = paramInt2;
        paramInt4 = paramInt2;
        if (paramBoolean)
        {
          localObject1 = (e)d.getLayoutParams();
          i6 = i3 - d.getMeasuredWidth();
          i5 = d.getMeasuredHeight() + paramInt1;
          d.layout(i6, paramInt1, i3, i5);
          paramInt1 = i6 - s;
          i5 += bottomMargin;
        }
        else
        {
          i5 = paramInt1;
          paramInt1 = i3;
        }
        i3 = paramInt4;
        if (bool)
        {
          localObject1 = (e)e.getLayoutParams();
          i3 = i5 + topMargin;
          i5 = e.getMeasuredWidth();
          i6 = e.getMeasuredHeight() + i3;
          e.layout(paramInt4 - i5, i3, paramInt4, i6);
          i3 = paramInt4 - s;
          paramInt4 = bottomMargin;
        }
        if (i1 != 0) {
          paramInt2 = Math.min(paramInt1, i3);
        }
        paramInt1 = i4;
      }
      else
      {
        if (i1 != 0) {
          paramInt2 = r;
        } else {
          paramInt2 = 0;
        }
        i3 = paramInt2 - arrayOfInt[0];
        paramInt2 = i4 + Math.max(0, i3);
        arrayOfInt[0] = Math.max(0, -i3);
        i4 = paramInt2;
        i3 = paramInt2;
        if (paramBoolean)
        {
          localObject1 = (e)d.getLayoutParams();
          i6 = d.getMeasuredWidth() + i4;
          i5 = d.getMeasuredHeight() + paramInt1;
          d.layout(i4, paramInt1, i6, i5);
          i4 = i6 + s;
          i5 += bottomMargin;
        }
        else
        {
          i5 = paramInt1;
        }
        paramInt1 = paramInt2;
        i6 = i3;
        if (bool)
        {
          localObject1 = (e)e.getLayoutParams();
          paramInt2 = i5 + topMargin;
          i5 = e.getMeasuredWidth() + i3;
          i6 = e.getMeasuredHeight() + paramInt2;
          e.layout(i3, paramInt2, i5, i6);
          i6 = i5 + s;
          paramInt2 = bottomMargin;
        }
        paramInt2 = paramInt4;
        if (i1 != 0)
        {
          paramInt1 = Math.max(i4, i6);
          paramInt2 = paramInt4;
        }
      }
    }
    paramInt4 = paramInt3;
    a(F, 3);
    i1 = F.size();
    paramInt3 = 0;
    while (paramInt3 < i1)
    {
      paramInt1 = a((View)F.get(paramInt3), paramInt1, arrayOfInt, paramInt4);
      paramInt3 += 1;
    }
    a(F, 5);
    i1 = F.size();
    paramInt3 = 0;
    while (paramInt3 < i1)
    {
      paramInt2 = b((View)F.get(paramInt3), paramInt2, arrayOfInt, paramInt4);
      paramInt3 += 1;
    }
    a(F, 1);
    i1 = a(F, arrayOfInt);
    paramInt3 = i2 + (i7 - i2 - i8) / 2 - i1 / 2;
    i1 = paramInt3 + i1;
    if (paramInt3 >= paramInt1)
    {
      paramInt1 = paramInt3;
      if (i1 > paramInt2) {
        paramInt1 = paramInt3 - (i1 - paramInt2);
      }
    }
    paramInt2 = F.size();
    paramInt3 = paramInt1;
    paramInt1 = 0;
    while (paramInt1 < paramInt2)
    {
      paramInt3 = a((View)F.get(paramInt1), paramInt3, arrayOfInt, paramInt4);
      paramInt1 += 1;
    }
    F.clear();
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i4 = 0;
    int i3 = 0;
    int[] arrayOfInt = H;
    if (r1.a(this))
    {
      i7 = 1;
      i6 = 0;
    }
    else
    {
      i7 = 0;
      i6 = 1;
    }
    int i5 = 0;
    if (d(f))
    {
      a(f, paramInt1, 0, paramInt2, 0, q);
      i5 = f.getMeasuredWidth() + a(f);
      i4 = Math.max(0, f.getMeasuredHeight() + b(f));
      i3 = View.combineMeasuredStates(0, f.getMeasuredState());
    }
    int i2 = i4;
    int i1 = i3;
    if (d(j))
    {
      a(j, paramInt1, 0, paramInt2, 0, q);
      i5 = j.getMeasuredWidth() + a(j);
      i2 = Math.max(i4, j.getMeasuredHeight() + b(j));
      i1 = View.combineMeasuredStates(i3, j.getMeasuredState());
    }
    i3 = getCurrentContentInsetStart();
    i4 = 0 + Math.max(i3, i5);
    arrayOfInt[i7] = Math.max(0, i3 - i5);
    if (d(c))
    {
      a(c, paramInt1, i4, paramInt2, 0, q);
      i5 = c.getMeasuredWidth();
      i7 = a(c);
      i2 = Math.max(i2, c.getMeasuredHeight() + b(c));
      i3 = View.combineMeasuredStates(i1, c.getMeasuredState());
      i1 = i5 + i7;
    }
    else
    {
      i3 = i1;
      i1 = 0;
    }
    int i7 = getCurrentContentInsetEnd();
    i5 = i4 + Math.max(i7, i1);
    arrayOfInt[i6] = Math.max(0, i7 - i1);
    if (d(k))
    {
      i5 += a(k, paramInt1, i5, paramInt2, 0, arrayOfInt);
      i4 = Math.max(i2, k.getMeasuredHeight() + b(k));
      i3 = View.combineMeasuredStates(i3, k.getMeasuredState());
    }
    else
    {
      i4 = i2;
    }
    int i6 = i5;
    i7 = i4;
    i2 = i3;
    if (d(g))
    {
      i6 = i5 + a(g, paramInt1, i5, paramInt2, 0, arrayOfInt);
      i7 = Math.max(i4, g.getMeasuredHeight() + b(g));
      i2 = View.combineMeasuredStates(i3, g.getMeasuredState());
    }
    i4 = getChildCount();
    i5 = 0;
    i3 = i1;
    i1 = i7;
    while (i5 < i4)
    {
      View localView = getChildAt(i5);
      if ((getLayoutParamsb == 0) && (d(localView)))
      {
        i6 += a(localView, paramInt1, i6, paramInt2, 0, arrayOfInt);
        i1 = Math.max(i1, localView.getMeasuredHeight() + b(localView));
        i2 = View.combineMeasuredStates(i2, localView.getMeasuredState());
      }
      i5 += 1;
    }
    i5 = 0;
    i4 = 0;
    i7 = t + u;
    int i8 = r + s;
    i3 = i2;
    if (d(d))
    {
      a(d, paramInt1, i6 + i8, paramInt2, i7, arrayOfInt);
      i5 = d.getMeasuredWidth() + a(d);
      i4 = d.getMeasuredHeight() + b(d);
      i3 = View.combineMeasuredStates(i2, d.getMeasuredState());
    }
    if (d(e))
    {
      i5 = Math.max(i5, a(e, paramInt1, i6 + i8, paramInt2, i4 + i7, arrayOfInt));
      i2 = e.getMeasuredHeight();
      i7 = b(e);
      i3 = View.combineMeasuredStates(i3, e.getMeasuredState());
      i4 += i2 + i7;
    }
    i1 = Math.max(i1, i4);
    i7 = getPaddingLeft();
    i8 = getPaddingRight();
    i2 = getPaddingTop();
    i4 = getPaddingBottom();
    i5 = View.resolveSizeAndState(Math.max(i6 + i5 + (i7 + i8), getSuggestedMinimumWidth()), paramInt1, 0xFF000000 & i3);
    paramInt1 = View.resolveSizeAndState(Math.max(i1 + (i2 + i4), getSuggestedMinimumHeight()), paramInt2, i3 << 16);
    if (r()) {
      paramInt1 = 0;
    }
    setMeasuredDimension(i5, paramInt1);
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof g))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    g localG = (g)paramParcelable;
    super.onRestoreInstanceState(localG.a());
    paramParcelable = c;
    if (paramParcelable != null) {
      paramParcelable = paramParcelable.j();
    } else {
      paramParcelable = null;
    }
    int i1 = e;
    if ((i1 != 0) && (M != null) && (paramParcelable != null))
    {
      paramParcelable = paramParcelable.findItem(i1);
      if (paramParcelable != null) {
        paramParcelable.expandActionView();
      }
    }
    if (f) {
      q();
    }
  }
  
  public void onRtlPropertiesChanged(int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 17) {
      super.onRtlPropertiesChanged(paramInt);
    }
    l();
    z0 localZ0 = v;
    boolean bool = true;
    if (paramInt != 1) {
      bool = false;
    }
    localZ0.a(bool);
  }
  
  protected Parcelable onSaveInstanceState()
  {
    g localG = new g(super.onSaveInstanceState());
    Object localObject = M;
    if (localObject != null)
    {
      localObject = d;
      if (localObject != null) {
        e = ((k)localObject).getItemId();
      }
    }
    f = i();
    return localG;
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getActionMasked();
    if (i1 == 0) {
      D = false;
    }
    if (!D)
    {
      boolean bool = super.onTouchEvent(paramMotionEvent);
      if ((i1 == 0) && (!bool)) {
        D = true;
      }
    }
    if ((i1 == 1) || (i1 == 3)) {
      D = false;
    }
    return true;
  }
  
  public void setCollapsible(boolean paramBoolean)
  {
    P = paramBoolean;
    requestLayout();
  }
  
  public void setContentInsetEndWithActions(int paramInt)
  {
    int i1 = paramInt;
    if (paramInt < 0) {
      i1 = Integer.MIN_VALUE;
    }
    if (i1 != x)
    {
      x = i1;
      if (getNavigationIcon() != null) {
        requestLayout();
      }
    }
  }
  
  public void setContentInsetStartWithNavigation(int paramInt)
  {
    int i1 = paramInt;
    if (paramInt < 0) {
      i1 = Integer.MIN_VALUE;
    }
    if (i1 != w)
    {
      w = i1;
      if (getNavigationIcon() != null) {
        requestLayout();
      }
    }
  }
  
  public void setLogo(int paramInt)
  {
    setLogo(a.b.h.c.a.a.c(getContext(), paramInt));
  }
  
  public void setLogo(Drawable paramDrawable)
  {
    if (paramDrawable != null)
    {
      m();
      if (!c(g)) {
        a(g, true);
      }
    }
    else
    {
      localImageView = g;
      if ((localImageView != null) && (c(localImageView)))
      {
        removeView(g);
        G.remove(g);
      }
    }
    ImageView localImageView = g;
    if (localImageView != null) {
      localImageView.setImageDrawable(paramDrawable);
    }
  }
  
  public void setLogoDescription(int paramInt)
  {
    setLogoDescription(getContext().getText(paramInt));
  }
  
  public void setLogoDescription(CharSequence paramCharSequence)
  {
    if (!TextUtils.isEmpty(paramCharSequence)) {
      m();
    }
    ImageView localImageView = g;
    if (localImageView != null) {
      localImageView.setContentDescription(paramCharSequence);
    }
  }
  
  public void setNavigationContentDescription(int paramInt)
  {
    CharSequence localCharSequence;
    if (paramInt != 0) {
      localCharSequence = getContext().getText(paramInt);
    } else {
      localCharSequence = null;
    }
    setNavigationContentDescription(localCharSequence);
  }
  
  public void setNavigationContentDescription(CharSequence paramCharSequence)
  {
    if (!TextUtils.isEmpty(paramCharSequence)) {
      p();
    }
    ImageButton localImageButton = f;
    if (localImageButton != null) {
      localImageButton.setContentDescription(paramCharSequence);
    }
  }
  
  public void setNavigationIcon(int paramInt)
  {
    setNavigationIcon(a.b.h.c.a.a.c(getContext(), paramInt));
  }
  
  public void setNavigationIcon(Drawable paramDrawable)
  {
    if (paramDrawable != null)
    {
      p();
      if (!c(f)) {
        a(f, true);
      }
    }
    else
    {
      localImageButton = f;
      if ((localImageButton != null) && (c(localImageButton)))
      {
        removeView(f);
        G.remove(f);
      }
    }
    ImageButton localImageButton = f;
    if (localImageButton != null) {
      localImageButton.setImageDrawable(paramDrawable);
    }
  }
  
  public void setNavigationOnClickListener(View.OnClickListener paramOnClickListener)
  {
    p();
    f.setOnClickListener(paramOnClickListener);
  }
  
  public void setOnMenuItemClickListener(f paramF)
  {
    I = paramF;
  }
  
  public void setOverflowIcon(Drawable paramDrawable)
  {
    n();
    c.setOverflowIcon(paramDrawable);
  }
  
  public void setPopupTheme(int paramInt)
  {
    if (m != paramInt)
    {
      m = paramInt;
      if (paramInt == 0)
      {
        l = getContext();
        return;
      }
      l = new ContextThemeWrapper(getContext(), paramInt);
    }
  }
  
  public void setSubtitle(int paramInt)
  {
    setSubtitle(getContext().getText(paramInt));
  }
  
  public void setSubtitle(CharSequence paramCharSequence)
  {
    if (!TextUtils.isEmpty(paramCharSequence))
    {
      if (e == null)
      {
        localObject = getContext();
        e = new AppCompatTextView((Context)localObject);
        e.setSingleLine();
        e.setEllipsize(TextUtils.TruncateAt.END);
        int i1 = o;
        if (i1 != 0) {
          e.setTextAppearance((Context)localObject, i1);
        }
        i1 = C;
        if (i1 != 0) {
          e.setTextColor(i1);
        }
      }
      if (!c(e)) {
        a(e, true);
      }
    }
    else
    {
      localObject = e;
      if ((localObject != null) && (c((View)localObject)))
      {
        removeView(e);
        G.remove(e);
      }
    }
    Object localObject = e;
    if (localObject != null) {
      ((TextView)localObject).setText(paramCharSequence);
    }
    A = paramCharSequence;
  }
  
  public void setSubtitleTextColor(int paramInt)
  {
    C = paramInt;
    TextView localTextView = e;
    if (localTextView != null) {
      localTextView.setTextColor(paramInt);
    }
  }
  
  public void setTitle(int paramInt)
  {
    setTitle(getContext().getText(paramInt));
  }
  
  public void setTitle(CharSequence paramCharSequence)
  {
    if (!TextUtils.isEmpty(paramCharSequence))
    {
      if (d == null)
      {
        localObject = getContext();
        d = new AppCompatTextView((Context)localObject);
        d.setSingleLine();
        d.setEllipsize(TextUtils.TruncateAt.END);
        int i1 = n;
        if (i1 != 0) {
          d.setTextAppearance((Context)localObject, i1);
        }
        i1 = B;
        if (i1 != 0) {
          d.setTextColor(i1);
        }
      }
      if (!c(d)) {
        a(d, true);
      }
    }
    else
    {
      localObject = d;
      if ((localObject != null) && (c((View)localObject)))
      {
        removeView(d);
        G.remove(d);
      }
    }
    Object localObject = d;
    if (localObject != null) {
      ((TextView)localObject).setText(paramCharSequence);
    }
    z = paramCharSequence;
  }
  
  public void setTitleMarginBottom(int paramInt)
  {
    u = paramInt;
    requestLayout();
  }
  
  public void setTitleMarginEnd(int paramInt)
  {
    s = paramInt;
    requestLayout();
  }
  
  public void setTitleMarginStart(int paramInt)
  {
    r = paramInt;
    requestLayout();
  }
  
  public void setTitleMarginTop(int paramInt)
  {
    t = paramInt;
    requestLayout();
  }
  
  public void setTitleTextColor(int paramInt)
  {
    B = paramInt;
    TextView localTextView = d;
    if (localTextView != null) {
      localTextView.setTextColor(paramInt);
    }
  }
  
  class a
    implements ActionMenuView.e
  {
    a() {}
    
    public boolean onMenuItemClick(MenuItem paramMenuItem)
    {
      Toolbar.f localF = I;
      if (localF != null) {
        return localF.onMenuItemClick(paramMenuItem);
      }
      return false;
    }
  }
  
  class b
    implements Runnable
  {
    b() {}
    
    public void run()
    {
      k();
    }
  }
  
  class c
    implements View.OnClickListener
  {
    c() {}
    
    public void onClick(View paramView)
    {
      c();
    }
  }
  
  private class d
    implements p
  {
    h c;
    k d;
    
    d() {}
    
    public int a()
    {
      return 0;
    }
    
    public void a(Context paramContext, h paramH)
    {
      paramContext = c;
      if (paramContext != null)
      {
        k localK = d;
        if (localK != null) {
          paramContext.a(localK);
        }
      }
      c = paramH;
    }
    
    public void a(Parcelable paramParcelable) {}
    
    public void a(h paramH, boolean paramBoolean) {}
    
    public void a(boolean paramBoolean)
    {
      if (d != null)
      {
        int k = 0;
        h localH = c;
        int j = k;
        if (localH != null)
        {
          int m = localH.size();
          int i = 0;
          for (;;)
          {
            j = k;
            if (i >= m) {
              break;
            }
            if (c.getItem(i) == d)
            {
              j = 1;
              break;
            }
            i += 1;
          }
        }
        if (j == 0) {
          a(c, d);
        }
      }
    }
    
    public boolean a(h paramH, k paramK)
    {
      paramH = k;
      if ((paramH instanceof a.b.h.f.c)) {
        ((a.b.h.f.c)paramH).c();
      }
      paramH = Toolbar.this;
      paramH.removeView(k);
      paramH = Toolbar.this;
      paramH.removeView(j);
      paramH = Toolbar.this;
      k = null;
      paramH.a();
      d = null;
      requestLayout();
      paramK.a(false);
      return true;
    }
    
    public boolean a(v paramV)
    {
      return false;
    }
    
    public boolean b()
    {
      return false;
    }
    
    public boolean b(h paramH, k paramK)
    {
      e();
      paramH = j.getParent();
      Toolbar localToolbar = Toolbar.this;
      if (paramH != localToolbar)
      {
        if ((paramH instanceof ViewGroup)) {
          ((ViewGroup)paramH).removeView(j);
        }
        paramH = Toolbar.this;
        paramH.addView(j);
      }
      k = paramK.getActionView();
      d = paramK;
      paramH = k.getParent();
      localToolbar = Toolbar.this;
      if (paramH != localToolbar)
      {
        if ((paramH instanceof ViewGroup)) {
          ((ViewGroup)paramH).removeView(k);
        }
        paramH = generateDefaultLayoutParams();
        localToolbar = Toolbar.this;
        a = (0x800003 | p & 0x70);
        b = 2;
        k.setLayoutParams(paramH);
        paramH = Toolbar.this;
        paramH.addView(k);
      }
      j();
      requestLayout();
      paramK.a(true);
      paramH = k;
      if ((paramH instanceof a.b.h.f.c)) {
        ((a.b.h.f.c)paramH).b();
      }
      return true;
    }
    
    public Parcelable c()
    {
      return null;
    }
  }
  
  public static class e
    extends a.a
  {
    int b = 0;
    
    public e(int paramInt1, int paramInt2)
    {
      super(paramInt2);
      a = 8388627;
    }
    
    public e(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
    }
    
    public e(a.a paramA)
    {
      super();
    }
    
    public e(e paramE)
    {
      super();
      b = b;
    }
    
    public e(ViewGroup.LayoutParams paramLayoutParams)
    {
      super();
    }
    
    public e(ViewGroup.MarginLayoutParams paramMarginLayoutParams)
    {
      super();
      a(paramMarginLayoutParams);
    }
    
    void a(ViewGroup.MarginLayoutParams paramMarginLayoutParams)
    {
      leftMargin = leftMargin;
      topMargin = topMargin;
      rightMargin = rightMargin;
      bottomMargin = bottomMargin;
    }
  }
  
  public static abstract interface f
  {
    public abstract boolean onMenuItemClick(MenuItem paramMenuItem);
  }
  
  public static class g
    extends android.support.v4.view.a
  {
    public static final Parcelable.Creator<g> CREATOR = new a();
    int e;
    boolean f;
    
    public g(Parcel paramParcel, ClassLoader paramClassLoader)
    {
      super(paramClassLoader);
      e = paramParcel.readInt();
      boolean bool;
      if (paramParcel.readInt() != 0) {
        bool = true;
      } else {
        bool = false;
      }
      f = bool;
    }
    
    public g(Parcelable paramParcelable)
    {
      super();
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      throw new Runtime("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.provideAs(TypeTransformer.java:780)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.e1expr(TypeTransformer.java:496)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:713)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.enexpr(TypeTransformer.java:698)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:719)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.s1stmt(TypeTransformer.java:810)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.sxStmt(TypeTransformer.java:840)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:206)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
    }
    
    static final class a
      implements Parcelable.ClassLoaderCreator<Toolbar.g>
    {
      a() {}
      
      public Toolbar.g createFromParcel(Parcel paramParcel)
      {
        return new Toolbar.g(paramParcel, null);
      }
      
      public Toolbar.g createFromParcel(Parcel paramParcel, ClassLoader paramClassLoader)
      {
        return new Toolbar.g(paramParcel, paramClassLoader);
      }
      
      public Toolbar.g[] newArray(int paramInt)
      {
        return new Toolbar.g[paramInt];
      }
    }
  }
}
