package android.support.v7.widget;

import a.b.h.a.f;
import a.b.h.a.g;
import a.b.h.a.h;
import a.b.h.a.j;
import a.b.h.f.c;
import android.app.PendingIntent;
import android.app.SearchableInfo;
import android.content.ActivityNotFoundException;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Drawable.ConstantState;
import android.net.Uri;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.ClassLoaderCreator;
import android.os.Parcelable.Creator;
import android.support.v4.view.u;
import android.text.Editable;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.style.ImageSpan;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.TypedValue;
import android.view.KeyEvent;
import android.view.KeyEvent.DispatcherState;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.TouchDelegate;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.View.OnKeyListener;
import android.view.View.OnLayoutChangeListener;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputConnection;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.AutoCompleteTextView;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;
import java.lang.reflect.Method;
import java.util.WeakHashMap;

public class SearchView
  extends o0
  implements c
{
  static final k s0 = new k();
  private p A;
  private Rect B = new Rect();
  private Rect C = new Rect();
  private int[] D = new int[2];
  private int[] E = new int[2];
  private final ImageView F;
  private final Drawable G;
  private final int H;
  private final int I;
  private final Intent J;
  private final Intent K;
  private final CharSequence L;
  private m M;
  private l N;
  View.OnFocusChangeListener O;
  private n P;
  private View.OnClickListener Q;
  private boolean R;
  private boolean S;
  android.support.v4.widget.d T;
  private boolean U;
  private CharSequence V;
  private boolean W;
  private boolean a0;
  private int b0;
  private boolean c0;
  private CharSequence d0;
  private CharSequence e0;
  private boolean f0;
  private int g0;
  SearchableInfo h0;
  private Bundle i0;
  private final Runnable j0 = new b();
  private Runnable k0 = new c();
  private final WeakHashMap<String, Drawable.ConstantState> l0 = new WeakHashMap();
  private final View.OnClickListener m0 = new f();
  View.OnKeyListener n0 = new g();
  private final TextView.OnEditorActionListener o0 = new h();
  private final AdapterView.OnItemClickListener p0 = new i();
  private final AdapterView.OnItemSelectedListener q0 = new j();
  final SearchAutoComplete r;
  private TextWatcher r0 = new a();
  private final View s;
  private final View t;
  private final View u;
  final ImageView v;
  final ImageView w;
  final ImageView x;
  final ImageView y;
  private final View z;
  
  public SearchView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public SearchView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, a.b.h.a.a.searchViewStyle);
  }
  
  public SearchView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    paramAttributeSet = j1.a(paramContext, paramAttributeSet, j.SearchView, paramInt, 0);
    LayoutInflater.from(paramContext).inflate(paramAttributeSet.g(j.SearchView_layout, g.abc_search_view), this, true);
    r = ((SearchAutoComplete)findViewById(f.search_src_text));
    r.setSearchView(this);
    s = findViewById(f.search_edit_frame);
    t = findViewById(f.search_plate);
    u = findViewById(f.submit_area);
    v = ((ImageView)findViewById(f.search_button));
    w = ((ImageView)findViewById(f.search_go_btn));
    x = ((ImageView)findViewById(f.search_close_btn));
    y = ((ImageView)findViewById(f.search_voice_btn));
    F = ((ImageView)findViewById(f.search_mag_icon));
    u.a(t, paramAttributeSet.b(j.SearchView_queryBackground));
    u.a(u, paramAttributeSet.b(j.SearchView_submitBackground));
    v.setImageDrawable(paramAttributeSet.b(j.SearchView_searchIcon));
    w.setImageDrawable(paramAttributeSet.b(j.SearchView_goIcon));
    x.setImageDrawable(paramAttributeSet.b(j.SearchView_closeIcon));
    y.setImageDrawable(paramAttributeSet.b(j.SearchView_voiceIcon));
    F.setImageDrawable(paramAttributeSet.b(j.SearchView_searchIcon));
    G = paramAttributeSet.b(j.SearchView_searchHintIcon);
    l1.a(v, getResources().getString(h.abc_searchview_description_search));
    H = paramAttributeSet.g(j.SearchView_suggestionRowLayout, g.abc_search_dropdown_item_icons_2line);
    I = paramAttributeSet.g(j.SearchView_commitIcon, 0);
    v.setOnClickListener(m0);
    x.setOnClickListener(m0);
    w.setOnClickListener(m0);
    y.setOnClickListener(m0);
    r.setOnClickListener(m0);
    r.addTextChangedListener(r0);
    r.setOnEditorActionListener(o0);
    r.setOnItemClickListener(p0);
    r.setOnItemSelectedListener(q0);
    r.setOnKeyListener(n0);
    r.setOnFocusChangeListener(new d());
    setIconifiedByDefault(paramAttributeSet.a(j.SearchView_iconifiedByDefault, true));
    paramInt = paramAttributeSet.c(j.SearchView_android_maxWidth, -1);
    if (paramInt != -1) {
      setMaxWidth(paramInt);
    }
    L = paramAttributeSet.e(j.SearchView_defaultQueryHint);
    V = paramAttributeSet.e(j.SearchView_queryHint);
    paramInt = paramAttributeSet.d(j.SearchView_android_imeOptions, -1);
    if (paramInt != -1) {
      setImeOptions(paramInt);
    }
    paramInt = paramAttributeSet.d(j.SearchView_android_inputType, -1);
    if (paramInt != -1) {
      setInputType(paramInt);
    }
    setFocusable(paramAttributeSet.a(j.SearchView_android_focusable, true));
    paramAttributeSet.a();
    J = new Intent("android.speech.action.WEB_SEARCH");
    J.addFlags(268435456);
    J.putExtra("android.speech.extra.LANGUAGE_MODEL", "web_search");
    K = new Intent("android.speech.action.RECOGNIZE_SPEECH");
    K.addFlags(268435456);
    z = findViewById(r.getDropDownAnchor());
    paramContext = z;
    if (paramContext != null) {
      paramContext.addOnLayoutChangeListener(new e());
    }
    b(R);
    r();
  }
  
  private Intent a(Intent paramIntent, SearchableInfo paramSearchableInfo)
  {
    ComponentName localComponentName = paramSearchableInfo.getSearchActivity();
    Object localObject = new Intent("android.intent.action.SEARCH");
    ((Intent)localObject).setComponent(localComponentName);
    PendingIntent localPendingIntent = PendingIntent.getActivity(getContext(), 0, (Intent)localObject, 1073741824);
    Bundle localBundle = new Bundle();
    localObject = i0;
    if (localObject != null) {
      localBundle.putParcelable("app_data", (Parcelable)localObject);
    }
    Intent localIntent = new Intent(paramIntent);
    paramIntent = "free_form";
    localObject = null;
    String str = null;
    int i = 1;
    Resources localResources = getResources();
    if (paramSearchableInfo.getVoiceLanguageModeId() != 0) {
      paramIntent = localResources.getString(paramSearchableInfo.getVoiceLanguageModeId());
    }
    if (paramSearchableInfo.getVoicePromptTextId() != 0) {
      localObject = localResources.getString(paramSearchableInfo.getVoicePromptTextId());
    }
    if (paramSearchableInfo.getVoiceLanguageId() != 0) {
      str = localResources.getString(paramSearchableInfo.getVoiceLanguageId());
    }
    if (paramSearchableInfo.getVoiceMaxResults() != 0) {
      i = paramSearchableInfo.getVoiceMaxResults();
    }
    localIntent.putExtra("android.speech.extra.LANGUAGE_MODEL", paramIntent);
    localIntent.putExtra("android.speech.extra.PROMPT", (String)localObject);
    localIntent.putExtra("android.speech.extra.LANGUAGE", str);
    localIntent.putExtra("android.speech.extra.MAX_RESULTS", i);
    if (localComponentName == null) {
      paramIntent = null;
    } else {
      paramIntent = localComponentName.flattenToShortString();
    }
    localIntent.putExtra("calling_package", paramIntent);
    localIntent.putExtra("android.speech.extra.RESULTS_PENDINGINTENT", localPendingIntent);
    localIntent.putExtra("android.speech.extra.RESULTS_PENDINGINTENT_BUNDLE", localBundle);
    return localIntent;
  }
  
  private Intent a(Cursor paramCursor, int paramInt, String paramString)
  {
    Object localObject2;
    try
    {
      localObject2 = d1.a(paramCursor, "suggest_intent_action");
      localObject1 = localObject2;
      if (localObject2 != null) {
        break label219;
      }
      localObject1 = h0.getSuggestIntentAction();
    }
    catch (RuntimeException paramString)
    {
      try
      {
        String str;
        StringBuilder localStringBuilder;
        paramInt = paramCursor.getPosition();
      }
      catch (RuntimeException paramCursor)
      {
        paramInt = -1;
      }
      paramCursor = new StringBuilder();
      paramCursor.append("Search suggestions cursor at row ");
      paramCursor.append(paramInt);
      paramCursor.append(" returned exception.");
      Log.w("SearchView", paramCursor.toString(), paramString);
      return null;
    }
    str = d1.a(paramCursor, "suggest_intent_data");
    Object localObject1 = str;
    if (str == null) {
      localObject1 = h0.getSuggestIntentData();
    }
    if (localObject1 != null)
    {
      str = d1.a(paramCursor, "suggest_intent_data_id");
      if (str != null)
      {
        localStringBuilder = new StringBuilder();
        localStringBuilder.append((String)localObject1);
        localStringBuilder.append("/");
        localStringBuilder.append(Uri.encode(str));
        localObject1 = localStringBuilder.toString();
      }
    }
    label123:
    for (localObject1 = Uri.parse((String)localObject1);; localObject1 = null)
    {
      str = d1.a(paramCursor, "suggest_intent_query");
      paramString = a((String)localObject2, (Uri)localObject1, d1.a(paramCursor, "suggest_intent_extra_data"), str, paramInt, paramString);
      return paramString;
      label219:
      localObject2 = localObject1;
      if (localObject1 != null) {
        break;
      }
      localObject2 = "android.intent.action.SEARCH";
      break;
      if (localObject1 != null) {
        break label123;
      }
    }
  }
  
  private Intent a(String paramString1, Uri paramUri, String paramString2, String paramString3, int paramInt, String paramString4)
  {
    paramString1 = new Intent(paramString1);
    paramString1.addFlags(268435456);
    if (paramUri != null) {
      paramString1.setData(paramUri);
    }
    paramString1.putExtra("user_query", e0);
    if (paramString3 != null) {
      paramString1.putExtra("query", paramString3);
    }
    if (paramString2 != null) {
      paramString1.putExtra("intent_extra_data_key", paramString2);
    }
    paramUri = i0;
    if (paramUri != null) {
      paramString1.putExtra("app_data", paramUri);
    }
    if (paramInt != 0)
    {
      paramString1.putExtra("action_key", paramInt);
      paramString1.putExtra("action_msg", paramString4);
    }
    paramString1.setComponent(h0.getSearchActivity());
    return paramString1;
  }
  
  private void a(Intent paramIntent)
  {
    if (paramIntent == null) {
      return;
    }
    try
    {
      getContext().startActivity(paramIntent);
      return;
    }
    catch (RuntimeException localRuntimeException)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Failed launch activity: ");
      localStringBuilder.append(paramIntent);
      Log.e("SearchView", localStringBuilder.toString(), localRuntimeException);
    }
  }
  
  private void a(View paramView, Rect paramRect)
  {
    paramView.getLocationInWindow(D);
    getLocationInWindow(E);
    int[] arrayOfInt1 = D;
    int i = arrayOfInt1[1];
    int[] arrayOfInt2 = E;
    i -= arrayOfInt2[1];
    int j = arrayOfInt1[0] - arrayOfInt2[0];
    paramRect.set(j, i, paramView.getWidth() + j, paramView.getHeight() + i);
  }
  
  private void a(boolean paramBoolean)
  {
    int j = 8;
    int i = j;
    if (U)
    {
      i = j;
      if (o())
      {
        i = j;
        if (hasFocus()) {
          if (!paramBoolean)
          {
            i = j;
            if (c0) {}
          }
          else
          {
            i = 0;
          }
        }
      }
    }
    w.setVisibility(i);
  }
  
  static boolean a(Context paramContext)
  {
    return getResourcesgetConfigurationorientation == 2;
  }
  
  private Intent b(Intent paramIntent, SearchableInfo paramSearchableInfo)
  {
    Intent localIntent = new Intent(paramIntent);
    paramIntent = paramSearchableInfo.getSearchActivity();
    if (paramIntent == null) {
      paramIntent = null;
    } else {
      paramIntent = paramIntent.flattenToShortString();
    }
    localIntent.putExtra("calling_package", paramIntent);
    return localIntent;
  }
  
  private void b(boolean paramBoolean)
  {
    S = paramBoolean;
    int j = 8;
    boolean bool1 = false;
    int i;
    if (paramBoolean) {
      i = 0;
    } else {
      i = 8;
    }
    boolean bool2 = TextUtils.isEmpty(r.getText()) ^ true;
    v.setVisibility(i);
    a(bool2);
    View localView = s;
    if (paramBoolean) {
      i = j;
    } else {
      i = 0;
    }
    localView.setVisibility(i);
    if ((F.getDrawable() != null) && (!R)) {
      i = 0;
    } else {
      i = 8;
    }
    F.setVisibility(i);
    q();
    paramBoolean = bool1;
    if (!bool2) {
      paramBoolean = true;
    }
    c(paramBoolean);
    t();
  }
  
  private boolean b(int paramInt1, int paramInt2, String paramString)
  {
    Cursor localCursor = T.a();
    if ((localCursor != null) && (localCursor.moveToPosition(paramInt1)))
    {
      a(a(localCursor, paramInt2, paramString));
      return true;
    }
    return false;
  }
  
  private CharSequence c(CharSequence paramCharSequence)
  {
    if (R)
    {
      if (G == null) {
        return paramCharSequence;
      }
      double d = r.getTextSize();
      Double.isNaN(d);
      int i = (int)(d * 1.25D);
      G.setBounds(0, 0, i, i);
      SpannableStringBuilder localSpannableStringBuilder = new SpannableStringBuilder("   ");
      localSpannableStringBuilder.setSpan(new ImageSpan(G), 1, 2, 33);
      localSpannableStringBuilder.append(paramCharSequence);
      return localSpannableStringBuilder;
    }
    return paramCharSequence;
  }
  
  private void c(boolean paramBoolean)
  {
    int j = 8;
    int i = j;
    if (c0)
    {
      i = j;
      if (!f())
      {
        i = j;
        if (paramBoolean)
        {
          i = 0;
          w.setVisibility(8);
        }
      }
    }
    y.setVisibility(i);
  }
  
  private void e(int paramInt)
  {
    Editable localEditable = r.getText();
    Object localObject = T.a();
    if (localObject == null) {
      return;
    }
    if (((Cursor)localObject).moveToPosition(paramInt))
    {
      localObject = T.a((Cursor)localObject);
      if (localObject != null) {
        setQuery((CharSequence)localObject);
      } else {
        setQuery(localEditable);
      }
      return;
    }
    setQuery(localEditable);
  }
  
  private int getPreferredHeight()
  {
    return getContext().getResources().getDimensionPixelSize(a.b.h.a.d.abc_search_view_preferred_height);
  }
  
  private int getPreferredWidth()
  {
    return getContext().getResources().getDimensionPixelSize(a.b.h.a.d.abc_search_view_preferred_width);
  }
  
  private void m()
  {
    r.dismissDropDown();
  }
  
  private boolean n()
  {
    Object localObject = h0;
    boolean bool = false;
    if ((localObject != null) && (((SearchableInfo)localObject).getVoiceSearchEnabled()))
    {
      localObject = null;
      if (h0.getVoiceSearchLaunchWebSearch()) {
        localObject = J;
      } else if (h0.getVoiceSearchLaunchRecognizer()) {
        localObject = K;
      }
      if (localObject != null)
      {
        if (getContext().getPackageManager().resolveActivity((Intent)localObject, 65536) != null) {
          bool = true;
        }
        return bool;
      }
    }
    return false;
  }
  
  private boolean o()
  {
    return ((U) || (c0)) && (!f());
  }
  
  private void p()
  {
    post(j0);
  }
  
  private void q()
  {
    boolean bool = TextUtils.isEmpty(r.getText());
    int k = 1;
    int m = bool ^ true;
    int j = 0;
    int i = k;
    if (m == 0) {
      if ((R) && (!f0)) {
        i = k;
      } else {
        i = 0;
      }
    }
    Object localObject = x;
    if (i != 0) {
      i = j;
    } else {
      i = 8;
    }
    ((ImageView)localObject).setVisibility(i);
    Drawable localDrawable = x.getDrawable();
    if (localDrawable != null)
    {
      if (m != 0) {
        localObject = ViewGroup.ENABLED_STATE_SET;
      } else {
        localObject = ViewGroup.EMPTY_STATE_SET;
      }
      localDrawable.setState((int[])localObject);
    }
  }
  
  private void r()
  {
    Object localObject = getQueryHint();
    SearchAutoComplete localSearchAutoComplete = r;
    if (localObject == null) {
      localObject = "";
    }
    localSearchAutoComplete.setHint(c((CharSequence)localObject));
  }
  
  private void s()
  {
    r.setThreshold(h0.getSuggestThreshold());
    r.setImeOptions(h0.getImeOptions());
    int k = h0.getInputType();
    int j = 1;
    int i = k;
    if ((k & 0xF) == 1)
    {
      k &= 0xFFFEFFFF;
      i = k;
      if (h0.getSuggestAuthority() != null) {
        i = k | 0x10000 | 0x80000;
      }
    }
    r.setInputType(i);
    Object localObject = T;
    if (localObject != null) {
      ((android.support.v4.widget.d)localObject).b(null);
    }
    if (h0.getSuggestAuthority() != null)
    {
      T = new d1(getContext(), this, h0, l0);
      r.setAdapter(T);
      localObject = (d1)T;
      i = j;
      if (W) {
        i = 2;
      }
      ((d1)localObject).a(i);
    }
  }
  
  private void setQuery(CharSequence paramCharSequence)
  {
    r.setText(paramCharSequence);
    SearchAutoComplete localSearchAutoComplete = r;
    int i;
    if (TextUtils.isEmpty(paramCharSequence)) {
      i = 0;
    } else {
      i = paramCharSequence.length();
    }
    localSearchAutoComplete.setSelection(i);
  }
  
  private void t()
  {
    int j = 8;
    int i = j;
    if (o()) {
      if (w.getVisibility() != 0)
      {
        i = j;
        if (y.getVisibility() != 0) {}
      }
      else
      {
        i = 0;
      }
    }
    u.setVisibility(i);
  }
  
  void a(int paramInt, String paramString1, String paramString2)
  {
    paramString1 = a("android.intent.action.SEARCH", null, null, paramString2, paramInt, paramString1);
    getContext().startActivity(paramString1);
  }
  
  void a(CharSequence paramCharSequence)
  {
    setQuery(paramCharSequence);
  }
  
  public void a(CharSequence paramCharSequence, boolean paramBoolean)
  {
    r.setText(paramCharSequence);
    if (paramCharSequence != null)
    {
      SearchAutoComplete localSearchAutoComplete = r;
      localSearchAutoComplete.setSelection(localSearchAutoComplete.length());
      e0 = paramCharSequence;
    }
    if ((paramBoolean) && (!TextUtils.isEmpty(paramCharSequence))) {
      i();
    }
  }
  
  boolean a(int paramInt1, int paramInt2, String paramString)
  {
    paramString = P;
    if ((paramString != null) && (paramString.b(paramInt1))) {
      return false;
    }
    b(paramInt1, 0, null);
    r.setImeVisibility(false);
    m();
    return true;
  }
  
  boolean a(View paramView, int paramInt, KeyEvent paramKeyEvent)
  {
    if (h0 == null) {
      return false;
    }
    if (T == null) {
      return false;
    }
    if ((paramKeyEvent.getAction() == 0) && (paramKeyEvent.hasNoModifiers())) {
      if ((paramInt != 66) && (paramInt != 84) && (paramInt != 61))
      {
        if ((paramInt != 21) && (paramInt != 22))
        {
          if ((paramInt == 19) && (r.getListSelection() == 0)) {
            return false;
          }
        }
        else
        {
          if (paramInt == 21) {
            paramInt = 0;
          } else {
            paramInt = r.length();
          }
          r.setSelection(paramInt);
          r.setListSelection(0);
          r.clearListSelection();
          s0.a(r, true);
          return true;
        }
      }
      else {
        return a(r.getListSelection(), 0, null);
      }
    }
    return false;
  }
  
  public void b()
  {
    if (f0) {
      return;
    }
    f0 = true;
    g0 = r.getImeOptions();
    r.setImeOptions(g0 | 0x2000000);
    r.setText("");
    setIconified(false);
  }
  
  void b(CharSequence paramCharSequence)
  {
    Editable localEditable = r.getText();
    e0 = localEditable;
    boolean bool2 = TextUtils.isEmpty(localEditable);
    boolean bool1 = true;
    bool2 ^= true;
    a(bool2);
    if (bool2) {
      bool1 = false;
    }
    c(bool1);
    q();
    t();
    if ((M != null) && (!TextUtils.equals(paramCharSequence, d0))) {
      M.a(paramCharSequence.toString());
    }
    d0 = paramCharSequence.toString();
  }
  
  public void c()
  {
    a("", false);
    clearFocus();
    b(true);
    r.setImeOptions(g0);
    f0 = false;
  }
  
  public void clearFocus()
  {
    a0 = true;
    super.clearFocus();
    r.clearFocus();
    r.setImeVisibility(false);
    a0 = false;
  }
  
  void d()
  {
    if (z.getWidth() > 1)
    {
      Resources localResources = getContext().getResources();
      int k = t.getPaddingLeft();
      Rect localRect = new Rect();
      boolean bool = r1.a(this);
      int i;
      if (R) {
        i = localResources.getDimensionPixelSize(a.b.h.a.d.abc_dropdownitem_icon_width) + localResources.getDimensionPixelSize(a.b.h.a.d.abc_dropdownitem_text_padding_left);
      } else {
        i = 0;
      }
      r.getDropDownBackground().getPadding(localRect);
      if (bool) {
        j = -left;
      } else {
        j = k - (left + i);
      }
      r.setDropDownHorizontalOffset(j);
      int j = z.getWidth();
      int m = left;
      int n = right;
      r.setDropDownWidth(j + m + n + i - k);
    }
  }
  
  boolean d(int paramInt)
  {
    n localN = P;
    if ((localN != null) && (localN.a(paramInt))) {
      return false;
    }
    e(paramInt);
    return true;
  }
  
  void e()
  {
    s0.b(r);
    s0.a(r);
  }
  
  public boolean f()
  {
    return S;
  }
  
  void g()
  {
    if (TextUtils.isEmpty(r.getText()))
    {
      if (R)
      {
        l localL = N;
        if ((localL == null) || (!localL.a()))
        {
          clearFocus();
          b(true);
        }
      }
    }
    else
    {
      r.setText("");
      r.requestFocus();
      r.setImeVisibility(true);
    }
  }
  
  public int getImeOptions()
  {
    return r.getImeOptions();
  }
  
  public int getInputType()
  {
    return r.getInputType();
  }
  
  public int getMaxWidth()
  {
    return b0;
  }
  
  public CharSequence getQuery()
  {
    return r.getText();
  }
  
  public CharSequence getQueryHint()
  {
    if (V != null) {
      return V;
    }
    SearchableInfo localSearchableInfo = h0;
    if ((localSearchableInfo != null) && (localSearchableInfo.getHintId() != 0)) {
      return getContext().getText(h0.getHintId());
    }
    return L;
  }
  
  int getSuggestionCommitIconResId()
  {
    return I;
  }
  
  int getSuggestionRowLayout()
  {
    return H;
  }
  
  public android.support.v4.widget.d getSuggestionsAdapter()
  {
    return T;
  }
  
  void h()
  {
    b(false);
    r.requestFocus();
    r.setImeVisibility(true);
    View.OnClickListener localOnClickListener = Q;
    if (localOnClickListener != null) {
      localOnClickListener.onClick(this);
    }
  }
  
  void i()
  {
    Editable localEditable = r.getText();
    if ((localEditable != null) && (TextUtils.getTrimmedLength(localEditable) > 0))
    {
      m localM = M;
      if ((localM == null) || (!localM.b(localEditable.toString())))
      {
        if (h0 != null) {
          a(0, null, localEditable.toString());
        }
        r.setImeVisibility(false);
        m();
      }
    }
  }
  
  void j()
  {
    b(f());
    p();
    if (r.hasFocus()) {
      e();
    }
  }
  
  void k()
  {
    if (h0 == null) {
      return;
    }
    Object localObject = h0;
    try
    {
      if (((SearchableInfo)localObject).getVoiceSearchLaunchWebSearch())
      {
        localObject = b(J, (SearchableInfo)localObject);
        getContext().startActivity((Intent)localObject);
      }
      else if (((SearchableInfo)localObject).getVoiceSearchLaunchRecognizer())
      {
        localObject = a(K, (SearchableInfo)localObject);
        getContext().startActivity((Intent)localObject);
      }
      return;
    }
    catch (ActivityNotFoundException localActivityNotFoundException)
    {
      Log.w("SearchView", "Could not find voice search activity");
    }
  }
  
  void l()
  {
    int[] arrayOfInt;
    if (r.hasFocus()) {
      arrayOfInt = ViewGroup.FOCUSED_STATE_SET;
    } else {
      arrayOfInt = ViewGroup.EMPTY_STATE_SET;
    }
    Drawable localDrawable = t.getBackground();
    if (localDrawable != null) {
      localDrawable.setState(arrayOfInt);
    }
    localDrawable = u.getBackground();
    if (localDrawable != null) {
      localDrawable.setState(arrayOfInt);
    }
    invalidate();
  }
  
  protected void onDetachedFromWindow()
  {
    removeCallbacks(j0);
    post(k0);
    super.onDetachedFromWindow();
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    if (paramBoolean)
    {
      a(r, B);
      Object localObject = C;
      Rect localRect = B;
      ((Rect)localObject).set(left, 0, right, paramInt4 - paramInt2);
      localObject = A;
      if (localObject == null)
      {
        A = new p(C, B, r);
        setTouchDelegate(A);
        return;
      }
      ((p)localObject).a(C, B);
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    if (f())
    {
      super.onMeasure(paramInt1, paramInt2);
      return;
    }
    int j = View.MeasureSpec.getMode(paramInt1);
    int i = View.MeasureSpec.getSize(paramInt1);
    if (j != Integer.MIN_VALUE)
    {
      if (j != 0)
      {
        if (j != 1073741824)
        {
          paramInt1 = i;
        }
        else
        {
          j = b0;
          paramInt1 = i;
          if (j > 0) {
            paramInt1 = Math.min(j, i);
          }
        }
      }
      else
      {
        paramInt1 = b0;
        if (paramInt1 <= 0) {
          paramInt1 = getPreferredWidth();
        }
      }
    }
    else
    {
      paramInt1 = b0;
      if (paramInt1 > 0) {
        paramInt1 = Math.min(paramInt1, i);
      } else {
        paramInt1 = Math.min(getPreferredWidth(), i);
      }
    }
    i = View.MeasureSpec.getMode(paramInt2);
    paramInt2 = View.MeasureSpec.getSize(paramInt2);
    if (i != Integer.MIN_VALUE)
    {
      if (i == 0) {
        paramInt2 = getPreferredHeight();
      }
    }
    else {
      paramInt2 = Math.min(getPreferredHeight(), paramInt2);
    }
    super.onMeasure(View.MeasureSpec.makeMeasureSpec(paramInt1, 1073741824), View.MeasureSpec.makeMeasureSpec(paramInt2, 1073741824));
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof o))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    paramParcelable = (o)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.a());
    b(e);
    requestLayout();
  }
  
  protected Parcelable onSaveInstanceState()
  {
    o localO = new o(super.onSaveInstanceState());
    e = f();
    return localO;
  }
  
  public void onWindowFocusChanged(boolean paramBoolean)
  {
    super.onWindowFocusChanged(paramBoolean);
    p();
  }
  
  public boolean requestFocus(int paramInt, Rect paramRect)
  {
    if (a0) {
      return false;
    }
    if (!isFocusable()) {
      return false;
    }
    if (!f())
    {
      boolean bool = r.requestFocus(paramInt, paramRect);
      if (bool) {
        b(false);
      }
      return bool;
    }
    return super.requestFocus(paramInt, paramRect);
  }
  
  public void setAppSearchData(Bundle paramBundle)
  {
    i0 = paramBundle;
  }
  
  public void setIconified(boolean paramBoolean)
  {
    if (paramBoolean)
    {
      g();
      return;
    }
    h();
  }
  
  public void setIconifiedByDefault(boolean paramBoolean)
  {
    if (R == paramBoolean) {
      return;
    }
    R = paramBoolean;
    b(paramBoolean);
    r();
  }
  
  public void setImeOptions(int paramInt)
  {
    r.setImeOptions(paramInt);
  }
  
  public void setInputType(int paramInt)
  {
    r.setInputType(paramInt);
  }
  
  public void setMaxWidth(int paramInt)
  {
    b0 = paramInt;
    requestLayout();
  }
  
  public void setOnCloseListener(l paramL)
  {
    N = paramL;
  }
  
  public void setOnQueryTextFocusChangeListener(View.OnFocusChangeListener paramOnFocusChangeListener)
  {
    O = paramOnFocusChangeListener;
  }
  
  public void setOnQueryTextListener(m paramM)
  {
    M = paramM;
  }
  
  public void setOnSearchClickListener(View.OnClickListener paramOnClickListener)
  {
    Q = paramOnClickListener;
  }
  
  public void setOnSuggestionListener(n paramN)
  {
    P = paramN;
  }
  
  public void setQueryHint(CharSequence paramCharSequence)
  {
    V = paramCharSequence;
    r();
  }
  
  public void setQueryRefinementEnabled(boolean paramBoolean)
  {
    W = paramBoolean;
    Object localObject = T;
    if ((localObject instanceof d1))
    {
      localObject = (d1)localObject;
      int i;
      if (paramBoolean) {
        i = 2;
      } else {
        i = 1;
      }
      ((d1)localObject).a(i);
    }
  }
  
  public void setSearchableInfo(SearchableInfo paramSearchableInfo)
  {
    h0 = paramSearchableInfo;
    if (h0 != null)
    {
      s();
      r();
    }
    c0 = n();
    if (c0) {
      r.setPrivateImeOptions("nm");
    }
    b(f());
  }
  
  public void setSubmitButtonEnabled(boolean paramBoolean)
  {
    U = paramBoolean;
    b(f());
  }
  
  public void setSuggestionsAdapter(android.support.v4.widget.d paramD)
  {
    T = paramD;
    r.setAdapter(T);
  }
  
  public static class SearchAutoComplete
    extends e
  {
    private int f = getThreshold();
    private SearchView g;
    private boolean h;
    final Runnable i = new a();
    
    public SearchAutoComplete(Context paramContext)
    {
      this(paramContext, null);
    }
    
    public SearchAutoComplete(Context paramContext, AttributeSet paramAttributeSet)
    {
      this(paramContext, paramAttributeSet, a.b.h.a.a.autoCompleteTextViewStyle);
    }
    
    public SearchAutoComplete(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
    {
      super(paramAttributeSet, paramInt);
    }
    
    private int getSearchViewTextMinWidthDp()
    {
      Configuration localConfiguration = getResources().getConfiguration();
      int j = screenWidthDp;
      int k = screenHeightDp;
      if ((j >= 960) && (k >= 720) && (orientation == 2)) {
        return 256;
      }
      if ((j < 600) && ((j < 640) || (k < 480))) {
        return 160;
      }
      return 192;
    }
    
    boolean a()
    {
      return TextUtils.getTrimmedLength(getText()) == 0;
    }
    
    void b()
    {
      if (h)
      {
        ((InputMethodManager)getContext().getSystemService("input_method")).showSoftInput(this, 0);
        h = false;
      }
    }
    
    public boolean enoughToFilter()
    {
      return (f <= 0) || (super.enoughToFilter());
    }
    
    public InputConnection onCreateInputConnection(EditorInfo paramEditorInfo)
    {
      paramEditorInfo = super.onCreateInputConnection(paramEditorInfo);
      if (h)
      {
        removeCallbacks(i);
        post(i);
      }
      return paramEditorInfo;
    }
    
    protected void onFinishInflate()
    {
      super.onFinishInflate();
      DisplayMetrics localDisplayMetrics = getResources().getDisplayMetrics();
      setMinWidth((int)TypedValue.applyDimension(1, getSearchViewTextMinWidthDp(), localDisplayMetrics));
    }
    
    protected void onFocusChanged(boolean paramBoolean, int paramInt, Rect paramRect)
    {
      super.onFocusChanged(paramBoolean, paramInt, paramRect);
      g.j();
    }
    
    public boolean onKeyPreIme(int paramInt, KeyEvent paramKeyEvent)
    {
      if (paramInt == 4)
      {
        KeyEvent.DispatcherState localDispatcherState;
        if ((paramKeyEvent.getAction() == 0) && (paramKeyEvent.getRepeatCount() == 0))
        {
          localDispatcherState = getKeyDispatcherState();
          if (localDispatcherState != null) {
            localDispatcherState.startTracking(paramKeyEvent, this);
          }
          return true;
        }
        if (paramKeyEvent.getAction() == 1)
        {
          localDispatcherState = getKeyDispatcherState();
          if (localDispatcherState != null) {
            localDispatcherState.handleUpEvent(paramKeyEvent);
          }
          if ((paramKeyEvent.isTracking()) && (!paramKeyEvent.isCanceled()))
          {
            g.clearFocus();
            setImeVisibility(false);
            return true;
          }
        }
      }
      return super.onKeyPreIme(paramInt, paramKeyEvent);
    }
    
    public void onWindowFocusChanged(boolean paramBoolean)
    {
      super.onWindowFocusChanged(paramBoolean);
      if ((paramBoolean) && (g.hasFocus()) && (getVisibility() == 0))
      {
        h = true;
        if (SearchView.a(getContext())) {
          SearchView.s0.a(this, true);
        }
      }
    }
    
    public void performCompletion() {}
    
    protected void replaceText(CharSequence paramCharSequence) {}
    
    void setImeVisibility(boolean paramBoolean)
    {
      InputMethodManager localInputMethodManager = (InputMethodManager)getContext().getSystemService("input_method");
      if (!paramBoolean)
      {
        h = false;
        removeCallbacks(i);
        localInputMethodManager.hideSoftInputFromWindow(getWindowToken(), 0);
        return;
      }
      if (localInputMethodManager.isActive(this))
      {
        h = false;
        removeCallbacks(i);
        localInputMethodManager.showSoftInput(this, 0);
        return;
      }
      h = true;
    }
    
    void setSearchView(SearchView paramSearchView)
    {
      g = paramSearchView;
    }
    
    public void setThreshold(int paramInt)
    {
      super.setThreshold(paramInt);
      f = paramInt;
    }
    
    class a
      implements Runnable
    {
      a() {}
      
      public void run()
      {
        b();
      }
    }
  }
  
  class a
    implements TextWatcher
  {
    a() {}
    
    public void afterTextChanged(Editable paramEditable) {}
    
    public void beforeTextChanged(CharSequence paramCharSequence, int paramInt1, int paramInt2, int paramInt3) {}
    
    public void onTextChanged(CharSequence paramCharSequence, int paramInt1, int paramInt2, int paramInt3)
    {
      b(paramCharSequence);
    }
  }
  
  class b
    implements Runnable
  {
    b() {}
    
    public void run()
    {
      l();
    }
  }
  
  class c
    implements Runnable
  {
    c() {}
    
    public void run()
    {
      android.support.v4.widget.d localD = T;
      if ((localD != null) && ((localD instanceof d1))) {
        localD.b(null);
      }
    }
  }
  
  class d
    implements View.OnFocusChangeListener
  {
    d() {}
    
    public void onFocusChange(View paramView, boolean paramBoolean)
    {
      paramView = SearchView.this;
      View.OnFocusChangeListener localOnFocusChangeListener = O;
      if (localOnFocusChangeListener != null) {
        localOnFocusChangeListener.onFocusChange(paramView, paramBoolean);
      }
    }
  }
  
  class e
    implements View.OnLayoutChangeListener
  {
    e() {}
    
    public void onLayoutChange(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8)
    {
      d();
    }
  }
  
  class f
    implements View.OnClickListener
  {
    f() {}
    
    public void onClick(View paramView)
    {
      SearchView localSearchView = SearchView.this;
      if (paramView == v)
      {
        localSearchView.h();
        return;
      }
      if (paramView == x)
      {
        localSearchView.g();
        return;
      }
      if (paramView == w)
      {
        localSearchView.i();
        return;
      }
      if (paramView == y)
      {
        localSearchView.k();
        return;
      }
      if (paramView == r) {
        localSearchView.e();
      }
    }
  }
  
  class g
    implements View.OnKeyListener
  {
    g() {}
    
    public boolean onKey(View paramView, int paramInt, KeyEvent paramKeyEvent)
    {
      SearchView localSearchView = SearchView.this;
      if (h0 == null) {
        return false;
      }
      if ((r.isPopupShowing()) && (r.getListSelection() != -1)) {
        return a(paramView, paramInt, paramKeyEvent);
      }
      if ((!r.a()) && (paramKeyEvent.hasNoModifiers()) && (paramKeyEvent.getAction() == 1) && (paramInt == 66))
      {
        paramView.cancelLongPress();
        paramView = SearchView.this;
        paramView.a(0, null, r.getText().toString());
        return true;
      }
      return false;
    }
  }
  
  class h
    implements TextView.OnEditorActionListener
  {
    h() {}
    
    public boolean onEditorAction(TextView paramTextView, int paramInt, KeyEvent paramKeyEvent)
    {
      i();
      return true;
    }
  }
  
  class i
    implements AdapterView.OnItemClickListener
  {
    i() {}
    
    public void onItemClick(AdapterView<?> paramAdapterView, View paramView, int paramInt, long paramLong)
    {
      a(paramInt, 0, null);
    }
  }
  
  class j
    implements AdapterView.OnItemSelectedListener
  {
    j() {}
    
    public void onItemSelected(AdapterView<?> paramAdapterView, View paramView, int paramInt, long paramLong)
    {
      d(paramInt);
    }
    
    public void onNothingSelected(AdapterView<?> paramAdapterView) {}
  }
  
  private static class k
  {
    private Method a;
    private Method b;
    private Method c;
    
    k()
    {
      try
      {
        a = AutoCompleteTextView.class.getDeclaredMethod("doBeforeTextChanged", new Class[0]);
        a.setAccessible(true);
      }
      catch (NoSuchMethodException localNoSuchMethodException1) {}
      try
      {
        b = AutoCompleteTextView.class.getDeclaredMethod("doAfterTextChanged", new Class[0]);
        b.setAccessible(true);
      }
      catch (NoSuchMethodException localNoSuchMethodException2) {}
      try
      {
        c = AutoCompleteTextView.class.getMethod("ensureImeVisible", new Class[] { Boolean.TYPE });
        c.setAccessible(true);
        return;
      }
      catch (NoSuchMethodException localNoSuchMethodException3) {}
    }
    
    void a(AutoCompleteTextView paramAutoCompleteTextView)
    {
      Method localMethod = b;
      if (localMethod != null) {
        try
        {
          localMethod.invoke(paramAutoCompleteTextView, new Object[0]);
          return;
        }
        catch (Exception paramAutoCompleteTextView) {}
      }
    }
    
    void a(AutoCompleteTextView paramAutoCompleteTextView, boolean paramBoolean)
    {
      Method localMethod = c;
      if (localMethod != null) {
        try
        {
          localMethod.invoke(paramAutoCompleteTextView, new Object[] { Boolean.valueOf(paramBoolean) });
          return;
        }
        catch (Exception paramAutoCompleteTextView) {}
      }
    }
    
    void b(AutoCompleteTextView paramAutoCompleteTextView)
    {
      Method localMethod = a;
      if (localMethod != null) {
        try
        {
          localMethod.invoke(paramAutoCompleteTextView, new Object[0]);
          return;
        }
        catch (Exception paramAutoCompleteTextView) {}
      }
    }
  }
  
  public static abstract interface l
  {
    public abstract boolean a();
  }
  
  public static abstract interface m
  {
    public abstract boolean a(String paramString);
    
    public abstract boolean b(String paramString);
  }
  
  public static abstract interface n
  {
    public abstract boolean a(int paramInt);
    
    public abstract boolean b(int paramInt);
  }
  
  static class o
    extends android.support.v4.view.a
  {
    public static final Parcelable.Creator<o> CREATOR = new a();
    boolean e;
    
    public o(Parcel paramParcel, ClassLoader paramClassLoader)
    {
      super(paramClassLoader);
      e = ((Boolean)paramParcel.readValue(null)).booleanValue();
    }
    
    o(Parcelable paramParcelable)
    {
      super();
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("SearchView.SavedState{");
      localStringBuilder.append(Integer.toHexString(System.identityHashCode(this)));
      localStringBuilder.append(" isIconified=");
      localStringBuilder.append(e);
      localStringBuilder.append("}");
      return localStringBuilder.toString();
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      super.writeToParcel(paramParcel, paramInt);
      paramParcel.writeValue(Boolean.valueOf(e));
    }
    
    static final class a
      implements Parcelable.ClassLoaderCreator<SearchView.o>
    {
      a() {}
      
      public SearchView.o createFromParcel(Parcel paramParcel)
      {
        return new SearchView.o(paramParcel, null);
      }
      
      public SearchView.o createFromParcel(Parcel paramParcel, ClassLoader paramClassLoader)
      {
        return new SearchView.o(paramParcel, paramClassLoader);
      }
      
      public SearchView.o[] newArray(int paramInt)
      {
        return new SearchView.o[paramInt];
      }
    }
  }
  
  private static class p
    extends TouchDelegate
  {
    private final View a;
    private final Rect b;
    private final Rect c;
    private final Rect d;
    private final int e;
    private boolean f;
    
    public p(Rect paramRect1, Rect paramRect2, View paramView)
    {
      super(paramView);
      e = ViewConfiguration.get(paramView.getContext()).getScaledTouchSlop();
      b = new Rect();
      d = new Rect();
      c = new Rect();
      a(paramRect1, paramRect2);
      a = paramView;
    }
    
    public void a(Rect paramRect1, Rect paramRect2)
    {
      b.set(paramRect1);
      d.set(paramRect1);
      paramRect1 = d;
      int i = e;
      paramRect1.inset(-i, -i);
      c.set(paramRect2);
    }
    
    public boolean onTouchEvent(MotionEvent paramMotionEvent)
    {
      int k = (int)paramMotionEvent.getX();
      int m = (int)paramMotionEvent.getY();
      boolean bool1 = false;
      int j = 1;
      boolean bool2 = false;
      int i = paramMotionEvent.getAction();
      if (i != 0)
      {
        if ((i != 1) && (i != 2))
        {
          if (i != 3)
          {
            i = j;
          }
          else
          {
            bool1 = f;
            f = false;
            i = j;
          }
        }
        else
        {
          boolean bool3 = f;
          bool1 = bool3;
          i = j;
          if (bool3)
          {
            bool1 = bool3;
            i = j;
            if (!d.contains(k, m))
            {
              i = 0;
              bool1 = bool3;
            }
          }
        }
      }
      else
      {
        i = j;
        if (b.contains(k, m))
        {
          f = true;
          bool1 = true;
          i = j;
        }
      }
      if (bool1)
      {
        if ((i != 0) && (!c.contains(k, m)))
        {
          paramMotionEvent.setLocation(a.getWidth() / 2, a.getHeight() / 2);
        }
        else
        {
          Rect localRect = c;
          paramMotionEvent.setLocation(k - left, m - top);
        }
        bool2 = a.dispatchTouchEvent(paramMotionEvent);
      }
      return bool2;
    }
  }
}
