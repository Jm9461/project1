package android.support.v7.widget;

import a.b.g.d.a;
import android.view.ViewGroup;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.concurrent.TimeUnit;

final class m0
  implements Runnable
{
  static final ThreadLocal<m0> g = new ThreadLocal();
  static Comparator<c> h = new a();
  ArrayList<RecyclerView> c = new ArrayList();
  long d;
  long e;
  private ArrayList<c> f = new ArrayList();
  
  m0() {}
  
  private RecyclerView.d0 a(RecyclerView paramRecyclerView, int paramInt, long paramLong)
  {
    if (a(paramRecyclerView, paramInt)) {
      return null;
    }
    RecyclerView.v localV = d;
    try
    {
      paramRecyclerView.q();
      RecyclerView.d0 localD0 = localV.a(paramInt, false, paramLong);
      if (localD0 != null) {
        try
        {
          if ((localD0.m()) && (!localD0.n())) {
            localV.b(c);
          } else {
            localV.a(localD0, false);
          }
        }
        finally
        {
          break label90;
        }
      }
      return localD0;
    }
    finally
    {
      label90:
      paramRecyclerView.a(false);
    }
  }
  
  private void a()
  {
    int n = c.size();
    int j = 0;
    int i = 0;
    Object localObject;
    int k;
    while (i < n)
    {
      localObject = (RecyclerView)c.get(i);
      k = j;
      if (((ViewGroup)localObject).getWindowVisibility() == 0)
      {
        i0.a((RecyclerView)localObject, false);
        k = j + i0.d;
      }
      i += 1;
      j = k;
    }
    f.ensureCapacity(j);
    i = 0;
    j = 0;
    while (j < n)
    {
      RecyclerView localRecyclerView = (RecyclerView)c.get(j);
      int m;
      if (localRecyclerView.getWindowVisibility() != 0)
      {
        m = i;
      }
      else
      {
        b localB = i0;
        int i1 = Math.abs(a) + Math.abs(b);
        k = 0;
        for (;;)
        {
          m = i;
          if (k >= d * 2) {
            break;
          }
          if (i >= f.size())
          {
            localObject = new c();
            f.add(localObject);
          }
          else
          {
            localObject = (c)f.get(i);
          }
          m = c[(k + 1)];
          boolean bool;
          if (m <= i1) {
            bool = true;
          } else {
            bool = false;
          }
          a = bool;
          b = i1;
          c = m;
          d = localRecyclerView;
          e = c[k];
          i += 1;
          k += 2;
        }
      }
      j += 1;
      i = m;
    }
    Collections.sort(f, h);
  }
  
  private void a(RecyclerView paramRecyclerView, long paramLong)
  {
    if (paramRecyclerView == null) {
      return;
    }
    if ((F) && (g.b() != 0)) {
      paramRecyclerView.t();
    }
    b localB = i0;
    localB.a(paramRecyclerView, true);
    if (d != 0) {
      try
      {
        a.a("RV Nested Prefetch");
        j0.a(n);
        int i = 0;
        while (i < d * 2)
        {
          a(paramRecyclerView, c[i], paramLong);
          i += 2;
        }
        return;
      }
      finally
      {
        a.a();
      }
    }
  }
  
  private void a(c paramC, long paramLong)
  {
    long l;
    if (a) {
      l = Long.MAX_VALUE;
    } else {
      l = paramLong;
    }
    paramC = a(d, e, l);
    if ((paramC != null) && (d != null) && (paramC.m()) && (!paramC.n())) {
      a((RecyclerView)d.get(), paramLong);
    }
  }
  
  static boolean a(RecyclerView paramRecyclerView, int paramInt)
  {
    int j = g.b();
    int i = 0;
    while (i < j)
    {
      RecyclerView.d0 localD0 = RecyclerView.k(g.d(i));
      if ((e == paramInt) && (!localD0.n())) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  private void b(long paramLong)
  {
    int i = 0;
    while (i < f.size())
    {
      c localC = (c)f.get(i);
      if (d == null) {
        return;
      }
      a(localC, paramLong);
      localC.a();
      i += 1;
    }
  }
  
  void a(long paramLong)
  {
    a();
    b(paramLong);
  }
  
  public void a(RecyclerView paramRecyclerView)
  {
    c.add(paramRecyclerView);
  }
  
  void a(RecyclerView paramRecyclerView, int paramInt1, int paramInt2)
  {
    if ((paramRecyclerView.isAttachedToWindow()) && (d == 0L))
    {
      d = paramRecyclerView.getNanoTime();
      paramRecyclerView.post(this);
    }
    i0.b(paramInt1, paramInt2);
  }
  
  public void b(RecyclerView paramRecyclerView)
  {
    c.remove(paramRecyclerView);
  }
  
  public void run()
  {
    try
    {
      a.a("RV Prefetch");
      boolean bool = c.isEmpty();
      if (bool)
      {
        d = 0L;
        a.a();
        return;
      }
      int j = c.size();
      long l1 = 0L;
      int i = 0;
      while (i < j)
      {
        RecyclerView localRecyclerView = (RecyclerView)c.get(i);
        long l2 = l1;
        if (localRecyclerView.getWindowVisibility() == 0) {
          l2 = Math.max(localRecyclerView.getDrawingTime(), l1);
        }
        i += 1;
        l1 = l2;
      }
      if (l1 == 0L)
      {
        d = 0L;
        a.a();
        return;
      }
      a(TimeUnit.MILLISECONDS.toNanos(l1) + e);
      d = 0L;
      a.a();
      return;
    }
    finally
    {
      d = 0L;
      a.a();
    }
    for (;;)
    {
      throw localObject;
    }
  }
  
  static final class a
    implements Comparator<m0.c>
  {
    a() {}
    
    public int a(m0.c paramC1, m0.c paramC2)
    {
      RecyclerView localRecyclerView = d;
      int k = 1;
      if (localRecyclerView == null) {
        i = 1;
      } else {
        i = 0;
      }
      int j;
      if (d == null) {
        j = 1;
      } else {
        j = 0;
      }
      if (i != j)
      {
        if (d == null) {
          return 1;
        }
        return -1;
      }
      boolean bool = a;
      if (bool != a)
      {
        i = k;
        if (bool) {
          i = -1;
        }
        return i;
      }
      int i = b - b;
      if (i != 0) {
        return i;
      }
      i = c - c;
      if (i != 0) {
        return i;
      }
      return 0;
    }
  }
  
  static class b
    implements RecyclerView.o.c
  {
    int a;
    int b;
    int[] c;
    int d;
    
    b() {}
    
    void a()
    {
      int[] arrayOfInt = c;
      if (arrayOfInt != null) {
        Arrays.fill(arrayOfInt, -1);
      }
      d = 0;
    }
    
    public void a(int paramInt1, int paramInt2)
    {
      if (paramInt1 >= 0)
      {
        if (paramInt2 >= 0)
        {
          int i = d * 2;
          int[] arrayOfInt = c;
          if (arrayOfInt == null)
          {
            c = new int[4];
            Arrays.fill(c, -1);
          }
          else if (i >= arrayOfInt.length)
          {
            arrayOfInt = c;
            c = new int[i * 2];
            System.arraycopy(arrayOfInt, 0, c, 0, arrayOfInt.length);
          }
          arrayOfInt = c;
          arrayOfInt[i] = paramInt1;
          arrayOfInt[(i + 1)] = paramInt2;
          d += 1;
          return;
        }
        throw new IllegalArgumentException("Pixel distance must be non-negative");
      }
      throw new IllegalArgumentException("Layout positions must be non-negative");
    }
    
    void a(RecyclerView paramRecyclerView, boolean paramBoolean)
    {
      d = 0;
      Object localObject = c;
      if (localObject != null) {
        Arrays.fill((int[])localObject, -1);
      }
      localObject = o;
      if ((n != null) && (localObject != null) && (((RecyclerView.o)localObject).v()))
      {
        if (paramBoolean)
        {
          if (!f.c()) {
            ((RecyclerView.o)localObject).a(n.a(), this);
          }
        }
        else if (!paramRecyclerView.j()) {
          ((RecyclerView.o)localObject).a(a, b, j0, this);
        }
        int i = d;
        if (i > m)
        {
          m = i;
          n = paramBoolean;
          d.j();
        }
      }
    }
    
    boolean a(int paramInt)
    {
      if (c != null)
      {
        int j = d;
        int i = 0;
        while (i < j * 2)
        {
          if (c[i] == paramInt) {
            return true;
          }
          i += 2;
        }
      }
      return false;
    }
    
    void b(int paramInt1, int paramInt2)
    {
      a = paramInt1;
      b = paramInt2;
    }
  }
  
  static class c
  {
    public boolean a;
    public int b;
    public int c;
    public RecyclerView d;
    public int e;
    
    c() {}
    
    public void a()
    {
      a = false;
      b = 0;
      c = 0;
      d = null;
      e = 0;
    }
  }
}
