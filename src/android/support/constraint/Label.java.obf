package android.support.constraint;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.os.Build.VERSION;
import android.util.AttributeSet;
import android.util.Log;
import android.util.SparseIntArray;
import android.util.Xml;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

public class c
{
  private static final int[] b = { 0, 4, 8 };
  private static SparseIntArray c = new SparseIntArray();
  private HashMap<Integer, b> a = new HashMap();
  
  static
  {
    c.append(h.ConstraintSet_layout_constraintLeft_toLeftOf, 25);
    c.append(h.ConstraintSet_layout_constraintLeft_toRightOf, 26);
    c.append(h.ConstraintSet_layout_constraintRight_toLeftOf, 29);
    c.append(h.ConstraintSet_layout_constraintRight_toRightOf, 30);
    c.append(h.ConstraintSet_layout_constraintTop_toTopOf, 36);
    c.append(h.ConstraintSet_layout_constraintTop_toBottomOf, 35);
    c.append(h.ConstraintSet_layout_constraintBottom_toTopOf, 4);
    c.append(h.ConstraintSet_layout_constraintBottom_toBottomOf, 3);
    c.append(h.ConstraintSet_layout_constraintBaseline_toBaselineOf, 1);
    c.append(h.ConstraintSet_layout_editor_absoluteX, 6);
    c.append(h.ConstraintSet_layout_editor_absoluteY, 7);
    c.append(h.ConstraintSet_layout_constraintGuide_begin, 17);
    c.append(h.ConstraintSet_layout_constraintGuide_end, 18);
    c.append(h.ConstraintSet_layout_constraintGuide_percent, 19);
    c.append(h.ConstraintSet_android_orientation, 27);
    c.append(h.ConstraintSet_layout_constraintStart_toEndOf, 32);
    c.append(h.ConstraintSet_layout_constraintStart_toStartOf, 33);
    c.append(h.ConstraintSet_layout_constraintEnd_toStartOf, 10);
    c.append(h.ConstraintSet_layout_constraintEnd_toEndOf, 9);
    c.append(h.ConstraintSet_layout_goneMarginLeft, 13);
    c.append(h.ConstraintSet_layout_goneMarginTop, 16);
    c.append(h.ConstraintSet_layout_goneMarginRight, 14);
    c.append(h.ConstraintSet_layout_goneMarginBottom, 11);
    c.append(h.ConstraintSet_layout_goneMarginStart, 15);
    c.append(h.ConstraintSet_layout_goneMarginEnd, 12);
    c.append(h.ConstraintSet_layout_constraintVertical_weight, 40);
    c.append(h.ConstraintSet_layout_constraintHorizontal_weight, 39);
    c.append(h.ConstraintSet_layout_constraintHorizontal_chainStyle, 41);
    c.append(h.ConstraintSet_layout_constraintVertical_chainStyle, 42);
    c.append(h.ConstraintSet_layout_constraintHorizontal_bias, 20);
    c.append(h.ConstraintSet_layout_constraintVertical_bias, 37);
    c.append(h.ConstraintSet_layout_constraintDimensionRatio, 5);
    c.append(h.ConstraintSet_layout_constraintLeft_creator, 64);
    c.append(h.ConstraintSet_layout_constraintTop_creator, 64);
    c.append(h.ConstraintSet_layout_constraintRight_creator, 64);
    c.append(h.ConstraintSet_layout_constraintBottom_creator, 64);
    c.append(h.ConstraintSet_layout_constraintBaseline_creator, 64);
    c.append(h.ConstraintSet_android_layout_marginLeft, 24);
    c.append(h.ConstraintSet_android_layout_marginRight, 28);
    c.append(h.ConstraintSet_android_layout_marginStart, 31);
    c.append(h.ConstraintSet_android_layout_marginEnd, 8);
    c.append(h.ConstraintSet_android_layout_marginTop, 34);
    c.append(h.ConstraintSet_android_layout_marginBottom, 2);
    c.append(h.ConstraintSet_android_layout_width, 23);
    c.append(h.ConstraintSet_android_layout_height, 21);
    c.append(h.ConstraintSet_android_visibility, 22);
    c.append(h.ConstraintSet_android_alpha, 43);
    c.append(h.ConstraintSet_android_elevation, 44);
    c.append(h.ConstraintSet_android_rotationX, 45);
    c.append(h.ConstraintSet_android_rotationY, 46);
    c.append(h.ConstraintSet_android_rotation, 60);
    c.append(h.ConstraintSet_android_scaleX, 47);
    c.append(h.ConstraintSet_android_scaleY, 48);
    c.append(h.ConstraintSet_android_transformPivotX, 49);
    c.append(h.ConstraintSet_android_transformPivotY, 50);
    c.append(h.ConstraintSet_android_translationX, 51);
    c.append(h.ConstraintSet_android_translationY, 52);
    c.append(h.ConstraintSet_android_translationZ, 53);
    c.append(h.ConstraintSet_layout_constraintWidth_default, 54);
    c.append(h.ConstraintSet_layout_constraintHeight_default, 55);
    c.append(h.ConstraintSet_layout_constraintWidth_max, 56);
    c.append(h.ConstraintSet_layout_constraintHeight_max, 57);
    c.append(h.ConstraintSet_layout_constraintWidth_min, 58);
    c.append(h.ConstraintSet_layout_constraintHeight_min, 59);
    c.append(h.ConstraintSet_layout_constraintCircle, 61);
    c.append(h.ConstraintSet_layout_constraintCircleRadius, 62);
    c.append(h.ConstraintSet_layout_constraintCircleAngle, 63);
    c.append(h.ConstraintSet_android_id, 38);
  }
  
  public c() {}
  
  private static int a(TypedArray paramTypedArray, int paramInt1, int paramInt2)
  {
    int i = paramTypedArray.getResourceId(paramInt1, paramInt2);
    paramInt2 = i;
    if (i == -1) {
      paramInt2 = paramTypedArray.getInt(paramInt1, -1);
    }
    return paramInt2;
  }
  
  private b a(Context paramContext, AttributeSet paramAttributeSet)
  {
    b localB = new b(null);
    paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, h.ConstraintSet);
    a(localB, paramContext);
    paramContext.recycle();
    return localB;
  }
  
  private void a(b paramB, TypedArray paramTypedArray)
  {
    int j = paramTypedArray.getIndexCount();
    int i = 0;
    while (i < j)
    {
      int k = paramTypedArray.getIndex(i);
      int m = c.get(k);
      switch (m)
      {
      default: 
        StringBuilder localStringBuilder;
        switch (m)
        {
        default: 
          localStringBuilder = new StringBuilder();
          localStringBuilder.append("Unknown attribute 0x");
          localStringBuilder.append(Integer.toHexString(k));
          localStringBuilder.append("   ");
          localStringBuilder.append(c.get(k));
          Log.w("ConstraintSet", localStringBuilder.toString());
          break;
        case 64: 
          localStringBuilder = new StringBuilder();
          localStringBuilder.append("unused attribute 0x");
          localStringBuilder.append(Integer.toHexString(k));
          localStringBuilder.append("   ");
          localStringBuilder.append(c.get(k));
          Log.w("ConstraintSet", localStringBuilder.toString());
          break;
        case 63: 
          z = paramTypedArray.getFloat(k, z);
          break;
        case 62: 
          y = paramTypedArray.getDimensionPixelSize(k, y);
          break;
        case 61: 
          x = a(paramTypedArray, k, x);
          break;
        case 60: 
          X = paramTypedArray.getFloat(k, X);
        }
        break;
      case 53: 
        g0 = paramTypedArray.getDimension(k, g0);
        break;
      case 52: 
        f0 = paramTypedArray.getDimension(k, f0);
        break;
      case 51: 
        e0 = paramTypedArray.getDimension(k, e0);
        break;
      case 50: 
        d0 = paramTypedArray.getFloat(k, d0);
        break;
      case 49: 
        c0 = paramTypedArray.getFloat(k, c0);
        break;
      case 48: 
        b0 = paramTypedArray.getFloat(k, b0);
        break;
      case 47: 
        a0 = paramTypedArray.getFloat(k, a0);
        break;
      case 46: 
        Z = paramTypedArray.getFloat(k, Z);
        break;
      case 45: 
        Y = paramTypedArray.getFloat(k, Y);
        break;
      case 44: 
        V = true;
        W = paramTypedArray.getDimension(k, W);
        break;
      case 43: 
        U = paramTypedArray.getFloat(k, U);
        break;
      case 42: 
        T = paramTypedArray.getInt(k, T);
        break;
      case 41: 
        S = paramTypedArray.getInt(k, S);
        break;
      case 40: 
        Q = paramTypedArray.getFloat(k, Q);
        break;
      case 39: 
        R = paramTypedArray.getFloat(k, R);
        break;
      case 38: 
        d = paramTypedArray.getResourceId(k, d);
        break;
      case 37: 
        v = paramTypedArray.getFloat(k, v);
        break;
      case 36: 
        l = a(paramTypedArray, k, l);
        break;
      case 35: 
        m = a(paramTypedArray, k, m);
        break;
      case 34: 
        F = paramTypedArray.getDimensionPixelSize(k, F);
        break;
      case 33: 
        r = a(paramTypedArray, k, r);
        break;
      case 32: 
        q = a(paramTypedArray, k, q);
        break;
      case 31: 
        I = paramTypedArray.getDimensionPixelSize(k, I);
        break;
      case 30: 
        k = a(paramTypedArray, k, k);
        break;
      case 29: 
        j = a(paramTypedArray, k, j);
        break;
      case 28: 
        E = paramTypedArray.getDimensionPixelSize(k, E);
        break;
      case 27: 
        C = paramTypedArray.getInt(k, C);
        break;
      case 26: 
        i = a(paramTypedArray, k, i);
        break;
      case 25: 
        h = a(paramTypedArray, k, h);
        break;
      case 24: 
        D = paramTypedArray.getDimensionPixelSize(k, D);
        break;
      case 23: 
        b = paramTypedArray.getLayoutDimension(k, b);
        break;
      case 22: 
        J = paramTypedArray.getInt(k, J);
        J = b[J];
        break;
      case 21: 
        c = paramTypedArray.getLayoutDimension(k, c);
        break;
      case 20: 
        u = paramTypedArray.getFloat(k, u);
        break;
      case 19: 
        g = paramTypedArray.getFloat(k, g);
        break;
      case 18: 
        f = paramTypedArray.getDimensionPixelOffset(k, f);
        break;
      case 17: 
        e = paramTypedArray.getDimensionPixelOffset(k, e);
        break;
      case 16: 
        L = paramTypedArray.getDimensionPixelSize(k, L);
        break;
      case 15: 
        P = paramTypedArray.getDimensionPixelSize(k, P);
        break;
      case 14: 
        M = paramTypedArray.getDimensionPixelSize(k, M);
        break;
      case 13: 
        K = paramTypedArray.getDimensionPixelSize(k, K);
        break;
      case 12: 
        O = paramTypedArray.getDimensionPixelSize(k, O);
        break;
      case 11: 
        N = paramTypedArray.getDimensionPixelSize(k, N);
        break;
      case 10: 
        s = a(paramTypedArray, k, s);
        break;
      case 9: 
        t = a(paramTypedArray, k, t);
        break;
      case 8: 
        H = paramTypedArray.getDimensionPixelSize(k, H);
        break;
      case 7: 
        B = paramTypedArray.getDimensionPixelOffset(k, B);
        break;
      case 6: 
        A = paramTypedArray.getDimensionPixelOffset(k, A);
        break;
      case 5: 
        w = paramTypedArray.getString(k);
        break;
      case 4: 
        n = a(paramTypedArray, k, n);
        break;
      case 3: 
        o = a(paramTypedArray, k, o);
        break;
      case 2: 
        G = paramTypedArray.getDimensionPixelSize(k, G);
        break;
      case 1: 
        p = a(paramTypedArray, k, p);
      }
      i += 1;
    }
  }
  
  public void a(Context paramContext, int paramInt)
  {
    XmlResourceParser localXmlResourceParser = paramContext.getResources().getXml(paramInt);
    try
    {
      paramInt = localXmlResourceParser.getEventType();
    }
    catch (IOException paramContext)
    {
      String str;
      b localB;
      paramContext.printStackTrace();
      return;
    }
    catch (XmlPullParserException paramContext)
    {
      paramContext.printStackTrace();
    }
    str = localXmlResourceParser.getName();
    localB = a(paramContext, Xml.asAttributeSet(localXmlResourceParser));
    if (str.equalsIgnoreCase("Guideline")) {
      a = true;
    }
    a.put(Integer.valueOf(d), localB);
    break label83;
    label76:
    localXmlResourceParser.getName();
    for (;;)
    {
      label83:
      paramInt = localXmlResourceParser.next();
      while (paramInt == 1) {
        return;
      }
      if (paramInt == 0) {
        break label76;
      }
      if (paramInt == 2) {
        break;
      }
      if (paramInt != 3) {}
    }
  }
  
  void a(ConstraintLayout paramConstraintLayout)
  {
    int j = paramConstraintLayout.getChildCount();
    Object localObject1 = new HashSet(a.keySet());
    int i = 0;
    Object localObject2;
    Object localObject3;
    Object localObject4;
    while (i < j)
    {
      localObject2 = paramConstraintLayout.getChildAt(i);
      int k = ((View)localObject2).getId();
      if (k != -1)
      {
        if (a.containsKey(Integer.valueOf(k)))
        {
          ((HashSet)localObject1).remove(Integer.valueOf(k));
          localObject3 = (b)a.get(Integer.valueOf(k));
          int m = s0;
          if ((m != -1) && (m == 1))
          {
            localObject4 = (a)localObject2;
            ((View)localObject4).setId(k);
            ((b)localObject4).setReferencedIds(t0);
            ((a)localObject4).setType(r0);
            ((b)localObject3).a(paramConstraintLayout.generateDefaultLayoutParams());
          }
          localObject4 = (ConstraintLayout.a)((View)localObject2).getLayoutParams();
          ((b)localObject3).a((ConstraintLayout.a)localObject4);
          ((View)localObject2).setLayoutParams((ViewGroup.LayoutParams)localObject4);
          ((View)localObject2).setVisibility(J);
          if (Build.VERSION.SDK_INT >= 17)
          {
            ((View)localObject2).setAlpha(U);
            ((View)localObject2).setRotation(X);
            ((View)localObject2).setRotationX(Y);
            ((View)localObject2).setRotationY(Z);
            ((View)localObject2).setScaleX(a0);
            ((View)localObject2).setScaleY(b0);
            if (!Float.isNaN(c0)) {
              ((View)localObject2).setPivotX(c0);
            }
            if (!Float.isNaN(d0)) {
              ((View)localObject2).setPivotY(d0);
            }
            ((View)localObject2).setTranslationX(e0);
            ((View)localObject2).setTranslationY(f0);
            if (Build.VERSION.SDK_INT >= 21)
            {
              ((View)localObject2).setTranslationZ(g0);
              if (V) {
                ((View)localObject2).setElevation(W);
              }
            }
          }
        }
        i += 1;
      }
      else
      {
        throw new RuntimeException("All children of ConstraintLayout must have ids to use ConstraintSet");
      }
    }
    localObject1 = ((HashSet)localObject1).iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject3 = (Integer)((Iterator)localObject1).next();
      localObject2 = (b)a.get(localObject3);
      i = s0;
      if ((i != -1) && (i == 1))
      {
        localObject4 = new a(paramConstraintLayout.getContext());
        ((View)localObject4).setId(((Integer)localObject3).intValue());
        ((b)localObject4).setReferencedIds(t0);
        ((a)localObject4).setType(r0);
        ConstraintLayout.a localA = paramConstraintLayout.generateDefaultLayoutParams();
        ((b)localObject2).a(localA);
        paramConstraintLayout.addView((View)localObject4, localA);
      }
      if (a)
      {
        localObject4 = new e(paramConstraintLayout.getContext());
        ((View)localObject4).setId(((Integer)localObject3).intValue());
        localObject3 = paramConstraintLayout.generateDefaultLayoutParams();
        ((b)localObject2).a((ConstraintLayout.a)localObject3);
        paramConstraintLayout.addView((View)localObject4, (ViewGroup.LayoutParams)localObject3);
      }
    }
  }
  
  public void a(d paramD)
  {
    int j = paramD.getChildCount();
    a.clear();
    int i = 0;
    while (i < j)
    {
      View localView = paramD.getChildAt(i);
      d.a localA = (d.a)localView.getLayoutParams();
      int k = localView.getId();
      if (k != -1)
      {
        if (!a.containsKey(Integer.valueOf(k))) {
          a.put(Integer.valueOf(k), new b(null));
        }
        b localB = (b)a.get(Integer.valueOf(k));
        if ((localView instanceof b)) {
          b.a(localB, (b)localView, k, localA);
        }
        b.a(localB, k, localA);
        i += 1;
      }
      else
      {
        throw new RuntimeException("All children of ConstraintLayout must have ids to use ConstraintSet");
      }
    }
  }
  
  private static class b
  {
    public int A = -1;
    public int B = -1;
    public int C = -1;
    public int D = -1;
    public int E = -1;
    public int F = -1;
    public int G = -1;
    public int H = -1;
    public int I = -1;
    public int J = 0;
    public int K = -1;
    public int L = -1;
    public int M = -1;
    public int N = -1;
    public int O = -1;
    public int P = -1;
    public float Q = 0.0F;
    public float R = 0.0F;
    public int S = 0;
    public int T = 0;
    public float U = 1.0F;
    public boolean V = false;
    public float W = 0.0F;
    public float X = 0.0F;
    public float Y = 0.0F;
    public float Z = 0.0F;
    boolean a = false;
    public float a0 = 1.0F;
    public int b;
    public float b0 = 1.0F;
    public int c;
    public float c0 = NaN.0F;
    int d;
    public float d0 = NaN.0F;
    public int e = -1;
    public float e0 = 0.0F;
    public int f = -1;
    public float f0 = 0.0F;
    public float g = -1.0F;
    public float g0 = 0.0F;
    public int h = -1;
    public boolean h0 = false;
    public int i = -1;
    public boolean i0 = false;
    public int j = -1;
    public int j0 = 0;
    public int k = -1;
    public int k0 = 0;
    public int l = -1;
    public int l0 = -1;
    public int m = -1;
    public int m0 = -1;
    public int n = -1;
    public int n0 = -1;
    public int o = -1;
    public int o0 = -1;
    public int p = -1;
    public float p0 = 1.0F;
    public int q = -1;
    public float q0 = 1.0F;
    public int r = -1;
    public int r0 = -1;
    public int s = -1;
    public int s0 = -1;
    public int t = -1;
    public int[] t0;
    public float u = 0.5F;
    public float v = 0.5F;
    public String w = null;
    public int x = -1;
    public int y = 0;
    public float z = 0.0F;
    
    private b() {}
    
    private void a(int paramInt, ConstraintLayout.a paramA)
    {
      d = paramInt;
      h = d;
      i = e;
      j = f;
      k = g;
      l = h;
      m = i;
      n = j;
      o = k;
      p = l;
      q = p;
      r = q;
      s = r;
      t = s;
      u = z;
      v = A;
      w = B;
      x = m;
      y = n;
      z = o;
      A = P;
      B = Q;
      C = R;
      g = c;
      e = a;
      f = b;
      b = width;
      c = height;
      D = leftMargin;
      E = rightMargin;
      F = topMargin;
      G = bottomMargin;
      Q = E;
      R = D;
      T = G;
      S = F;
      boolean bool = S;
      h0 = bool;
      i0 = T;
      j0 = H;
      k0 = I;
      h0 = bool;
      l0 = L;
      m0 = M;
      n0 = J;
      o0 = K;
      p0 = N;
      q0 = O;
      if (Build.VERSION.SDK_INT >= 17)
      {
        H = paramA.getMarginEnd();
        I = paramA.getMarginStart();
      }
    }
    
    private void a(int paramInt, d.a paramA)
    {
      a(paramInt, paramA);
      U = m0;
      X = p0;
      Y = q0;
      Z = r0;
      a0 = s0;
      b0 = t0;
      c0 = u0;
      d0 = v0;
      e0 = w0;
      f0 = x0;
      g0 = y0;
      W = o0;
      V = n0;
    }
    
    private void a(b paramB, int paramInt, d.a paramA)
    {
      a(paramInt, paramA);
      if ((paramB instanceof a))
      {
        s0 = 1;
        paramB = (a)paramB;
        r0 = paramB.getType();
        t0 = paramB.getReferencedIds();
      }
    }
    
    public void a(ConstraintLayout.a paramA)
    {
      d = h;
      e = i;
      f = j;
      g = k;
      h = l;
      i = m;
      j = n;
      k = o;
      l = p;
      p = q;
      q = r;
      r = s;
      s = t;
      leftMargin = D;
      rightMargin = E;
      topMargin = F;
      bottomMargin = G;
      x = P;
      y = O;
      z = u;
      A = v;
      m = x;
      n = y;
      o = z;
      B = w;
      P = A;
      Q = B;
      E = Q;
      D = R;
      G = T;
      F = S;
      S = h0;
      T = i0;
      H = j0;
      I = k0;
      L = l0;
      M = m0;
      J = n0;
      K = o0;
      N = p0;
      O = q0;
      R = C;
      c = g;
      a = e;
      b = f;
      width = b;
      height = c;
      if (Build.VERSION.SDK_INT >= 17)
      {
        paramA.setMarginStart(I);
        paramA.setMarginEnd(H);
      }
      paramA.a();
    }
    
    public b clone()
    {
      b localB = new b();
      a = a;
      b = b;
      c = c;
      e = e;
      f = f;
      g = g;
      h = h;
      i = i;
      j = j;
      k = k;
      l = l;
      m = m;
      n = n;
      o = o;
      p = p;
      q = q;
      r = r;
      s = s;
      t = t;
      u = u;
      v = v;
      w = w;
      A = A;
      B = B;
      u = u;
      u = u;
      u = u;
      u = u;
      u = u;
      C = C;
      D = D;
      E = E;
      F = F;
      G = G;
      H = H;
      I = I;
      J = J;
      K = K;
      L = L;
      M = M;
      N = N;
      O = O;
      P = P;
      Q = Q;
      R = R;
      S = S;
      T = T;
      U = U;
      V = V;
      W = W;
      X = X;
      Y = Y;
      Z = Z;
      a0 = a0;
      b0 = b0;
      c0 = c0;
      d0 = d0;
      e0 = e0;
      f0 = f0;
      g0 = g0;
      h0 = h0;
      i0 = i0;
      j0 = j0;
      k0 = k0;
      l0 = l0;
      m0 = m0;
      n0 = n0;
      o0 = o0;
      p0 = p0;
      q0 = q0;
      r0 = r0;
      s0 = s0;
      int[] arrayOfInt = t0;
      if (arrayOfInt != null) {
        t0 = Arrays.copyOf(arrayOfInt, arrayOfInt.length);
      }
      x = x;
      y = y;
      z = z;
      return localB;
    }
  }
}
