package android.support.v4.view;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.content.res.TypedArray;
import android.database.DataSetObserver;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.ClassLoaderCreator;
import android.os.Parcelable.Creator;
import android.support.v4.view.d0.c;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.FocusFinder;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.SoundEffectConstants;
import android.view.VelocityTracker;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewParent;
import android.view.accessibility.AccessibilityEvent;
import android.view.animation.Interpolator;
import android.widget.EdgeEffect;
import android.widget.Scroller;
import java.lang.annotation.Annotation;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class ViewPager
  extends ViewGroup
{
  static final int[] h0 = { 16842931 };
  private static final Comparator<f> i0 = new a();
  private static final Interpolator j0 = new b();
  private static final n k0 = new n();
  private boolean A;
  private int B;
  private int C;
  private int D;
  private float E;
  private float F;
  private float G;
  private float H;
  private int I = -1;
  private VelocityTracker J;
  private int K;
  private int L;
  private int M;
  private int N;
  private boolean O;
  private EdgeEffect P;
  private EdgeEffect Q;
  private boolean R = true;
  private boolean S;
  private int T;
  private List<j> U;
  private j V;
  private j W;
  private List<i> a0;
  private k b0;
  private int c;
  private int c0;
  private final ArrayList<f> d = new ArrayList();
  private int d0;
  private final f e = new f();
  private ArrayList<View> e0;
  private final Rect f = new Rect();
  private final Runnable f0 = new c();
  q g;
  private int g0 = 0;
  int h;
  private int i = -1;
  private Parcelable j = null;
  private ClassLoader k = null;
  private Scroller l;
  private boolean m;
  private l n;
  private int o;
  private Drawable p;
  private int q;
  private int r;
  private float s = -3.4028235E38F;
  private float t = Float.MAX_VALUE;
  private int u;
  private boolean v;
  private boolean w;
  private boolean x;
  private int y = 1;
  private boolean z;
  
  public ViewPager(Context paramContext)
  {
    super(paramContext);
    b();
  }
  
  public ViewPager(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    b();
  }
  
  private int a(int paramInt1, float paramFloat, int paramInt2, int paramInt3)
  {
    if ((Math.abs(paramInt3) > M) && (Math.abs(paramInt2) > K))
    {
      if (paramInt2 <= 0) {
        paramInt1 += 1;
      }
    }
    else
    {
      float f1;
      if (paramInt1 >= h) {
        f1 = 0.4F;
      } else {
        f1 = 0.6F;
      }
      paramInt1 += (int)(paramFloat + f1);
    }
    paramInt2 = paramInt1;
    if (d.size() > 0)
    {
      f localF = (f)d.get(0);
      Object localObject = d;
      localObject = (f)((ArrayList)localObject).get(((ArrayList)localObject).size() - 1);
      paramInt2 = Math.max(b, Math.min(paramInt1, b));
    }
    return paramInt2;
  }
  
  private Rect a(Rect paramRect, View paramView)
  {
    Rect localRect = paramRect;
    if (paramRect == null) {
      localRect = new Rect();
    }
    if (paramView == null)
    {
      localRect.set(0, 0, 0, 0);
      return localRect;
    }
    left = paramView.getLeft();
    right = paramView.getRight();
    top = paramView.getTop();
    bottom = paramView.getBottom();
    for (paramRect = paramView.getParent(); ((paramRect instanceof ViewGroup)) && (paramRect != this); paramRect = paramRect.getParent())
    {
      paramRect = (ViewGroup)paramRect;
      left += paramRect.getLeft();
      right += paramRect.getRight();
      top += paramRect.getTop();
      bottom += paramRect.getBottom();
    }
    return localRect;
  }
  
  private void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    float f1;
    if ((paramInt2 > 0) && (!d.isEmpty()))
    {
      if (!l.isFinished())
      {
        l.setFinalX(getCurrentItem() * getClientWidth());
        return;
      }
      int i1 = getPaddingLeft();
      int i2 = getPaddingRight();
      int i3 = getPaddingLeft();
      int i4 = getPaddingRight();
      f1 = getScrollX() / (paramInt2 - i3 - i4 + paramInt4);
      scrollTo((int)((paramInt1 - i1 - i2 + paramInt3) * f1), getScrollY());
      return;
    }
    f localF = b(h);
    if (localF != null) {
      f1 = Math.min(e, t);
    } else {
      f1 = 0.0F;
    }
    paramInt1 = (int)((paramInt1 - getPaddingLeft() - getPaddingRight()) * f1);
    if (paramInt1 != getScrollX())
    {
      a(false);
      scrollTo(paramInt1, getScrollY());
    }
  }
  
  private void a(int paramInt1, boolean paramBoolean1, int paramInt2, boolean paramBoolean2)
  {
    f localF = b(paramInt1);
    int i1 = 0;
    if (localF != null) {
      i1 = (int)(getClientWidth() * Math.max(s, Math.min(e, t)));
    }
    if (paramBoolean1)
    {
      a(i1, 0, paramInt2);
      if (paramBoolean2) {
        d(paramInt1);
      }
    }
    else
    {
      if (paramBoolean2) {
        d(paramInt1);
      }
      a(false);
      scrollTo(i1, 0);
      f(i1);
    }
  }
  
  private void a(f paramF1, int paramInt, f paramF2)
  {
    int i4 = g.a();
    int i1 = getClientWidth();
    float f2;
    if (i1 > 0) {
      f2 = o / i1;
    } else {
      f2 = 0.0F;
    }
    if (paramF2 != null)
    {
      i1 = b;
      i2 = b;
      if (i1 < i2)
      {
        i2 = 0;
        f1 = e + d + f2;
        i1 += 1;
        while ((i1 <= b) && (i2 < d.size()))
        {
          for (paramF2 = (f)d.get(i2);; paramF2 = (f)d.get(i2))
          {
            f3 = f1;
            i3 = i1;
            if (i1 <= b) {
              break;
            }
            f3 = f1;
            i3 = i1;
            if (i2 >= d.size() - 1) {
              break;
            }
            i2 += 1;
          }
          while (i3 < b)
          {
            f3 += g.b(i3) + f2;
            i3 += 1;
          }
          e = f3;
          f1 = f3 + (d + f2);
          i1 = i3 + 1;
        }
      }
      if (i1 > i2)
      {
        i2 = d.size() - 1;
        f1 = e;
        i1 -= 1;
        while ((i1 >= b) && (i2 >= 0))
        {
          for (paramF2 = (f)d.get(i2);; paramF2 = (f)d.get(i2))
          {
            f3 = f1;
            i3 = i1;
            if (i1 >= b) {
              break;
            }
            f3 = f1;
            i3 = i1;
            if (i2 <= 0) {
              break;
            }
            i2 -= 1;
          }
          while (i3 > b)
          {
            f3 -= g.b(i3) + f2;
            i3 -= 1;
          }
          f1 = f3 - (d + f2);
          e = f1;
          i1 = i3 - 1;
        }
      }
    }
    int i3 = d.size();
    float f3 = e;
    int i2 = b;
    i1 = i2 - 1;
    if (i2 == 0) {
      f1 = e;
    } else {
      f1 = -3.4028235E38F;
    }
    s = f1;
    if (b == i4 - 1) {
      f1 = e + d - 1.0F;
    } else {
      f1 = Float.MAX_VALUE;
    }
    t = f1;
    i2 = paramInt - 1;
    float f1 = f3;
    while (i2 >= 0)
    {
      paramF2 = (f)d.get(i2);
      int i5;
      for (;;)
      {
        i5 = b;
        if (i1 <= i5) {
          break;
        }
        f1 -= g.b(i1) + f2;
        i1 -= 1;
      }
      f1 -= d + f2;
      e = f1;
      if (i5 == 0) {
        s = f1;
      }
      i2 -= 1;
      i1 -= 1;
    }
    f1 = e + d + f2;
    i2 = b + 1;
    i1 = paramInt + 1;
    paramInt = i2;
    while (i1 < i3)
    {
      paramF1 = (f)d.get(i1);
      for (;;)
      {
        i2 = b;
        if (paramInt >= i2) {
          break;
        }
        f1 += g.b(paramInt) + f2;
        paramInt += 1;
      }
      if (i2 == i4 - 1) {
        t = (d + f1 - 1.0F);
      }
      e = f1;
      f1 += d + f2;
      i1 += 1;
      paramInt += 1;
    }
  }
  
  private void a(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getActionIndex();
    if (paramMotionEvent.getPointerId(i1) == I)
    {
      if (i1 == 0) {
        i1 = 1;
      } else {
        i1 = 0;
      }
      E = paramMotionEvent.getX(i1);
      I = paramMotionEvent.getPointerId(i1);
      paramMotionEvent = J;
      if (paramMotionEvent != null) {
        paramMotionEvent.clear();
      }
    }
  }
  
  private void a(boolean paramBoolean)
  {
    int i1;
    if (g0 == 2) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    if (i1 != 0)
    {
      setScrollingCacheEnabled(false);
      if ((true ^ l.isFinished()))
      {
        l.abortAnimation();
        i2 = getScrollX();
        int i3 = getScrollY();
        int i4 = l.getCurrX();
        int i5 = l.getCurrY();
        if ((i2 != i4) || (i3 != i5))
        {
          scrollTo(i4, i5);
          if (i4 != i2) {
            f(i4);
          }
        }
      }
    }
    x = false;
    int i2 = 0;
    while (i2 < d.size())
    {
      f localF = (f)d.get(i2);
      if (c)
      {
        i1 = 1;
        c = false;
      }
      i2 += 1;
    }
    if (i1 != 0)
    {
      if (paramBoolean)
      {
        u.a(this, f0);
        return;
      }
      f0.run();
    }
  }
  
  private boolean a(float paramFloat1, float paramFloat2)
  {
    return ((paramFloat1 < C) && (paramFloat2 > 0.0F)) || ((paramFloat1 > getWidth() - C) && (paramFloat2 < 0.0F));
  }
  
  private void b(int paramInt1, float paramFloat, int paramInt2)
  {
    Object localObject = V;
    if (localObject != null) {
      ((j)localObject).a(paramInt1, paramFloat, paramInt2);
    }
    localObject = U;
    if (localObject != null)
    {
      int i1 = 0;
      int i2 = ((List)localObject).size();
      while (i1 < i2)
      {
        localObject = (j)U.get(i1);
        if (localObject != null) {
          ((j)localObject).a(paramInt1, paramFloat, paramInt2);
        }
        i1 += 1;
      }
    }
    localObject = W;
    if (localObject != null) {
      ((j)localObject).a(paramInt1, paramFloat, paramInt2);
    }
  }
  
  private void b(boolean paramBoolean)
  {
    int i3 = getChildCount();
    int i1 = 0;
    while (i1 < i3)
    {
      int i2;
      if (paramBoolean) {
        i2 = c0;
      } else {
        i2 = 0;
      }
      getChildAt(i1).setLayerType(i2, null);
      i1 += 1;
    }
  }
  
  private boolean b(float paramFloat)
  {
    boolean bool2 = false;
    boolean bool3 = false;
    boolean bool1 = false;
    float f1 = E;
    E = paramFloat;
    float f2 = getScrollX() + (f1 - paramFloat);
    int i3 = getClientWidth();
    paramFloat = i3 * s;
    f1 = i3 * t;
    int i1 = 1;
    int i2 = 1;
    f localF = (f)d.get(0);
    Object localObject = d;
    localObject = (f)((ArrayList)localObject).get(((ArrayList)localObject).size() - 1);
    if (b != 0)
    {
      i1 = 0;
      paramFloat = e * i3;
    }
    if (b != g.a() - 1)
    {
      i2 = 0;
      f1 = e * i3;
    }
    if (f2 < paramFloat)
    {
      if (i1 != 0)
      {
        P.onPull(Math.abs(paramFloat - f2) / i3);
        bool1 = true;
      }
    }
    else
    {
      bool1 = bool3;
      paramFloat = f2;
      if (f2 > f1)
      {
        bool1 = bool2;
        if (i2 != 0)
        {
          Q.onPull(Math.abs(f2 - f1) / i3);
          bool1 = true;
        }
        paramFloat = f1;
      }
    }
    E += paramFloat - (int)paramFloat;
    scrollTo((int)paramFloat, getScrollY());
    f((int)paramFloat);
    return bool1;
  }
  
  private void c(boolean paramBoolean)
  {
    ViewParent localViewParent = getParent();
    if (localViewParent != null) {
      localViewParent.requestDisallowInterceptTouchEvent(paramBoolean);
    }
  }
  
  private static boolean c(View paramView)
  {
    return paramView.getClass().getAnnotation(e.class) != null;
  }
  
  private void d(int paramInt)
  {
    Object localObject = V;
    if (localObject != null) {
      ((j)localObject).b(paramInt);
    }
    localObject = U;
    if (localObject != null)
    {
      int i1 = 0;
      int i2 = ((List)localObject).size();
      while (i1 < i2)
      {
        localObject = (j)U.get(i1);
        if (localObject != null) {
          ((j)localObject).b(paramInt);
        }
        i1 += 1;
      }
    }
    localObject = W;
    if (localObject != null) {
      ((j)localObject).b(paramInt);
    }
  }
  
  private void e(int paramInt)
  {
    Object localObject = V;
    if (localObject != null) {
      ((j)localObject).a(paramInt);
    }
    localObject = U;
    if (localObject != null)
    {
      int i1 = 0;
      int i2 = ((List)localObject).size();
      while (i1 < i2)
      {
        localObject = (j)U.get(i1);
        if (localObject != null) {
          ((j)localObject).a(paramInt);
        }
        i1 += 1;
      }
    }
    localObject = W;
    if (localObject != null) {
      ((j)localObject).a(paramInt);
    }
  }
  
  private void f()
  {
    z = false;
    A = false;
    VelocityTracker localVelocityTracker = J;
    if (localVelocityTracker != null)
    {
      localVelocityTracker.recycle();
      J = null;
    }
  }
  
  private boolean f(int paramInt)
  {
    if (d.size() == 0)
    {
      if (R) {
        return false;
      }
      S = false;
      a(0, 0.0F, 0);
      if (S) {
        return false;
      }
      throw new IllegalStateException("onPageScrolled did not call superclass implementation");
    }
    f localF = g();
    int i2 = getClientWidth();
    int i3 = o;
    float f1 = i3 / i2;
    int i1 = b;
    f1 = (paramInt / i2 - e) / (d + f1);
    paramInt = (int)((i2 + i3) * f1);
    S = false;
    a(i1, f1, paramInt);
    if (S) {
      return true;
    }
    throw new IllegalStateException("onPageScrolled did not call superclass implementation");
  }
  
  private f g()
  {
    int i1 = getClientWidth();
    float f2 = 0.0F;
    float f1;
    if (i1 > 0) {
      f1 = getScrollX() / i1;
    } else {
      f1 = 0.0F;
    }
    if (i1 > 0) {
      f2 = o / i1;
    }
    int i3 = -1;
    float f3 = 0.0F;
    float f4 = 0.0F;
    int i2 = 1;
    Object localObject = null;
    i1 = 0;
    while (i1 < d.size())
    {
      f localF2 = (f)d.get(i1);
      int i4 = i1;
      f localF1 = localF2;
      if (i2 == 0)
      {
        i4 = i1;
        localF1 = localF2;
        if (b != i3 + 1)
        {
          localF1 = e;
          e = (f3 + f4 + f2);
          b = (i3 + 1);
          d = g.b(b);
          i4 = i1 - 1;
        }
      }
      f3 = e;
      f4 = d;
      if ((i2 == 0) && (f1 < f3)) {
        return localObject;
      }
      if (f1 >= f4 + f3 + f2)
      {
        if (i4 == d.size() - 1) {
          return localF1;
        }
        i2 = 0;
        i3 = b;
        f4 = d;
        i1 = i4 + 1;
        localObject = localF1;
      }
      else
      {
        return localF1;
      }
    }
    return localObject;
  }
  
  private int getClientWidth()
  {
    return getMeasuredWidth() - getPaddingLeft() - getPaddingRight();
  }
  
  private void h()
  {
    int i2;
    for (int i1 = 0; i1 < getChildCount(); i1 = i2 + 1)
    {
      i2 = i1;
      if (!getChildAtgetLayoutParamsa)
      {
        removeViewAt(i1);
        i2 = i1 - 1;
      }
    }
  }
  
  private boolean i()
  {
    I = -1;
    f();
    P.onRelease();
    Q.onRelease();
    return (P.isFinished()) || (Q.isFinished());
  }
  
  private void j()
  {
    if (d0 != 0)
    {
      Object localObject = e0;
      if (localObject == null) {
        e0 = new ArrayList();
      } else {
        ((ArrayList)localObject).clear();
      }
      int i2 = getChildCount();
      int i1 = 0;
      while (i1 < i2)
      {
        localObject = getChildAt(i1);
        e0.add(localObject);
        i1 += 1;
      }
      Collections.sort(e0, k0);
    }
  }
  
  private void setScrollingCacheEnabled(boolean paramBoolean)
  {
    if (w != paramBoolean) {
      w = paramBoolean;
    }
  }
  
  float a(float paramFloat)
  {
    return (float)Math.sin((paramFloat - 0.5F) * 0.47123894F);
  }
  
  f a(int paramInt1, int paramInt2)
  {
    f localF = new f();
    b = paramInt1;
    a = g.a(this, paramInt1);
    d = g.b(paramInt1);
    if ((paramInt2 >= 0) && (paramInt2 < d.size()))
    {
      d.add(paramInt2, localF);
      return localF;
    }
    d.add(localF);
    return localF;
  }
  
  f a(View paramView)
  {
    for (;;)
    {
      ViewParent localViewParent = paramView.getParent();
      if (localViewParent == this) {
        break label34;
      }
      if ((localViewParent == null) || (!(localViewParent instanceof View))) {
        break;
      }
      paramView = (View)localViewParent;
    }
    return null;
    label34:
    return b(paramView);
  }
  
  void a()
  {
    int i9 = g.a();
    c = i9;
    int i1;
    if ((d.size() < y * 2 + 1) && (d.size() < i9)) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    int i2 = h;
    int i3 = 0;
    int i4 = 0;
    Object localObject;
    while (i4 < d.size())
    {
      localObject = (f)d.get(i4);
      int i8 = g.a(a);
      int i5;
      int i6;
      int i7;
      if (i8 == -1)
      {
        i5 = i2;
        i6 = i3;
        i7 = i4;
      }
      else if (i8 == -2)
      {
        d.remove(i4);
        i8 = i4 - 1;
        i4 = i3;
        if (i3 == 0)
        {
          g.b(this);
          i4 = 1;
        }
        g.a(this, b, a);
        i1 = 1;
        i3 = h;
        i5 = i2;
        i6 = i4;
        i7 = i8;
        if (i3 == b)
        {
          i5 = Math.max(0, Math.min(i3, i9 - 1));
          i1 = 1;
          i6 = i4;
          i7 = i8;
        }
      }
      else
      {
        int i10 = b;
        i5 = i2;
        i6 = i3;
        i7 = i4;
        if (i10 != i8)
        {
          if (i10 == h) {
            i2 = i8;
          }
          b = i8;
          i1 = 1;
          i7 = i4;
          i6 = i3;
          i5 = i2;
        }
      }
      i4 = i7 + 1;
      i2 = i5;
      i3 = i6;
    }
    if (i3 != 0) {
      g.a(this);
    }
    Collections.sort(d, i0);
    if (i1 != 0)
    {
      i3 = getChildCount();
      i1 = 0;
      while (i1 < i3)
      {
        localObject = (g)getChildAt(i1).getLayoutParams();
        if (!a) {
          c = 0.0F;
        }
        i1 += 1;
      }
      a(i2, false, true);
      requestLayout();
    }
  }
  
  protected void a(int paramInt1, float paramFloat, int paramInt2)
  {
    int i1;
    View localView;
    if (T > 0)
    {
      int i6 = getScrollX();
      i1 = getPaddingLeft();
      int i3 = getPaddingRight();
      int i7 = getWidth();
      int i8 = getChildCount();
      int i4 = 0;
      while (i4 < i8)
      {
        localView = getChildAt(i4);
        g localG = (g)localView.getLayoutParams();
        int i2;
        int i5;
        if (!a)
        {
          i2 = i1;
          i5 = i3;
        }
        else
        {
          i2 = b & 0x7;
          if (i2 != 1)
          {
            if (i2 != 3)
            {
              if (i2 != 5)
              {
                i2 = i1;
              }
              else
              {
                i2 = i7 - i3 - localView.getMeasuredWidth();
                i3 += localView.getMeasuredWidth();
              }
            }
            else
            {
              i2 = i1;
              i1 += localView.getWidth();
            }
          }
          else {
            i2 = Math.max((i7 - localView.getMeasuredWidth()) / 2, i1);
          }
          int i9 = i2 + i6 - localView.getLeft();
          i2 = i1;
          i5 = i3;
          if (i9 != 0)
          {
            localView.offsetLeftAndRight(i9);
            i5 = i3;
            i2 = i1;
          }
        }
        i4 += 1;
        i1 = i2;
        i3 = i5;
      }
    }
    b(paramInt1, paramFloat, paramInt2);
    if (b0 != null)
    {
      paramInt2 = getScrollX();
      i1 = getChildCount();
      paramInt1 = 0;
      while (paramInt1 < i1)
      {
        localView = getChildAt(paramInt1);
        if (!getLayoutParamsa)
        {
          paramFloat = (localView.getLeft() - paramInt2) / getClientWidth();
          b0.a(localView, paramFloat);
        }
        paramInt1 += 1;
      }
    }
    S = true;
  }
  
  void a(int paramInt1, int paramInt2, int paramInt3)
  {
    if (getChildCount() == 0)
    {
      setScrollingCacheEnabled(false);
      return;
    }
    Scroller localScroller = l;
    int i1;
    if ((localScroller != null) && (!localScroller.isFinished())) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    if (i1 != 0)
    {
      if (m) {
        i1 = l.getCurrX();
      } else {
        i1 = l.getStartX();
      }
      l.abortAnimation();
      setScrollingCacheEnabled(false);
    }
    else
    {
      i1 = getScrollX();
    }
    int i2 = getScrollY();
    int i3 = paramInt1 - i1;
    paramInt2 -= i2;
    if ((i3 == 0) && (paramInt2 == 0))
    {
      a(false);
      e();
      setScrollState(0);
      return;
    }
    setScrollingCacheEnabled(true);
    setScrollState(2);
    paramInt1 = getClientWidth();
    int i4 = paramInt1 / 2;
    float f3 = Math.min(1.0F, Math.abs(i3) * 1.0F / paramInt1);
    float f1 = i4;
    float f2 = i4;
    f3 = a(f3);
    paramInt3 = Math.abs(paramInt3);
    if (paramInt3 > 0)
    {
      paramInt1 = Math.round(Math.abs((f1 + f2 * f3) / paramInt3) * 1000.0F) * 4;
    }
    else
    {
      f1 = paramInt1;
      f2 = g.b(h);
      paramInt1 = (int)((1.0F + Math.abs(i3) / (o + f1 * f2)) * 100.0F);
    }
    paramInt1 = Math.min(paramInt1, 600);
    m = false;
    l.startScroll(i1, i2, i3, paramInt2, paramInt1);
    u.B(this);
  }
  
  public void a(int paramInt, boolean paramBoolean)
  {
    x = false;
    a(paramInt, paramBoolean, false);
  }
  
  void a(int paramInt, boolean paramBoolean1, boolean paramBoolean2)
  {
    a(paramInt, paramBoolean1, paramBoolean2, 0);
  }
  
  void a(int paramInt1, boolean paramBoolean1, boolean paramBoolean2, int paramInt2)
  {
    q localQ = g;
    if ((localQ != null) && (localQ.a() > 0))
    {
      if ((!paramBoolean2) && (h == paramInt1) && (d.size() != 0))
      {
        setScrollingCacheEnabled(false);
        return;
      }
      paramBoolean2 = true;
      int i1;
      if (paramInt1 < 0)
      {
        i1 = 0;
      }
      else
      {
        i1 = paramInt1;
        if (paramInt1 >= g.a()) {
          i1 = g.a() - 1;
        }
      }
      paramInt1 = y;
      int i2 = h;
      if ((i1 > i2 + paramInt1) || (i1 < i2 - paramInt1))
      {
        paramInt1 = 0;
        while (paramInt1 < d.size())
        {
          d.get(paramInt1)).c = true;
          paramInt1 += 1;
        }
      }
      if (h == i1) {
        paramBoolean2 = false;
      }
      if (R)
      {
        h = i1;
        if (paramBoolean2) {
          d(i1);
        }
        requestLayout();
        return;
      }
      c(i1);
      a(i1, paramBoolean1, paramInt2, paramBoolean2);
      return;
    }
    setScrollingCacheEnabled(false);
  }
  
  public void a(i paramI)
  {
    if (a0 == null) {
      a0 = new ArrayList();
    }
    a0.add(paramI);
  }
  
  public void a(j paramJ)
  {
    if (U == null) {
      U = new ArrayList();
    }
    U.add(paramJ);
  }
  
  public boolean a(int paramInt)
  {
    View localView = findFocus();
    Object localObject;
    int i2;
    int i1;
    if (localView == this)
    {
      localObject = null;
    }
    else
    {
      localObject = localView;
      if (localView != null)
      {
        i2 = 0;
        for (localObject = localView.getParent();; localObject = ((ViewParent)localObject).getParent())
        {
          i1 = i2;
          if (!(localObject instanceof ViewGroup)) {
            break;
          }
          if (localObject == this)
          {
            i1 = 1;
            break;
          }
        }
        localObject = localView;
        if (i1 == 0)
        {
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append(localView.getClass().getSimpleName());
          for (localObject = localView.getParent(); (localObject instanceof ViewGroup); localObject = ((ViewParent)localObject).getParent())
          {
            localStringBuilder.append(" => ");
            localStringBuilder.append(localObject.getClass().getSimpleName());
          }
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("arrowScroll tried to find focus based on non-child current focused view ");
          ((StringBuilder)localObject).append(localStringBuilder.toString());
          Log.e("ViewPager", ((StringBuilder)localObject).toString());
          localObject = null;
        }
      }
    }
    boolean bool2 = false;
    boolean bool1 = false;
    localView = FocusFinder.getInstance().findNextFocus(this, (View)localObject, paramInt);
    if ((localView != null) && (localView != localObject)) {
      if (paramInt == 17)
      {
        i1 = af, localView).left;
        i2 = af, (View)localObject).left;
        if ((localObject != null) && (i1 >= i2)) {
          bool1 = c();
        } else {
          bool1 = localView.requestFocus();
        }
      }
    }
    for (;;)
    {
      break;
      if (paramInt == 66)
      {
        i1 = af, localView).left;
        i2 = af, (View)localObject).left;
        if ((localObject != null) && (i1 <= i2)) {
          bool1 = d();
        } else {
          bool1 = localView.requestFocus();
        }
        break;
        if ((paramInt != 17) && (paramInt != 1))
        {
          if (paramInt != 66)
          {
            bool1 = bool2;
            if (paramInt != 2) {
              break;
            }
          }
          else
          {
            bool1 = d();
          }
        }
        else {
          bool1 = c();
        }
      }
    }
    if (bool1) {
      playSoundEffect(SoundEffectConstants.getContantForFocusDirection(paramInt));
    }
    return bool1;
  }
  
  public boolean a(KeyEvent paramKeyEvent)
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (paramKeyEvent.getAction() == 0)
    {
      int i1 = paramKeyEvent.getKeyCode();
      if (i1 != 21)
      {
        if (i1 != 22)
        {
          if (i1 != 61) {
            return false;
          }
          if (paramKeyEvent.hasNoModifiers()) {
            return a(2);
          }
          bool1 = bool2;
          if (paramKeyEvent.hasModifiers(1)) {
            return a(1);
          }
        }
        else
        {
          if (paramKeyEvent.hasModifiers(2)) {
            return d();
          }
          return a(66);
        }
      }
      else
      {
        if (paramKeyEvent.hasModifiers(2)) {
          return c();
        }
        bool1 = a(17);
      }
    }
    return bool1;
  }
  
  protected boolean a(View paramView, boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3)
  {
    if ((paramView instanceof ViewGroup))
    {
      ViewGroup localViewGroup = (ViewGroup)paramView;
      int i2 = paramView.getScrollX();
      int i3 = paramView.getScrollY();
      int i1 = localViewGroup.getChildCount() - 1;
      while (i1 >= 0)
      {
        View localView = localViewGroup.getChildAt(i1);
        if ((paramInt2 + i2 >= localView.getLeft()) && (paramInt2 + i2 < localView.getRight()) && (paramInt3 + i3 >= localView.getTop()) && (paramInt3 + i3 < localView.getBottom()) && (a(localView, true, paramInt1, paramInt2 + i2 - localView.getLeft(), paramInt3 + i3 - localView.getTop()))) {
          return true;
        }
        i1 -= 1;
      }
    }
    return (paramBoolean) && (paramView.canScrollHorizontally(-paramInt1));
  }
  
  public void addFocusables(ArrayList<View> paramArrayList, int paramInt1, int paramInt2)
  {
    int i2 = paramArrayList.size();
    int i3 = getDescendantFocusability();
    if (i3 != 393216)
    {
      int i1 = 0;
      while (i1 < getChildCount())
      {
        View localView = getChildAt(i1);
        if (localView.getVisibility() == 0)
        {
          f localF = b(localView);
          if ((localF != null) && (b == h)) {
            localView.addFocusables(paramArrayList, paramInt1, paramInt2);
          }
        }
        i1 += 1;
      }
    }
    if ((i3 != 262144) || (i2 == paramArrayList.size()))
    {
      if (!isFocusable()) {
        return;
      }
      if (((paramInt2 & 0x1) == 1) && (isInTouchMode()) && (!isFocusableInTouchMode())) {
        return;
      }
      if (paramArrayList != null) {
        paramArrayList.add(this);
      }
    }
  }
  
  public void addTouchables(ArrayList<View> paramArrayList)
  {
    int i1 = 0;
    while (i1 < getChildCount())
    {
      View localView = getChildAt(i1);
      if (localView.getVisibility() == 0)
      {
        f localF = b(localView);
        if ((localF != null) && (b == h)) {
          localView.addTouchables(paramArrayList);
        }
      }
      i1 += 1;
    }
  }
  
  public void addView(View paramView, int paramInt, ViewGroup.LayoutParams paramLayoutParams)
  {
    ViewGroup.LayoutParams localLayoutParams = paramLayoutParams;
    if (!checkLayoutParams(paramLayoutParams)) {
      localLayoutParams = generateLayoutParams(paramLayoutParams);
    }
    paramLayoutParams = (g)localLayoutParams;
    a |= c(paramView);
    if (v)
    {
      if ((paramLayoutParams != null) && (a)) {
        throw new IllegalStateException("Cannot add pager decor view during layout");
      }
      d = true;
      addViewInLayout(paramView, paramInt, localLayoutParams);
      return;
    }
    super.addView(paramView, paramInt, localLayoutParams);
  }
  
  f b(int paramInt)
  {
    int i1 = 0;
    while (i1 < d.size())
    {
      f localF = (f)d.get(i1);
      if (b == paramInt) {
        return localF;
      }
      i1 += 1;
    }
    return null;
  }
  
  f b(View paramView)
  {
    int i1 = 0;
    while (i1 < d.size())
    {
      f localF = (f)d.get(i1);
      if (g.a(paramView, a)) {
        return localF;
      }
      i1 += 1;
    }
    return null;
  }
  
  void b()
  {
    setWillNotDraw(false);
    setDescendantFocusability(262144);
    setFocusable(true);
    Context localContext = getContext();
    l = new Scroller(localContext, j0);
    ViewConfiguration localViewConfiguration = ViewConfiguration.get(localContext);
    float f1 = getResourcesgetDisplayMetricsdensity;
    D = localViewConfiguration.getScaledPagingTouchSlop();
    K = ((int)(400.0F * f1));
    L = localViewConfiguration.getScaledMaximumFlingVelocity();
    P = new EdgeEffect(localContext);
    Q = new EdgeEffect(localContext);
    M = ((int)(25.0F * f1));
    N = ((int)(2.0F * f1));
    B = ((int)(16.0F * f1));
    u.a(this, new h());
    if (u.i(this) == 0) {
      u.f(this, 1);
    }
    u.a(this, new d());
  }
  
  public void b(i paramI)
  {
    List localList = a0;
    if (localList != null) {
      localList.remove(paramI);
    }
  }
  
  public void b(j paramJ)
  {
    List localList = U;
    if (localList != null) {
      localList.remove(paramJ);
    }
  }
  
  void c(int paramInt)
  {
    int i1 = h;
    if (i1 != paramInt)
    {
      localObject3 = b(i1);
      h = paramInt;
    }
    else
    {
      localObject3 = null;
    }
    if (g == null)
    {
      j();
      return;
    }
    if (x)
    {
      j();
      return;
    }
    if (getWindowToken() == null) {
      return;
    }
    g.b(this);
    int i5 = y;
    int i6 = Math.max(0, h - i5);
    int i7 = g.a();
    int i8 = Math.min(i7 - 1, h + i5);
    Object localObject1;
    if (i7 == c)
    {
      Object localObject4 = null;
      paramInt = 0;
      Object localObject5;
      int i2;
      for (;;)
      {
        localObject1 = localObject4;
        if (paramInt >= d.size()) {
          break;
        }
        localObject5 = (f)d.get(paramInt);
        i1 = b;
        i2 = h;
        if (i1 >= i2)
        {
          localObject1 = localObject4;
          if (i1 != i2) {
            break;
          }
          localObject1 = localObject5;
          break;
        }
        paramInt += 1;
      }
      localObject4 = localObject1;
      if (localObject1 == null)
      {
        localObject4 = localObject1;
        if (i7 > 0) {
          localObject4 = a(h, paramInt);
        }
      }
      if (localObject4 != null)
      {
        float f3 = 0.0F;
        int i4 = paramInt - 1;
        if (i4 >= 0) {
          localObject1 = (f)d.get(i4);
        } else {
          localObject1 = null;
        }
        int i9 = getClientWidth();
        float f2;
        if (i9 <= 0)
        {
          f2 = 0.0F;
        }
        else
        {
          f1 = d;
          f2 = getPaddingLeft() / i9 + (2.0F - f1);
        }
        int i3 = h - 1;
        localObject5 = localObject1;
        i2 = paramInt;
        while (i3 >= 0)
        {
          if ((f3 >= f2) && (i3 < i6))
          {
            if (localObject5 == null) {
              break;
            }
            paramInt = i2;
            f1 = f3;
            i1 = i4;
            localObject1 = localObject5;
            if (i3 == b)
            {
              paramInt = i2;
              f1 = f3;
              i1 = i4;
              localObject1 = localObject5;
              if (!c)
              {
                d.remove(i4);
                g.a(this, i3, a);
                i1 = i4 - 1;
                paramInt = i2 - 1;
                if (i1 >= 0) {
                  localObject1 = (f)d.get(i1);
                } else {
                  localObject1 = null;
                }
                f1 = f3;
              }
            }
          }
          else if ((localObject5 != null) && (i3 == b))
          {
            f1 = f3 + d;
            i1 = i4 - 1;
            if (i1 >= 0) {
              localObject1 = (f)d.get(i1);
            } else {
              localObject1 = null;
            }
            paramInt = i2;
          }
          else
          {
            f1 = f3 + a1d;
            paramInt = i2 + 1;
            if (i4 >= 0) {
              localObject1 = (f)d.get(i4);
            } else {
              localObject1 = null;
            }
            i1 = i4;
          }
          i3 -= 1;
          i2 = paramInt;
          f3 = f1;
          i4 = i1;
          localObject5 = localObject1;
        }
        float f1 = d;
        paramInt = i2 + 1;
        if (f1 < 2.0F)
        {
          if (paramInt < d.size()) {
            localObject1 = (f)d.get(paramInt);
          } else {
            localObject1 = null;
          }
          if (i9 <= 0) {
            f2 = 0.0F;
          } else {
            f2 = getPaddingRight() / i9 + 2.0F;
          }
          i3 = h + 1;
          i1 = i6;
          i4 = i5;
          while (i3 < i7)
          {
            if ((f1 >= f2) && (i3 > i8))
            {
              if (localObject1 == null) {
                break;
              }
              if ((i3 == b) && (!c))
              {
                d.remove(paramInt);
                g.a(this, i3, a);
                if (paramInt < d.size()) {
                  localObject1 = (f)d.get(paramInt);
                } else {
                  localObject1 = null;
                }
              }
            }
            else if ((localObject1 != null) && (i3 == b))
            {
              f1 += d;
              paramInt += 1;
              if (paramInt < d.size()) {
                localObject1 = (f)d.get(paramInt);
              } else {
                localObject1 = null;
              }
            }
            else
            {
              localObject1 = a(i3, paramInt);
              paramInt += 1;
              f1 += d;
              if (paramInt < d.size()) {
                localObject1 = (f)d.get(paramInt);
              } else {
                localObject1 = null;
              }
            }
            i3 += 1;
          }
        }
        a((f)localObject4, i2, (f)localObject3);
        g.b(this, h, a);
      }
      g.a(this);
      i1 = getChildCount();
      paramInt = 0;
      while (paramInt < i1)
      {
        localObject3 = getChildAt(paramInt);
        localObject1 = (g)((View)localObject3).getLayoutParams();
        f = paramInt;
        if ((!a) && (c == 0.0F))
        {
          localObject3 = b((View)localObject3);
          if (localObject3 != null)
          {
            c = d;
            e = b;
          }
        }
        paramInt += 1;
      }
      j();
      if (hasFocus())
      {
        localObject1 = findFocus();
        if (localObject1 != null) {
          localObject1 = a((View)localObject1);
        } else {
          localObject1 = null;
        }
        if ((localObject1 == null) || (b != h))
        {
          paramInt = 0;
          while (paramInt < getChildCount())
          {
            localObject1 = getChildAt(paramInt);
            localObject3 = b((View)localObject1);
            if ((localObject3 != null) && (b == h) && (((View)localObject1).requestFocus(2))) {
              return;
            }
            paramInt += 1;
          }
        }
      }
      return;
    }
    try
    {
      localObject1 = getResources().getResourceName(getId());
    }
    catch (Resources.NotFoundException localNotFoundException)
    {
      localObject2 = Integer.toHexString(getId());
    }
    Object localObject3 = new StringBuilder();
    ((StringBuilder)localObject3).append("The application's PagerAdapter changed the adapter's contents without calling PagerAdapter#notifyDataSetChanged! Expected adapter item count: ");
    ((StringBuilder)localObject3).append(c);
    ((StringBuilder)localObject3).append(", found: ");
    ((StringBuilder)localObject3).append(i7);
    ((StringBuilder)localObject3).append(" Pager id: ");
    ((StringBuilder)localObject3).append((String)localObject2);
    ((StringBuilder)localObject3).append(" Pager class: ");
    ((StringBuilder)localObject3).append(getClass());
    ((StringBuilder)localObject3).append(" Problematic adapter: ");
    ((StringBuilder)localObject3).append(g.getClass());
    Object localObject2 = new IllegalStateException(((StringBuilder)localObject3).toString());
    for (;;)
    {
      throw ((Throwable)localObject2);
    }
  }
  
  boolean c()
  {
    int i1 = h;
    if (i1 > 0)
    {
      a(i1 - 1, true);
      return true;
    }
    return false;
  }
  
  public boolean canScrollHorizontally(int paramInt)
  {
    q localQ = g;
    boolean bool2 = false;
    boolean bool1 = false;
    if (localQ == null) {
      return false;
    }
    int i1 = getClientWidth();
    int i2 = getScrollX();
    if (paramInt < 0)
    {
      if (i2 > (int)(i1 * s)) {
        bool1 = true;
      }
      return bool1;
    }
    if (paramInt > 0)
    {
      bool1 = bool2;
      if (i2 < (int)(i1 * t)) {
        bool1 = true;
      }
      return bool1;
    }
    return false;
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return ((paramLayoutParams instanceof g)) && (super.checkLayoutParams(paramLayoutParams));
  }
  
  public void computeScroll()
  {
    m = true;
    if ((!l.isFinished()) && (l.computeScrollOffset()))
    {
      int i1 = getScrollX();
      int i2 = getScrollY();
      int i3 = l.getCurrX();
      int i4 = l.getCurrY();
      if ((i1 != i3) || (i2 != i4))
      {
        scrollTo(i3, i4);
        if (!f(i3))
        {
          l.abortAnimation();
          scrollTo(0, i4);
        }
      }
      u.B(this);
      return;
    }
    a(true);
  }
  
  boolean d()
  {
    q localQ = g;
    if ((localQ != null) && (h < localQ.a() - 1))
    {
      a(h + 1, true);
      return true;
    }
    return false;
  }
  
  public boolean dispatchKeyEvent(KeyEvent paramKeyEvent)
  {
    return (super.dispatchKeyEvent(paramKeyEvent)) || (a(paramKeyEvent));
  }
  
  public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent)
  {
    if (paramAccessibilityEvent.getEventType() == 4096) {
      return super.dispatchPopulateAccessibilityEvent(paramAccessibilityEvent);
    }
    int i2 = getChildCount();
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = getChildAt(i1);
      if (localView.getVisibility() == 0)
      {
        f localF = b(localView);
        if ((localF != null) && (b == h) && (localView.dispatchPopulateAccessibilityEvent(paramAccessibilityEvent))) {
          return true;
        }
      }
      i1 += 1;
    }
    return false;
  }
  
  public void draw(Canvas paramCanvas)
  {
    super.draw(paramCanvas);
    int i3 = 0;
    int i1 = 0;
    int i4 = getOverScrollMode();
    if (i4 != 0) {
      if (i4 == 1)
      {
        q localQ = g;
        if ((localQ != null) && (localQ.a() > 1)) {}
      }
      else
      {
        P.finish();
        Q.finish();
        break label256;
      }
    }
    int i2;
    if (!P.isFinished())
    {
      i3 = paramCanvas.save();
      i1 = getHeight() - getPaddingTop() - getPaddingBottom();
      i4 = getWidth();
      paramCanvas.rotate(270.0F);
      paramCanvas.translate(-i1 + getPaddingTop(), s * i4);
      P.setSize(i1, i4);
      i2 = false | P.draw(paramCanvas);
      paramCanvas.restoreToCount(i3);
    }
    i3 = i2;
    boolean bool;
    if (!Q.isFinished())
    {
      i4 = paramCanvas.save();
      i3 = getWidth();
      int i5 = getHeight();
      int i6 = getPaddingTop();
      int i7 = getPaddingBottom();
      paramCanvas.rotate(90.0F);
      paramCanvas.translate(-getPaddingTop(), -(t + 1.0F) * i3);
      Q.setSize(i5 - i6 - i7, i3);
      bool = i2 | Q.draw(paramCanvas);
      paramCanvas.restoreToCount(i4);
    }
    label256:
    if (bool) {
      u.B(this);
    }
  }
  
  protected void drawableStateChanged()
  {
    super.drawableStateChanged();
    Drawable localDrawable = p;
    if ((localDrawable != null) && (localDrawable.isStateful())) {
      localDrawable.setState(getDrawableState());
    }
  }
  
  void e()
  {
    c(h);
  }
  
  protected ViewGroup.LayoutParams generateDefaultLayoutParams()
  {
    return new g();
  }
  
  public ViewGroup.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new g(getContext(), paramAttributeSet);
  }
  
  protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return generateDefaultLayoutParams();
  }
  
  public q getAdapter()
  {
    return g;
  }
  
  protected int getChildDrawingOrder(int paramInt1, int paramInt2)
  {
    if (d0 == 2) {
      paramInt2 = paramInt1 - 1 - paramInt2;
    }
    return e0.get(paramInt2)).getLayoutParams()).f;
  }
  
  public int getCurrentItem()
  {
    return h;
  }
  
  public int getOffscreenPageLimit()
  {
    return y;
  }
  
  public int getPageMargin()
  {
    return o;
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    R = true;
  }
  
  protected void onDetachedFromWindow()
  {
    removeCallbacks(f0);
    Scroller localScroller = l;
    if ((localScroller != null) && (!localScroller.isFinished())) {
      l.abortAnimation();
    }
    super.onDetachedFromWindow();
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    if ((o > 0) && (p != null) && (d.size() > 0) && (g != null))
    {
      int i3 = getScrollX();
      int i4 = getWidth();
      float f2 = o / i4;
      int i2 = 0;
      Object localObject = (f)d.get(0);
      float f1 = e;
      int i5 = d.size();
      int i1 = b;
      int i6 = d.get(i5 - 1)).b;
      while (i1 < i6)
      {
        while ((i1 > b) && (i2 < i5))
        {
          localObject = d;
          i2 += 1;
          localObject = (f)((ArrayList)localObject).get(i2);
        }
        float f4;
        float f3;
        if (i1 == b)
        {
          f1 = e;
          f4 = d;
          f3 = (f1 + f4) * i4;
          f1 = f1 + f4 + f2;
        }
        else
        {
          f4 = g.b(i1);
          f3 = i4 * (f1 + f4);
          f1 += f4 + f2;
        }
        if (o + f3 > i3)
        {
          p.setBounds(Math.round(f3), q, Math.round(o + f3), r);
          p.draw(paramCanvas);
        }
        if (f3 > i3 + i4) {
          return;
        }
        i1 += 1;
      }
      return;
    }
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getAction() & 0xFF;
    if ((i1 != 3) && (i1 != 1))
    {
      if (i1 != 0)
      {
        if (z) {
          return true;
        }
        if (A) {
          return false;
        }
      }
      float f1;
      if (i1 != 0)
      {
        if (i1 != 2)
        {
          if (i1 == 6) {
            a(paramMotionEvent);
          }
        }
        else
        {
          i1 = I;
          if (i1 != -1)
          {
            i1 = paramMotionEvent.findPointerIndex(i1);
            float f2 = paramMotionEvent.getX(i1);
            f1 = f2 - E;
            float f4 = Math.abs(f1);
            float f3 = paramMotionEvent.getY(i1);
            float f5 = Math.abs(f3 - H);
            if ((f1 != 0.0F) && (!a(E, f1)) && (a(this, false, (int)f1, (int)f2, (int)f3)))
            {
              E = f2;
              F = f3;
              A = true;
              return false;
            }
            if ((f4 > D) && (0.5F * f4 > f5))
            {
              z = true;
              c(true);
              setScrollState(1);
              if (f1 > 0.0F) {
                f1 = G + D;
              } else {
                f1 = G - D;
              }
              E = f1;
              F = f3;
              setScrollingCacheEnabled(true);
            }
            else if (f5 > D)
            {
              A = true;
            }
            if ((z) && (b(f2))) {
              u.B(this);
            }
          }
        }
      }
      else
      {
        f1 = paramMotionEvent.getX();
        G = f1;
        E = f1;
        f1 = paramMotionEvent.getY();
        H = f1;
        F = f1;
        I = paramMotionEvent.getPointerId(0);
        A = false;
        m = true;
        l.computeScrollOffset();
        if ((g0 == 2) && (Math.abs(l.getFinalX() - l.getCurrX()) > N))
        {
          l.abortAnimation();
          x = false;
          e();
          z = true;
          c(true);
          setScrollState(1);
        }
        else
        {
          a(false);
          z = false;
        }
      }
      if (J == null) {
        J = VelocityTracker.obtain();
      }
      J.addMovement(paramMotionEvent);
      return z;
    }
    i();
    return false;
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i8 = getChildCount();
    int i9 = paramInt3 - paramInt1;
    int i10 = paramInt4 - paramInt2;
    paramInt1 = getPaddingLeft();
    paramInt2 = getPaddingTop();
    int i1 = getPaddingRight();
    paramInt4 = getPaddingBottom();
    int i11 = getScrollX();
    int i3 = 0;
    int i4 = 0;
    View localView;
    int i5;
    g localG;
    while (i4 < i8)
    {
      localView = getChildAt(i4);
      paramInt3 = paramInt1;
      i2 = paramInt2;
      i5 = i1;
      int i6 = paramInt4;
      int i7 = i3;
      if (localView.getVisibility() != 8)
      {
        localG = (g)localView.getLayoutParams();
        if (a)
        {
          i2 = b;
          paramInt3 = i2 & 0x7;
          i5 = i2 & 0x70;
          if (paramInt3 != 1)
          {
            if (paramInt3 != 3)
            {
              if (paramInt3 != 5)
              {
                paramInt3 = paramInt1;
                i2 = paramInt1;
              }
              else
              {
                paramInt3 = i9 - i1 - localView.getMeasuredWidth();
                i1 += localView.getMeasuredWidth();
                i2 = paramInt1;
              }
            }
            else
            {
              paramInt3 = paramInt1;
              i2 = paramInt1 + localView.getMeasuredWidth();
            }
          }
          else
          {
            paramInt3 = Math.max((i9 - localView.getMeasuredWidth()) / 2, paramInt1);
            i2 = paramInt1;
          }
          if (i5 != 16)
          {
            if (i5 != 48)
            {
              if (i5 != 80)
              {
                paramInt1 = paramInt2;
              }
              else
              {
                paramInt1 = i10 - paramInt4 - localView.getMeasuredHeight();
                paramInt4 += localView.getMeasuredHeight();
              }
            }
            else
            {
              paramInt1 = paramInt2;
              paramInt2 += localView.getMeasuredHeight();
            }
          }
          else {
            paramInt1 = Math.max((i10 - localView.getMeasuredHeight()) / 2, paramInt2);
          }
          paramInt3 += i11;
          localView.layout(paramInt3, paramInt1, localView.getMeasuredWidth() + paramInt3, paramInt1 + localView.getMeasuredHeight());
          i7 = i3 + 1;
          paramInt3 = i2;
          i2 = paramInt2;
          i5 = i1;
          i6 = paramInt4;
        }
        else
        {
          i7 = i3;
          i6 = paramInt4;
          i5 = i1;
          i2 = paramInt2;
          paramInt3 = paramInt1;
        }
      }
      i4 += 1;
      paramInt1 = paramInt3;
      paramInt2 = i2;
      i1 = i5;
      paramInt4 = i6;
      i3 = i7;
    }
    i4 = i9 - paramInt1 - i1;
    int i2 = 0;
    paramInt3 = i9;
    i1 = i8;
    while (i2 < i1)
    {
      localView = getChildAt(i2);
      if (localView.getVisibility() != 8)
      {
        localG = (g)localView.getLayoutParams();
        if (!a)
        {
          f localF = b(localView);
          if (localF != null)
          {
            i5 = paramInt1 + (int)(i4 * e);
            if (d)
            {
              d = false;
              localView.measure(View.MeasureSpec.makeMeasureSpec((int)(i4 * c), 1073741824), View.MeasureSpec.makeMeasureSpec(i10 - paramInt2 - paramInt4, 1073741824));
            }
            localView.layout(i5, paramInt2, localView.getMeasuredWidth() + i5, localView.getMeasuredHeight() + paramInt2);
          }
        }
        else {}
      }
      i2 += 1;
    }
    q = paramInt2;
    r = (i10 - paramInt4);
    T = i3;
    if (R) {
      a(h, false, 0, false);
    }
    R = false;
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    setMeasuredDimension(ViewGroup.getDefaultSize(0, paramInt1), ViewGroup.getDefaultSize(0, paramInt2));
    int i5 = getMeasuredWidth();
    int i6 = i5 / 10;
    C = Math.min(i6, B);
    paramInt1 = i5 - getPaddingLeft() - getPaddingRight();
    paramInt2 = getMeasuredHeight() - getPaddingTop() - getPaddingBottom();
    int i10 = getChildCount();
    int i4 = 0;
    View localView;
    g localG;
    while (i4 < i10)
    {
      localView = getChildAt(i4);
      int i2;
      if (localView.getVisibility() != 8)
      {
        localG = (g)localView.getLayoutParams();
        if ((localG != null) && (a))
        {
          i2 = b;
          i1 = i2 & 0x7;
          int i7 = i2 & 0x70;
          int i3 = Integer.MIN_VALUE;
          i2 = Integer.MIN_VALUE;
          if ((i7 != 48) && (i7 != 80)) {
            i7 = 0;
          } else {
            i7 = 1;
          }
          int i8;
          if ((i1 != 3) && (i1 != 5)) {
            i8 = 0;
          } else {
            i8 = 1;
          }
          if (i7 != 0)
          {
            i1 = 1073741824;
          }
          else
          {
            i1 = i3;
            if (i8 != 0)
            {
              i2 = 1073741824;
              i1 = i3;
            }
          }
          i3 = width;
          int i9;
          if (i3 != -2)
          {
            i9 = 1073741824;
            if (i3 != -1) {
              i1 = width;
            } else {
              i1 = paramInt1;
            }
          }
          else
          {
            i3 = paramInt1;
            i9 = i1;
            i1 = i3;
          }
          i3 = height;
          if (i3 != -2)
          {
            if (i3 != -1)
            {
              i2 = height;
              i3 = 1073741824;
            }
            else
            {
              i3 = 1073741824;
              i2 = paramInt2;
            }
          }
          else
          {
            i3 = i2;
            i2 = paramInt2;
          }
          localView.measure(View.MeasureSpec.makeMeasureSpec(i1, i9), View.MeasureSpec.makeMeasureSpec(i2, i3));
          if (i7 != 0)
          {
            i2 = paramInt2 - localView.getMeasuredHeight();
            i1 = paramInt1;
          }
          else
          {
            i1 = paramInt1;
            i2 = paramInt2;
            if (i8 != 0)
            {
              i1 = paramInt1 - localView.getMeasuredWidth();
              i2 = paramInt2;
            }
          }
        }
        else
        {
          i1 = paramInt1;
          i2 = paramInt2;
        }
      }
      else
      {
        i2 = paramInt2;
        i1 = paramInt1;
      }
      i4 += 1;
      paramInt1 = i1;
      paramInt2 = i2;
    }
    View.MeasureSpec.makeMeasureSpec(paramInt1, 1073741824);
    u = View.MeasureSpec.makeMeasureSpec(paramInt2, 1073741824);
    v = true;
    e();
    v = false;
    int i1 = getChildCount();
    paramInt2 = 0;
    while (paramInt2 < i1)
    {
      localView = getChildAt(paramInt2);
      if (localView.getVisibility() != 8)
      {
        localG = (g)localView.getLayoutParams();
        if ((localG == null) || (!a)) {
          localView.measure(View.MeasureSpec.makeMeasureSpec((int)(paramInt1 * c), 1073741824), u);
        }
      }
      paramInt2 += 1;
    }
  }
  
  protected boolean onRequestFocusInDescendants(int paramInt, Rect paramRect)
  {
    int i3 = getChildCount();
    int i1;
    int i2;
    if ((paramInt & 0x2) != 0)
    {
      i1 = 0;
      i2 = 1;
    }
    else
    {
      i1 = i3 - 1;
      i2 = -1;
      i3 = -1;
    }
    while (i1 != i3)
    {
      View localView = getChildAt(i1);
      if (localView.getVisibility() == 0)
      {
        f localF = b(localView);
        if ((localF != null) && (b == h) && (localView.requestFocus(paramInt, paramRect))) {
          return true;
        }
      }
      i1 += i2;
    }
    return false;
  }
  
  public void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof m))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    paramParcelable = (m)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.a());
    q localQ = g;
    if (localQ != null)
    {
      localQ.a(f, g);
      a(e, false, true);
      return;
    }
    i = e;
    j = f;
    k = g;
  }
  
  public Parcelable onSaveInstanceState()
  {
    m localM = new m(super.onSaveInstanceState());
    e = h;
    q localQ = g;
    if (localQ != null) {
      f = localQ.c();
    }
    return localM;
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    if (paramInt1 != paramInt3)
    {
      paramInt2 = o;
      a(paramInt1, paramInt3, paramInt2, paramInt2);
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if (O) {
      return true;
    }
    if ((paramMotionEvent.getAction() == 0) && (paramMotionEvent.getEdgeFlags() != 0)) {
      return false;
    }
    Object localObject = g;
    if (localObject != null)
    {
      if (((q)localObject).a() == 0) {
        return false;
      }
      if (J == null) {
        J = VelocityTracker.obtain();
      }
      J.addMovement(paramMotionEvent);
      int i1 = paramMotionEvent.getAction();
      boolean bool = false;
      i1 &= 0xFF;
      float f1;
      if (i1 != 0)
      {
        if (i1 != 1)
        {
          if (i1 != 2)
          {
            if (i1 != 3)
            {
              if (i1 != 5)
              {
                if (i1 == 6)
                {
                  a(paramMotionEvent);
                  E = paramMotionEvent.getX(paramMotionEvent.findPointerIndex(I));
                }
              }
              else
              {
                i1 = paramMotionEvent.getActionIndex();
                E = paramMotionEvent.getX(i1);
                I = paramMotionEvent.getPointerId(i1);
              }
            }
            else if (z)
            {
              a(h, true, 0, false);
              bool = i();
            }
          }
          else
          {
            if (!z)
            {
              i1 = paramMotionEvent.findPointerIndex(I);
              if (i1 == -1)
              {
                bool = i();
                break label608;
              }
              f1 = paramMotionEvent.getX(i1);
              float f3 = Math.abs(f1 - E);
              float f2 = paramMotionEvent.getY(i1);
              float f4 = Math.abs(f2 - F);
              if ((f3 > D) && (f3 > f4))
              {
                z = true;
                c(true);
                f3 = G;
                if (f1 - f3 > 0.0F) {
                  f1 = f3 + D;
                } else {
                  f1 = f3 - D;
                }
                E = f1;
                F = f2;
                setScrollState(1);
                setScrollingCacheEnabled(true);
                localObject = getParent();
                if (localObject != null) {
                  ((ViewParent)localObject).requestDisallowInterceptTouchEvent(true);
                }
              }
            }
            if (z) {
              bool = false | b(paramMotionEvent.getX(paramMotionEvent.findPointerIndex(I)));
            }
          }
        }
        else if (z)
        {
          localObject = J;
          ((VelocityTracker)localObject).computeCurrentVelocity(1000, L);
          i1 = (int)((VelocityTracker)localObject).getXVelocity(I);
          x = true;
          int i2 = getClientWidth();
          int i3 = getScrollX();
          localObject = g();
          f1 = o / i2;
          a(a(b, (i3 / i2 - e) / (d + f1), i1, (int)(paramMotionEvent.getX(paramMotionEvent.findPointerIndex(I)) - G)), true, true, i1);
          bool = i();
        }
      }
      else
      {
        l.abortAnimation();
        x = false;
        e();
        f1 = paramMotionEvent.getX();
        G = f1;
        E = f1;
        f1 = paramMotionEvent.getY();
        H = f1;
        F = f1;
        I = paramMotionEvent.getPointerId(0);
      }
      label608:
      if (bool) {
        u.B(this);
      }
      return true;
    }
    return false;
  }
  
  public void removeView(View paramView)
  {
    if (v)
    {
      removeViewInLayout(paramView);
      return;
    }
    super.removeView(paramView);
  }
  
  public void setAdapter(q paramQ)
  {
    Object localObject = g;
    int i1;
    if (localObject != null)
    {
      ((q)localObject).b(null);
      g.b(this);
      i1 = 0;
      while (i1 < d.size())
      {
        localObject = (f)d.get(i1);
        g.a(this, b, a);
        i1 += 1;
      }
      g.a(this);
      d.clear();
      h();
      h = 0;
      scrollTo(0, 0);
    }
    localObject = g;
    g = paramQ;
    c = 0;
    if (g != null)
    {
      if (n == null) {
        n = new l();
      }
      g.b(n);
      x = false;
      boolean bool = R;
      R = true;
      c = g.a();
      if (i >= 0)
      {
        g.a(j, k);
        a(i, false, true);
        i = -1;
        j = null;
        k = null;
      }
      else if (!bool)
      {
        e();
      }
      else
      {
        requestLayout();
      }
    }
    List localList = a0;
    if ((localList != null) && (!localList.isEmpty()))
    {
      i1 = 0;
      int i2 = a0.size();
      while (i1 < i2)
      {
        ((i)a0.get(i1)).a(this, (q)localObject, paramQ);
        i1 += 1;
      }
    }
  }
  
  public void setCurrentItem(int paramInt)
  {
    x = false;
    a(paramInt, R ^ true, false);
  }
  
  public void setOffscreenPageLimit(int paramInt)
  {
    int i1 = paramInt;
    if (paramInt < 1)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Requested offscreen page limit ");
      localStringBuilder.append(paramInt);
      localStringBuilder.append(" too small; defaulting to ");
      localStringBuilder.append(1);
      Log.w("ViewPager", localStringBuilder.toString());
      i1 = 1;
    }
    if (i1 != y)
    {
      y = i1;
      e();
    }
  }
  
  @Deprecated
  public void setOnPageChangeListener(j paramJ)
  {
    V = paramJ;
  }
  
  public void setPageMargin(int paramInt)
  {
    int i1 = o;
    o = paramInt;
    int i2 = getWidth();
    a(i2, i2, paramInt, i1);
    requestLayout();
  }
  
  public void setPageMarginDrawable(int paramInt)
  {
    setPageMarginDrawable(android.support.v4.content.a.c(getContext(), paramInt));
  }
  
  public void setPageMarginDrawable(Drawable paramDrawable)
  {
    p = paramDrawable;
    if (paramDrawable != null) {
      refreshDrawableState();
    }
    boolean bool;
    if (paramDrawable == null) {
      bool = true;
    } else {
      bool = false;
    }
    setWillNotDraw(bool);
    invalidate();
  }
  
  void setScrollState(int paramInt)
  {
    if (g0 == paramInt) {
      return;
    }
    g0 = paramInt;
    if (b0 != null)
    {
      boolean bool;
      if (paramInt != 0) {
        bool = true;
      } else {
        bool = false;
      }
      b(bool);
    }
    e(paramInt);
  }
  
  protected boolean verifyDrawable(Drawable paramDrawable)
  {
    return (super.verifyDrawable(paramDrawable)) || (paramDrawable == p);
  }
  
  static final class a
    implements Comparator<ViewPager.f>
  {
    a() {}
    
    public int a(ViewPager.f paramF1, ViewPager.f paramF2)
    {
      return b - b;
    }
  }
  
  static final class b
    implements Interpolator
  {
    b() {}
    
    public float getInterpolation(float paramFloat)
    {
      paramFloat -= 1.0F;
      return paramFloat * paramFloat * paramFloat * paramFloat * paramFloat + 1.0F;
    }
  }
  
  class c
    implements Runnable
  {
    c() {}
    
    public void run()
    {
      setScrollState(0);
      e();
    }
  }
  
  class d
    implements p
  {
    private final Rect a = new Rect();
    
    d() {}
    
    public c0 a(View paramView, c0 paramC0)
    {
      paramView = u.b(paramView, paramC0);
      if (paramView.g()) {
        return paramView;
      }
      paramC0 = a;
      left = paramView.c();
      top = paramView.e();
      right = paramView.d();
      bottom = paramView.b();
      int i = 0;
      int j = getChildCount();
      while (i < j)
      {
        c0 localC0 = u.a(getChildAt(i), paramView);
        left = Math.min(localC0.c(), left);
        top = Math.min(localC0.e(), top);
        right = Math.min(localC0.d(), right);
        bottom = Math.min(localC0.b(), bottom);
        i += 1;
      }
      return paramView.a(left, top, right, bottom);
    }
  }
  
  @Inherited
  @Retention(RetentionPolicy.RUNTIME)
  @Target({java.lang.annotation.ElementType.TYPE})
  public static @interface e {}
  
  static class f
  {
    Object a;
    int b;
    boolean c;
    float d;
    float e;
    
    f() {}
  }
  
  public static class g
    extends ViewGroup.LayoutParams
  {
    public boolean a;
    public int b;
    float c = 0.0F;
    boolean d;
    int e;
    int f;
    
    public g()
    {
      super(-1);
    }
    
    public g(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
      paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, ViewPager.h0);
      b = paramContext.getInteger(0, 48);
      paramContext.recycle();
    }
  }
  
  class h
    extends b
  {
    h() {}
    
    private boolean b()
    {
      q localQ = g;
      return (localQ != null) && (localQ.a() > 1);
    }
    
    public void a(View paramView, c paramC)
    {
      super.a(paramView, paramC);
      paramC.a(ViewPager.class.getName());
      paramC.k(b());
      if (canScrollHorizontally(1)) {
        paramC.a(4096);
      }
      if (canScrollHorizontally(-1)) {
        paramC.a(8192);
      }
    }
    
    public boolean a(View paramView, int paramInt, Bundle paramBundle)
    {
      if (super.a(paramView, paramInt, paramBundle)) {
        return true;
      }
      if (paramInt != 4096)
      {
        if (paramInt != 8192) {
          return false;
        }
        if (canScrollHorizontally(-1))
        {
          paramView = ViewPager.this;
          paramView.setCurrentItem(h - 1);
          return true;
        }
        return false;
      }
      if (canScrollHorizontally(1))
      {
        paramView = ViewPager.this;
        paramView.setCurrentItem(h + 1);
        return true;
      }
      return false;
    }
    
    public void b(View paramView, AccessibilityEvent paramAccessibilityEvent)
    {
      super.b(paramView, paramAccessibilityEvent);
      paramAccessibilityEvent.setClassName(ViewPager.class.getName());
      paramAccessibilityEvent.setScrollable(b());
      if (paramAccessibilityEvent.getEventType() == 4096)
      {
        paramView = g;
        if (paramView != null)
        {
          paramAccessibilityEvent.setItemCount(paramView.a());
          paramAccessibilityEvent.setFromIndex(h);
          paramAccessibilityEvent.setToIndex(h);
        }
      }
    }
  }
  
  public static abstract interface i
  {
    public abstract void a(ViewPager paramViewPager, q paramQ1, q paramQ2);
  }
  
  public static abstract interface j
  {
    public abstract void a(int paramInt);
    
    public abstract void a(int paramInt1, float paramFloat, int paramInt2);
    
    public abstract void b(int paramInt);
  }
  
  public static abstract interface k
  {
    public abstract void a(View paramView, float paramFloat);
  }
  
  private class l
    extends DataSetObserver
  {
    l() {}
    
    public void onChanged()
    {
      a();
    }
    
    public void onInvalidated()
    {
      a();
    }
  }
  
  public static class m
    extends a
  {
    public static final Parcelable.Creator<m> CREATOR = new a();
    int e;
    Parcelable f;
    ClassLoader g;
    
    m(Parcel paramParcel, ClassLoader paramClassLoader)
    {
      super(paramClassLoader);
      ClassLoader localClassLoader = paramClassLoader;
      if (paramClassLoader == null) {
        localClassLoader = getClass().getClassLoader();
      }
      e = paramParcel.readInt();
      f = paramParcel.readParcelable(localClassLoader);
      g = localClassLoader;
    }
    
    public m(Parcelable paramParcelable)
    {
      super();
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("FragmentPager.SavedState{");
      localStringBuilder.append(Integer.toHexString(System.identityHashCode(this)));
      localStringBuilder.append(" position=");
      localStringBuilder.append(e);
      localStringBuilder.append("}");
      return localStringBuilder.toString();
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      super.writeToParcel(paramParcel, paramInt);
      paramParcel.writeInt(e);
      paramParcel.writeParcelable(f, paramInt);
    }
    
    static final class a
      implements Parcelable.ClassLoaderCreator<ViewPager.m>
    {
      a() {}
      
      public ViewPager.m createFromParcel(Parcel paramParcel)
      {
        return new ViewPager.m(paramParcel, null);
      }
      
      public ViewPager.m createFromParcel(Parcel paramParcel, ClassLoader paramClassLoader)
      {
        return new ViewPager.m(paramParcel, paramClassLoader);
      }
      
      public ViewPager.m[] newArray(int paramInt)
      {
        return new ViewPager.m[paramInt];
      }
    }
  }
  
  static class n
    implements Comparator<View>
  {
    n() {}
    
    public int a(View paramView1, View paramView2)
    {
      paramView1 = (ViewPager.g)paramView1.getLayoutParams();
      paramView2 = (ViewPager.g)paramView2.getLayoutParams();
      boolean bool = a;
      if (bool != a)
      {
        if (bool) {
          return 1;
        }
        return -1;
      }
      return e - e;
    }
  }
}
