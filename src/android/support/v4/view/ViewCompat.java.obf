package android.support.v4.view;

import android.animation.ValueAnimator;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.PorterDuff.Mode;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.util.SparseArray;
import android.view.Display;
import android.view.KeyEvent;
import android.view.PointerIcon;
import android.view.View;
import android.view.View.OnApplyWindowInsetsListener;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.WindowInsets;
import android.view.WindowManager;
import java.lang.ref.WeakReference;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.WeakHashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class u
{
  private static Field a;
  private static boolean b;
  private static Field c;
  private static boolean d;
  private static WeakHashMap<View, String> e;
  private static WeakHashMap<View, y> f = null;
  private static Field g;
  private static boolean h = false;
  private static ThreadLocal<Rect> i;
  
  static
  {
    new AtomicInteger(1);
  }
  
  public static boolean A(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 17) {
      return paramView.isPaddingRelative();
    }
    return false;
  }
  
  public static void B(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16)
    {
      paramView.postInvalidateOnAnimation();
      return;
    }
    paramView.postInvalidate();
  }
  
  public static void C(View paramView)
  {
    int j = Build.VERSION.SDK_INT;
    if (j >= 20)
    {
      paramView.requestApplyInsets();
      return;
    }
    if (j >= 16) {
      paramView.requestFitSystemWindows();
    }
  }
  
  public static void D(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      paramView.stopNestedScroll();
      return;
    }
    if ((paramView instanceof k)) {
      ((k)paramView).stopNestedScroll();
    }
  }
  
  private static void E(View paramView)
  {
    float f1 = paramView.getTranslationY();
    paramView.setTranslationY(1.0F + f1);
    paramView.setTranslationY(f1);
  }
  
  private static Rect a()
  {
    if (i == null) {
      i = new ThreadLocal();
    }
    Rect localRect2 = (Rect)i.get();
    Rect localRect1 = localRect2;
    if (localRect2 == null)
    {
      localRect1 = new Rect();
      i.set(localRect1);
    }
    localRect1.setEmpty();
    return localRect1;
  }
  
  public static c0 a(View paramView, c0 paramC0)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      paramC0 = (WindowInsets)c0.a(paramC0);
      WindowInsets localWindowInsets = paramView.dispatchApplyWindowInsets(paramC0);
      paramView = paramC0;
      if (localWindowInsets != paramC0) {
        paramView = new WindowInsets(localWindowInsets);
      }
      return c0.a(paramView);
    }
    return paramC0;
  }
  
  public static y a(View paramView)
  {
    if (f == null) {
      f = new WeakHashMap();
    }
    y localY2 = (y)f.get(paramView);
    y localY1 = localY2;
    if (localY2 == null)
    {
      localY1 = new y(paramView);
      f.put(paramView, localY1);
    }
    return localY1;
  }
  
  public static void a(View paramView, float paramFloat)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      paramView.setElevation(paramFloat);
    }
  }
  
  private static void a(View paramView, int paramInt)
  {
    paramView.offsetLeftAndRight(paramInt);
    if (paramView.getVisibility() == 0)
    {
      E(paramView);
      paramView = paramView.getParent();
      if ((paramView instanceof View)) {
        E((View)paramView);
      }
    }
  }
  
  public static void a(View paramView, int paramInt1, int paramInt2)
  {
    if (Build.VERSION.SDK_INT >= 23) {
      paramView.setScrollIndicators(paramInt1, paramInt2);
    }
  }
  
  public static void a(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if (Build.VERSION.SDK_INT >= 17)
    {
      paramView.setPaddingRelative(paramInt1, paramInt2, paramInt3, paramInt4);
      return;
    }
    paramView.setPadding(paramInt1, paramInt2, paramInt3, paramInt4);
  }
  
  public static void a(View paramView, ColorStateList paramColorStateList)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      paramView.setBackgroundTintList(paramColorStateList);
      if (Build.VERSION.SDK_INT == 21)
      {
        paramColorStateList = paramView.getBackground();
        int j;
        if ((paramView.getBackgroundTintList() == null) && (paramView.getBackgroundTintMode() == null)) {
          j = 0;
        } else {
          j = 1;
        }
        if ((paramColorStateList != null) && (j != 0))
        {
          if (paramColorStateList.isStateful()) {
            paramColorStateList.setState(paramView.getDrawableState());
          }
          paramView.setBackground(paramColorStateList);
        }
      }
    }
    else if ((paramView instanceof t))
    {
      ((t)paramView).setSupportBackgroundTintList(paramColorStateList);
    }
  }
  
  public static void a(View paramView, PorterDuff.Mode paramMode)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      paramView.setBackgroundTintMode(paramMode);
      if (Build.VERSION.SDK_INT == 21)
      {
        paramMode = paramView.getBackground();
        int j;
        if ((paramView.getBackgroundTintList() == null) && (paramView.getBackgroundTintMode() == null)) {
          j = 0;
        } else {
          j = 1;
        }
        if ((paramMode != null) && (j != 0))
        {
          if (paramMode.isStateful()) {
            paramMode.setState(paramView.getDrawableState());
          }
          paramView.setBackground(paramMode);
        }
      }
    }
    else if ((paramView instanceof t))
    {
      ((t)paramView).setSupportBackgroundTintMode(paramMode);
    }
  }
  
  public static void a(View paramView, Rect paramRect)
  {
    if (Build.VERSION.SDK_INT >= 18) {
      paramView.setClipBounds(paramRect);
    }
  }
  
  public static void a(View paramView, Drawable paramDrawable)
  {
    if (Build.VERSION.SDK_INT >= 16)
    {
      paramView.setBackground(paramDrawable);
      return;
    }
    paramView.setBackgroundDrawable(paramDrawable);
  }
  
  public static void a(View paramView, b paramB)
  {
    if (paramB == null) {
      paramB = null;
    } else {
      paramB = paramB.a();
    }
    paramView.setAccessibilityDelegate(paramB);
  }
  
  public static void a(View paramView, android.support.v4.view.d0.c paramC)
  {
    paramView.onInitializeAccessibilityNodeInfo(paramC.v());
  }
  
  public static void a(View paramView, p paramP)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      if (paramP == null)
      {
        paramView.setOnApplyWindowInsetsListener(null);
        return;
      }
      paramView.setOnApplyWindowInsetsListener(new a(paramP));
    }
  }
  
  public static void a(View paramView, r paramR)
  {
    if (Build.VERSION.SDK_INT >= 24)
    {
      if (paramR != null) {
        paramR = paramR.a();
      } else {
        paramR = null;
      }
      paramView.setPointerIcon((PointerIcon)paramR);
    }
  }
  
  public static void a(View paramView, Runnable paramRunnable)
  {
    if (Build.VERSION.SDK_INT >= 16)
    {
      paramView.postOnAnimation(paramRunnable);
      return;
    }
    paramView.postDelayed(paramRunnable, ValueAnimator.getFrameDelay());
  }
  
  public static void a(View paramView, Runnable paramRunnable, long paramLong)
  {
    if (Build.VERSION.SDK_INT >= 16)
    {
      paramView.postOnAnimationDelayed(paramRunnable, paramLong);
      return;
    }
    paramView.postDelayed(paramRunnable, ValueAnimator.getFrameDelay() + paramLong);
  }
  
  public static void a(View paramView, String paramString)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      paramView.setTransitionName(paramString);
      return;
    }
    if (e == null) {
      e = new WeakHashMap();
    }
    e.put(paramView, paramString);
  }
  
  @Deprecated
  public static void a(View paramView, boolean paramBoolean)
  {
    paramView.setFitsSystemWindows(paramBoolean);
  }
  
  public static boolean a(View paramView, int paramInt, Bundle paramBundle)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return paramView.performAccessibilityAction(paramInt, paramBundle);
    }
    return false;
  }
  
  static boolean a(View paramView, KeyEvent paramKeyEvent)
  {
    if (Build.VERSION.SDK_INT >= 28) {
      return false;
    }
    return c.a(paramView).a(paramView, paramKeyEvent);
  }
  
  public static int b(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 19) {
      return paramView.getAccessibilityLiveRegion();
    }
    return 0;
  }
  
  public static c0 b(View paramView, c0 paramC0)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      paramC0 = (WindowInsets)c0.a(paramC0);
      WindowInsets localWindowInsets = paramView.onApplyWindowInsets(paramC0);
      paramView = paramC0;
      if (localWindowInsets != paramC0) {
        paramView = new WindowInsets(localWindowInsets);
      }
      return c0.a(paramView);
    }
    return paramC0;
  }
  
  private static void b(View paramView, int paramInt)
  {
    paramView.offsetTopAndBottom(paramInt);
    if (paramView.getVisibility() == 0)
    {
      E(paramView);
      paramView = paramView.getParent();
      if ((paramView instanceof View)) {
        E((View)paramView);
      }
    }
  }
  
  public static void b(View paramView, boolean paramBoolean)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      paramView.setHasTransientState(paramBoolean);
    }
  }
  
  static boolean b(View paramView, KeyEvent paramKeyEvent)
  {
    if (Build.VERSION.SDK_INT >= 28) {
      return false;
    }
    return c.a(paramView).a(paramKeyEvent);
  }
  
  public static ColorStateList c(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.getBackgroundTintList();
    }
    if ((paramView instanceof t)) {
      return ((t)paramView).getSupportBackgroundTintList();
    }
    return null;
  }
  
  public static void c(View paramView, int paramInt)
  {
    int j = Build.VERSION.SDK_INT;
    if (j >= 23)
    {
      paramView.offsetLeftAndRight(paramInt);
      return;
    }
    if (j >= 21)
    {
      Rect localRect = a();
      j = 0;
      ViewParent localViewParent = paramView.getParent();
      boolean bool;
      if ((localViewParent instanceof View))
      {
        View localView = (View)localViewParent;
        localRect.set(localView.getLeft(), localView.getTop(), localView.getRight(), localView.getBottom());
        bool = localRect.intersects(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom()) ^ true;
      }
      a(paramView, paramInt);
      if ((bool) && (localRect.intersect(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom()))) {
        ((View)localViewParent).invalidate(localRect);
      }
      return;
    }
    a(paramView, paramInt);
  }
  
  public static PorterDuff.Mode d(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.getBackgroundTintMode();
    }
    if ((paramView instanceof t)) {
      return ((t)paramView).getSupportBackgroundTintMode();
    }
    return null;
  }
  
  public static void d(View paramView, int paramInt)
  {
    int j = Build.VERSION.SDK_INT;
    if (j >= 23)
    {
      paramView.offsetTopAndBottom(paramInt);
      return;
    }
    if (j >= 21)
    {
      Rect localRect = a();
      j = 0;
      ViewParent localViewParent = paramView.getParent();
      boolean bool;
      if ((localViewParent instanceof View))
      {
        View localView = (View)localViewParent;
        localRect.set(localView.getLeft(), localView.getTop(), localView.getRight(), localView.getBottom());
        bool = localRect.intersects(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom()) ^ true;
      }
      b(paramView, paramInt);
      if ((bool) && (localRect.intersect(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom()))) {
        ((View)localViewParent).invalidate(localRect);
      }
      return;
    }
    b(paramView, paramInt);
  }
  
  public static Rect e(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 18) {
      return paramView.getClipBounds();
    }
    return null;
  }
  
  public static void e(View paramView, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 19) {
      paramView.setAccessibilityLiveRegion(paramInt);
    }
  }
  
  public static Display f(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 17) {
      return paramView.getDisplay();
    }
    if (x(paramView)) {
      return ((WindowManager)paramView.getContext().getSystemService("window")).getDefaultDisplay();
    }
    return null;
  }
  
  public static void f(View paramView, int paramInt)
  {
    int j = Build.VERSION.SDK_INT;
    if (j >= 19)
    {
      paramView.setImportantForAccessibility(paramInt);
      return;
    }
    if (j >= 16)
    {
      j = paramInt;
      if (paramInt == 4) {
        j = 2;
      }
      paramView.setImportantForAccessibility(j);
    }
  }
  
  public static float g(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.getElevation();
    }
    return 0.0F;
  }
  
  public static void g(View paramView, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      paramView.setImportantForAutofill(paramInt);
    }
  }
  
  public static void h(View paramView, int paramInt)
  {
    if ((paramView instanceof j))
    {
      ((j)paramView).a(paramInt);
      return;
    }
    if (paramInt == 0) {
      D(paramView);
    }
  }
  
  public static boolean h(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return paramView.getFitsSystemWindows();
    }
    return false;
  }
  
  public static int i(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return paramView.getImportantForAccessibility();
    }
    return 0;
  }
  
  @SuppressLint({"InlinedApi"})
  public static int j(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      return paramView.getImportantForAutofill();
    }
    return 0;
  }
  
  public static int k(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 17) {
      return paramView.getLayoutDirection();
    }
    return 0;
  }
  
  public static int l(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return paramView.getMinimumHeight();
    }
    if (!d)
    {
      try
      {
        c = View.class.getDeclaredField("mMinHeight");
        c.setAccessible(true);
      }
      catch (NoSuchFieldException localNoSuchFieldException) {}
      d = true;
    }
    Field localField = c;
    if (localField != null) {
      try
      {
        int j = ((Integer)localField.get(paramView)).intValue();
        return j;
      }
      catch (Exception paramView) {}
    }
    return 0;
  }
  
  public static int m(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return paramView.getMinimumWidth();
    }
    if (!b)
    {
      try
      {
        a = View.class.getDeclaredField("mMinWidth");
        a.setAccessible(true);
      }
      catch (NoSuchFieldException localNoSuchFieldException) {}
      b = true;
    }
    Field localField = a;
    if (localField != null) {
      try
      {
        int j = ((Integer)localField.get(paramView)).intValue();
        return j;
      }
      catch (Exception paramView) {}
    }
    return 0;
  }
  
  public static int n(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 17) {
      return paramView.getPaddingEnd();
    }
    return paramView.getPaddingRight();
  }
  
  public static int o(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 17) {
      return paramView.getPaddingStart();
    }
    return paramView.getPaddingLeft();
  }
  
  public static ViewParent p(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return paramView.getParentForAccessibility();
    }
    return paramView.getParent();
  }
  
  public static String q(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.getTransitionName();
    }
    WeakHashMap localWeakHashMap = e;
    if (localWeakHashMap == null) {
      return null;
    }
    return (String)localWeakHashMap.get(paramView);
  }
  
  public static int r(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return paramView.getWindowSystemUiVisibility();
    }
    return 0;
  }
  
  public static float s(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.getZ();
    }
    return 0.0F;
  }
  
  /* Error */
  public static boolean t(View paramView)
  {
    // Byte code:
    //   0: getstatic 38	android/support/v4/view/u:h	Z
    //   3: istore_2
    //   4: iconst_0
    //   5: istore_1
    //   6: iload_2
    //   7: ifeq +5 -> 12
    //   10: iconst_0
    //   11: ireturn
    //   12: getstatic 509	android/support/v4/view/u:g	Ljava/lang/reflect/Field;
    //   15: ifnonnull +31 -> 46
    //   18: ldc 49
    //   20: ldc_w 511
    //   23: invokevirtual 448	java/lang/Class:getDeclaredField	(Ljava/lang/String;)Ljava/lang/reflect/Field;
    //   26: putstatic 509	android/support/v4/view/u:g	Ljava/lang/reflect/Field;
    //   29: getstatic 509	android/support/v4/view/u:g	Ljava/lang/reflect/Field;
    //   32: iconst_1
    //   33: invokevirtual 455	java/lang/reflect/Field:setAccessible	(Z)V
    //   36: goto +10 -> 46
    //   39: astore_0
    //   40: iconst_1
    //   41: putstatic 38	android/support/v4/view/u:h	Z
    //   44: iconst_0
    //   45: ireturn
    //   46: getstatic 509	android/support/v4/view/u:g	Ljava/lang/reflect/Field;
    //   49: aload_0
    //   50: invokevirtual 456	java/lang/reflect/Field:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   53: astore_0
    //   54: aload_0
    //   55: ifnull +5 -> 60
    //   58: iconst_1
    //   59: istore_1
    //   60: iload_1
    //   61: ireturn
    //   62: astore_0
    //   63: iconst_1
    //   64: putstatic 38	android/support/v4/view/u:h	Z
    //   67: iconst_0
    //   68: ireturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	69	0	paramView	View
    //   5	56	1	bool1	boolean
    //   3	4	2	bool2	boolean
    // Exception table:
    //   from	to	target	type
    //   18	36	39	finally
    //   46	54	62	finally
  }
  
  public static boolean u(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 15) {
      return paramView.hasOnClickListeners();
    }
    return false;
  }
  
  public static boolean v(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return paramView.hasOverlappingRendering();
    }
    return true;
  }
  
  public static boolean w(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return paramView.hasTransientState();
    }
    return false;
  }
  
  public static boolean x(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 19) {
      return paramView.isAttachedToWindow();
    }
    return paramView.getWindowToken() != null;
  }
  
  public static boolean y(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 19) {
      return paramView.isLaidOut();
    }
    return (paramView.getWidth() > 0) && (paramView.getHeight() > 0);
  }
  
  public static boolean z(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramView.isNestedScrollingEnabled();
    }
    if ((paramView instanceof k)) {
      return ((k)paramView).isNestedScrollingEnabled();
    }
    return false;
  }
  
  static final class a
    implements View.OnApplyWindowInsetsListener
  {
    a(p paramP) {}
    
    public WindowInsets onApplyWindowInsets(View paramView, WindowInsets paramWindowInsets)
    {
      paramWindowInsets = c0.a(paramWindowInsets);
      return (WindowInsets)c0.a(a.a(paramView, paramWindowInsets));
    }
  }
  
  public static abstract interface b
  {
    public abstract boolean a(View paramView, KeyEvent paramKeyEvent);
  }
  
  static class c
  {
    private static final ArrayList<WeakReference<View>> d = new ArrayList();
    private WeakHashMap<View, Boolean> a = null;
    private SparseArray<WeakReference<View>> b = null;
    private WeakReference<KeyEvent> c = null;
    
    c() {}
    
    static c a(View paramView)
    {
      c localC2 = (c)paramView.getTag(a.b.a.c.tag_unhandled_key_event_manager);
      c localC1 = localC2;
      if (localC2 == null)
      {
        localC1 = new c();
        paramView.setTag(a.b.a.c.tag_unhandled_key_event_manager, localC1);
      }
      return localC1;
    }
    
    private SparseArray<WeakReference<View>> a()
    {
      if (b == null) {
        b = new SparseArray();
      }
      return b;
    }
    
    private View b(View paramView, KeyEvent paramKeyEvent)
    {
      Object localObject = a;
      if (localObject != null)
      {
        if (!((WeakHashMap)localObject).containsKey(paramView)) {
          return null;
        }
        if ((paramView instanceof ViewGroup))
        {
          localObject = (ViewGroup)paramView;
          int i = ((ViewGroup)localObject).getChildCount() - 1;
          while (i >= 0)
          {
            View localView = b(((ViewGroup)localObject).getChildAt(i), paramKeyEvent);
            if (localView != null) {
              return localView;
            }
            i -= 1;
          }
        }
        if (c(paramView, paramKeyEvent)) {
          return paramView;
        }
        return null;
      }
      return null;
    }
    
    private void b()
    {
      Object localObject1 = a;
      if (localObject1 != null) {
        ((WeakHashMap)localObject1).clear();
      }
      if (d.isEmpty()) {
        return;
      }
      int i;
      synchronized (d)
      {
        if (a == null) {
          a = new WeakHashMap();
        }
        i = d.size() - 1;
        if (i >= 0)
        {
          localObject1 = (View)((WeakReference)d.get(i)).get();
          if (localObject1 == null)
          {
            d.remove(i);
          }
          else
          {
            a.put(localObject1, Boolean.TRUE);
            for (localObject1 = ((View)localObject1).getParent(); (localObject1 instanceof View); localObject1 = ((ViewParent)localObject1).getParent()) {
              a.put((View)localObject1, Boolean.TRUE);
            }
          }
        }
        else
        {
          return;
        }
      }
    }
    
    private boolean c(View paramView, KeyEvent paramKeyEvent)
    {
      ArrayList localArrayList = (ArrayList)paramView.getTag(a.b.a.c.tag_unhandled_key_listeners);
      if (localArrayList != null)
      {
        int i = localArrayList.size() - 1;
        while (i >= 0)
        {
          if (((u.b)localArrayList.get(i)).a(paramView, paramKeyEvent)) {
            return true;
          }
          i -= 1;
        }
      }
      return false;
    }
    
    boolean a(KeyEvent paramKeyEvent)
    {
      Object localObject1 = c;
      if ((localObject1 != null) && (((WeakReference)localObject1).get() == paramKeyEvent)) {
        return false;
      }
      c = new WeakReference(paramKeyEvent);
      Object localObject2 = null;
      SparseArray localSparseArray = a();
      localObject1 = localObject2;
      if (paramKeyEvent.getAction() == 1)
      {
        int i = localSparseArray.indexOfKey(paramKeyEvent.getKeyCode());
        localObject1 = localObject2;
        if (i >= 0)
        {
          localObject1 = (WeakReference)localSparseArray.valueAt(i);
          localSparseArray.removeAt(i);
        }
      }
      localObject2 = localObject1;
      if (localObject1 == null) {
        localObject2 = (WeakReference)localSparseArray.get(paramKeyEvent.getKeyCode());
      }
      if (localObject2 != null)
      {
        localObject1 = (View)((WeakReference)localObject2).get();
        if ((localObject1 != null) && (u.x((View)localObject1))) {
          c((View)localObject1, paramKeyEvent);
        }
        return true;
      }
      return false;
    }
    
    boolean a(View paramView, KeyEvent paramKeyEvent)
    {
      if (paramKeyEvent.getAction() == 0) {
        b();
      }
      paramView = b(paramView, paramKeyEvent);
      if (paramKeyEvent.getAction() == 0)
      {
        int i = paramKeyEvent.getKeyCode();
        if ((paramView != null) && (!KeyEvent.isModifierKey(i))) {
          a().put(i, new WeakReference(paramView));
        }
      }
      return paramView != null;
    }
  }
}
