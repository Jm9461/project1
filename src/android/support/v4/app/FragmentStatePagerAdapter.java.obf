package android.support.v4.app;

import android.os.Bundle;
import android.os.Parcelable;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import java.util.ArrayList;
import java.util.Iterator;

public abstract class p
  extends android.support.v4.view.q
{
  private final k c;
  private q d = null;
  private ArrayList<f.g> e = new ArrayList();
  private ArrayList<f> f = new ArrayList();
  private f g = null;
  
  public p(k paramK)
  {
    c = paramK;
  }
  
  public Object a(ViewGroup paramViewGroup, int paramInt)
  {
    if (f.size() > paramInt)
    {
      localF = (f)f.get(paramInt);
      if (localF != null) {
        return localF;
      }
    }
    if (d == null) {
      d = c.a();
    }
    f localF = c(paramInt);
    if (e.size() > paramInt)
    {
      f.g localG = (f.g)e.get(paramInt);
      if (localG != null) {
        localF.a(localG);
      }
    }
    while (f.size() <= paramInt) {
      f.add(null);
    }
    localF.g(false);
    localF.h(false);
    f.set(paramInt, localF);
    d.a(paramViewGroup.getId(), localF);
    return localF;
  }
  
  public void a(Parcelable paramParcelable, ClassLoader paramClassLoader)
  {
    if (paramParcelable != null)
    {
      paramParcelable = (Bundle)paramParcelable;
      paramParcelable.setClassLoader(paramClassLoader);
      paramClassLoader = paramParcelable.getParcelableArray("states");
      e.clear();
      f.clear();
      int i;
      if (paramClassLoader != null)
      {
        i = 0;
        while (i < paramClassLoader.length)
        {
          e.add((f.g)paramClassLoader[i]);
          i += 1;
        }
      }
      paramClassLoader = paramParcelable.keySet().iterator();
      while (paramClassLoader.hasNext())
      {
        String str = (String)paramClassLoader.next();
        if (str.startsWith("f"))
        {
          i = Integer.parseInt(str.substring(1));
          Object localObject = c.a(paramParcelable, str);
          if (localObject != null)
          {
            while (f.size() <= i) {
              f.add(null);
            }
            ((f)localObject).g(false);
            f.set(i, localObject);
          }
          else
          {
            localObject = new StringBuilder();
            ((StringBuilder)localObject).append("Bad fragment at key ");
            ((StringBuilder)localObject).append(str);
            Log.w("FragmentStatePagerAdapt", ((StringBuilder)localObject).toString());
          }
        }
      }
    }
  }
  
  public void a(ViewGroup paramViewGroup)
  {
    paramViewGroup = d;
    if (paramViewGroup != null)
    {
      paramViewGroup.c();
      d = null;
    }
  }
  
  public void a(ViewGroup paramViewGroup, int paramInt, Object paramObject)
  {
    paramObject = (f)paramObject;
    if (d == null) {
      d = c.a();
    }
    while (e.size() <= paramInt) {
      e.add(null);
    }
    ArrayList localArrayList = e;
    if (paramObject.D()) {
      paramViewGroup = c.a(paramObject);
    } else {
      paramViewGroup = null;
    }
    localArrayList.set(paramInt, paramViewGroup);
    f.set(paramInt, null);
    d.a(paramObject);
  }
  
  public boolean a(View paramView, Object paramObject)
  {
    return ((f)paramObject).A() == paramView;
  }
  
  public void b(ViewGroup paramViewGroup)
  {
    if (paramViewGroup.getId() != -1) {
      return;
    }
    paramViewGroup = new StringBuilder();
    paramViewGroup.append("ViewPager with adapter ");
    paramViewGroup.append(this);
    paramViewGroup.append(" requires a view id");
    throw new IllegalStateException(paramViewGroup.toString());
  }
  
  public void b(ViewGroup paramViewGroup, int paramInt, Object paramObject)
  {
    paramViewGroup = (f)paramObject;
    paramObject = g;
    if (paramViewGroup != paramObject)
    {
      if (paramObject != null)
      {
        paramObject.g(false);
        g.h(false);
      }
      paramViewGroup.g(true);
      paramViewGroup.h(true);
      g = paramViewGroup;
    }
  }
  
  public Parcelable c()
  {
    Object localObject2 = null;
    Object localObject1;
    if (e.size() > 0)
    {
      localObject2 = new Bundle();
      localObject1 = new f.g[e.size()];
      e.toArray((Object[])localObject1);
      ((Bundle)localObject2).putParcelableArray("states", (Parcelable[])localObject1);
    }
    int i = 0;
    while (i < f.size())
    {
      f localF = (f)f.get(i);
      localObject1 = localObject2;
      if (localF != null)
      {
        localObject1 = localObject2;
        if (localF.D())
        {
          localObject1 = localObject2;
          if (localObject2 == null) {
            localObject1 = new Bundle();
          }
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append("f");
          ((StringBuilder)localObject2).append(i);
          localObject2 = ((StringBuilder)localObject2).toString();
          c.a((Bundle)localObject1, (String)localObject2, localF);
        }
      }
      i += 1;
      localObject2 = localObject1;
    }
    return localObject2;
  }
  
  public abstract f c(int paramInt);
}
