package android.support.v4.app;

import a.b.g.g.e;
import android.util.Log;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.lang.reflect.Modifier;
import java.util.ArrayList;

final class c
  extends q
  implements k.a, l.l
{
  final l a;
  ArrayList<a> b = new ArrayList();
  int c;
  int d;
  int e;
  int f;
  int g;
  int h;
  boolean i;
  String j;
  boolean k;
  int l = -1;
  int m;
  CharSequence n;
  int o;
  CharSequence p;
  ArrayList<String> q;
  ArrayList<String> r;
  boolean s = false;
  ArrayList<Runnable> t;
  
  public c(l paramL)
  {
    a = paramL;
  }
  
  private void a(int paramInt1, f paramF, String paramString, int paramInt2)
  {
    Object localObject = paramF.getClass();
    int i1 = ((Class)localObject).getModifiers();
    if ((!((Class)localObject).isAnonymousClass()) && (Modifier.isPublic(i1)) && ((!((Class)localObject).isMemberClass()) || (Modifier.isStatic(i1))))
    {
      t = a;
      if (paramString != null)
      {
        localObject = B;
        if ((localObject != null) && (!paramString.equals(localObject)))
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("Can't change tag of fragment ");
          ((StringBuilder)localObject).append(paramF);
          ((StringBuilder)localObject).append(": was ");
          ((StringBuilder)localObject).append(B);
          ((StringBuilder)localObject).append(" now ");
          ((StringBuilder)localObject).append(paramString);
          throw new IllegalStateException(((StringBuilder)localObject).toString());
        }
        B = paramString;
      }
      if (paramInt1 != 0) {
        if (paramInt1 != -1)
        {
          i1 = z;
          if ((i1 != 0) && (i1 != paramInt1))
          {
            paramString = new StringBuilder();
            paramString.append("Can't change container ID of fragment ");
            paramString.append(paramF);
            paramString.append(": was ");
            paramString.append(z);
            paramString.append(" now ");
            paramString.append(paramInt1);
            throw new IllegalStateException(paramString.toString());
          }
          z = paramInt1;
          A = paramInt1;
        }
        else
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("Can't add fragment ");
          ((StringBuilder)localObject).append(paramF);
          ((StringBuilder)localObject).append(" with tag ");
          ((StringBuilder)localObject).append(paramString);
          ((StringBuilder)localObject).append(" to container view with no id");
          throw new IllegalArgumentException(((StringBuilder)localObject).toString());
        }
      }
      a(new a(paramInt2, paramF));
      return;
    }
    paramF = new StringBuilder();
    paramF.append("Fragment ");
    paramF.append(((Class)localObject).getCanonicalName());
    paramF.append(" must be a public static class to be  properly recreated from");
    paramF.append(" instance state.");
    throw new IllegalStateException(paramF.toString());
  }
  
  private static boolean b(a paramA)
  {
    paramA = b;
    return (paramA != null) && (m) && (K != null) && (!D) && (!C) && (paramA.H());
  }
  
  public int a()
  {
    return a(false);
  }
  
  int a(boolean paramBoolean)
  {
    if (!k)
    {
      if (l.G)
      {
        Object localObject = new StringBuilder();
        ((StringBuilder)localObject).append("Commit: ");
        ((StringBuilder)localObject).append(this);
        Log.v("FragmentManager", ((StringBuilder)localObject).toString());
        localObject = new PrintWriter(new e("FragmentManager"));
        a("  ", null, (PrintWriter)localObject, null);
        ((PrintWriter)localObject).close();
      }
      k = true;
      if (i) {
        l = a.b(this);
      } else {
        l = -1;
      }
      a.a(this, paramBoolean);
      return l;
    }
    throw new IllegalStateException("commit already called");
  }
  
  f a(ArrayList<f> paramArrayList, f paramF)
  {
    int i1 = 0;
    for (f localF1 = paramF; i1 < b.size(); localF1 = paramF)
    {
      Object localObject = (a)b.get(i1);
      int i2 = a;
      if (i2 != 1) {
        if (i2 != 2)
        {
          if ((i2 != 3) && (i2 != 6))
          {
            if (i2 != 7)
            {
              if (i2 != 8)
              {
                i2 = i1;
                paramF = localF1;
                break label447;
              }
              b.add(i1, new a(9, localF1));
              i2 = i1 + 1;
              paramF = b;
              break label447;
            }
          }
          else
          {
            paramArrayList.remove(b);
            localObject = b;
            i2 = i1;
            paramF = localF1;
            if (localObject != localF1) {
              break label447;
            }
            b.add(i1, new a(9, (f)localObject));
            i2 = i1 + 1;
            paramF = null;
            break label447;
          }
        }
        else
        {
          f localF2 = b;
          int i6 = A;
          int i3 = 0;
          i2 = paramArrayList.size() - 1;
          for (paramF = localF1; i2 >= 0; paramF = localF1)
          {
            f localF3 = (f)paramArrayList.get(i2);
            int i4 = i1;
            int i5 = i3;
            localF1 = paramF;
            if (A == i6) {
              if (localF3 == localF2)
              {
                i5 = 1;
                i4 = i1;
                localF1 = paramF;
              }
              else
              {
                i4 = i1;
                localF1 = paramF;
                if (localF3 == paramF)
                {
                  b.add(i1, new a(9, localF3));
                  i4 = i1 + 1;
                  localF1 = null;
                }
                paramF = new a(3, localF3);
                c = c;
                e = e;
                d = d;
                f = f;
                b.add(i4, paramF);
                paramArrayList.remove(localF3);
                i4 += 1;
                i5 = i3;
              }
            }
            i2 -= 1;
            i1 = i4;
            i3 = i5;
          }
          if (i3 != 0)
          {
            b.remove(i1);
            i1 -= 1;
          }
          else
          {
            a = 1;
            paramArrayList.add(localF2);
          }
          i2 = i1;
          break label447;
        }
      }
      paramArrayList.add(b);
      paramF = localF1;
      i2 = i1;
      label447:
      i1 = i2 + 1;
    }
    return localF1;
  }
  
  public q a(int paramInt, f paramF)
  {
    a(paramInt, paramF, null, 1);
    return this;
  }
  
  public q a(int paramInt, f paramF, String paramString)
  {
    if (paramInt != 0)
    {
      a(paramInt, paramF, paramString, 2);
      return this;
    }
    throw new IllegalArgumentException("Must use non-zero containerViewId");
  }
  
  public q a(f paramF)
  {
    a(new a(3, paramF));
    return this;
  }
  
  public q a(f paramF, String paramString)
  {
    a(0, paramF, paramString, 1);
    return this;
  }
  
  void a(int paramInt)
  {
    if (!i) {
      return;
    }
    Object localObject1;
    if (l.G)
    {
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("Bump nesting in ");
      ((StringBuilder)localObject1).append(this);
      ((StringBuilder)localObject1).append(" by ");
      ((StringBuilder)localObject1).append(paramInt);
      Log.v("FragmentManager", ((StringBuilder)localObject1).toString());
    }
    int i2 = b.size();
    int i1 = 0;
    while (i1 < i2)
    {
      localObject1 = (a)b.get(i1);
      Object localObject2 = b;
      if (localObject2 != null)
      {
        s += paramInt;
        if (l.G)
        {
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append("Bump nesting of ");
          ((StringBuilder)localObject2).append(b);
          ((StringBuilder)localObject2).append(" to ");
          ((StringBuilder)localObject2).append(b.s);
          Log.v("FragmentManager", ((StringBuilder)localObject2).toString());
        }
      }
      i1 += 1;
    }
  }
  
  void a(a paramA)
  {
    b.add(paramA);
    c = c;
    d = d;
    e = e;
    f = f;
  }
  
  void a(f.f paramF)
  {
    int i1 = 0;
    while (i1 < b.size())
    {
      a localA = (a)b.get(i1);
      if (b(localA)) {
        b.a(paramF);
      }
      i1 += 1;
    }
  }
  
  public void a(String paramString, FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
  {
    a(paramString, paramPrintWriter, true);
  }
  
  public void a(String paramString, PrintWriter paramPrintWriter, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      paramPrintWriter.print(paramString);
      paramPrintWriter.print("mName=");
      paramPrintWriter.print(j);
      paramPrintWriter.print(" mIndex=");
      paramPrintWriter.print(l);
      paramPrintWriter.print(" mCommitted=");
      paramPrintWriter.println(k);
      if (g != 0)
      {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("mTransition=#");
        paramPrintWriter.print(Integer.toHexString(g));
        paramPrintWriter.print(" mTransitionStyle=#");
        paramPrintWriter.println(Integer.toHexString(h));
      }
      if ((c != 0) || (d != 0))
      {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("mEnterAnim=#");
        paramPrintWriter.print(Integer.toHexString(c));
        paramPrintWriter.print(" mExitAnim=#");
        paramPrintWriter.println(Integer.toHexString(d));
      }
      if ((e != 0) || (f != 0))
      {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("mPopEnterAnim=#");
        paramPrintWriter.print(Integer.toHexString(e));
        paramPrintWriter.print(" mPopExitAnim=#");
        paramPrintWriter.println(Integer.toHexString(f));
      }
      if ((m != 0) || (n != null))
      {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("mBreadCrumbTitleRes=#");
        paramPrintWriter.print(Integer.toHexString(m));
        paramPrintWriter.print(" mBreadCrumbTitleText=");
        paramPrintWriter.println(n);
      }
      if ((o != 0) || (p != null))
      {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("mBreadCrumbShortTitleRes=#");
        paramPrintWriter.print(Integer.toHexString(o));
        paramPrintWriter.print(" mBreadCrumbShortTitleText=");
        paramPrintWriter.println(p);
      }
    }
    if (!b.isEmpty())
    {
      paramPrintWriter.print(paramString);
      paramPrintWriter.println("Operations:");
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append(paramString);
      ((StringBuilder)localObject).append("    ");
      ((StringBuilder)localObject).toString();
      int i2 = b.size();
      int i1 = 0;
      while (i1 < i2)
      {
        a localA = (a)b.get(i1);
        switch (a)
        {
        default: 
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("cmd=");
          ((StringBuilder)localObject).append(a);
          localObject = ((StringBuilder)localObject).toString();
          break;
        case 9: 
          localObject = "UNSET_PRIMARY_NAV";
          break;
        case 8: 
          localObject = "SET_PRIMARY_NAV";
          break;
        case 7: 
          localObject = "ATTACH";
          break;
        case 6: 
          localObject = "DETACH";
          break;
        case 5: 
          localObject = "SHOW";
          break;
        case 4: 
          localObject = "HIDE";
          break;
        case 3: 
          localObject = "REMOVE";
          break;
        case 2: 
          localObject = "REPLACE";
          break;
        case 1: 
          localObject = "ADD";
          break;
        case 0: 
          localObject = "NULL";
        }
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("  Op #");
        paramPrintWriter.print(i1);
        paramPrintWriter.print(": ");
        paramPrintWriter.print((String)localObject);
        paramPrintWriter.print(" ");
        paramPrintWriter.println(b);
        if (paramBoolean)
        {
          if ((c != 0) || (d != 0))
          {
            paramPrintWriter.print(paramString);
            paramPrintWriter.print("enterAnim=#");
            paramPrintWriter.print(Integer.toHexString(c));
            paramPrintWriter.print(" exitAnim=#");
            paramPrintWriter.println(Integer.toHexString(d));
          }
          if ((e != 0) || (f != 0))
          {
            paramPrintWriter.print(paramString);
            paramPrintWriter.print("popEnterAnim=#");
            paramPrintWriter.print(Integer.toHexString(e));
            paramPrintWriter.print(" popExitAnim=#");
            paramPrintWriter.println(Integer.toHexString(f));
          }
        }
        i1 += 1;
      }
    }
  }
  
  boolean a(ArrayList<c> paramArrayList, int paramInt1, int paramInt2)
  {
    if (paramInt2 == paramInt1) {
      return false;
    }
    int i7 = b.size();
    int i3 = -1;
    int i2 = 0;
    while (i2 < i7)
    {
      Object localObject = b.get(i2)).b;
      int i1;
      if (localObject != null) {
        i1 = A;
      } else {
        i1 = 0;
      }
      int i5 = i3;
      if (i1 != 0)
      {
        i5 = i3;
        if (i1 != i3)
        {
          i3 = i1;
          int i4 = paramInt1;
          for (;;)
          {
            i5 = i3;
            if (i4 >= paramInt2) {
              break;
            }
            localObject = (c)paramArrayList.get(i4);
            int i8 = b.size();
            i5 = 0;
            while (i5 < i8)
            {
              f localF = b.get(i5)).b;
              int i6;
              if (localF != null) {
                i6 = A;
              } else {
                i6 = 0;
              }
              if (i6 == i1) {
                return true;
              }
              i5 += 1;
            }
            i4 += 1;
          }
        }
      }
      i2 += 1;
      i3 = i5;
    }
    return false;
  }
  
  public boolean a(ArrayList<c> paramArrayList, ArrayList<Boolean> paramArrayList1)
  {
    if (l.G)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Run: ");
      localStringBuilder.append(this);
      Log.v("FragmentManager", localStringBuilder.toString());
    }
    paramArrayList.add(this);
    paramArrayList1.add(Boolean.valueOf(false));
    if (i) {
      a.a(this);
    }
    return true;
  }
  
  public int b()
  {
    return a(true);
  }
  
  f b(ArrayList<f> paramArrayList, f paramF)
  {
    int i1 = 0;
    while (i1 < b.size())
    {
      a localA = (a)b.get(i1);
      int i2 = a;
      if (i2 != 1)
      {
        if (i2 != 3) {}
        switch (i2)
        {
        default: 
          break;
        case 9: 
          paramF = b;
          break;
        case 8: 
          paramF = null;
          break;
        case 6: 
          paramArrayList.add(b);
          break;
        }
      }
      else
      {
        paramArrayList.remove(b);
      }
      i1 += 1;
    }
    return paramF;
  }
  
  public q b(int paramInt, f paramF)
  {
    a(paramInt, paramF, null);
    return this;
  }
  
  void b(boolean paramBoolean)
  {
    int i1 = b.size() - 1;
    Object localObject1;
    while (i1 >= 0)
    {
      localObject1 = (a)b.get(i1);
      Object localObject2 = b;
      if (localObject2 != null) {
        ((f)localObject2).a(l.e(g), h);
      }
      switch (a)
      {
      case 2: 
      default: 
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("Unknown cmd: ");
        ((StringBuilder)localObject2).append(a);
        throw new IllegalArgumentException(((StringBuilder)localObject2).toString());
      case 9: 
        a.o((f)localObject2);
        break;
      case 8: 
        a.o(null);
        break;
      case 7: 
        ((f)localObject2).c(f);
        a.d((f)localObject2);
        break;
      case 6: 
        ((f)localObject2).c(e);
        a.b((f)localObject2);
        break;
      case 5: 
        ((f)localObject2).c(f);
        a.f((f)localObject2);
        break;
      case 4: 
        ((f)localObject2).c(e);
        a.p((f)localObject2);
        break;
      case 3: 
        ((f)localObject2).c(e);
        a.a((f)localObject2, false);
        break;
      case 1: 
        ((f)localObject2).c(f);
        a.l((f)localObject2);
      }
      if ((!s) && (a != 3) && (localObject2 != null)) {
        a.i((f)localObject2);
      }
      i1 -= 1;
    }
    if ((!s) && (paramBoolean))
    {
      localObject1 = a;
      ((l)localObject1).a(n, true);
    }
  }
  
  boolean b(int paramInt)
  {
    int i3 = b.size();
    int i1 = 0;
    for (;;)
    {
      int i2 = 0;
      if (i1 >= i3) {
        break;
      }
      f localF = b.get(i1)).b;
      if (localF != null) {
        i2 = A;
      }
      if ((i2 != 0) && (i2 == paramInt)) {
        return true;
      }
      i1 += 1;
    }
    return false;
  }
  
  public void c()
  {
    d();
    a.b(this, true);
  }
  
  public q d()
  {
    if (!i) {
      return this;
    }
    throw new IllegalStateException("This transaction is already being added to the back stack");
  }
  
  void e()
  {
    int i2 = b.size();
    int i1 = 0;
    Object localObject1;
    while (i1 < i2)
    {
      localObject1 = (a)b.get(i1);
      Object localObject2 = b;
      if (localObject2 != null) {
        ((f)localObject2).a(g, h);
      }
      switch (a)
      {
      case 2: 
      default: 
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("Unknown cmd: ");
        ((StringBuilder)localObject2).append(a);
        throw new IllegalArgumentException(((StringBuilder)localObject2).toString());
      case 9: 
        a.o(null);
        break;
      case 8: 
        a.o((f)localObject2);
        break;
      case 7: 
        ((f)localObject2).c(c);
        a.b((f)localObject2);
        break;
      case 6: 
        ((f)localObject2).c(d);
        a.d((f)localObject2);
        break;
      case 5: 
        ((f)localObject2).c(c);
        a.p((f)localObject2);
        break;
      case 4: 
        ((f)localObject2).c(d);
        a.f((f)localObject2);
        break;
      case 3: 
        ((f)localObject2).c(d);
        a.l((f)localObject2);
        break;
      case 1: 
        ((f)localObject2).c(c);
        a.a((f)localObject2, false);
      }
      if ((!s) && (a != 1) && (localObject2 != null)) {
        a.i((f)localObject2);
      }
      i1 += 1;
    }
    if (!s)
    {
      localObject1 = a;
      ((l)localObject1).a(n, true);
    }
  }
  
  public String f()
  {
    return j;
  }
  
  boolean g()
  {
    int i1 = 0;
    while (i1 < b.size())
    {
      if (b((a)b.get(i1))) {
        return true;
      }
      i1 += 1;
    }
    return false;
  }
  
  public void h()
  {
    ArrayList localArrayList = t;
    if (localArrayList != null)
    {
      int i1 = 0;
      int i2 = localArrayList.size();
      while (i1 < i2)
      {
        ((Runnable)t.get(i1)).run();
        i1 += 1;
      }
      t = null;
    }
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder(128);
    localStringBuilder.append("BackStackEntry{");
    localStringBuilder.append(Integer.toHexString(System.identityHashCode(this)));
    if (l >= 0)
    {
      localStringBuilder.append(" #");
      localStringBuilder.append(l);
    }
    if (j != null)
    {
      localStringBuilder.append(" ");
      localStringBuilder.append(j);
    }
    localStringBuilder.append("}");
    return localStringBuilder.toString();
  }
  
  static final class a
  {
    int a;
    f b;
    int c;
    int d;
    int e;
    int f;
    
    a() {}
    
    a(int paramInt, f paramF)
    {
      a = paramInt;
      b = paramF;
    }
  }
}
