package android.support.v4.content.e;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.content.res.Resources.Theme;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.util.TypedValue;
import java.io.IOException;
import org.xmlpull.v1.XmlPullParserException;

public final class f
{
  public static Typeface a(Context paramContext, int paramInt1, TypedValue paramTypedValue, int paramInt2, a paramA)
  {
    if (paramContext.isRestricted()) {
      return null;
    }
    return a(paramContext, paramInt1, paramTypedValue, paramInt2, paramA, null, true);
  }
  
  private static Typeface a(Context paramContext, int paramInt1, TypedValue paramTypedValue, int paramInt2, a paramA, Handler paramHandler, boolean paramBoolean)
  {
    Resources localResources = paramContext.getResources();
    localResources.getValue(paramInt1, paramTypedValue, true);
    paramContext = a(paramContext, localResources, paramTypedValue, paramInt1, paramInt2, paramA, paramHandler, paramBoolean);
    if (paramContext == null)
    {
      if (paramA != null) {
        return paramContext;
      }
      paramContext = new StringBuilder();
      paramContext.append("Font resource ID #0x");
      paramContext.append(Integer.toHexString(paramInt1));
      paramContext.append(" could not be retrieved.");
      throw new Resources.NotFoundException(paramContext.toString());
    }
    return paramContext;
  }
  
  private static Typeface a(Context paramContext, Resources paramResources, TypedValue paramTypedValue, int paramInt1, int paramInt2, a paramA, Handler paramHandler, boolean paramBoolean)
  {
    Object localObject = string;
    if (localObject != null)
    {
      paramTypedValue = ((CharSequence)localObject).toString();
      if (!paramTypedValue.startsWith("res/"))
      {
        if (paramA != null) {
          paramA.a(-3, paramHandler);
        }
        return null;
      }
      localObject = a.b.g.a.c.b(paramResources, paramInt1, paramInt2);
      if (localObject != null)
      {
        if (paramA != null) {
          paramA.a((Typeface)localObject, paramHandler);
        }
        return localObject;
      }
      try
      {
        boolean bool = paramTypedValue.toLowerCase().endsWith(".xml");
        if (bool) {
          try
          {
            localObject = c.a(paramResources.getXml(paramInt1), paramResources);
            if (localObject == null) {
              try
              {
                Log.e("ResourcesCompat", "Failed to find font-family tag");
                if (paramA != null) {
                  paramA.a(-3, paramHandler);
                }
                return null;
              }
              catch (IOException paramContext)
              {
                break label233;
              }
              catch (XmlPullParserException paramContext) {}
            }
            try
            {
              paramContext = a.b.g.a.c.a(paramContext, (c.a)localObject, paramResources, paramInt1, paramInt2, paramA, paramHandler, paramBoolean);
              return paramContext;
            }
            catch (IOException paramContext)
            {
              break label233;
            }
            catch (XmlPullParserException paramContext) {}
            try
            {
              paramContext = a.b.g.a.c.a(paramContext, paramResources, paramInt1, paramTypedValue, paramInt2);
              if (paramA != null)
              {
                if (paramContext != null) {}
                try
                {
                  paramA.a(paramContext, paramHandler);
                  return paramContext;
                }
                catch (IOException paramContext)
                {
                  break label233;
                }
                catch (XmlPullParserException paramContext) {}
                paramA.a(-3, paramHandler);
                return paramContext;
              }
              else
              {
                return paramContext;
              }
            }
            catch (IOException paramContext) {}catch (XmlPullParserException paramContext) {}
          }
          catch (IOException paramContext) {}catch (XmlPullParserException paramContext) {}
        }
        label233:
        paramResources = new StringBuilder();
      }
      catch (IOException paramContext)
      {
        paramResources = new StringBuilder();
        paramResources.append("Failed to read xml resource ");
        paramResources.append(paramTypedValue);
        Log.e("ResourcesCompat", paramResources.toString(), paramContext);
      }
      catch (XmlPullParserException paramContext) {}
      paramResources.append("Failed to parse xml resource ");
      paramResources.append(paramTypedValue);
      Log.e("ResourcesCompat", paramResources.toString(), paramContext);
      if (paramA != null) {
        paramA.a(-3, paramHandler);
      }
      return null;
    }
    paramContext = new StringBuilder();
    paramContext.append("Resource \"");
    paramContext.append(paramResources.getResourceName(paramInt1));
    paramContext.append("\" (");
    paramContext.append(Integer.toHexString(paramInt1));
    paramContext.append(") is not a Font: ");
    paramContext.append(paramTypedValue);
    throw new Resources.NotFoundException(paramContext.toString());
  }
  
  public static Drawable a(Resources paramResources, int paramInt, Resources.Theme paramTheme)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return paramResources.getDrawable(paramInt, paramTheme);
    }
    return paramResources.getDrawable(paramInt);
  }
  
  public static abstract class a
  {
    public a() {}
    
    public abstract void a(int paramInt);
    
    public final void a(final int paramInt, Handler paramHandler)
    {
      Handler localHandler = paramHandler;
      if (paramHandler == null) {
        localHandler = new Handler(Looper.getMainLooper());
      }
      localHandler.post(new b(paramInt));
    }
    
    public abstract void a(Typeface paramTypeface);
    
    public final void a(final Typeface paramTypeface, Handler paramHandler)
    {
      Handler localHandler = paramHandler;
      if (paramHandler == null) {
        localHandler = new Handler(Looper.getMainLooper());
      }
      localHandler.post(new a(paramTypeface));
    }
    
    class a
      implements Runnable
    {
      a(Typeface paramTypeface) {}
      
      public void run()
      {
        a(paramTypeface);
      }
    }
    
    class b
      implements Runnable
    {
      b(int paramInt) {}
      
      public void run()
      {
        a(paramInt);
      }
    }
  }
}
