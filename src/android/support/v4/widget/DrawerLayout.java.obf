package android.support.v4.widget;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.ClassLoaderCreator;
import android.os.Parcelable.Creator;
import android.os.SystemClock;
import android.support.v4.view.b;
import android.support.v4.view.d;
import android.support.v4.view.d0.c;
import android.support.v4.view.d0.c.a;
import android.support.v4.view.u;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.View.OnApplyWindowInsetsListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.ViewParent;
import android.view.WindowInsets;
import android.view.accessibility.AccessibilityEvent;
import java.util.ArrayList;
import java.util.List;

public class DrawerLayout
  extends ViewGroup
{
  private static final int[] M;
  static final int[] N;
  static final boolean O;
  private static final boolean P;
  private Drawable A;
  private CharSequence B;
  private CharSequence C;
  private Object D;
  private boolean E;
  private Drawable F = null;
  private Drawable G = null;
  private Drawable H = null;
  private Drawable I = null;
  private final ArrayList<View> J;
  private Rect K;
  private Matrix L;
  private final c c = new c();
  private float d;
  private int e;
  private int f = -1728053248;
  private float g;
  private Paint h = new Paint();
  private final s i;
  private final s j;
  private final g k;
  private final g l;
  private int m;
  private boolean n;
  private boolean o = true;
  private int p = 3;
  private int q = 3;
  private int r = 3;
  private int s = 3;
  private boolean t;
  private d u;
  private List<d> v;
  private float w;
  private float x;
  private Drawable y;
  private Drawable z;
  
  static
  {
    boolean bool2 = true;
    M = new int[] { 16843828 };
    N = new int[] { 16842931 };
    boolean bool1;
    if (Build.VERSION.SDK_INT >= 19) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    O = bool1;
    if (Build.VERSION.SDK_INT >= 21) {
      bool1 = bool2;
    } else {
      bool1 = false;
    }
    P = bool1;
  }
  
  public DrawerLayout(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public DrawerLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public DrawerLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    setDescendantFocusability(262144);
    float f1 = getResourcesgetDisplayMetricsdensity;
    e = ((int)(64.0F * f1 + 0.5F));
    float f2 = 400.0F * f1;
    k = new g(3);
    l = new g(5);
    i = s.a(this, 1.0F, k);
    i.d(1);
    i.a(f2);
    k.a(i);
    j = s.a(this, 1.0F, l);
    j.d(2);
    j.a(f2);
    l.a(j);
    setFocusableInTouchMode(true);
    u.f(this, 1);
    u.a(this, new b());
    setMotionEventSplittingEnabled(false);
    if (u.h(this))
    {
      if (Build.VERSION.SDK_INT >= 21)
      {
        setOnApplyWindowInsetsListener(new a());
        setSystemUiVisibility(1280);
        paramContext = paramContext.obtainStyledAttributes(M);
      }
      try
      {
        y = paramContext.getDrawable(0);
        paramContext.recycle();
      }
      finally
      {
        paramContext.recycle();
      }
    }
    d = (10.0F * f1);
    J = new ArrayList();
  }
  
  private boolean a(float paramFloat1, float paramFloat2, View paramView)
  {
    if (K == null) {
      K = new Rect();
    }
    paramView.getHitRect(K);
    return K.contains((int)paramFloat1, (int)paramFloat2);
  }
  
  private boolean a(Drawable paramDrawable, int paramInt)
  {
    if ((paramDrawable != null) && (android.support.v4.graphics.drawable.a.f(paramDrawable)))
    {
      android.support.v4.graphics.drawable.a.a(paramDrawable, paramInt);
      return true;
    }
    return false;
  }
  
  private boolean a(MotionEvent paramMotionEvent, View paramView)
  {
    if (!paramView.getMatrix().isIdentity())
    {
      paramMotionEvent = b(paramMotionEvent, paramView);
      bool = paramView.dispatchGenericMotionEvent(paramMotionEvent);
      paramMotionEvent.recycle();
      return bool;
    }
    float f1 = getScrollX() - paramView.getLeft();
    float f2 = getScrollY() - paramView.getTop();
    paramMotionEvent.offsetLocation(f1, f2);
    boolean bool = paramView.dispatchGenericMotionEvent(paramMotionEvent);
    paramMotionEvent.offsetLocation(-f1, -f2);
    return bool;
  }
  
  private MotionEvent b(MotionEvent paramMotionEvent, View paramView)
  {
    float f1 = getScrollX() - paramView.getLeft();
    float f2 = getScrollY() - paramView.getTop();
    paramMotionEvent = MotionEvent.obtain(paramMotionEvent);
    paramMotionEvent.offsetLocation(f1, f2);
    paramView = paramView.getMatrix();
    if (!paramView.isIdentity())
    {
      if (L == null) {
        L = new Matrix();
      }
      paramView.invert(L);
      paramMotionEvent.transform(L);
    }
    return paramMotionEvent;
  }
  
  private void c(View paramView, boolean paramBoolean)
  {
    int i2 = getChildCount();
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = getChildAt(i1);
      if (((!paramBoolean) && (!i(localView))) || ((paramBoolean) && (localView == paramView))) {
        u.f(localView, 1);
      } else {
        u.f(localView, 4);
      }
      i1 += 1;
    }
  }
  
  private boolean e()
  {
    int i2 = getChildCount();
    int i1 = 0;
    while (i1 < i2)
    {
      if (getChildAtgetLayoutParamsc) {
        return true;
      }
      i1 += 1;
    }
    return false;
  }
  
  private boolean f()
  {
    return d() != null;
  }
  
  private Drawable g()
  {
    int i1 = u.k(this);
    Drawable localDrawable;
    if (i1 == 0)
    {
      localDrawable = F;
      if (localDrawable != null)
      {
        a(localDrawable, i1);
        return F;
      }
    }
    else
    {
      localDrawable = G;
      if (localDrawable != null)
      {
        a(localDrawable, i1);
        return G;
      }
    }
    return H;
  }
  
  private Drawable h()
  {
    int i1 = u.k(this);
    Drawable localDrawable;
    if (i1 == 0)
    {
      localDrawable = G;
      if (localDrawable != null)
      {
        a(localDrawable, i1);
        return G;
      }
    }
    else
    {
      localDrawable = F;
      if (localDrawable != null)
      {
        a(localDrawable, i1);
        return F;
      }
    }
    return I;
  }
  
  static String h(int paramInt)
  {
    if ((paramInt & 0x3) == 3) {
      return "LEFT";
    }
    if ((paramInt & 0x5) == 5) {
      return "RIGHT";
    }
    return Integer.toHexString(paramInt);
  }
  
  private void i()
  {
    if (P) {
      return;
    }
    z = g();
    A = h();
  }
  
  private static boolean l(View paramView)
  {
    paramView = paramView.getBackground();
    boolean bool = false;
    if (paramView != null)
    {
      if (paramView.getOpacity() == -1) {
        bool = true;
      }
      return bool;
    }
    return false;
  }
  
  static boolean m(View paramView)
  {
    return (u.i(paramView) != 4) && (u.i(paramView) != 2);
  }
  
  void a()
  {
    if (!t)
    {
      long l1 = SystemClock.uptimeMillis();
      MotionEvent localMotionEvent = MotionEvent.obtain(l1, l1, 3, 0.0F, 0.0F, 0);
      int i2 = getChildCount();
      int i1 = 0;
      while (i1 < i2)
      {
        getChildAt(i1).dispatchTouchEvent(localMotionEvent);
        i1 += 1;
      }
      localMotionEvent.recycle();
      t = true;
    }
  }
  
  public void a(int paramInt)
  {
    a(paramInt, true);
  }
  
  public void a(int paramInt1, int paramInt2)
  {
    int i1 = d.a(paramInt2, u.k(this));
    if (paramInt2 != 3)
    {
      if (paramInt2 != 5)
      {
        if (paramInt2 != 8388611)
        {
          if (paramInt2 == 8388613) {
            s = paramInt1;
          }
        }
        else {
          r = paramInt1;
        }
      }
      else {
        q = paramInt1;
      }
    }
    else {
      p = paramInt1;
    }
    Object localObject;
    if (paramInt1 != 0)
    {
      if (i1 == 3) {
        localObject = i;
      } else {
        localObject = j;
      }
      ((s)localObject).a();
    }
    if (paramInt1 != 1)
    {
      if (paramInt1 != 2) {
        return;
      }
      localObject = b(i1);
      if (localObject != null) {
        k((View)localObject);
      }
    }
    else
    {
      localObject = b(i1);
      if (localObject != null) {
        a((View)localObject);
      }
    }
  }
  
  void a(int paramInt1, int paramInt2, View paramView)
  {
    paramInt1 = i.e();
    int i1 = j.e();
    if ((paramInt1 != 1) && (i1 != 1))
    {
      if ((paramInt1 != 2) && (i1 != 2)) {
        paramInt1 = 0;
      } else {
        paramInt1 = 2;
      }
    }
    else {
      paramInt1 = 1;
    }
    if ((paramView != null) && (paramInt2 == 0))
    {
      float f1 = getLayoutParamsb;
      if (f1 == 0.0F) {
        b(paramView);
      } else if (f1 == 1.0F) {
        c(paramView);
      }
    }
    if (paramInt1 != m)
    {
      m = paramInt1;
      paramView = v;
      if (paramView != null)
      {
        paramInt2 = paramView.size() - 1;
        while (paramInt2 >= 0)
        {
          ((d)v.get(paramInt2)).a(paramInt1);
          paramInt2 -= 1;
        }
      }
    }
  }
  
  public void a(int paramInt, boolean paramBoolean)
  {
    Object localObject = b(paramInt);
    if (localObject != null)
    {
      a((View)localObject, paramBoolean);
      return;
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("No drawer view found with gravity ");
    ((StringBuilder)localObject).append(h(paramInt));
    throw new IllegalArgumentException(((StringBuilder)localObject).toString());
  }
  
  public void a(d paramD)
  {
    if (paramD == null) {
      return;
    }
    if (v == null) {
      v = new ArrayList();
    }
    v.add(paramD);
  }
  
  public void a(View paramView)
  {
    a(paramView, true);
  }
  
  void a(View paramView, float paramFloat)
  {
    List localList = v;
    if (localList != null)
    {
      int i1 = localList.size() - 1;
      while (i1 >= 0)
      {
        ((d)v.get(i1)).a(paramView, paramFloat);
        i1 -= 1;
      }
    }
  }
  
  public void a(View paramView, boolean paramBoolean)
  {
    if (i(paramView))
    {
      localObject = (e)paramView.getLayoutParams();
      if (o)
      {
        b = 0.0F;
        d = 0;
      }
      else if (paramBoolean)
      {
        d = (0x4 | d);
        if (a(paramView, 3)) {
          i.b(paramView, -paramView.getWidth(), paramView.getTop());
        } else {
          j.b(paramView, getWidth(), paramView.getTop());
        }
      }
      else
      {
        b(paramView, 0.0F);
        a(a, 0, paramView);
        paramView.setVisibility(4);
      }
      invalidate();
      return;
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("View ");
    ((StringBuilder)localObject).append(paramView);
    ((StringBuilder)localObject).append(" is not a sliding drawer");
    throw new IllegalArgumentException(((StringBuilder)localObject).toString());
  }
  
  public void a(Object paramObject, boolean paramBoolean)
  {
    D = paramObject;
    E = paramBoolean;
    if ((!paramBoolean) && (getBackground() == null)) {
      paramBoolean = true;
    } else {
      paramBoolean = false;
    }
    setWillNotDraw(paramBoolean);
    requestLayout();
  }
  
  void a(boolean paramBoolean)
  {
    int i1 = 0;
    int i4 = getChildCount();
    int i2 = 0;
    while (i2 < i4)
    {
      View localView = getChildAt(i2);
      e localE = (e)localView.getLayoutParams();
      boolean bool = i1;
      int i3;
      if (i(localView)) {
        if ((paramBoolean) && (!c))
        {
          bool = i1;
        }
        else
        {
          i3 = localView.getWidth();
          if (a(localView, 3)) {
            i1 |= i.b(localView, -i3, localView.getTop());
          } else {
            i1 |= j.b(localView, getWidth(), localView.getTop());
          }
          c = false;
          i3 = i1;
        }
      }
      i2 += 1;
      i1 = i3;
    }
    k.b();
    l.b();
    if (i1 != 0) {
      invalidate();
    }
  }
  
  boolean a(View paramView, int paramInt)
  {
    return (e(paramView) & paramInt) == paramInt;
  }
  
  public void addFocusables(ArrayList<View> paramArrayList, int paramInt1, int paramInt2)
  {
    if (getDescendantFocusability() == 393216) {
      return;
    }
    int i3 = getChildCount();
    int i2 = 0;
    int i1 = 0;
    View localView;
    while (i1 < i3)
    {
      localView = getChildAt(i1);
      if (i(localView))
      {
        if (h(localView))
        {
          i2 = 1;
          localView.addFocusables(paramArrayList, paramInt1, paramInt2);
        }
      }
      else {
        J.add(localView);
      }
      i1 += 1;
    }
    if (i2 == 0)
    {
      i2 = J.size();
      i1 = 0;
      while (i1 < i2)
      {
        localView = (View)J.get(i1);
        if (localView.getVisibility() == 0) {
          localView.addFocusables(paramArrayList, paramInt1, paramInt2);
        }
        i1 += 1;
      }
    }
    J.clear();
  }
  
  public void addView(View paramView, int paramInt, ViewGroup.LayoutParams paramLayoutParams)
  {
    super.addView(paramView, paramInt, paramLayoutParams);
    if ((c() == null) && (!i(paramView))) {
      u.f(paramView, 1);
    } else {
      u.f(paramView, 4);
    }
    if (!O) {
      u.a(paramView, c);
    }
  }
  
  View b(int paramInt)
  {
    int i1 = d.a(paramInt, u.k(this));
    int i2 = getChildCount();
    paramInt = 0;
    while (paramInt < i2)
    {
      View localView = getChildAt(paramInt);
      if ((e(localView) & 0x7) == (i1 & 0x7)) {
        return localView;
      }
      paramInt += 1;
    }
    return null;
  }
  
  public void b()
  {
    a(false);
  }
  
  public void b(int paramInt, boolean paramBoolean)
  {
    Object localObject = b(paramInt);
    if (localObject != null)
    {
      b((View)localObject, paramBoolean);
      return;
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("No drawer view found with gravity ");
    ((StringBuilder)localObject).append(h(paramInt));
    throw new IllegalArgumentException(((StringBuilder)localObject).toString());
  }
  
  public void b(d paramD)
  {
    if (paramD == null) {
      return;
    }
    List localList = v;
    if (localList == null) {
      return;
    }
    localList.remove(paramD);
  }
  
  void b(View paramView)
  {
    Object localObject = (e)paramView.getLayoutParams();
    if ((d & 0x1) == 1)
    {
      d = 0;
      localObject = v;
      if (localObject != null)
      {
        int i1 = ((List)localObject).size() - 1;
        while (i1 >= 0)
        {
          ((d)v.get(i1)).b(paramView);
          i1 -= 1;
        }
      }
      c(paramView, false);
      if (hasWindowFocus())
      {
        paramView = getRootView();
        if (paramView != null) {
          paramView.sendAccessibilityEvent(32);
        }
      }
    }
  }
  
  void b(View paramView, float paramFloat)
  {
    float f1 = f(paramView);
    int i1 = paramView.getWidth();
    int i2 = (int)(i1 * f1);
    i1 = (int)(i1 * paramFloat) - i2;
    if (!a(paramView, 3)) {
      i1 = -i1;
    }
    paramView.offsetLeftAndRight(i1);
    c(paramView, paramFloat);
  }
  
  public void b(View paramView, boolean paramBoolean)
  {
    if (i(paramView))
    {
      localObject = (e)paramView.getLayoutParams();
      if (o)
      {
        b = 1.0F;
        d = 1;
        c(paramView, true);
      }
      else if (paramBoolean)
      {
        d |= 0x2;
        if (a(paramView, 3)) {
          i.b(paramView, 0, paramView.getTop());
        } else {
          j.b(paramView, getWidth() - paramView.getWidth(), paramView.getTop());
        }
      }
      else
      {
        b(paramView, 1.0F);
        a(a, 0, paramView);
        paramView.setVisibility(0);
      }
      invalidate();
      return;
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("View ");
    ((StringBuilder)localObject).append(paramView);
    ((StringBuilder)localObject).append(" is not a sliding drawer");
    throw new IllegalArgumentException(((StringBuilder)localObject).toString());
  }
  
  public int c(int paramInt)
  {
    int i1 = u.k(this);
    if (paramInt != 3)
    {
      if (paramInt != 5)
      {
        if (paramInt != 8388611)
        {
          if (paramInt == 8388613)
          {
            paramInt = s;
            if (paramInt != 3) {
              return paramInt;
            }
            if (i1 == 0) {
              paramInt = q;
            } else {
              paramInt = p;
            }
            if (paramInt != 3) {
              return paramInt;
            }
          }
        }
        else
        {
          paramInt = r;
          if (paramInt != 3) {
            return paramInt;
          }
          if (i1 == 0) {
            paramInt = p;
          } else {
            paramInt = q;
          }
          if (paramInt != 3) {
            return paramInt;
          }
        }
      }
      else
      {
        paramInt = q;
        if (paramInt != 3) {
          return paramInt;
        }
        if (i1 == 0) {
          paramInt = s;
        } else {
          paramInt = r;
        }
        if (paramInt != 3) {
          return paramInt;
        }
      }
    }
    else
    {
      paramInt = p;
      if (paramInt != 3) {
        return paramInt;
      }
      if (i1 == 0) {
        paramInt = r;
      } else {
        paramInt = s;
      }
      if (paramInt != 3) {
        return paramInt;
      }
    }
    return 0;
  }
  
  View c()
  {
    int i2 = getChildCount();
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = getChildAt(i1);
      if ((getLayoutParamsd & 0x1) == 1) {
        return localView;
      }
      i1 += 1;
    }
    return null;
  }
  
  void c(View paramView)
  {
    Object localObject = (e)paramView.getLayoutParams();
    if ((d & 0x1) == 0)
    {
      d = 1;
      localObject = v;
      if (localObject != null)
      {
        int i1 = ((List)localObject).size() - 1;
        while (i1 >= 0)
        {
          ((d)v.get(i1)).a(paramView);
          i1 -= 1;
        }
      }
      c(paramView, true);
      if (hasWindowFocus()) {
        sendAccessibilityEvent(32);
      }
    }
  }
  
  void c(View paramView, float paramFloat)
  {
    e localE = (e)paramView.getLayoutParams();
    if (paramFloat == b) {
      return;
    }
    b = paramFloat;
    a(paramView, paramFloat);
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return ((paramLayoutParams instanceof e)) && (super.checkLayoutParams(paramLayoutParams));
  }
  
  public void computeScroll()
  {
    int i2 = getChildCount();
    float f1 = 0.0F;
    int i1 = 0;
    while (i1 < i2)
    {
      f1 = Math.max(f1, getChildAtgetLayoutParamsb);
      i1 += 1;
    }
    g = f1;
    boolean bool1 = i.a(true);
    boolean bool2 = j.a(true);
    if ((bool1) || (bool2)) {
      u.B(this);
    }
  }
  
  public int d(View paramView)
  {
    if (i(paramView)) {
      return c(getLayoutParamsa);
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("View ");
    localStringBuilder.append(paramView);
    localStringBuilder.append(" is not a drawer");
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  View d()
  {
    int i2 = getChildCount();
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = getChildAt(i1);
      if ((i(localView)) && (j(localView))) {
        return localView;
      }
      i1 += 1;
    }
    return null;
  }
  
  public CharSequence d(int paramInt)
  {
    paramInt = d.a(paramInt, u.k(this));
    if (paramInt == 3) {
      return B;
    }
    if (paramInt == 5) {
      return C;
    }
    return null;
  }
  
  public boolean dispatchGenericMotionEvent(MotionEvent paramMotionEvent)
  {
    if (((paramMotionEvent.getSource() & 0x2) != 0) && (paramMotionEvent.getAction() != 10) && (g > 0.0F))
    {
      int i1 = getChildCount();
      if (i1 != 0)
      {
        float f1 = paramMotionEvent.getX();
        float f2 = paramMotionEvent.getY();
        i1 -= 1;
        while (i1 >= 0)
        {
          View localView = getChildAt(i1);
          if ((a(f1, f2, localView)) && (!g(localView)) && (a(paramMotionEvent, localView))) {
            return true;
          }
          i1 -= 1;
        }
      }
      return false;
    }
    return super.dispatchGenericMotionEvent(paramMotionEvent);
  }
  
  protected boolean drawChild(Canvas paramCanvas, View paramView, long paramLong)
  {
    int i8 = getHeight();
    boolean bool1 = g(paramView);
    int i1 = 0;
    int i2 = getWidth();
    int i7 = paramCanvas.save();
    int i4;
    int i3;
    if (bool1)
    {
      int i9 = getChildCount();
      i4 = 0;
      while (i4 < i9)
      {
        View localView = getChildAt(i4);
        i3 = i1;
        int i5 = i2;
        if (localView != paramView)
        {
          i3 = i1;
          i5 = i2;
          if (localView.getVisibility() == 0)
          {
            i3 = i1;
            i5 = i2;
            if (l(localView))
            {
              i3 = i1;
              i5 = i2;
              if (i(localView)) {
                if (localView.getHeight() < i8)
                {
                  i3 = i1;
                  i5 = i2;
                }
                else if (a(localView, 3))
                {
                  i5 = localView.getRight();
                  i3 = i1;
                  if (i5 > i1) {
                    i3 = i5;
                  }
                  i5 = i2;
                }
                else
                {
                  int i6 = localView.getLeft();
                  i3 = i1;
                  i5 = i2;
                  if (i6 < i2)
                  {
                    i5 = i6;
                    i3 = i1;
                  }
                }
              }
            }
          }
        }
        i4 += 1;
        i1 = i3;
        i2 = i5;
      }
      paramCanvas.clipRect(i1, 0, i2, getHeight());
    }
    else
    {
      i1 = 0;
    }
    boolean bool2 = super.drawChild(paramCanvas, paramView, paramLong);
    paramCanvas.restoreToCount(i7);
    float f1 = g;
    if ((f1 > 0.0F) && (bool1))
    {
      i3 = f;
      i4 = (int)(((0xFF000000 & i3) >>> 24) * f1);
      h.setColor(i4 << 24 | i3 & 0xFFFFFF);
      paramCanvas.drawRect(i1, 0.0F, i2, getHeight(), h);
      return bool2;
    }
    if ((z != null) && (a(paramView, 3)))
    {
      i1 = z.getIntrinsicWidth();
      i2 = paramView.getRight();
      i3 = i.c();
      f1 = Math.max(0.0F, Math.min(i2 / i3, 1.0F));
      z.setBounds(i2, paramView.getTop(), i2 + i1, paramView.getBottom());
      z.setAlpha((int)(255.0F * f1));
      z.draw(paramCanvas);
      return bool2;
    }
    if ((A != null) && (a(paramView, 5)))
    {
      i1 = A.getIntrinsicWidth();
      i2 = paramView.getLeft();
      i3 = getWidth();
      i4 = j.c();
      f1 = Math.max(0.0F, Math.min((i3 - i2) / i4, 1.0F));
      A.setBounds(i2 - i1, paramView.getTop(), i2, paramView.getBottom());
      A.setAlpha((int)(255.0F * f1));
      A.draw(paramCanvas);
    }
    return bool2;
  }
  
  int e(View paramView)
  {
    return d.a(getLayoutParamsa, u.k(this));
  }
  
  public boolean e(int paramInt)
  {
    View localView = b(paramInt);
    if (localView != null) {
      return h(localView);
    }
    return false;
  }
  
  float f(View paramView)
  {
    return getLayoutParamsb;
  }
  
  public boolean f(int paramInt)
  {
    View localView = b(paramInt);
    if (localView != null) {
      return j(localView);
    }
    return false;
  }
  
  public void g(int paramInt)
  {
    b(paramInt, true);
  }
  
  boolean g(View paramView)
  {
    return getLayoutParamsa == 0;
  }
  
  protected ViewGroup.LayoutParams generateDefaultLayoutParams()
  {
    return new e(-1, -1);
  }
  
  public ViewGroup.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new e(getContext(), paramAttributeSet);
  }
  
  protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    if ((paramLayoutParams instanceof e)) {
      return new e((e)paramLayoutParams);
    }
    if ((paramLayoutParams instanceof ViewGroup.MarginLayoutParams)) {
      return new e((ViewGroup.MarginLayoutParams)paramLayoutParams);
    }
    return new e(paramLayoutParams);
  }
  
  public float getDrawerElevation()
  {
    if (P) {
      return d;
    }
    return 0.0F;
  }
  
  public Drawable getStatusBarBackgroundDrawable()
  {
    return y;
  }
  
  public boolean h(View paramView)
  {
    if (i(paramView)) {
      return (getLayoutParamsd & 0x1) == 1;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("View ");
    localStringBuilder.append(paramView);
    localStringBuilder.append(" is not a drawer");
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  boolean i(View paramView)
  {
    int i1 = d.a(getLayoutParamsa, u.k(paramView));
    if ((i1 & 0x3) != 0) {
      return true;
    }
    return (i1 & 0x5) != 0;
  }
  
  public boolean j(View paramView)
  {
    if (i(paramView)) {
      return getLayoutParamsb > 0.0F;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("View ");
    localStringBuilder.append(paramView);
    localStringBuilder.append(" is not a drawer");
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  public void k(View paramView)
  {
    b(paramView, true);
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    o = true;
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    o = true;
  }
  
  public void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    if ((E) && (y != null))
    {
      int i1;
      if (Build.VERSION.SDK_INT >= 21)
      {
        Object localObject = D;
        if (localObject != null) {
          i1 = ((WindowInsets)localObject).getSystemWindowInsetTop();
        } else {
          i1 = 0;
        }
      }
      else
      {
        i1 = 0;
      }
      if (i1 > 0)
      {
        y.setBounds(0, 0, getWidth(), i1);
        y.draw(paramCanvas);
      }
    }
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getActionMasked();
    boolean bool2 = i.b(paramMotionEvent);
    boolean bool3 = j.b(paramMotionEvent);
    int i3 = 0;
    int i2 = 0;
    boolean bool1 = false;
    if (i1 != 0)
    {
      if (i1 != 1) {
        if (i1 != 2)
        {
          if (i1 != 3)
          {
            i1 = i3;
            break label191;
          }
        }
        else
        {
          i1 = i3;
          if (!i.a(3)) {
            break label191;
          }
          k.b();
          l.b();
          i1 = i3;
          break label191;
        }
      }
      a(true);
      t = false;
      i1 = i3;
    }
    else
    {
      float f1 = paramMotionEvent.getX();
      float f2 = paramMotionEvent.getY();
      w = f1;
      x = f2;
      i1 = i2;
      if (g > 0.0F)
      {
        paramMotionEvent = i.b((int)f1, (int)f2);
        i1 = i2;
        if (paramMotionEvent != null)
        {
          i1 = i2;
          if (g(paramMotionEvent)) {
            i1 = 1;
          }
        }
      }
      t = false;
    }
    label191:
    if (((bool2 | bool3)) || (i1 != 0) || (e()) || (t)) {
      bool1 = true;
    }
    return bool1;
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if ((paramInt == 4) && (f()))
    {
      paramKeyEvent.startTracking();
      return true;
    }
    return super.onKeyDown(paramInt, paramKeyEvent);
  }
  
  public boolean onKeyUp(int paramInt, KeyEvent paramKeyEvent)
  {
    if (paramInt == 4)
    {
      paramKeyEvent = d();
      if ((paramKeyEvent != null) && (d(paramKeyEvent) == 0)) {
        b();
      }
      return paramKeyEvent != null;
    }
    return super.onKeyUp(paramInt, paramKeyEvent);
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    n = true;
    paramInt3 -= paramInt1;
    int i5 = getChildCount();
    int i1 = 0;
    while (i1 < i5)
    {
      View localView = getChildAt(i1);
      if (localView.getVisibility() != 8)
      {
        e localE = (e)localView.getLayoutParams();
        if (g(localView))
        {
          paramInt1 = leftMargin;
          localView.layout(paramInt1, topMargin, localView.getMeasuredWidth() + paramInt1, topMargin + localView.getMeasuredHeight());
        }
        else
        {
          int i6 = localView.getMeasuredWidth();
          int i7 = localView.getMeasuredHeight();
          int i2;
          float f1;
          if (a(localView, 3))
          {
            i2 = -i6 + (int)(i6 * b);
            f1 = (i6 + i2) / i6;
          }
          else
          {
            i2 = paramInt3 - (int)(i6 * b);
            f1 = (paramInt3 - i2) / i6;
          }
          int i3;
          if (f1 != b) {
            i3 = 1;
          } else {
            i3 = 0;
          }
          paramInt1 = a & 0x70;
          if (paramInt1 != 16)
          {
            if (paramInt1 != 80)
            {
              paramInt1 = topMargin;
              localView.layout(i2, paramInt1, i2 + i6, paramInt1 + i7);
            }
            else
            {
              paramInt1 = paramInt4 - paramInt2;
              localView.layout(i2, paramInt1 - bottomMargin - localView.getMeasuredHeight(), i2 + i6, paramInt1 - bottomMargin);
            }
          }
          else
          {
            int i8 = paramInt4 - paramInt2;
            int i4 = (i8 - i7) / 2;
            if (i4 < topMargin)
            {
              paramInt1 = topMargin;
            }
            else
            {
              int i9 = bottomMargin;
              paramInt1 = i4;
              if (i4 + i7 > i8 - i9) {
                paramInt1 = i8 - i9 - i7;
              }
            }
            localView.layout(i2, paramInt1, i2 + i6, paramInt1 + i7);
          }
          if (i3 != 0) {
            c(localView, f1);
          }
          if (b > 0.0F) {
            paramInt1 = 0;
          } else {
            paramInt1 = 4;
          }
          if (localView.getVisibility() != paramInt1) {
            localView.setVisibility(paramInt1);
          }
        }
      }
      i1 += 1;
    }
    n = false;
    o = false;
  }
  
  @SuppressLint({"WrongConstant"})
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    Object localObject = this;
    int i5 = View.MeasureSpec.getMode(paramInt1);
    int i9 = View.MeasureSpec.getMode(paramInt2);
    int i4 = View.MeasureSpec.getSize(paramInt1);
    int i8 = View.MeasureSpec.getSize(paramInt2);
    int i3;
    int i1;
    int i6;
    int i7;
    if (i5 == 1073741824)
    {
      i3 = i5;
      i1 = i9;
      i6 = i4;
      i7 = i8;
      if (i9 == 1073741824) {}
    }
    else
    {
      if (!isInEditMode()) {
        break label893;
      }
      if (i5 == Integer.MIN_VALUE)
      {
        i2 = 1073741824;
      }
      else
      {
        i2 = i5;
        if (i5 == 0)
        {
          i2 = 1073741824;
          i4 = 300;
        }
      }
      if (i9 == Integer.MIN_VALUE)
      {
        i1 = 1073741824;
        i3 = i2;
        i6 = i4;
        i7 = i8;
      }
      else
      {
        i3 = i2;
        i1 = i9;
        i6 = i4;
        i7 = i8;
        if (i9 == 0)
        {
          i1 = 1073741824;
          i7 = 300;
          i6 = i4;
          i3 = i2;
        }
      }
    }
    ((ViewGroup)localObject).setMeasuredDimension(i6, i7);
    if ((D != null) && (u.h(this))) {
      i5 = 1;
    } else {
      i5 = 0;
    }
    int i10 = u.k(this);
    i4 = 0;
    int i2 = 0;
    int i11 = getChildCount();
    i8 = 0;
    View localView;
    for (;;)
    {
      DrawerLayout localDrawerLayout = this;
      if (i8 >= i11) {
        break label892;
      }
      localView = localDrawerLayout.getChildAt(i8);
      e localE;
      if (localView.getVisibility() != 8)
      {
        localE = (e)localView.getLayoutParams();
        if (i5 != 0)
        {
          i9 = d.a(a, i10);
          WindowInsets localWindowInsets;
          if (u.h(localView))
          {
            if (Build.VERSION.SDK_INT >= 21)
            {
              localWindowInsets = (WindowInsets)D;
              if (i9 == 3)
              {
                localObject = localWindowInsets.replaceSystemWindowInsets(localWindowInsets.getSystemWindowInsetLeft(), localWindowInsets.getSystemWindowInsetTop(), 0, localWindowInsets.getSystemWindowInsetBottom());
              }
              else
              {
                localObject = localWindowInsets;
                if (i9 == 5) {
                  localObject = localWindowInsets.replaceSystemWindowInsets(0, localWindowInsets.getSystemWindowInsetTop(), localWindowInsets.getSystemWindowInsetRight(), localWindowInsets.getSystemWindowInsetBottom());
                }
              }
              localView.dispatchApplyWindowInsets((WindowInsets)localObject);
            }
          }
          else if (Build.VERSION.SDK_INT >= 21)
          {
            localWindowInsets = (WindowInsets)D;
            if (i9 == 3)
            {
              localObject = localWindowInsets.replaceSystemWindowInsets(localWindowInsets.getSystemWindowInsetLeft(), localWindowInsets.getSystemWindowInsetTop(), 0, localWindowInsets.getSystemWindowInsetBottom());
            }
            else
            {
              localObject = localWindowInsets;
              if (i9 == 5) {
                localObject = localWindowInsets.replaceSystemWindowInsets(0, localWindowInsets.getSystemWindowInsetTop(), localWindowInsets.getSystemWindowInsetRight(), localWindowInsets.getSystemWindowInsetBottom());
              }
            }
            leftMargin = ((WindowInsets)localObject).getSystemWindowInsetLeft();
            topMargin = ((WindowInsets)localObject).getSystemWindowInsetTop();
            rightMargin = ((WindowInsets)localObject).getSystemWindowInsetRight();
            bottomMargin = ((WindowInsets)localObject).getSystemWindowInsetBottom();
          }
          else {}
        }
        if (localDrawerLayout.g(localView)) {
          localView.measure(View.MeasureSpec.makeMeasureSpec(i6 - leftMargin - rightMargin, 1073741824), View.MeasureSpec.makeMeasureSpec(i7 - topMargin - bottomMargin, 1073741824));
        }
      }
      else
      {
        break label809;
      }
      if (!localDrawerLayout.i(localView)) {
        break;
      }
      if (P)
      {
        float f1 = u.g(localView);
        float f2 = d;
        if (f1 != f2) {
          u.a(localView, f2);
        }
      }
      int i12 = localDrawerLayout.e(localView) & 0x7;
      if (i12 == 3) {
        i9 = 1;
      } else {
        i9 = 0;
      }
      if (((i9 != 0) && (i4 != 0)) || ((i9 == 0) && (i2 != 0)))
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("Child drawer has absolute gravity ");
        ((StringBuilder)localObject).append(h(i12));
        ((StringBuilder)localObject).append(" but this ");
        ((StringBuilder)localObject).append("DrawerLayout");
        ((StringBuilder)localObject).append(" already has a ");
        ((StringBuilder)localObject).append("drawer view along that edge");
        throw new IllegalStateException(((StringBuilder)localObject).toString());
      }
      if (i9 != 0) {
        i4 = 1;
      } else {
        i2 = 1;
      }
      localView.measure(ViewGroup.getChildMeasureSpec(paramInt1, e + leftMargin + rightMargin, width), ViewGroup.getChildMeasureSpec(paramInt2, topMargin + bottomMargin, height));
      label809:
      i8 += 1;
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Child ");
    ((StringBuilder)localObject).append(localView);
    ((StringBuilder)localObject).append(" at index ");
    ((StringBuilder)localObject).append(i8);
    ((StringBuilder)localObject).append(" does not have a valid layout_gravity - must be Gravity.LEFT, ");
    ((StringBuilder)localObject).append("Gravity.RIGHT or Gravity.NO_GRAVITY");
    throw new IllegalStateException(((StringBuilder)localObject).toString());
    label892:
    return;
    label893:
    localObject = new IllegalArgumentException("DrawerLayout must be measured with MeasureSpec.EXACTLY.");
    for (;;)
    {
      throw ((Throwable)localObject);
    }
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof f))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    paramParcelable = (f)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.a());
    int i1 = e;
    if (i1 != 0)
    {
      View localView = b(i1);
      if (localView != null) {
        k(localView);
      }
    }
    i1 = f;
    if (i1 != 3) {
      a(i1, 3);
    }
    i1 = g;
    if (i1 != 3) {
      a(i1, 5);
    }
    i1 = h;
    if (i1 != 3) {
      a(i1, 8388611);
    }
    i1 = i;
    if (i1 != 3) {
      a(i1, 8388613);
    }
  }
  
  public void onRtlPropertiesChanged(int paramInt)
  {
    i();
  }
  
  protected Parcelable onSaveInstanceState()
  {
    f localF = new f(super.onSaveInstanceState());
    int i4 = getChildCount();
    int i1 = 0;
    while (i1 < i4)
    {
      e localE = (e)getChildAt(i1).getLayoutParams();
      int i2 = d;
      int i3 = 0;
      if (i2 == 1) {
        i2 = 1;
      } else {
        i2 = 0;
      }
      if (d == 2) {
        i3 = 1;
      }
      if ((i2 == 0) && (i3 == 0)) {
        i1 += 1;
      } else {
        e = a;
      }
    }
    f = p;
    g = q;
    h = r;
    i = s;
    return localF;
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    i.a(paramMotionEvent);
    j.a(paramMotionEvent);
    int i1 = paramMotionEvent.getAction() & 0xFF;
    boolean bool2 = false;
    if (i1 != 0)
    {
      if (i1 != 1)
      {
        if (i1 != 3) {
          return true;
        }
        a(true);
        t = false;
        return true;
      }
      f2 = paramMotionEvent.getX();
      f1 = paramMotionEvent.getY();
      boolean bool3 = true;
      paramMotionEvent = i.b((int)f2, (int)f1);
      boolean bool1 = bool3;
      if (paramMotionEvent != null)
      {
        bool1 = bool3;
        if (g(paramMotionEvent))
        {
          f2 -= w;
          f1 -= x;
          i1 = i.d();
          bool1 = bool3;
          if (f2 * f2 + f1 * f1 < i1 * i1)
          {
            paramMotionEvent = c();
            bool1 = bool3;
            if (paramMotionEvent != null)
            {
              bool1 = bool2;
              if (d(paramMotionEvent) == 2) {
                bool1 = true;
              }
            }
          }
        }
      }
      a(bool1);
      return true;
    }
    float f1 = paramMotionEvent.getX();
    float f2 = paramMotionEvent.getY();
    w = f1;
    x = f2;
    t = false;
    return true;
  }
  
  public void requestDisallowInterceptTouchEvent(boolean paramBoolean)
  {
    super.requestDisallowInterceptTouchEvent(paramBoolean);
    if (paramBoolean) {
      a(true);
    }
  }
  
  public void requestLayout()
  {
    if (!n) {
      super.requestLayout();
    }
  }
  
  public void setDrawerElevation(float paramFloat)
  {
    d = paramFloat;
    int i1 = 0;
    while (i1 < getChildCount())
    {
      View localView = getChildAt(i1);
      if (i(localView)) {
        u.a(localView, d);
      }
      i1 += 1;
    }
  }
  
  @Deprecated
  public void setDrawerListener(d paramD)
  {
    d localD = u;
    if (localD != null) {
      b(localD);
    }
    if (paramD != null) {
      a(paramD);
    }
    u = paramD;
  }
  
  public void setDrawerLockMode(int paramInt)
  {
    a(paramInt, 3);
    a(paramInt, 5);
  }
  
  public void setScrimColor(int paramInt)
  {
    f = paramInt;
    invalidate();
  }
  
  public void setStatusBarBackground(int paramInt)
  {
    Drawable localDrawable;
    if (paramInt != 0) {
      localDrawable = android.support.v4.content.a.c(getContext(), paramInt);
    } else {
      localDrawable = null;
    }
    y = localDrawable;
    invalidate();
  }
  
  public void setStatusBarBackground(Drawable paramDrawable)
  {
    y = paramDrawable;
    invalidate();
  }
  
  public void setStatusBarBackgroundColor(int paramInt)
  {
    y = new ColorDrawable(paramInt);
    invalidate();
  }
  
  class a
    implements View.OnApplyWindowInsetsListener
  {
    a() {}
    
    public WindowInsets onApplyWindowInsets(View paramView, WindowInsets paramWindowInsets)
    {
      paramView = (DrawerLayout)paramView;
      boolean bool;
      if (paramWindowInsets.getSystemWindowInsetTop() > 0) {
        bool = true;
      } else {
        bool = false;
      }
      paramView.a(paramWindowInsets, bool);
      return paramWindowInsets.consumeSystemWindowInsets();
    }
  }
  
  class b
    extends b
  {
    private final Rect c = new Rect();
    
    b() {}
    
    private void a(c paramC1, c paramC2)
    {
      Rect localRect = c;
      paramC2.a(localRect);
      paramC1.c(localRect);
      paramC2.b(localRect);
      paramC1.d(localRect);
      paramC1.n(paramC2.t());
      paramC1.e(paramC2.f());
      paramC1.a(paramC2.c());
      paramC1.b(paramC2.d());
      paramC1.g(paramC2.m());
      paramC1.d(paramC2.l());
      paramC1.h(paramC2.n());
      paramC1.i(paramC2.o());
      paramC1.a(paramC2.i());
      paramC1.l(paramC2.s());
      paramC1.j(paramC2.p());
      paramC1.a(paramC2.a());
    }
    
    private void a(c paramC, ViewGroup paramViewGroup)
    {
      int j = paramViewGroup.getChildCount();
      int i = 0;
      while (i < j)
      {
        View localView = paramViewGroup.getChildAt(i);
        if (DrawerLayout.m(localView)) {
          paramC.a(localView);
        }
        i += 1;
      }
    }
    
    public void a(View paramView, c paramC)
    {
      if (DrawerLayout.O)
      {
        super.a(paramView, paramC);
      }
      else
      {
        c localC = c.a(paramC);
        super.a(paramView, localC);
        paramC.c(paramView);
        ViewParent localViewParent = u.p(paramView);
        if ((localViewParent instanceof View)) {
          paramC.b((View)localViewParent);
        }
        a(paramC, localC);
        localC.u();
        a(paramC, (ViewGroup)paramView);
      }
      paramC.a(DrawerLayout.class.getName());
      paramC.h(false);
      paramC.i(false);
      paramC.a(c.a.b);
      paramC.a(c.a.c);
    }
    
    public boolean a(View paramView, AccessibilityEvent paramAccessibilityEvent)
    {
      if (paramAccessibilityEvent.getEventType() == 32)
      {
        paramView = paramAccessibilityEvent.getText();
        paramAccessibilityEvent = d();
        if (paramAccessibilityEvent != null)
        {
          int i = e(paramAccessibilityEvent);
          paramAccessibilityEvent = d(i);
          if (paramAccessibilityEvent != null) {
            paramView.add(paramAccessibilityEvent);
          }
        }
        return true;
      }
      return super.a(paramView, paramAccessibilityEvent);
    }
    
    public boolean a(ViewGroup paramViewGroup, View paramView, AccessibilityEvent paramAccessibilityEvent)
    {
      if ((!DrawerLayout.O) && (!DrawerLayout.m(paramView))) {
        return false;
      }
      return super.a(paramViewGroup, paramView, paramAccessibilityEvent);
    }
    
    public void b(View paramView, AccessibilityEvent paramAccessibilityEvent)
    {
      super.b(paramView, paramAccessibilityEvent);
      paramAccessibilityEvent.setClassName(DrawerLayout.class.getName());
    }
  }
  
  static final class c
    extends b
  {
    c() {}
    
    public void a(View paramView, c paramC)
    {
      super.a(paramView, paramC);
      if (!DrawerLayout.m(paramView)) {
        paramC.b(null);
      }
    }
  }
  
  public static abstract interface d
  {
    public abstract void a(int paramInt);
    
    public abstract void a(View paramView);
    
    public abstract void a(View paramView, float paramFloat);
    
    public abstract void b(View paramView);
  }
  
  public static class e
    extends ViewGroup.MarginLayoutParams
  {
    public int a = 0;
    float b;
    boolean c;
    int d;
    
    public e(int paramInt1, int paramInt2)
    {
      super(paramInt2);
    }
    
    public e(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
      paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, DrawerLayout.N);
      a = paramContext.getInt(0, 0);
      paramContext.recycle();
    }
    
    public e(e paramE)
    {
      super();
      a = a;
    }
    
    public e(ViewGroup.LayoutParams paramLayoutParams)
    {
      super();
    }
    
    public e(ViewGroup.MarginLayoutParams paramMarginLayoutParams)
    {
      super();
    }
  }
  
  protected static class f
    extends android.support.v4.view.a
  {
    public static final Parcelable.Creator<f> CREATOR = new a();
    int e = 0;
    int f;
    int g;
    int h;
    int i;
    
    public f(Parcel paramParcel, ClassLoader paramClassLoader)
    {
      super(paramClassLoader);
      e = paramParcel.readInt();
      f = paramParcel.readInt();
      g = paramParcel.readInt();
      h = paramParcel.readInt();
      i = paramParcel.readInt();
    }
    
    public f(Parcelable paramParcelable)
    {
      super();
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      super.writeToParcel(paramParcel, paramInt);
      paramParcel.writeInt(e);
      paramParcel.writeInt(f);
      paramParcel.writeInt(g);
      paramParcel.writeInt(h);
      paramParcel.writeInt(i);
    }
    
    static final class a
      implements Parcelable.ClassLoaderCreator<DrawerLayout.f>
    {
      a() {}
      
      public DrawerLayout.f createFromParcel(Parcel paramParcel)
      {
        return new DrawerLayout.f(paramParcel, null);
      }
      
      public DrawerLayout.f createFromParcel(Parcel paramParcel, ClassLoader paramClassLoader)
      {
        return new DrawerLayout.f(paramParcel, paramClassLoader);
      }
      
      public DrawerLayout.f[] newArray(int paramInt)
      {
        return new DrawerLayout.f[paramInt];
      }
    }
  }
  
  private class g
    extends s.c
  {
    private final int a;
    private s b;
    private final Runnable c = new a();
    
    g(int paramInt)
    {
      a = paramInt;
    }
    
    private void c()
    {
      int j = a;
      int i = 3;
      if (j == 3) {
        i = 5;
      }
      View localView = b(i);
      if (localView != null) {
        a(localView);
      }
    }
    
    public int a(View paramView)
    {
      if (i(paramView)) {
        return paramView.getWidth();
      }
      return 0;
    }
    
    public int a(View paramView, int paramInt1, int paramInt2)
    {
      if (a(paramView, 3)) {
        return Math.max(-paramView.getWidth(), Math.min(paramInt1, 0));
      }
      paramInt2 = getWidth();
      return Math.max(paramInt2 - paramView.getWidth(), Math.min(paramInt1, paramInt2));
    }
    
    void a()
    {
      int k = b.c();
      int i = a;
      int j = 0;
      if (i == 3) {
        i = 1;
      } else {
        i = 0;
      }
      View localView;
      if (i != 0)
      {
        localView = b(3);
        if (localView != null) {
          j = -localView.getWidth();
        }
        j += k;
      }
      else
      {
        localView = b(5);
        j = getWidth() - k;
      }
      if ((localView != null) && (((i != 0) && (localView.getLeft() < j)) || ((i == 0) && (localView.getLeft() > j) && (d(localView) == 0))))
      {
        DrawerLayout.e localE = (DrawerLayout.e)localView.getLayoutParams();
        b.b(localView, j, localView.getTop());
        c = true;
        invalidate();
        c();
        DrawerLayout.this.a();
      }
    }
    
    public void a(int paramInt1, int paramInt2)
    {
      View localView;
      if ((paramInt1 & 0x1) == 1) {
        localView = b(3);
      } else {
        localView = b(5);
      }
      if ((localView != null) && (d(localView) == 0)) {
        b.a(localView, paramInt2);
      }
    }
    
    public void a(s paramS)
    {
      b = paramS;
    }
    
    public void a(View paramView, float paramFloat1, float paramFloat2)
    {
      paramFloat2 = f(paramView);
      int j = paramView.getWidth();
      int i;
      if (a(paramView, 3))
      {
        if ((paramFloat1 <= 0.0F) && ((paramFloat1 != 0.0F) || (paramFloat2 <= 0.5F))) {
          i = -j;
        } else {
          i = 0;
        }
      }
      else
      {
        i = getWidth();
        if ((paramFloat1 >= 0.0F) && ((paramFloat1 != 0.0F) || (paramFloat2 <= 0.5F))) {
          break label104;
        }
        i -= j;
      }
      label104:
      b.d(i, paramView.getTop());
      invalidate();
    }
    
    public void a(View paramView, int paramInt)
    {
      getLayoutParamsc = false;
      c();
    }
    
    public void a(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      paramInt2 = paramView.getWidth();
      float f;
      if (a(paramView, 3)) {
        f = (paramInt2 + paramInt1) / paramInt2;
      } else {
        f = (getWidth() - paramInt1) / paramInt2;
      }
      c(paramView, f);
      if (f == 0.0F) {
        paramInt1 = 4;
      } else {
        paramInt1 = 0;
      }
      paramView.setVisibility(paramInt1);
      invalidate();
    }
    
    public int b(View paramView, int paramInt1, int paramInt2)
    {
      return paramView.getTop();
    }
    
    public void b()
    {
      removeCallbacks(c);
    }
    
    public void b(int paramInt1, int paramInt2)
    {
      postDelayed(c, 160L);
    }
    
    public boolean b(int paramInt)
    {
      return false;
    }
    
    public boolean b(View paramView, int paramInt)
    {
      return (i(paramView)) && (a(paramView, a)) && (d(paramView) == 0);
    }
    
    public void c(int paramInt)
    {
      a(a, paramInt, b.b());
    }
    
    class a
      implements Runnable
    {
      a() {}
      
      public void run()
      {
        a();
      }
    }
  }
}
