package android.support.v4.widget;

import a.b.g.f.b;
import a.b.g.f.b.a;
import a.b.g.f.b.a.a;
import a.b.g.g.m;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.graphics.Paint.FontMetricsInt;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.text.Editable;
import android.text.TextDirectionHeuristic;
import android.text.TextDirectionHeuristics;
import android.text.TextPaint;
import android.text.method.PasswordTransformationMethod;
import android.util.Log;
import android.view.ActionMode;
import android.view.ActionMode.Callback;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.TextView;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public final class p
{
  private static Field a;
  private static boolean b;
  private static Field c;
  private static boolean d;
  
  private static int a(TextDirectionHeuristic paramTextDirectionHeuristic)
  {
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.FIRSTSTRONG_RTL) {
      return 1;
    }
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.FIRSTSTRONG_LTR) {
      return 1;
    }
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.ANYRTL_LTR) {
      return 2;
    }
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.LTR) {
      return 3;
    }
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.RTL) {
      return 4;
    }
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.LOCALE) {
      return 5;
    }
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.FIRSTSTRONG_LTR) {
      return 6;
    }
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.FIRSTSTRONG_RTL) {
      return 7;
    }
    return 1;
  }
  
  private static int a(Field paramField, TextView paramTextView)
  {
    try
    {
      int i = paramField.getInt(paramTextView);
      return i;
    }
    catch (IllegalAccessException paramTextView)
    {
      paramTextView = new StringBuilder();
      paramTextView.append("Could not retrieve value of ");
      paramTextView.append(paramField.getName());
      paramTextView.append(" field.");
      Log.d("TextViewCompat", paramTextView.toString());
    }
    return -1;
  }
  
  public static ActionMode.Callback a(TextView paramTextView, ActionMode.Callback paramCallback)
  {
    int i = Build.VERSION.SDK_INT;
    if ((i >= 26) && (i <= 27))
    {
      if ((paramCallback instanceof a)) {
        return paramCallback;
      }
      return new a(paramCallback, paramTextView);
    }
    return paramCallback;
  }
  
  private static Field a(String paramString)
  {
    Object localObject = null;
    try
    {
      Field localField = TextView.class.getDeclaredField(paramString);
      localObject = localField;
      localField.setAccessible(true);
      return localField;
    }
    catch (NoSuchFieldException localNoSuchFieldException)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Could not retrieve ");
      localStringBuilder.append(paramString);
      localStringBuilder.append(" field.");
      Log.e("TextViewCompat", localStringBuilder.toString());
    }
    return localObject;
  }
  
  public static void a(TextView paramTextView, int paramInt)
  {
    m.a(paramInt);
    if (Build.VERSION.SDK_INT >= 28)
    {
      paramTextView.setFirstBaselineToTopHeight(paramInt);
      return;
    }
    Paint.FontMetricsInt localFontMetricsInt = paramTextView.getPaint().getFontMetricsInt();
    int i;
    if ((Build.VERSION.SDK_INT >= 16) && (!paramTextView.getIncludeFontPadding())) {
      i = ascent;
    } else {
      i = top;
    }
    if (paramInt > Math.abs(i))
    {
      i = -i;
      paramTextView.setPadding(paramTextView.getPaddingLeft(), paramInt - i, paramTextView.getPaddingRight(), paramTextView.getPaddingBottom());
    }
  }
  
  public static void a(TextView paramTextView, b.a paramA)
  {
    if (Build.VERSION.SDK_INT >= 18) {
      paramTextView.setTextDirection(a(paramA.c()));
    }
    if (Build.VERSION.SDK_INT < 23)
    {
      float f = paramA.d().getTextScaleX();
      paramTextView.getPaint().set(paramA.d());
      if (f == paramTextView.getTextScaleX()) {
        paramTextView.setTextScaleX(f / 2.0F + 1.0F);
      }
      paramTextView.setTextScaleX(f);
      return;
    }
    paramTextView.getPaint().set(paramA.d());
    paramTextView.setBreakStrategy(paramA.a());
    paramTextView.setHyphenationFrequency(paramA.b());
  }
  
  public static void a(TextView paramTextView, b paramB)
  {
    if (Build.VERSION.SDK_INT >= 28)
    {
      paramTextView.setText(paramB.b());
      return;
    }
    if (f(paramTextView).equals(paramB.a()))
    {
      paramTextView.setText(paramB);
      return;
    }
    throw new IllegalArgumentException("Given text can not be applied to TextView.");
  }
  
  public static void a(TextView paramTextView, Drawable paramDrawable1, Drawable paramDrawable2, Drawable paramDrawable3, Drawable paramDrawable4)
  {
    int i = Build.VERSION.SDK_INT;
    if (i >= 18)
    {
      paramTextView.setCompoundDrawablesRelative(paramDrawable1, paramDrawable2, paramDrawable3, paramDrawable4);
      return;
    }
    if (i >= 17)
    {
      int j = paramTextView.getLayoutDirection();
      i = 1;
      if (j != 1) {
        i = 0;
      }
      Drawable localDrawable;
      if (i != 0) {
        localDrawable = paramDrawable3;
      } else {
        localDrawable = paramDrawable1;
      }
      if (i == 0) {
        paramDrawable1 = paramDrawable3;
      }
      paramTextView.setCompoundDrawables(localDrawable, paramDrawable2, paramDrawable1, paramDrawable4);
      return;
    }
    paramTextView.setCompoundDrawables(paramDrawable1, paramDrawable2, paramDrawable3, paramDrawable4);
  }
  
  public static Drawable[] a(TextView paramTextView)
  {
    int i = Build.VERSION.SDK_INT;
    if (i >= 18) {
      return paramTextView.getCompoundDrawablesRelative();
    }
    if (i >= 17)
    {
      int j = paramTextView.getLayoutDirection();
      i = 1;
      if (j != 1) {
        i = 0;
      }
      paramTextView = paramTextView.getCompoundDrawables();
      if (i != 0)
      {
        Object localObject1 = paramTextView[2];
        Object localObject2 = paramTextView[0];
        paramTextView[0] = localObject1;
        paramTextView[2] = localObject2;
      }
      return paramTextView;
    }
    return paramTextView.getCompoundDrawables();
  }
  
  public static int b(TextView paramTextView)
  {
    return paramTextView.getPaddingTop() - getPaintgetFontMetricsInttop;
  }
  
  public static void b(TextView paramTextView, int paramInt)
  {
    m.a(paramInt);
    Paint.FontMetricsInt localFontMetricsInt = paramTextView.getPaint().getFontMetricsInt();
    int i;
    if ((Build.VERSION.SDK_INT >= 16) && (!paramTextView.getIncludeFontPadding())) {
      i = descent;
    } else {
      i = bottom;
    }
    if (paramInt > Math.abs(i)) {
      paramTextView.setPadding(paramTextView.getPaddingLeft(), paramTextView.getPaddingTop(), paramTextView.getPaddingRight(), paramInt - i);
    }
  }
  
  public static int c(TextView paramTextView)
  {
    return paramTextView.getPaddingBottom() + getPaintgetFontMetricsIntbottom;
  }
  
  public static void c(TextView paramTextView, int paramInt)
  {
    m.a(paramInt);
    int i = paramTextView.getPaint().getFontMetricsInt(null);
    if (paramInt != i) {
      paramTextView.setLineSpacing(paramInt - i, 1.0F);
    }
  }
  
  public static int d(TextView paramTextView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return paramTextView.getMaxLines();
    }
    if (!d)
    {
      c = a("mMaxMode");
      d = true;
    }
    Field localField = c;
    if ((localField != null) && (a(localField, paramTextView) == 1))
    {
      if (!b)
      {
        a = a("mMaximum");
        b = true;
      }
      localField = a;
      if (localField != null) {
        return a(localField, paramTextView);
      }
    }
    return -1;
  }
  
  public static void d(TextView paramTextView, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 23)
    {
      paramTextView.setTextAppearance(paramInt);
      return;
    }
    paramTextView.setTextAppearance(paramTextView.getContext(), paramInt);
  }
  
  private static TextDirectionHeuristic e(TextView paramTextView)
  {
    if ((paramTextView.getTransformationMethod() instanceof PasswordTransformationMethod)) {
      return TextDirectionHeuristics.LTR;
    }
    int j = Build.VERSION.SDK_INT;
    int i = 0;
    if ((j >= 28) && ((paramTextView.getInputType() & 0xF) == 3))
    {
      i = Character.getDirectionality(android.icu.text.DecimalFormatSymbols.getInstance(paramTextView.getTextLocale()).getDigitStrings()[0].codePointAt(0));
      if ((i != 1) && (i != 2)) {
        return TextDirectionHeuristics.LTR;
      }
      return TextDirectionHeuristics.RTL;
    }
    if (paramTextView.getLayoutDirection() == 1) {
      i = 1;
    }
    switch (paramTextView.getTextDirection())
    {
    default: 
      if (i != 0) {
        return TextDirectionHeuristics.FIRSTSTRONG_RTL;
      }
      break;
    case 7: 
      return TextDirectionHeuristics.FIRSTSTRONG_RTL;
    case 6: 
      return TextDirectionHeuristics.FIRSTSTRONG_LTR;
    case 5: 
      return TextDirectionHeuristics.LOCALE;
    case 4: 
      return TextDirectionHeuristics.RTL;
    case 3: 
      return TextDirectionHeuristics.LTR;
    case 2: 
      return TextDirectionHeuristics.ANYRTL_LTR;
    }
    return TextDirectionHeuristics.FIRSTSTRONG_LTR;
  }
  
  public static b.a f(TextView paramTextView)
  {
    if (Build.VERSION.SDK_INT >= 28) {
      return new b.a(paramTextView.getTextMetricsParams());
    }
    b.a.a localA = new b.a.a(new TextPaint(paramTextView.getPaint()));
    if (Build.VERSION.SDK_INT >= 23)
    {
      localA.a(paramTextView.getBreakStrategy());
      localA.b(paramTextView.getHyphenationFrequency());
    }
    if (Build.VERSION.SDK_INT >= 18) {
      localA.a(e(paramTextView));
    }
    return localA.a();
  }
  
  private static class a
    implements ActionMode.Callback
  {
    private final ActionMode.Callback a;
    private final TextView b;
    private Class c;
    private Method d;
    private boolean e;
    private boolean f;
    
    a(ActionMode.Callback paramCallback, TextView paramTextView)
    {
      a = paramCallback;
      b = paramTextView;
      f = false;
    }
    
    private Intent a()
    {
      return new Intent().setAction("android.intent.action.PROCESS_TEXT").setType("text/plain");
    }
    
    private Intent a(ResolveInfo paramResolveInfo, TextView paramTextView)
    {
      return a().putExtra("android.intent.extra.PROCESS_TEXT_READONLY", a(paramTextView) ^ true).setClassName(activityInfo.packageName, activityInfo.name);
    }
    
    private List<ResolveInfo> a(Context paramContext, PackageManager paramPackageManager)
    {
      ArrayList localArrayList = new ArrayList();
      if (!(paramContext instanceof Activity)) {
        return localArrayList;
      }
      paramPackageManager = paramPackageManager.queryIntentActivities(a(), 0).iterator();
      while (paramPackageManager.hasNext())
      {
        ResolveInfo localResolveInfo = (ResolveInfo)paramPackageManager.next();
        if (a(localResolveInfo, paramContext)) {
          localArrayList.add(localResolveInfo);
        }
      }
      return localArrayList;
    }
    
    private void a(Menu paramMenu)
    {
      Object localObject2 = b.getContext();
      PackageManager localPackageManager = ((Context)localObject2).getPackageManager();
      if (!f)
      {
        f = true;
        try
        {
          c = Class.forName("com.android.internal.view.menu.MenuBuilder");
          d = c.getDeclaredMethod("removeItemAt", new Class[] { Integer.TYPE });
          e = true;
        }
        catch (NoSuchMethodException localNoSuchMethodException) {}catch (ClassNotFoundException localClassNotFoundException) {}
        c = null;
        d = null;
        e = false;
      }
      try
      {
        if ((e) && (c.isInstance(paramMenu))) {
          localObject1 = d;
        } else {
          localObject1 = paramMenu.getClass().getDeclaredMethod("removeItemAt", new Class[] { Integer.TYPE });
        }
        int i = paramMenu.size() - 1;
        while (i >= 0)
        {
          MenuItem localMenuItem = paramMenu.getItem(i);
          if ((localMenuItem.getIntent() != null) && ("android.intent.action.PROCESS_TEXT".equals(localMenuItem.getIntent().getAction()))) {
            ((Method)localObject1).invoke(paramMenu, new Object[] { Integer.valueOf(i) });
          }
          i -= 1;
        }
        Object localObject1 = a((Context)localObject2, localPackageManager);
        i = 0;
        while (i < ((List)localObject1).size())
        {
          localObject2 = (ResolveInfo)((List)localObject1).get(i);
          paramMenu.add(0, 0, i + 100, ((ResolveInfo)localObject2).loadLabel(localPackageManager)).setIntent(a((ResolveInfo)localObject2, b)).setShowAsAction(1);
          i += 1;
        }
        return;
      }
      catch (InvocationTargetException paramMenu) {}catch (IllegalAccessException paramMenu) {}catch (NoSuchMethodException paramMenu) {}
    }
    
    private boolean a(ResolveInfo paramResolveInfo, Context paramContext)
    {
      if (paramContext.getPackageName().equals(activityInfo.packageName)) {
        return true;
      }
      if (!activityInfo.exported) {
        return false;
      }
      paramResolveInfo = activityInfo.permission;
      return (paramResolveInfo == null) || (paramContext.checkSelfPermission(paramResolveInfo) == 0);
    }
    
    private boolean a(TextView paramTextView)
    {
      return ((paramTextView instanceof Editable)) && (paramTextView.onCheckIsTextEditor()) && (paramTextView.isEnabled());
    }
    
    public boolean onActionItemClicked(ActionMode paramActionMode, MenuItem paramMenuItem)
    {
      return a.onActionItemClicked(paramActionMode, paramMenuItem);
    }
    
    public boolean onCreateActionMode(ActionMode paramActionMode, Menu paramMenu)
    {
      return a.onCreateActionMode(paramActionMode, paramMenu);
    }
    
    public void onDestroyActionMode(ActionMode paramActionMode)
    {
      a.onDestroyActionMode(paramActionMode);
    }
    
    public boolean onPrepareActionMode(ActionMode paramActionMode, Menu paramMenu)
    {
      a(paramMenu);
      return a.onPrepareActionMode(paramActionMode, paramMenu);
    }
  }
}
