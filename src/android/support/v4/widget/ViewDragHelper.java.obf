package android.support.v4.widget;

import android.content.Context;
import android.content.res.Resources;
import android.support.v4.view.u;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.animation.Interpolator;
import android.widget.OverScroller;
import java.util.Arrays;

public class s
{
  private static final Interpolator w = new a();
  private int a;
  private int b;
  private int c = -1;
  private float[] d;
  private float[] e;
  private float[] f;
  private float[] g;
  private int[] h;
  private int[] i;
  private int[] j;
  private int k;
  private VelocityTracker l;
  private float m;
  private float n;
  private int o;
  private int p;
  private OverScroller q;
  private final c r;
  private View s;
  private boolean t;
  private final ViewGroup u;
  private final Runnable v = new b();
  
  private s(Context paramContext, ViewGroup paramViewGroup, c paramC)
  {
    if (paramViewGroup != null)
    {
      if (paramC != null)
      {
        u = paramViewGroup;
        r = paramC;
        paramViewGroup = ViewConfiguration.get(paramContext);
        o = ((int)(20.0F * getResourcesgetDisplayMetricsdensity + 0.5F));
        b = paramViewGroup.getScaledTouchSlop();
        m = paramViewGroup.getScaledMaximumFlingVelocity();
        n = paramViewGroup.getScaledMinimumFlingVelocity();
        q = new OverScroller(paramContext, w);
        return;
      }
      throw new IllegalArgumentException("Callback may not be null");
    }
    throw new IllegalArgumentException("Parent view may not be null");
  }
  
  private float a(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    float f1 = Math.abs(paramFloat1);
    if (f1 < paramFloat2) {
      return 0.0F;
    }
    if (f1 > paramFloat3)
    {
      if (paramFloat1 > 0.0F) {
        return paramFloat3;
      }
      return -paramFloat3;
    }
    return paramFloat1;
  }
  
  private int a(int paramInt1, int paramInt2, int paramInt3)
  {
    int i1 = Math.abs(paramInt1);
    if (i1 < paramInt2) {
      return 0;
    }
    if (i1 > paramInt3)
    {
      if (paramInt1 > 0) {
        return paramInt3;
      }
      return -paramInt3;
    }
    return paramInt1;
  }
  
  private int a(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramInt3 = a(paramInt3, (int)n, (int)m);
    paramInt4 = a(paramInt4, (int)n, (int)m);
    int i1 = Math.abs(paramInt1);
    int i2 = Math.abs(paramInt2);
    int i3 = Math.abs(paramInt3);
    int i4 = Math.abs(paramInt4);
    int i5 = i3 + i4;
    int i6 = i1 + i2;
    float f1;
    float f2;
    if (paramInt3 != 0)
    {
      f1 = i3;
      f2 = i5;
    }
    else
    {
      f1 = i1;
      f2 = i6;
    }
    float f3 = f1 / f2;
    if (paramInt4 != 0)
    {
      f1 = i4;
      f2 = i5;
    }
    else
    {
      f1 = i2;
      f2 = i6;
    }
    f1 /= f2;
    paramInt1 = b(paramInt1, paramInt3, r.a(paramView));
    paramInt2 = b(paramInt2, paramInt4, r.b(paramView));
    return (int)(paramInt1 * f3 + paramInt2 * f1);
  }
  
  public static s a(ViewGroup paramViewGroup, float paramFloat, c paramC)
  {
    paramViewGroup = a(paramViewGroup, paramC);
    b = ((int)(b * (1.0F / paramFloat)));
    return paramViewGroup;
  }
  
  public static s a(ViewGroup paramViewGroup, c paramC)
  {
    return new s(paramViewGroup.getContext(), paramViewGroup, paramC);
  }
  
  private void a(float paramFloat1, float paramFloat2)
  {
    t = true;
    r.a(s, paramFloat1, paramFloat2);
    t = false;
    if (a == 1) {
      c(0);
    }
  }
  
  private void a(float paramFloat1, float paramFloat2, int paramInt)
  {
    int i2 = 0;
    if (a(paramFloat1, paramFloat2, paramInt, 1)) {
      i2 = 0x0 | 0x1;
    }
    int i1 = i2;
    if (a(paramFloat2, paramFloat1, paramInt, 4)) {
      i1 = i2 | 0x4;
    }
    i2 = i1;
    if (a(paramFloat1, paramFloat2, paramInt, 2)) {
      i2 = i1 | 0x2;
    }
    i1 = i2;
    if (a(paramFloat2, paramFloat1, paramInt, 8)) {
      i1 = i2 | 0x8;
    }
    if (i1 != 0)
    {
      int[] arrayOfInt = i;
      arrayOfInt[paramInt] |= i1;
      r.a(i1, paramInt);
    }
  }
  
  private void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i2 = paramInt1;
    int i1 = paramInt2;
    int i3 = s.getLeft();
    int i4 = s.getTop();
    if (paramInt3 != 0)
    {
      paramInt1 = r.a(s, paramInt1, paramInt3);
      u.c(s, paramInt1 - i3);
    }
    else
    {
      paramInt1 = i2;
    }
    if (paramInt4 != 0)
    {
      i1 = r.b(s, paramInt2, paramInt4);
      u.d(s, i1 - i4);
    }
    if ((paramInt3 != 0) || (paramInt4 != 0)) {
      r.a(s, paramInt1, i1, paramInt1 - i3, i1 - i4);
    }
  }
  
  private boolean a(float paramFloat1, float paramFloat2, int paramInt1, int paramInt2)
  {
    paramFloat1 = Math.abs(paramFloat1);
    paramFloat2 = Math.abs(paramFloat2);
    int i1 = h[paramInt1];
    boolean bool2 = false;
    if (((i1 & paramInt2) == paramInt2) && ((p & paramInt2) != 0) && ((j[paramInt1] & paramInt2) != paramInt2) && ((i[paramInt1] & paramInt2) != paramInt2))
    {
      i1 = b;
      if ((paramFloat1 <= i1) && (paramFloat2 <= i1)) {
        return false;
      }
      if ((paramFloat1 < 0.5F * paramFloat2) && (r.b(paramInt2)))
      {
        int[] arrayOfInt = j;
        arrayOfInt[paramInt1] |= paramInt2;
        return false;
      }
      boolean bool1 = bool2;
      if ((i[paramInt1] & paramInt2) == 0)
      {
        bool1 = bool2;
        if (paramFloat1 > b) {
          bool1 = true;
        }
      }
      return bool1;
    }
    return false;
  }
  
  private boolean a(View paramView, float paramFloat1, float paramFloat2)
  {
    boolean bool2 = false;
    boolean bool3 = false;
    boolean bool1 = false;
    if (paramView == null) {
      return false;
    }
    int i1;
    if (r.a(paramView) > 0) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    int i2;
    if (r.b(paramView) > 0) {
      i2 = 1;
    } else {
      i2 = 0;
    }
    if ((i1 != 0) && (i2 != 0))
    {
      i1 = b;
      if (paramFloat1 * paramFloat1 + paramFloat2 * paramFloat2 > i1 * i1) {
        bool1 = true;
      }
      return bool1;
    }
    if (i1 != 0)
    {
      bool1 = bool2;
      if (Math.abs(paramFloat1) > b) {
        bool1 = true;
      }
      return bool1;
    }
    if (i2 != 0)
    {
      bool1 = bool3;
      if (Math.abs(paramFloat2) > b) {
        bool1 = true;
      }
      return bool1;
    }
    return false;
  }
  
  private float b(float paramFloat)
  {
    return (float)Math.sin((paramFloat - 0.5F) * 0.47123894F);
  }
  
  private int b(int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramInt1 == 0) {
      return 0;
    }
    int i1 = u.getWidth();
    int i2 = i1 / 2;
    float f3 = Math.min(1.0F, Math.abs(paramInt1) / i1);
    float f1 = i2;
    float f2 = i2;
    f3 = b(f3);
    paramInt2 = Math.abs(paramInt2);
    if (paramInt2 > 0) {
      paramInt1 = Math.round(Math.abs((f1 + f2 * f3) / paramInt2) * 1000.0F) * 4;
    } else {
      paramInt1 = (int)((1.0F + Math.abs(paramInt1) / paramInt3) * 256.0F);
    }
    return Math.min(paramInt1, 600);
  }
  
  private void b(float paramFloat1, float paramFloat2, int paramInt)
  {
    f(paramInt);
    float[] arrayOfFloat = d;
    f[paramInt] = paramFloat1;
    arrayOfFloat[paramInt] = paramFloat1;
    arrayOfFloat = e;
    g[paramInt] = paramFloat2;
    arrayOfFloat[paramInt] = paramFloat2;
    h[paramInt] = e((int)paramFloat1, (int)paramFloat2);
    k |= 1 << paramInt;
  }
  
  private boolean b(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i1 = s.getLeft();
    int i2 = s.getTop();
    paramInt1 -= i1;
    paramInt2 -= i2;
    if ((paramInt1 == 0) && (paramInt2 == 0))
    {
      q.abortAnimation();
      c(0);
      return false;
    }
    paramInt3 = a(s, paramInt1, paramInt2, paramInt3, paramInt4);
    q.startScroll(i1, i2, paramInt1, paramInt2, paramInt3);
    c(2);
    return true;
  }
  
  private void c(MotionEvent paramMotionEvent)
  {
    int i2 = paramMotionEvent.getPointerCount();
    int i1 = 0;
    while (i1 < i2)
    {
      int i3 = paramMotionEvent.getPointerId(i1);
      if (g(i3))
      {
        float f1 = paramMotionEvent.getX(i1);
        float f2 = paramMotionEvent.getY(i1);
        f[i3] = f1;
        g[i3] = f2;
      }
      i1 += 1;
    }
  }
  
  private int e(int paramInt1, int paramInt2)
  {
    int i2 = 0;
    if (paramInt1 < u.getLeft() + o) {
      i2 = 0x0 | 0x1;
    }
    int i1 = i2;
    if (paramInt2 < u.getTop() + o) {
      i1 = i2 | 0x4;
    }
    i2 = i1;
    if (paramInt1 > u.getRight() - o) {
      i2 = i1 | 0x2;
    }
    paramInt1 = i2;
    if (paramInt2 > u.getBottom() - o) {
      paramInt1 = i2 | 0x8;
    }
    return paramInt1;
  }
  
  private void e(int paramInt)
  {
    if (d != null)
    {
      if (!b(paramInt)) {
        return;
      }
      d[paramInt] = 0.0F;
      e[paramInt] = 0.0F;
      f[paramInt] = 0.0F;
      g[paramInt] = 0.0F;
      h[paramInt] = 0;
      i[paramInt] = 0;
      j[paramInt] = 0;
      k &= (1 << paramInt ^ 0xFFFFFFFF);
      return;
    }
  }
  
  private void f()
  {
    float[] arrayOfFloat = d;
    if (arrayOfFloat == null) {
      return;
    }
    Arrays.fill(arrayOfFloat, 0.0F);
    Arrays.fill(e, 0.0F);
    Arrays.fill(f, 0.0F);
    Arrays.fill(g, 0.0F);
    Arrays.fill(h, 0);
    Arrays.fill(i, 0);
    Arrays.fill(j, 0);
    k = 0;
  }
  
  private void f(int paramInt)
  {
    float[] arrayOfFloat1 = d;
    if ((arrayOfFloat1 == null) || (arrayOfFloat1.length <= paramInt))
    {
      arrayOfFloat1 = new float[paramInt + 1];
      float[] arrayOfFloat2 = new float[paramInt + 1];
      float[] arrayOfFloat3 = new float[paramInt + 1];
      float[] arrayOfFloat4 = new float[paramInt + 1];
      int[] arrayOfInt1 = new int[paramInt + 1];
      int[] arrayOfInt2 = new int[paramInt + 1];
      int[] arrayOfInt3 = new int[paramInt + 1];
      Object localObject = d;
      if (localObject != null)
      {
        System.arraycopy(localObject, 0, arrayOfFloat1, 0, localObject.length);
        localObject = e;
        System.arraycopy(localObject, 0, arrayOfFloat2, 0, localObject.length);
        localObject = f;
        System.arraycopy(localObject, 0, arrayOfFloat3, 0, localObject.length);
        localObject = g;
        System.arraycopy(localObject, 0, arrayOfFloat4, 0, localObject.length);
        localObject = h;
        System.arraycopy(localObject, 0, arrayOfInt1, 0, localObject.length);
        localObject = i;
        System.arraycopy(localObject, 0, arrayOfInt2, 0, localObject.length);
        localObject = j;
        System.arraycopy(localObject, 0, arrayOfInt3, 0, localObject.length);
      }
      d = arrayOfFloat1;
      e = arrayOfFloat2;
      f = arrayOfFloat3;
      g = arrayOfFloat4;
      h = arrayOfInt1;
      i = arrayOfInt2;
      j = arrayOfInt3;
    }
  }
  
  private void g()
  {
    l.computeCurrentVelocity(1000, m);
    a(a(l.getXVelocity(c), n, m), a(l.getYVelocity(c), n, m));
  }
  
  private boolean g(int paramInt)
  {
    if (!b(paramInt))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Ignoring pointerId=");
      localStringBuilder.append(paramInt);
      localStringBuilder.append(" because ACTION_DOWN was not received ");
      localStringBuilder.append("for this pointer before ACTION_MOVE. It likely happened because ");
      localStringBuilder.append(" ViewDragHelper did not receive all the events in the event stream.");
      Log.e("ViewDragHelper", localStringBuilder.toString());
      return false;
    }
    return true;
  }
  
  public void a()
  {
    c = -1;
    f();
    VelocityTracker localVelocityTracker = l;
    if (localVelocityTracker != null)
    {
      localVelocityTracker.recycle();
      l = null;
    }
  }
  
  public void a(float paramFloat)
  {
    n = paramFloat;
  }
  
  public void a(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getActionMasked();
    int i2 = paramMotionEvent.getActionIndex();
    if (i1 == 0) {
      a();
    }
    if (l == null) {
      l = VelocityTracker.obtain();
    }
    l.addMovement(paramMotionEvent);
    if (i1 != 0)
    {
      if (i1 != 1)
      {
        Object localObject;
        if (i1 != 2)
        {
          if (i1 != 3)
          {
            if (i1 != 5)
            {
              if (i1 != 6) {
                return;
              }
              int i4 = paramMotionEvent.getPointerId(i2);
              if ((a == 1) && (i4 == c))
              {
                i3 = -1;
                int i5 = paramMotionEvent.getPointerCount();
                i1 = 0;
                for (;;)
                {
                  i2 = i3;
                  if (i1 >= i5) {
                    break;
                  }
                  i2 = paramMotionEvent.getPointerId(i1);
                  if (i2 != c)
                  {
                    f1 = paramMotionEvent.getX(i1);
                    f2 = paramMotionEvent.getY(i1);
                    localObject = b((int)f1, (int)f2);
                    View localView = s;
                    if ((localObject == localView) && (b(localView, i2)))
                    {
                      i2 = c;
                      break;
                    }
                  }
                  i1 += 1;
                }
                if (i2 == -1) {
                  g();
                }
              }
              e(i4);
              return;
            }
            i1 = paramMotionEvent.getPointerId(i2);
            f1 = paramMotionEvent.getX(i2);
            f2 = paramMotionEvent.getY(i2);
            b(f1, f2, i1);
            if (a == 0)
            {
              b(b((int)f1, (int)f2), i1);
              i2 = h[i1];
              i3 = p;
              if ((i2 & i3) != 0) {
                r.b(i3 & i2, i1);
              }
            }
            else if (c((int)f1, (int)f2))
            {
              b(s, i1);
              return;
            }
            return;
          }
          if (a == 1) {
            a(0.0F, 0.0F);
          }
          a();
          return;
        }
        if (a == 1)
        {
          if (!g(c)) {
            return;
          }
          i1 = paramMotionEvent.findPointerIndex(c);
          f1 = paramMotionEvent.getX(i1);
          f2 = paramMotionEvent.getY(i1);
          localObject = f;
          i2 = c;
          i1 = (int)(f1 - localObject[i2]);
          i2 = (int)(f2 - g[i2]);
          a(s.getLeft() + i1, s.getTop() + i2, i1, i2);
          c(paramMotionEvent);
          return;
        }
        i2 = paramMotionEvent.getPointerCount();
        i1 = 0;
        while (i1 < i2)
        {
          i3 = paramMotionEvent.getPointerId(i1);
          if (g(i3))
          {
            f1 = paramMotionEvent.getX(i1);
            f2 = paramMotionEvent.getY(i1);
            float f3 = f1 - d[i3];
            float f4 = f2 - e[i3];
            a(f3, f4, i3);
            if (a == 1) {
              break;
            }
            localObject = b((int)f1, (int)f2);
            if ((a((View)localObject, f3, f4)) && (b((View)localObject, i3))) {
              break;
            }
          }
          i1 += 1;
        }
        c(paramMotionEvent);
        return;
      }
      if (a == 1) {
        g();
      }
      a();
      return;
    }
    float f1 = paramMotionEvent.getX();
    float f2 = paramMotionEvent.getY();
    i1 = paramMotionEvent.getPointerId(0);
    paramMotionEvent = b((int)f1, (int)f2);
    b(f1, f2, i1);
    b(paramMotionEvent, i1);
    i2 = h[i1];
    int i3 = p;
    if ((i2 & i3) != 0) {
      r.b(i3 & i2, i1);
    }
  }
  
  public void a(View paramView, int paramInt)
  {
    if (paramView.getParent() == u)
    {
      s = paramView;
      c = paramInt;
      r.a(paramView, paramInt);
      c(1);
      return;
    }
    paramView = new StringBuilder();
    paramView.append("captureChildView: parameter must be a descendant of the ViewDragHelper's tracked parent view (");
    paramView.append(u);
    paramView.append(")");
    throw new IllegalArgumentException(paramView.toString());
  }
  
  public boolean a(int paramInt)
  {
    int i2 = d.length;
    int i1 = 0;
    while (i1 < i2)
    {
      if (a(paramInt, i1)) {
        return true;
      }
      i1 += 1;
    }
    return false;
  }
  
  public boolean a(int paramInt1, int paramInt2)
  {
    boolean bool4 = b(paramInt2);
    boolean bool2 = false;
    boolean bool3 = false;
    boolean bool1 = false;
    if (!bool4) {
      return false;
    }
    int i1;
    if ((paramInt1 & 0x1) == 1) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    if ((paramInt1 & 0x2) == 2) {
      paramInt1 = 1;
    } else {
      paramInt1 = 0;
    }
    float f1 = f[paramInt2] - d[paramInt2];
    float f2 = g[paramInt2] - e[paramInt2];
    if ((i1 != 0) && (paramInt1 != 0))
    {
      paramInt1 = b;
      if (f1 * f1 + f2 * f2 > paramInt1 * paramInt1) {
        bool1 = true;
      }
      return bool1;
    }
    if (i1 != 0)
    {
      bool1 = bool2;
      if (Math.abs(f1) > b) {
        bool1 = true;
      }
      return bool1;
    }
    if (paramInt1 != 0)
    {
      bool1 = bool3;
      if (Math.abs(f2) > b) {
        bool1 = true;
      }
      return bool1;
    }
    return false;
  }
  
  public boolean a(View paramView, int paramInt1, int paramInt2)
  {
    if (paramView == null) {
      return false;
    }
    return (paramInt1 >= paramView.getLeft()) && (paramInt1 < paramView.getRight()) && (paramInt2 >= paramView.getTop()) && (paramInt2 < paramView.getBottom());
  }
  
  public boolean a(boolean paramBoolean)
  {
    int i1 = a;
    boolean bool2 = false;
    if (i1 == 2)
    {
      boolean bool3 = q.computeScrollOffset();
      i1 = q.getCurrX();
      int i2 = q.getCurrY();
      int i3 = i1 - s.getLeft();
      int i4 = i2 - s.getTop();
      if (i3 != 0) {
        u.c(s, i3);
      }
      if (i4 != 0) {
        u.d(s, i4);
      }
      if ((i3 != 0) || (i4 != 0)) {
        r.a(s, i1, i2, i3, i4);
      }
      boolean bool1 = bool3;
      if (bool3)
      {
        bool1 = bool3;
        if (i1 == q.getFinalX())
        {
          bool1 = bool3;
          if (i2 == q.getFinalY())
          {
            q.abortAnimation();
            bool1 = false;
          }
        }
      }
      if (!bool1) {
        if (paramBoolean) {
          u.post(v);
        } else {
          c(0);
        }
      }
    }
    paramBoolean = bool2;
    if (a == 2) {
      paramBoolean = true;
    }
    return paramBoolean;
  }
  
  public View b()
  {
    return s;
  }
  
  public View b(int paramInt1, int paramInt2)
  {
    int i1 = u.getChildCount() - 1;
    while (i1 >= 0)
    {
      Object localObject = u;
      r.a(i1);
      localObject = ((ViewGroup)localObject).getChildAt(i1);
      if ((paramInt1 >= ((View)localObject).getLeft()) && (paramInt1 < ((View)localObject).getRight()) && (paramInt2 >= ((View)localObject).getTop()) && (paramInt2 < ((View)localObject).getBottom())) {
        return localObject;
      }
      i1 -= 1;
    }
    return null;
  }
  
  public boolean b(int paramInt)
  {
    return (k & 1 << paramInt) != 0;
  }
  
  public boolean b(MotionEvent paramMotionEvent)
  {
    int i3 = paramMotionEvent.getActionMasked();
    int i2 = paramMotionEvent.getActionIndex();
    if (i3 == 0) {
      a();
    }
    if (l == null) {
      l = VelocityTracker.obtain();
    }
    l.addMovement(paramMotionEvent);
    int i1;
    float f1;
    float f2;
    if (i3 != 0)
    {
      if (i3 != 1) {
        if (i3 != 2)
        {
          if (i3 != 3)
          {
            if (i3 != 5)
            {
              if (i3 != 6) {
                break label630;
              }
              e(paramMotionEvent.getPointerId(i2));
              break label630;
            }
            i1 = paramMotionEvent.getPointerId(i2);
            f1 = paramMotionEvent.getX(i2);
            f2 = paramMotionEvent.getY(i2);
            b(f1, f2, i1);
            i2 = a;
            if (i2 == 0)
            {
              i2 = h[i1];
              i3 = p;
              if ((i2 & i3) != 0) {
                r.b(i3 & i2, i1);
              }
            }
            else if (i2 == 2)
            {
              paramMotionEvent = b((int)f1, (int)f2);
              if (paramMotionEvent == s) {
                b(paramMotionEvent, i1);
              }
              break label630;
            }
            break label630;
          }
        }
        else
        {
          if (d != null)
          {
            if (e == null) {
              break label630;
            }
            i1 = paramMotionEvent.getPointerCount();
            int i4 = 0;
            while (i4 < i1)
            {
              int i6 = paramMotionEvent.getPointerId(i4);
              if (g(i6))
              {
                f1 = paramMotionEvent.getX(i4);
                f2 = paramMotionEvent.getY(i4);
                float f3 = f1 - d[i6];
                float f4 = f2 - e[i6];
                View localView = b((int)f1, (int)f2);
                int i5;
                if ((localView != null) && (a(localView, f3, f4))) {
                  i5 = 1;
                } else {
                  i5 = 0;
                }
                if (i5 != 0)
                {
                  int i7 = localView.getLeft();
                  int i8 = (int)f3;
                  i8 = r.a(localView, i8 + i7, (int)f3);
                  int i9 = localView.getTop();
                  int i10 = (int)f4;
                  i10 = r.b(localView, i10 + i9, (int)f4);
                  int i11 = r.a(localView);
                  int i12 = r.b(localView);
                  if (((i11 == 0) || ((i11 > 0) && (i8 == i7))) && ((i12 == 0) || ((i12 > 0) && (i10 == i9)))) {
                    break;
                  }
                }
                else
                {
                  a(f3, f4, i6);
                  if ((a == 1) || ((i5 != 0) && (b(localView, i6)))) {
                    break;
                  }
                }
              }
              i4 += 1;
            }
            c(paramMotionEvent);
            break label630;
          }
          break label630;
        }
      }
      a();
    }
    else
    {
      f1 = paramMotionEvent.getX();
      f2 = paramMotionEvent.getY();
      i1 = paramMotionEvent.getPointerId(0);
      b(f1, f2, i1);
      paramMotionEvent = b((int)f1, (int)f2);
      if ((paramMotionEvent == s) && (a == 2)) {
        b(paramMotionEvent, i1);
      }
      i2 = h[i1];
      i3 = p;
      if ((i2 & i3) != 0) {
        r.b(i3 & i2, i1);
      }
    }
    label630:
    return a == 1;
  }
  
  boolean b(View paramView, int paramInt)
  {
    if ((paramView == s) && (c == paramInt)) {
      return true;
    }
    if ((paramView != null) && (r.b(paramView, paramInt)))
    {
      c = paramInt;
      a(paramView, paramInt);
      return true;
    }
    return false;
  }
  
  public boolean b(View paramView, int paramInt1, int paramInt2)
  {
    s = paramView;
    c = -1;
    boolean bool = b(paramInt1, paramInt2, 0, 0);
    if ((!bool) && (a == 0) && (s != null)) {
      s = null;
    }
    return bool;
  }
  
  public int c()
  {
    return o;
  }
  
  void c(int paramInt)
  {
    u.removeCallbacks(v);
    if (a != paramInt)
    {
      a = paramInt;
      r.c(paramInt);
      if (a == 0) {
        s = null;
      }
    }
  }
  
  public boolean c(int paramInt1, int paramInt2)
  {
    return a(s, paramInt1, paramInt2);
  }
  
  public int d()
  {
    return b;
  }
  
  public void d(int paramInt)
  {
    p = paramInt;
  }
  
  public boolean d(int paramInt1, int paramInt2)
  {
    if (t) {
      return b(paramInt1, paramInt2, (int)l.getXVelocity(c), (int)l.getYVelocity(c));
    }
    throw new IllegalStateException("Cannot settleCapturedViewAt outside of a call to Callback#onViewReleased");
  }
  
  public int e()
  {
    return a;
  }
  
  static final class a
    implements Interpolator
  {
    a() {}
    
    public float getInterpolation(float paramFloat)
    {
      paramFloat -= 1.0F;
      return paramFloat * paramFloat * paramFloat * paramFloat * paramFloat + 1.0F;
    }
  }
  
  class b
    implements Runnable
  {
    b() {}
    
    public void run()
    {
      c(0);
    }
  }
  
  public static abstract class c
  {
    public c() {}
    
    public int a(int paramInt)
    {
      return paramInt;
    }
    
    public int a(View paramView)
    {
      return 0;
    }
    
    public abstract int a(View paramView, int paramInt1, int paramInt2);
    
    public void a(int paramInt1, int paramInt2) {}
    
    public abstract void a(View paramView, float paramFloat1, float paramFloat2);
    
    public void a(View paramView, int paramInt) {}
    
    public abstract void a(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4);
    
    public int b(View paramView)
    {
      return 0;
    }
    
    public abstract int b(View paramView, int paramInt1, int paramInt2);
    
    public void b(int paramInt1, int paramInt2) {}
    
    public boolean b(int paramInt)
    {
      return false;
    }
    
    public abstract boolean b(View paramView, int paramInt);
    
    public abstract void c(int paramInt);
  }
}
