package android.support.v4.widget;

import a.b.g.g.o;
import android.content.Context;
import android.graphics.Rect;
import android.os.Bundle;
import android.support.v4.view.b;
import android.support.v4.view.d0.a;
import android.support.v4.view.d0.c;
import android.support.v4.view.d0.d;
import android.support.v4.view.d0.e;
import android.support.v4.view.u;
import android.support.v4.view.x;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewParent;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import java.util.ArrayList;
import java.util.List;

public abstract class h
  extends b
{
  private static final Rect m = new Rect(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
  private final Rect c = new Rect();
  private final Rect d = new Rect();
  private final Rect e = new Rect();
  private final int[] f = new int[2];
  private final AccessibilityManager g;
  private final View h;
  private c i;
  int j = Integer.MIN_VALUE;
  int k = Integer.MIN_VALUE;
  private int l = Integer.MIN_VALUE;
  
  static
  {
    new a();
    new b();
  }
  
  public h(View paramView)
  {
    if (paramView != null)
    {
      h = paramView;
      g = ((AccessibilityManager)paramView.getContext().getSystemService("accessibility"));
      paramView.setFocusable(true);
      if (u.i(paramView) == 0) {
        u.f(paramView, 1);
      }
      return;
    }
    throw new IllegalArgumentException("View may not be null");
  }
  
  private boolean a(int paramInt, Bundle paramBundle)
  {
    return u.a(h, paramInt, paramBundle);
  }
  
  private boolean a(Rect paramRect)
  {
    boolean bool = false;
    if (paramRect != null)
    {
      if (paramRect.isEmpty()) {
        return false;
      }
      if (h.getWindowVisibility() != 0) {
        return false;
      }
      paramRect = h.getParent();
      while ((paramRect instanceof View))
      {
        paramRect = (View)paramRect;
        if (paramRect.getAlpha() > 0.0F)
        {
          if (paramRect.getVisibility() != 0) {
            return false;
          }
          paramRect = paramRect.getParent();
        }
        else
        {
          return false;
        }
      }
      if (paramRect != null) {
        bool = true;
      }
      return bool;
    }
    return false;
  }
  
  private AccessibilityEvent c(int paramInt1, int paramInt2)
  {
    if (paramInt1 != -1) {
      return d(paramInt1, paramInt2);
    }
    return e(paramInt2);
  }
  
  private boolean c(int paramInt1, int paramInt2, Bundle paramBundle)
  {
    if (paramInt2 != 1)
    {
      if (paramInt2 != 2)
      {
        if (paramInt2 != 64)
        {
          if (paramInt2 != 128) {
            return a(paramInt1, paramInt2, paramBundle);
          }
          return d(paramInt1);
        }
        return g(paramInt1);
      }
      return a(paramInt1);
    }
    return c(paramInt1);
  }
  
  private AccessibilityEvent d(int paramInt1, int paramInt2)
  {
    AccessibilityEvent localAccessibilityEvent = AccessibilityEvent.obtain(paramInt2);
    c localC = b(paramInt1);
    localAccessibilityEvent.getText().add(localC.g());
    localAccessibilityEvent.setContentDescription(localC.d());
    localAccessibilityEvent.setScrollable(localC.r());
    localAccessibilityEvent.setPassword(localC.q());
    localAccessibilityEvent.setEnabled(localC.m());
    localAccessibilityEvent.setChecked(localC.k());
    a(paramInt1, localAccessibilityEvent);
    if ((localAccessibilityEvent.getText().isEmpty()) && (localAccessibilityEvent.getContentDescription() == null)) {
      throw new RuntimeException("Callbacks must add text or a content description in populateEventForVirtualViewId()");
    }
    localAccessibilityEvent.setClassName(localC.c());
    e.a(localAccessibilityEvent, h, paramInt1);
    localAccessibilityEvent.setPackageName(h.getContext().getPackageName());
    return localAccessibilityEvent;
  }
  
  private boolean d(int paramInt)
  {
    if (j == paramInt)
    {
      j = Integer.MIN_VALUE;
      h.invalidate();
      b(paramInt, 65536);
      return true;
    }
    return false;
  }
  
  private c e()
  {
    c localC = c.d(h);
    u.a(h, localC);
    ArrayList localArrayList = new ArrayList();
    a(localArrayList);
    if ((localC.b() > 0) && (localArrayList.size() > 0)) {
      throw new RuntimeException("Views cannot have both real and virtual children");
    }
    int n = 0;
    int i1 = localArrayList.size();
    while (n < i1)
    {
      localC.a(h, ((Integer)localArrayList.get(n)).intValue());
      n += 1;
    }
    return localC;
  }
  
  private AccessibilityEvent e(int paramInt)
  {
    AccessibilityEvent localAccessibilityEvent = AccessibilityEvent.obtain(paramInt);
    h.onInitializeAccessibilityEvent(localAccessibilityEvent);
    return localAccessibilityEvent;
  }
  
  private c f(int paramInt)
  {
    Object localObject = c.w();
    ((c)localObject).g(true);
    ((c)localObject).h(true);
    ((c)localObject).a("android.view.View");
    ((c)localObject).c(m);
    ((c)localObject).d(m);
    ((c)localObject).b(h);
    a(paramInt, (c)localObject);
    if ((((c)localObject).g() == null) && (((c)localObject).d() == null)) {
      throw new RuntimeException("Callbacks must add text or a content description in populateNodeForVirtualViewId()");
    }
    ((c)localObject).a(d);
    if (!d.equals(m))
    {
      int n = ((c)localObject).a();
      if ((n & 0x40) == 0)
      {
        if ((n & 0x80) == 0)
        {
          ((c)localObject).e(h.getContext().getPackageName());
          ((c)localObject).c(h, paramInt);
          if (j == paramInt)
          {
            ((c)localObject).a(true);
            ((c)localObject).a(128);
          }
          else
          {
            ((c)localObject).a(false);
            ((c)localObject).a(64);
          }
          boolean bool;
          if (k == paramInt) {
            bool = true;
          } else {
            bool = false;
          }
          if (bool) {
            ((c)localObject).a(2);
          } else if (((c)localObject).n()) {
            ((c)localObject).a(1);
          }
          ((c)localObject).i(bool);
          h.getLocationOnScreen(f);
          ((c)localObject).b(c);
          if (c.equals(m))
          {
            ((c)localObject).a(c);
            if (b != -1)
            {
              c localC = c.w();
              for (paramInt = b; paramInt != -1; paramInt = b)
              {
                localC.b(h, -1);
                localC.c(m);
                a(paramInt, localC);
                localC.a(d);
                Rect localRect1 = c;
                Rect localRect2 = d;
                localRect1.offset(left, top);
              }
              localC.u();
            }
            c.offset(f[0] - h.getScrollX(), f[1] - h.getScrollY());
          }
          if (h.getLocalVisibleRect(e))
          {
            e.offset(f[0] - h.getScrollX(), f[1] - h.getScrollY());
            if (c.intersect(e))
            {
              ((c)localObject).d(c);
              if (a(c)) {
                ((c)localObject).n(true);
              }
            }
          }
          return localObject;
        }
        throw new RuntimeException("Callbacks must not add ACTION_CLEAR_ACCESSIBILITY_FOCUS in populateNodeForVirtualViewId()");
      }
      throw new RuntimeException("Callbacks must not add ACTION_ACCESSIBILITY_FOCUS in populateNodeForVirtualViewId()");
    }
    localObject = new RuntimeException("Callbacks must set parent bounds in populateNodeForVirtualViewId()");
    for (;;)
    {
      throw ((Throwable)localObject);
    }
  }
  
  private boolean g(int paramInt)
  {
    if (g.isEnabled())
    {
      if (!g.isTouchExplorationEnabled()) {
        return false;
      }
      int n = j;
      if (n != paramInt)
      {
        if (n != Integer.MIN_VALUE) {
          d(n);
        }
        j = paramInt;
        h.invalidate();
        b(paramInt, 32768);
        return true;
      }
      return false;
    }
    return false;
  }
  
  private void h(int paramInt)
  {
    if (l == paramInt) {
      return;
    }
    int n = l;
    l = paramInt;
    b(paramInt, 128);
    b(n, 256);
  }
  
  protected abstract int a(float paramFloat1, float paramFloat2);
  
  public d a(View paramView)
  {
    if (i == null) {
      i = new c();
    }
    return i;
  }
  
  public final void a(int paramInt1, int paramInt2)
  {
    if ((paramInt1 != Integer.MIN_VALUE) && (g.isEnabled()))
    {
      ViewParent localViewParent = h.getParent();
      if (localViewParent != null)
      {
        AccessibilityEvent localAccessibilityEvent = c(paramInt1, 2048);
        a.a(localAccessibilityEvent, paramInt2);
        x.a(localViewParent, h, localAccessibilityEvent);
      }
    }
  }
  
  protected abstract void a(int paramInt, c paramC);
  
  protected abstract void a(int paramInt, AccessibilityEvent paramAccessibilityEvent);
  
  protected void a(int paramInt, boolean paramBoolean) {}
  
  protected void a(c paramC) {}
  
  public void a(View paramView, c paramC)
  {
    super.a(paramView, paramC);
    a(paramC);
  }
  
  protected void a(AccessibilityEvent paramAccessibilityEvent) {}
  
  protected abstract void a(List<Integer> paramList);
  
  public final boolean a(int paramInt)
  {
    if (k != paramInt) {
      return false;
    }
    k = Integer.MIN_VALUE;
    a(paramInt, false);
    b(paramInt, 8);
    return true;
  }
  
  protected abstract boolean a(int paramInt1, int paramInt2, Bundle paramBundle);
  
  public final boolean a(MotionEvent paramMotionEvent)
  {
    boolean bool2 = g.isEnabled();
    boolean bool1 = false;
    if (bool2)
    {
      if (!g.isTouchExplorationEnabled()) {
        return false;
      }
      int n = paramMotionEvent.getAction();
      if ((n != 7) && (n != 9))
      {
        if (n != 10) {
          return false;
        }
        if (l != Integer.MIN_VALUE)
        {
          h(Integer.MIN_VALUE);
          return true;
        }
        return false;
      }
      n = a(paramMotionEvent.getX(), paramMotionEvent.getY());
      h(n);
      if (n != Integer.MIN_VALUE) {
        bool1 = true;
      }
      return bool1;
    }
    return false;
  }
  
  public final int b()
  {
    return j;
  }
  
  c b(int paramInt)
  {
    if (paramInt == -1) {
      return e();
    }
    return f(paramInt);
  }
  
  public void b(View paramView, AccessibilityEvent paramAccessibilityEvent)
  {
    super.b(paramView, paramAccessibilityEvent);
    a(paramAccessibilityEvent);
  }
  
  public final boolean b(int paramInt1, int paramInt2)
  {
    if (paramInt1 != Integer.MIN_VALUE)
    {
      if (!g.isEnabled()) {
        return false;
      }
      ViewParent localViewParent = h.getParent();
      if (localViewParent == null) {
        return false;
      }
      AccessibilityEvent localAccessibilityEvent = c(paramInt1, paramInt2);
      return x.a(localViewParent, h, localAccessibilityEvent);
    }
    return false;
  }
  
  boolean b(int paramInt1, int paramInt2, Bundle paramBundle)
  {
    if (paramInt1 != -1) {
      return c(paramInt1, paramInt2, paramBundle);
    }
    return a(paramInt2, paramBundle);
  }
  
  @Deprecated
  public int c()
  {
    return b();
  }
  
  public final boolean c(int paramInt)
  {
    if ((!h.isFocused()) && (!h.requestFocus())) {
      return false;
    }
    int n = k;
    if (n == paramInt) {
      return false;
    }
    if (n != Integer.MIN_VALUE) {
      a(n);
    }
    k = paramInt;
    a(paramInt, true);
    b(paramInt, 8);
    return true;
  }
  
  public final void d()
  {
    a(-1, 1);
  }
  
  static final class a
    implements i<c>
  {
    a() {}
  }
  
  static final class b
    implements j<o<c>, c>
  {
    b() {}
  }
  
  private class c
    extends d
  {
    c() {}
    
    public c a(int paramInt)
    {
      return c.a(h.this.b(paramInt));
    }
    
    public boolean a(int paramInt1, int paramInt2, Bundle paramBundle)
    {
      return b(paramInt1, paramInt2, paramBundle);
    }
    
    public c b(int paramInt)
    {
      if (paramInt == 2) {
        paramInt = j;
      } else {
        paramInt = k;
      }
      if (paramInt == Integer.MIN_VALUE) {
        return null;
      }
      return a(paramInt);
    }
  }
}
