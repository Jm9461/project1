package android.support.v4.widget;

import android.content.res.Resources;
import android.os.SystemClock;
import android.support.v4.view.u;
import android.util.DisplayMetrics;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.ViewConfiguration;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.AnimationUtils;
import android.view.animation.Interpolator;

public abstract class a
  implements View.OnTouchListener
{
  private static final int t = ;
  final a c = new a();
  private final Interpolator d = new AccelerateInterpolator();
  final View e;
  private Runnable f;
  private float[] g = { 0.0F, 0.0F };
  private float[] h = { Float.MAX_VALUE, Float.MAX_VALUE };
  private int i;
  private int j;
  private float[] k = { 0.0F, 0.0F };
  private float[] l = { 0.0F, 0.0F };
  private float[] m = { Float.MAX_VALUE, Float.MAX_VALUE };
  private boolean n;
  boolean o;
  boolean p;
  boolean q;
  private boolean r;
  private boolean s;
  
  public a(View paramView)
  {
    e = paramView;
    float f1 = getSystemgetDisplayMetricsdensity;
    int i1 = (int)(1575.0F * f1 + 0.5F);
    int i2 = (int)(f1 * 315.0F + 0.5F);
    b(i1, i1);
    c(i2, i2);
    d(1);
    a(Float.MAX_VALUE, Float.MAX_VALUE);
    d(0.2F, 0.2F);
    e(1.0F, 1.0F);
    c(t);
    f(500);
    e(500);
  }
  
  static float a(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    if (paramFloat1 > paramFloat3) {
      return paramFloat3;
    }
    if (paramFloat1 < paramFloat2) {
      return paramFloat2;
    }
    return paramFloat1;
  }
  
  private float a(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
  {
    paramFloat1 = a(paramFloat1 * paramFloat2, 0.0F, paramFloat3);
    paramFloat3 = f(paramFloat4, paramFloat1);
    paramFloat1 = f(paramFloat2 - paramFloat4, paramFloat1) - paramFloat3;
    if (paramFloat1 < 0.0F)
    {
      paramFloat1 = -d.getInterpolation(-paramFloat1);
    }
    else
    {
      if (paramFloat1 <= 0.0F) {
        break label76;
      }
      paramFloat1 = d.getInterpolation(paramFloat1);
    }
    return a(paramFloat1, -1.0F, 1.0F);
    label76:
    return 0.0F;
  }
  
  private float a(int paramInt, float paramFloat1, float paramFloat2, float paramFloat3)
  {
    paramFloat1 = a(g[paramInt], paramFloat2, h[paramInt], paramFloat1);
    if (paramFloat1 == 0.0F) {
      return 0.0F;
    }
    float f2 = k[paramInt];
    paramFloat2 = l[paramInt];
    float f1 = m[paramInt];
    paramFloat3 = f2 * paramFloat3;
    if (paramFloat1 > 0.0F) {
      return a(paramFloat1 * paramFloat3, paramFloat2, f1);
    }
    return -a(-paramFloat1 * paramFloat3, paramFloat2, f1);
  }
  
  static int a(int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramInt1 > paramInt3) {
      return paramInt3;
    }
    if (paramInt1 < paramInt2) {
      return paramInt2;
    }
    return paramInt1;
  }
  
  private void c()
  {
    if (o)
    {
      q = false;
      return;
    }
    c.g();
  }
  
  private void d()
  {
    if (f == null) {
      f = new b();
    }
    q = true;
    o = true;
    if (!n)
    {
      int i1 = j;
      if (i1 > 0)
      {
        u.a(e, f, i1);
        break label70;
      }
    }
    f.run();
    label70:
    n = true;
  }
  
  private float f(float paramFloat1, float paramFloat2)
  {
    if (paramFloat2 == 0.0F) {
      return 0.0F;
    }
    int i1 = i;
    if ((i1 != 0) && (i1 != 1))
    {
      if (i1 != 2) {
        return 0.0F;
      }
      if (paramFloat1 < 0.0F) {
        return paramFloat1 / -paramFloat2;
      }
    }
    else if (paramFloat1 < paramFloat2)
    {
      if (paramFloat1 >= 0.0F) {
        return 1.0F - paramFloat1 / paramFloat2;
      }
      if ((q) && (i == 1)) {
        return 1.0F;
      }
    }
    return 0.0F;
  }
  
  public a a(float paramFloat1, float paramFloat2)
  {
    float[] arrayOfFloat = h;
    arrayOfFloat[0] = paramFloat1;
    arrayOfFloat[1] = paramFloat2;
    return this;
  }
  
  public a a(boolean paramBoolean)
  {
    if ((r) && (!paramBoolean)) {
      c();
    }
    r = paramBoolean;
    return this;
  }
  
  void a()
  {
    long l1 = SystemClock.uptimeMillis();
    MotionEvent localMotionEvent = MotionEvent.obtain(l1, l1, 3, 0.0F, 0.0F, 0);
    e.onTouchEvent(localMotionEvent);
    localMotionEvent.recycle();
  }
  
  public abstract void a(int paramInt1, int paramInt2);
  
  public abstract boolean a(int paramInt);
  
  public a b(float paramFloat1, float paramFloat2)
  {
    float[] arrayOfFloat = m;
    arrayOfFloat[0] = (paramFloat1 / 1000.0F);
    arrayOfFloat[1] = (paramFloat2 / 1000.0F);
    return this;
  }
  
  boolean b()
  {
    a localA = c;
    int i1 = localA.e();
    int i2 = localA.d();
    return ((i1 != 0) && (b(i1))) || ((i2 != 0) && (a(i2)));
  }
  
  public abstract boolean b(int paramInt);
  
  public a c(float paramFloat1, float paramFloat2)
  {
    float[] arrayOfFloat = l;
    arrayOfFloat[0] = (paramFloat1 / 1000.0F);
    arrayOfFloat[1] = (paramFloat2 / 1000.0F);
    return this;
  }
  
  public a c(int paramInt)
  {
    j = paramInt;
    return this;
  }
  
  public a d(float paramFloat1, float paramFloat2)
  {
    float[] arrayOfFloat = g;
    arrayOfFloat[0] = paramFloat1;
    arrayOfFloat[1] = paramFloat2;
    return this;
  }
  
  public a d(int paramInt)
  {
    i = paramInt;
    return this;
  }
  
  public a e(float paramFloat1, float paramFloat2)
  {
    float[] arrayOfFloat = k;
    arrayOfFloat[0] = (paramFloat1 / 1000.0F);
    arrayOfFloat[1] = (paramFloat2 / 1000.0F);
    return this;
  }
  
  public a e(int paramInt)
  {
    c.a(paramInt);
    return this;
  }
  
  public a f(int paramInt)
  {
    c.b(paramInt);
    return this;
  }
  
  public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
  {
    boolean bool1 = r;
    boolean bool2 = false;
    if (!bool1) {
      return false;
    }
    int i1 = paramMotionEvent.getActionMasked();
    if (i1 != 0)
    {
      if (i1 != 1)
      {
        if (i1 != 2) {
          if (i1 != 3) {
            break label140;
          }
        }
      }
      else
      {
        c();
        break label140;
      }
    }
    else
    {
      p = true;
      n = false;
    }
    float f1 = a(0, paramMotionEvent.getX(), paramView.getWidth(), e.getWidth());
    float f2 = a(1, paramMotionEvent.getY(), paramView.getHeight(), e.getHeight());
    c.a(f1, f2);
    if ((!q) && (b())) {
      d();
    }
    label140:
    bool1 = bool2;
    if (s)
    {
      bool1 = bool2;
      if (q) {
        bool1 = true;
      }
    }
    return bool1;
  }
  
  private static class a
  {
    private int a;
    private int b;
    private float c;
    private float d;
    private long e = Long.MIN_VALUE;
    private long f = 0L;
    private int g = 0;
    private int h = 0;
    private long i = -1L;
    private float j;
    private int k;
    
    a() {}
    
    private float a(float paramFloat)
    {
      return -4.0F * paramFloat * paramFloat + 4.0F * paramFloat;
    }
    
    private float a(long paramLong)
    {
      if (paramLong < e) {
        return 0.0F;
      }
      long l = i;
      if ((l >= 0L) && (paramLong >= l))
      {
        float f1 = j;
        return 1.0F - f1 + f1 * a.a((float)(paramLong - l) / k, 0.0F, 1.0F);
      }
      return a.a((float)(paramLong - e) / a, 0.0F, 1.0F) * 0.5F;
    }
    
    public void a()
    {
      if (f != 0L)
      {
        long l1 = AnimationUtils.currentAnimationTimeMillis();
        float f1 = a(a(l1));
        long l2 = l1 - f;
        f = l1;
        g = ((int)((float)l2 * f1 * c));
        h = ((int)((float)l2 * f1 * d));
        return;
      }
      throw new RuntimeException("Cannot compute scroll delta before calling start()");
    }
    
    public void a(float paramFloat1, float paramFloat2)
    {
      c = paramFloat1;
      d = paramFloat2;
    }
    
    public void a(int paramInt)
    {
      b = paramInt;
    }
    
    public int b()
    {
      return g;
    }
    
    public void b(int paramInt)
    {
      a = paramInt;
    }
    
    public int c()
    {
      return h;
    }
    
    public int d()
    {
      float f1 = c;
      return (int)(f1 / Math.abs(f1));
    }
    
    public int e()
    {
      float f1 = d;
      return (int)(f1 / Math.abs(f1));
    }
    
    public boolean f()
    {
      return (i > 0L) && (AnimationUtils.currentAnimationTimeMillis() > i + k);
    }
    
    public void g()
    {
      long l = AnimationUtils.currentAnimationTimeMillis();
      k = a.a((int)(l - e), 0, b);
      j = a(l);
      i = l;
    }
    
    public void h()
    {
      e = AnimationUtils.currentAnimationTimeMillis();
      i = -1L;
      f = e;
      j = 0.5F;
      g = 0;
      h = 0;
    }
  }
  
  private class b
    implements Runnable
  {
    b() {}
    
    public void run()
    {
      Object localObject = a.this;
      if (!q) {
        return;
      }
      if (o)
      {
        o = false;
        c.h();
      }
      localObject = c;
      if ((!((a.a)localObject).f()) && (b()))
      {
        a localA = a.this;
        if (p)
        {
          p = false;
          localA.a();
        }
        ((a.a)localObject).a();
        int i = ((a.a)localObject).b();
        int j = ((a.a)localObject).c();
        a(i, j);
        u.a(e, this);
        return;
      }
      q = false;
    }
  }
}
