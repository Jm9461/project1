package android.support.v4.widget;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import android.support.v4.view.b;
import android.support.v4.view.d0.c;
import android.support.v4.view.d0.e;
import android.support.v4.view.j;
import android.support.v4.view.l;
import android.support.v4.view.m;
import android.support.v4.view.o;
import android.support.v4.view.s;
import android.support.v4.view.u;
import android.util.AttributeSet;
import android.util.Log;
import android.util.TypedValue;
import android.view.FocusFinder;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.View.BaseSavedState;
import android.view.View.MeasureSpec;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.ViewParent;
import android.view.accessibility.AccessibilityEvent;
import android.view.animation.AnimationUtils;
import android.widget.EdgeEffect;
import android.widget.FrameLayout;
import android.widget.FrameLayout.LayoutParams;
import android.widget.OverScroller;
import android.widget.ScrollView;
import java.util.ArrayList;
import java.util.List;

public class NestedScrollView
  extends FrameLayout
  implements m, j, s
{
  private static final a C = new a();
  private static final int[] D = { 16843130 };
  private float A;
  private b B;
  private long c;
  private final Rect d = new Rect();
  private OverScroller e;
  private EdgeEffect f;
  private EdgeEffect g;
  private int h;
  private boolean i = true;
  private boolean j = false;
  private View k = null;
  private boolean l = false;
  private VelocityTracker m;
  private boolean n;
  private boolean o = true;
  private int p;
  private int q;
  private int r;
  private int s = -1;
  private final int[] t = new int[2];
  private final int[] u = new int[2];
  private int v;
  private int w;
  private c x;
  private final o y;
  private final l z;
  
  public NestedScrollView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public NestedScrollView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public NestedScrollView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    e();
    paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, D, paramInt, 0);
    setFillViewport(paramContext.getBoolean(0, false));
    paramContext.recycle();
    y = new o(this);
    z = new l(this);
    setNestedScrollingEnabled(true);
    u.a(this, C);
  }
  
  private static int a(int paramInt1, int paramInt2, int paramInt3)
  {
    if ((paramInt2 < paramInt3) && (paramInt1 >= 0))
    {
      if (paramInt2 + paramInt1 > paramInt3) {
        return paramInt3 - paramInt2;
      }
      return paramInt1;
    }
    return 0;
  }
  
  private View a(boolean paramBoolean, int paramInt1, int paramInt2)
  {
    ArrayList localArrayList = getFocusables(2);
    Object localObject2 = null;
    int i4 = 0;
    int i6 = localArrayList.size();
    int i3 = 0;
    while (i3 < i6)
    {
      View localView = (View)localArrayList.get(i3);
      int i7 = localView.getTop();
      int i8 = localView.getBottom();
      Object localObject1 = localObject2;
      int i2 = i4;
      if (paramInt1 < i8)
      {
        localObject1 = localObject2;
        i2 = i4;
        if (i7 < paramInt2)
        {
          int i5 = 0;
          int i1;
          if ((paramInt1 < i7) && (i8 < paramInt2)) {
            i1 = 1;
          } else {
            i1 = 0;
          }
          if (localObject2 == null)
          {
            localObject1 = localView;
            i2 = i1;
          }
          else
          {
            if (((paramBoolean) && (i7 < localObject2.getTop())) || ((!paramBoolean) && (i8 > localObject2.getBottom()))) {
              i5 = 1;
            }
            if (i4 != 0)
            {
              localObject1 = localObject2;
              i2 = i4;
              if (i1 != 0)
              {
                localObject1 = localObject2;
                i2 = i4;
                if (i5 != 0)
                {
                  localObject1 = localView;
                  i2 = i4;
                }
              }
            }
            else if (i1 != 0)
            {
              localObject1 = localView;
              i2 = 1;
            }
            else
            {
              localObject1 = localObject2;
              i2 = i4;
              if (i5 != 0)
              {
                localObject1 = localView;
                i2 = i4;
              }
            }
          }
        }
      }
      i3 += 1;
      localObject2 = localObject1;
      i4 = i2;
    }
    return localObject2;
  }
  
  private void a(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getActionIndex();
    if (paramMotionEvent.getPointerId(i1) == s)
    {
      if (i1 == 0) {
        i1 = 1;
      } else {
        i1 = 0;
      }
      h = ((int)paramMotionEvent.getY(i1));
      s = paramMotionEvent.getPointerId(i1);
      paramMotionEvent = m;
      if (paramMotionEvent != null) {
        paramMotionEvent.clear();
      }
    }
  }
  
  private boolean a()
  {
    int i1 = getChildCount();
    boolean bool = false;
    if (i1 > 0)
    {
      View localView = getChildAt(0);
      FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
      if (localView.getHeight() + topMargin + bottomMargin > getHeight() - getPaddingTop() - getPaddingBottom()) {
        bool = true;
      }
      return bool;
    }
    return false;
  }
  
  private boolean a(Rect paramRect, boolean paramBoolean)
  {
    int i1 = a(paramRect);
    boolean bool;
    if (i1 != 0) {
      bool = true;
    } else {
      bool = false;
    }
    if (bool)
    {
      if (paramBoolean)
      {
        scrollBy(0, i1);
        return bool;
      }
      a(0, i1);
    }
    return bool;
  }
  
  private boolean a(View paramView)
  {
    return a(paramView, 0, getHeight()) ^ true;
  }
  
  private boolean a(View paramView, int paramInt1, int paramInt2)
  {
    paramView.getDrawingRect(d);
    offsetDescendantRectToMyCoords(paramView, d);
    return (d.bottom + paramInt1 >= getScrollY()) && (d.top - paramInt1 <= getScrollY() + paramInt2);
  }
  
  private static boolean a(View paramView1, View paramView2)
  {
    if (paramView1 == paramView2) {
      return true;
    }
    paramView1 = paramView1.getParent();
    return ((paramView1 instanceof ViewGroup)) && (a((View)paramView1, paramView2));
  }
  
  private void b()
  {
    l = false;
    g();
    a(0);
    EdgeEffect localEdgeEffect = f;
    if (localEdgeEffect != null)
    {
      localEdgeEffect.onRelease();
      g.onRelease();
    }
  }
  
  private void b(View paramView)
  {
    paramView.getDrawingRect(d);
    offsetDescendantRectToMyCoords(paramView, d);
    int i1 = a(d);
    if (i1 != 0) {
      scrollBy(0, i1);
    }
  }
  
  private boolean b(int paramInt1, int paramInt2, int paramInt3)
  {
    boolean bool2 = true;
    int i2 = getHeight();
    int i1 = getScrollY();
    i2 = i1 + i2;
    boolean bool1;
    if (paramInt1 == 33) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    View localView = a(bool1, paramInt2, paramInt3);
    Object localObject = localView;
    if (localView == null) {
      localObject = this;
    }
    if ((paramInt2 >= i1) && (paramInt3 <= i2))
    {
      bool1 = false;
    }
    else
    {
      if (bool1) {
        paramInt2 -= i1;
      } else {
        paramInt2 = paramInt3 - i2;
      }
      g(paramInt2);
      bool1 = bool2;
    }
    if (localObject != findFocus()) {
      ((View)localObject).requestFocus(paramInt1);
    }
    return bool1;
  }
  
  private void c()
  {
    if (getOverScrollMode() != 2)
    {
      if (f == null)
      {
        Context localContext = getContext();
        f = new EdgeEffect(localContext);
        g = new EdgeEffect(localContext);
      }
    }
    else
    {
      f = null;
      g = null;
    }
  }
  
  private void d()
  {
    VelocityTracker localVelocityTracker = m;
    if (localVelocityTracker == null)
    {
      m = VelocityTracker.obtain();
      return;
    }
    localVelocityTracker.clear();
  }
  
  private boolean d(int paramInt1, int paramInt2)
  {
    if (getChildCount() > 0)
    {
      int i1 = getScrollY();
      View localView = getChildAt(0);
      return (paramInt2 >= localView.getTop() - i1) && (paramInt2 < localView.getBottom() - i1) && (paramInt1 >= localView.getLeft()) && (paramInt1 < localView.getRight());
    }
    return false;
  }
  
  private void e()
  {
    e = new OverScroller(getContext());
    setFocusable(true);
    setDescendantFocusability(262144);
    setWillNotDraw(false);
    ViewConfiguration localViewConfiguration = ViewConfiguration.get(getContext());
    p = localViewConfiguration.getScaledTouchSlop();
    q = localViewConfiguration.getScaledMinimumFlingVelocity();
    r = localViewConfiguration.getScaledMaximumFlingVelocity();
  }
  
  private void f()
  {
    if (m == null) {
      m = VelocityTracker.obtain();
    }
  }
  
  private void g()
  {
    VelocityTracker localVelocityTracker = m;
    if (localVelocityTracker != null)
    {
      localVelocityTracker.recycle();
      m = null;
    }
  }
  
  private void g(int paramInt)
  {
    if (paramInt != 0)
    {
      if (o)
      {
        a(0, paramInt);
        return;
      }
      scrollBy(0, paramInt);
    }
  }
  
  private float getVerticalScrollFactorCompat()
  {
    if (A == 0.0F)
    {
      TypedValue localTypedValue = new TypedValue();
      Context localContext = getContext();
      if (localContext.getTheme().resolveAttribute(16842829, localTypedValue, true)) {
        A = localTypedValue.getDimension(localContext.getResources().getDisplayMetrics());
      } else {
        throw new IllegalStateException("Expected theme to define listPreferredItemHeight.");
      }
    }
    return A;
  }
  
  private void h(int paramInt)
  {
    int i1 = getScrollY();
    boolean bool;
    if (((i1 <= 0) && (paramInt <= 0)) || ((i1 >= getScrollRange()) && (paramInt >= 0))) {
      bool = false;
    } else {
      bool = true;
    }
    if (!dispatchNestedPreFling(0.0F, paramInt))
    {
      dispatchNestedFling(0.0F, paramInt, bool);
      c(paramInt);
    }
  }
  
  protected int a(Rect paramRect)
  {
    if (getChildCount() == 0) {
      return 0;
    }
    int i6 = getHeight();
    int i1 = getScrollY();
    int i3 = i1 + i6;
    int i4 = getVerticalFadingEdgeLength();
    int i2 = i1;
    if (top > 0) {
      i2 = i1 + i4;
    }
    View localView = getChildAt(0);
    FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
    i1 = i3;
    if (bottom < localView.getHeight() + topMargin + bottomMargin) {
      i1 = i3 - i4;
    }
    i4 = i1;
    int i5 = 0;
    if ((bottom > i4) && (top > i2))
    {
      if (paramRect.height() > i6) {
        i1 = 0 + (top - i2);
      } else {
        i1 = 0 + (bottom - i4);
      }
      i1 = Math.min(i1, localView.getBottom() + bottomMargin - i3);
    }
    do
    {
      do
      {
        return i1;
        i1 = i5;
      } while (top >= i2);
      i1 = i5;
    } while (bottom >= i4);
    if (paramRect.height() > i6) {
      i1 = 0 - (i4 - bottom);
    } else {
      i1 = 0 - (i2 - top);
    }
    return Math.max(i1, -getScrollY());
  }
  
  public void a(int paramInt)
  {
    z.c(paramInt);
  }
  
  public final void a(int paramInt1, int paramInt2)
  {
    if (getChildCount() == 0) {
      return;
    }
    if (AnimationUtils.currentAnimationTimeMillis() - c > 250L)
    {
      View localView = getChildAt(0);
      FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
      int i1 = localView.getHeight();
      int i2 = topMargin;
      int i3 = bottomMargin;
      int i4 = getHeight();
      int i5 = getPaddingTop();
      int i6 = getPaddingBottom();
      paramInt1 = getScrollY();
      paramInt2 = Math.max(0, Math.min(paramInt1 + paramInt2, Math.max(0, i1 + i2 + i3 - (i4 - i5 - i6))));
      w = getScrollY();
      e.startScroll(getScrollX(), paramInt1, 0, paramInt2 - paramInt1);
      u.B(this);
    }
    else
    {
      if (!e.isFinished()) {
        e.abortAnimation();
      }
      scrollBy(paramInt1, paramInt2);
    }
    c = AnimationUtils.currentAnimationTimeMillis();
  }
  
  public void a(View paramView, int paramInt)
  {
    y.a(paramView, paramInt);
    a(paramInt);
  }
  
  public void a(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    paramInt1 = getScrollY();
    scrollBy(0, paramInt4);
    paramInt1 = getScrollY() - paramInt1;
    a(0, paramInt1, 0, paramInt4 - paramInt1, null, paramInt5);
  }
  
  public void a(View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3)
  {
    a(paramInt1, paramInt2, paramArrayOfInt, null, paramInt3);
  }
  
  public void a(View paramView1, View paramView2, int paramInt1, int paramInt2)
  {
    y.a(paramView1, paramView2, paramInt1, paramInt2);
    c(2, paramInt2);
  }
  
  boolean a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, boolean paramBoolean)
  {
    int i3 = getOverScrollMode();
    int i1;
    if (computeHorizontalScrollRange() > computeHorizontalScrollExtent()) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    int i2;
    if (computeVerticalScrollRange() > computeVerticalScrollExtent()) {
      i2 = 1;
    } else {
      i2 = 0;
    }
    if ((i3 != 0) && ((i3 != 1) || (i1 == 0))) {
      i1 = 0;
    } else {
      i1 = 1;
    }
    if ((i3 != 0) && ((i3 != 1) || (i2 == 0))) {
      i2 = 0;
    } else {
      i2 = 1;
    }
    paramInt3 += paramInt1;
    if (i1 == 0) {
      paramInt1 = 0;
    } else {
      paramInt1 = paramInt7;
    }
    paramInt4 += paramInt2;
    if (i2 == 0) {
      paramInt2 = 0;
    } else {
      paramInt2 = paramInt8;
    }
    paramInt7 = -paramInt1;
    paramInt1 += paramInt5;
    paramInt5 = -paramInt2;
    paramInt2 += paramInt6;
    if (paramInt3 > paramInt1)
    {
      paramBoolean = true;
    }
    else if (paramInt3 < paramInt7)
    {
      paramInt1 = paramInt7;
      paramBoolean = true;
    }
    else
    {
      paramBoolean = false;
      paramInt1 = paramInt3;
    }
    boolean bool;
    if (paramInt4 > paramInt2)
    {
      bool = true;
    }
    else if (paramInt4 < paramInt5)
    {
      paramInt2 = paramInt5;
      bool = true;
    }
    else
    {
      paramInt2 = paramInt4;
      bool = false;
    }
    if ((bool) && (!e(1))) {
      e.springBack(paramInt1, paramInt2, 0, 0, 0, getScrollRange());
    }
    onOverScrolled(paramInt1, paramInt2, paramBoolean, bool);
    return (paramBoolean) || (bool);
  }
  
  public boolean a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt, int paramInt5)
  {
    return z.a(paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfInt, paramInt5);
  }
  
  public boolean a(int paramInt1, int paramInt2, int[] paramArrayOfInt1, int[] paramArrayOfInt2, int paramInt3)
  {
    return z.a(paramInt1, paramInt2, paramArrayOfInt1, paramArrayOfInt2, paramInt3);
  }
  
  public boolean a(KeyEvent paramKeyEvent)
  {
    d.setEmpty();
    boolean bool = a();
    int i1 = 130;
    if (!bool)
    {
      if ((isFocused()) && (paramKeyEvent.getKeyCode() != 4))
      {
        View localView = findFocus();
        paramKeyEvent = localView;
        if (localView == this) {
          paramKeyEvent = null;
        }
        paramKeyEvent = FocusFinder.getInstance().findNextFocus(this, paramKeyEvent, 130);
        return (paramKeyEvent != null) && (paramKeyEvent != this) && (paramKeyEvent.requestFocus(130));
      }
      return false;
    }
    bool = false;
    if (paramKeyEvent.getAction() == 0)
    {
      int i2 = paramKeyEvent.getKeyCode();
      if (i2 != 19)
      {
        if (i2 != 20)
        {
          if (i2 != 62) {
            return false;
          }
          if (paramKeyEvent.isShiftPressed()) {
            i1 = 33;
          }
          f(i1);
          return false;
        }
        if (!paramKeyEvent.isAltPressed()) {
          return b(130);
        }
        return d(130);
      }
      if (!paramKeyEvent.isAltPressed()) {
        return b(33);
      }
      bool = d(33);
    }
    return bool;
  }
  
  public void addView(View paramView)
  {
    if (getChildCount() <= 0)
    {
      super.addView(paramView);
      return;
    }
    throw new IllegalStateException("ScrollView can host only one direct child");
  }
  
  public void addView(View paramView, int paramInt)
  {
    if (getChildCount() <= 0)
    {
      super.addView(paramView, paramInt);
      return;
    }
    throw new IllegalStateException("ScrollView can host only one direct child");
  }
  
  public void addView(View paramView, int paramInt, ViewGroup.LayoutParams paramLayoutParams)
  {
    if (getChildCount() <= 0)
    {
      super.addView(paramView, paramInt, paramLayoutParams);
      return;
    }
    throw new IllegalStateException("ScrollView can host only one direct child");
  }
  
  public void addView(View paramView, ViewGroup.LayoutParams paramLayoutParams)
  {
    if (getChildCount() <= 0)
    {
      super.addView(paramView, paramLayoutParams);
      return;
    }
    throw new IllegalStateException("ScrollView can host only one direct child");
  }
  
  public final void b(int paramInt1, int paramInt2)
  {
    a(paramInt1 - getScrollX(), paramInt2 - getScrollY());
  }
  
  public boolean b(int paramInt)
  {
    View localView2 = findFocus();
    View localView1 = localView2;
    if (localView2 == this) {
      localView1 = null;
    }
    localView2 = FocusFinder.getInstance().findNextFocus(this, localView1, paramInt);
    int i3 = getMaxScrollAmount();
    if ((localView2 != null) && (a(localView2, i3, getHeight())))
    {
      localView2.getDrawingRect(d);
      offsetDescendantRectToMyCoords(localView2, d);
      g(a(d));
      localView2.requestFocus(paramInt);
    }
    else
    {
      int i2 = i3;
      int i1;
      if ((paramInt == 33) && (getScrollY() < i2))
      {
        i1 = getScrollY();
      }
      else
      {
        i1 = i2;
        if (paramInt == 130)
        {
          i1 = i2;
          if (getChildCount() > 0)
          {
            localView2 = getChildAt(0);
            FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView2.getLayoutParams();
            i1 = Math.min(localView2.getBottom() + bottomMargin - (getScrollY() + getHeight() - getPaddingBottom()), i3);
          }
        }
      }
      if (i1 == 0) {
        return false;
      }
      if (paramInt != 130) {
        i1 = -i1;
      }
      g(i1);
    }
    if ((localView1 != null) && (localView1.isFocused()) && (a(localView1)))
    {
      paramInt = getDescendantFocusability();
      setDescendantFocusability(131072);
      requestFocus();
      setDescendantFocusability(paramInt);
    }
    return true;
  }
  
  public boolean b(View paramView1, View paramView2, int paramInt1, int paramInt2)
  {
    return (paramInt1 & 0x2) != 0;
  }
  
  public void c(int paramInt)
  {
    if (getChildCount() > 0)
    {
      c(2, 1);
      e.fling(getScrollX(), getScrollY(), 0, paramInt, 0, 0, Integer.MIN_VALUE, Integer.MAX_VALUE, 0, 0);
      w = getScrollY();
      u.B(this);
    }
  }
  
  public boolean c(int paramInt1, int paramInt2)
  {
    return z.a(paramInt1, paramInt2);
  }
  
  public int computeHorizontalScrollExtent()
  {
    return super.computeHorizontalScrollExtent();
  }
  
  public int computeHorizontalScrollOffset()
  {
    return super.computeHorizontalScrollOffset();
  }
  
  public int computeHorizontalScrollRange()
  {
    return super.computeHorizontalScrollRange();
  }
  
  public void computeScroll()
  {
    if (e.computeScrollOffset())
    {
      e.getCurrX();
      int i3 = e.getCurrY();
      int i1 = i3 - w;
      if (a(0, i1, u, null, 1)) {
        i1 -= u[1];
      }
      if (i1 != 0)
      {
        int i2 = getScrollRange();
        int i4 = getScrollY();
        a(0, i1, getScrollX(), i4, 0, i2, 0, 0, false);
        int i5 = getScrollY() - i4;
        if (!a(0, i5, 0, i1 - i5, null, 1))
        {
          i1 = getOverScrollMode();
          if ((i1 != 0) && ((i1 != 1) || (i2 <= 0))) {
            i1 = 0;
          } else {
            i1 = 1;
          }
          if (i1 != 0)
          {
            c();
            if ((i3 <= 0) && (i4 > 0)) {
              f.onAbsorb((int)e.getCurrVelocity());
            } else if ((i3 >= i2) && (i4 < i2)) {
              g.onAbsorb((int)e.getCurrVelocity());
            }
          }
        }
      }
      w = i3;
      u.B(this);
      return;
    }
    if (e(1)) {
      a(1);
    }
    w = 0;
  }
  
  public int computeVerticalScrollExtent()
  {
    return super.computeVerticalScrollExtent();
  }
  
  public int computeVerticalScrollOffset()
  {
    return Math.max(0, super.computeVerticalScrollOffset());
  }
  
  public int computeVerticalScrollRange()
  {
    int i2 = getChildCount();
    int i1 = getHeight() - getPaddingBottom() - getPaddingTop();
    if (i2 == 0) {
      return i1;
    }
    View localView = getChildAt(0);
    FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
    i2 = localView.getBottom() + bottomMargin;
    int i3 = getScrollY();
    int i4 = Math.max(0, i2 - i1);
    if (i3 < 0) {
      return i2 - i3;
    }
    i1 = i2;
    if (i3 > i4) {
      i1 = i2 + (i3 - i4);
    }
    return i1;
  }
  
  public boolean d(int paramInt)
  {
    int i1;
    if (paramInt == 130) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    int i2 = getHeight();
    Object localObject = d;
    top = 0;
    bottom = i2;
    if (i1 != 0)
    {
      i1 = getChildCount();
      if (i1 > 0)
      {
        localObject = getChildAt(i1 - 1);
        FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)((View)localObject).getLayoutParams();
        d.bottom = (((View)localObject).getBottom() + bottomMargin + getPaddingBottom());
        localObject = d;
        top = (bottom - i2);
      }
    }
    localObject = d;
    return b(paramInt, top, bottom);
  }
  
  public boolean dispatchKeyEvent(KeyEvent paramKeyEvent)
  {
    return (super.dispatchKeyEvent(paramKeyEvent)) || (a(paramKeyEvent));
  }
  
  public boolean dispatchNestedFling(float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    return z.a(paramFloat1, paramFloat2, paramBoolean);
  }
  
  public boolean dispatchNestedPreFling(float paramFloat1, float paramFloat2)
  {
    return z.a(paramFloat1, paramFloat2);
  }
  
  public boolean dispatchNestedPreScroll(int paramInt1, int paramInt2, int[] paramArrayOfInt1, int[] paramArrayOfInt2)
  {
    return a(paramInt1, paramInt2, paramArrayOfInt1, paramArrayOfInt2, 0);
  }
  
  public boolean dispatchNestedScroll(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt)
  {
    return a(paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfInt, 0);
  }
  
  public void draw(Canvas paramCanvas)
  {
    super.draw(paramCanvas);
    if (f != null)
    {
      int i7 = getScrollY();
      int i8;
      int i3;
      int i6;
      int i2;
      int i5;
      int i1;
      int i4;
      if (!f.isFinished())
      {
        i8 = paramCanvas.save();
        i3 = getWidth();
        i6 = getHeight();
        i2 = 0;
        i5 = Math.min(0, i7);
        if (Build.VERSION.SDK_INT >= 21)
        {
          i1 = i3;
          if (!getClipToPadding()) {}
        }
        else
        {
          i1 = i3 - (getPaddingLeft() + getPaddingRight());
          i2 = 0 + getPaddingLeft();
        }
        i4 = i6;
        i3 = i5;
        if (Build.VERSION.SDK_INT >= 21)
        {
          i4 = i6;
          i3 = i5;
          if (getClipToPadding())
          {
            i4 = i6 - (getPaddingTop() + getPaddingBottom());
            i3 = i5 + getPaddingTop();
          }
        }
        paramCanvas.translate(i2, i3);
        f.setSize(i1, i4);
        if (f.draw(paramCanvas)) {
          u.B(this);
        }
        paramCanvas.restoreToCount(i8);
      }
      if (!g.isFinished())
      {
        i8 = paramCanvas.save();
        i3 = getWidth();
        i5 = getHeight();
        i2 = 0;
        i6 = Math.max(getScrollRange(), i7) + i5;
        if (Build.VERSION.SDK_INT >= 21)
        {
          i1 = i3;
          if (!getClipToPadding()) {}
        }
        else
        {
          i1 = i3 - (getPaddingLeft() + getPaddingRight());
          i2 = 0 + getPaddingLeft();
        }
        i4 = i5;
        i3 = i6;
        if (Build.VERSION.SDK_INT >= 21)
        {
          i4 = i5;
          i3 = i6;
          if (getClipToPadding())
          {
            i4 = i5 - (getPaddingTop() + getPaddingBottom());
            i3 = i6 - getPaddingBottom();
          }
        }
        paramCanvas.translate(i2 - i1, i3);
        paramCanvas.rotate(180.0F, i1, 0.0F);
        g.setSize(i1, i4);
        if (g.draw(paramCanvas)) {
          u.B(this);
        }
        paramCanvas.restoreToCount(i8);
      }
    }
  }
  
  public boolean e(int paramInt)
  {
    return z.a(paramInt);
  }
  
  public boolean f(int paramInt)
  {
    if (paramInt == 130) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    int i2 = getHeight();
    if (i1 != 0)
    {
      d.top = (getScrollY() + i2);
      i1 = getChildCount();
      if (i1 > 0)
      {
        localObject = getChildAt(i1 - 1);
        FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)((View)localObject).getLayoutParams();
        i1 = ((View)localObject).getBottom() + bottomMargin + getPaddingBottom();
        localObject = d;
        if (top + i2 > i1) {
          top = (i1 - i2);
        }
      }
    }
    else
    {
      d.top = (getScrollY() - i2);
      localObject = d;
      if (top < 0) {
        top = 0;
      }
    }
    Object localObject = d;
    int i1 = top;
    bottom = (i1 + i2);
    return b(paramInt, i1, bottom);
  }
  
  protected float getBottomFadingEdgeStrength()
  {
    if (getChildCount() == 0) {
      return 0.0F;
    }
    View localView = getChildAt(0);
    FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
    int i1 = getVerticalFadingEdgeLength();
    int i2 = getHeight();
    int i3 = getPaddingBottom();
    i2 = localView.getBottom() + bottomMargin - getScrollY() - (i2 - i3);
    if (i2 < i1) {
      return i2 / i1;
    }
    return 1.0F;
  }
  
  public int getMaxScrollAmount()
  {
    return (int)(getHeight() * 0.5F);
  }
  
  public int getNestedScrollAxes()
  {
    return y.a();
  }
  
  int getScrollRange()
  {
    int i1 = 0;
    if (getChildCount() > 0)
    {
      View localView = getChildAt(0);
      FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
      i1 = Math.max(0, localView.getHeight() + topMargin + bottomMargin - (getHeight() - getPaddingTop() - getPaddingBottom()));
    }
    return i1;
  }
  
  protected float getTopFadingEdgeStrength()
  {
    if (getChildCount() == 0) {
      return 0.0F;
    }
    int i1 = getVerticalFadingEdgeLength();
    int i2 = getScrollY();
    if (i2 < i1) {
      return i2 / i1;
    }
    return 1.0F;
  }
  
  public boolean hasNestedScrollingParent()
  {
    return e(0);
  }
  
  public boolean isNestedScrollingEnabled()
  {
    return z.b();
  }
  
  protected void measureChild(View paramView, int paramInt1, int paramInt2)
  {
    ViewGroup.LayoutParams localLayoutParams = paramView.getLayoutParams();
    paramView.measure(FrameLayout.getChildMeasureSpec(paramInt1, getPaddingLeft() + getPaddingRight(), width), View.MeasureSpec.makeMeasureSpec(0, 0));
  }
  
  protected void measureChildWithMargins(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    ViewGroup.MarginLayoutParams localMarginLayoutParams = (ViewGroup.MarginLayoutParams)paramView.getLayoutParams();
    paramView.measure(FrameLayout.getChildMeasureSpec(paramInt1, getPaddingLeft() + getPaddingRight() + leftMargin + rightMargin + paramInt2, width), View.MeasureSpec.makeMeasureSpec(topMargin + bottomMargin, 0));
  }
  
  public void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    j = false;
  }
  
  public boolean onGenericMotionEvent(MotionEvent paramMotionEvent)
  {
    if (((paramMotionEvent.getSource() & 0x2) != 0) && (paramMotionEvent.getAction() == 8) && (!l))
    {
      float f1 = paramMotionEvent.getAxisValue(9);
      if (f1 != 0.0F)
      {
        int i1 = (int)(getVerticalScrollFactorCompat() * f1);
        int i2 = getScrollRange();
        int i4 = getScrollY();
        int i3 = i4 - i1;
        if (i3 < 0)
        {
          i1 = 0;
        }
        else
        {
          i1 = i3;
          if (i3 > i2) {
            i1 = i2;
          }
        }
        if (i1 != i4)
        {
          super.scrollTo(getScrollX(), i1);
          return true;
        }
      }
    }
    return false;
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getAction();
    if ((i1 == 2) && (l)) {
      return true;
    }
    i1 &= 0xFF;
    if (i1 != 0)
    {
      if (i1 != 1) {
        if (i1 != 2)
        {
          if (i1 != 3)
          {
            if (i1 != 6) {
              break label343;
            }
            a(paramMotionEvent);
            break label343;
          }
        }
        else
        {
          i1 = s;
          if (i1 == -1) {
            break label343;
          }
          int i2 = paramMotionEvent.findPointerIndex(i1);
          if (i2 == -1)
          {
            paramMotionEvent = new StringBuilder();
            paramMotionEvent.append("Invalid pointerId=");
            paramMotionEvent.append(i1);
            paramMotionEvent.append(" in onInterceptTouchEvent");
            Log.e("NestedScrollView", paramMotionEvent.toString());
            break label343;
          }
          i1 = (int)paramMotionEvent.getY(i2);
          if ((Math.abs(i1 - h) <= p) || ((0x2 & getNestedScrollAxes()) != 0)) {
            break label343;
          }
          l = true;
          h = i1;
          f();
          m.addMovement(paramMotionEvent);
          v = 0;
          paramMotionEvent = getParent();
          if (paramMotionEvent != null) {
            paramMotionEvent.requestDisallowInterceptTouchEvent(true);
          }
          break label343;
        }
      }
      l = false;
      s = -1;
      g();
      if (e.springBack(getScrollX(), getScrollY(), 0, 0, 0, getScrollRange())) {
        u.B(this);
      }
      a(0);
    }
    else
    {
      i1 = (int)paramMotionEvent.getY();
      if (!d((int)paramMotionEvent.getX(), i1))
      {
        l = false;
        g();
      }
      else
      {
        h = i1;
        s = paramMotionEvent.getPointerId(0);
        d();
        m.addMovement(paramMotionEvent);
        e.computeScrollOffset();
        l = (true ^ e.isFinished());
        c(2, 0);
      }
    }
    label343:
    return l;
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    i = false;
    View localView = k;
    if ((localView != null) && (a(localView, this))) {
      b(k);
    }
    k = null;
    if (!j)
    {
      if (x != null)
      {
        scrollTo(getScrollX(), x.c);
        x = null;
      }
      paramInt1 = 0;
      if (getChildCount() > 0)
      {
        localView = getChildAt(0);
        FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
        paramInt1 = localView.getMeasuredHeight() + topMargin + bottomMargin;
      }
      int i1 = getPaddingTop();
      int i2 = getPaddingBottom();
      paramInt3 = getScrollY();
      paramInt1 = a(paramInt3, paramInt4 - paramInt2 - i1 - i2, paramInt1);
      if (paramInt1 != paramInt3) {
        scrollTo(getScrollX(), paramInt1);
      }
    }
    scrollTo(getScrollX(), getScrollY());
    j = true;
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    super.onMeasure(paramInt1, paramInt2);
    if (!n) {
      return;
    }
    if (View.MeasureSpec.getMode(paramInt2) == 0) {
      return;
    }
    if (getChildCount() > 0)
    {
      View localView = getChildAt(0);
      FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
      paramInt2 = localView.getMeasuredHeight();
      int i1 = getMeasuredHeight() - getPaddingTop() - getPaddingBottom() - topMargin - bottomMargin;
      if (paramInt2 < i1) {
        localView.measure(FrameLayout.getChildMeasureSpec(paramInt1, getPaddingLeft() + getPaddingRight() + leftMargin + rightMargin, width), View.MeasureSpec.makeMeasureSpec(i1, 1073741824));
      }
    }
  }
  
  public boolean onNestedFling(View paramView, float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    if (!paramBoolean)
    {
      h((int)paramFloat2);
      return true;
    }
    return false;
  }
  
  public boolean onNestedPreFling(View paramView, float paramFloat1, float paramFloat2)
  {
    return dispatchNestedPreFling(paramFloat1, paramFloat2);
  }
  
  public void onNestedPreScroll(View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt)
  {
    a(paramView, paramInt1, paramInt2, paramArrayOfInt, 0);
  }
  
  public void onNestedScroll(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    a(paramView, paramInt1, paramInt2, paramInt3, paramInt4, 0);
  }
  
  public void onNestedScrollAccepted(View paramView1, View paramView2, int paramInt)
  {
    a(paramView1, paramView2, paramInt, 0);
  }
  
  protected void onOverScrolled(int paramInt1, int paramInt2, boolean paramBoolean1, boolean paramBoolean2)
  {
    super.scrollTo(paramInt1, paramInt2);
  }
  
  protected boolean onRequestFocusInDescendants(int paramInt, Rect paramRect)
  {
    int i1;
    if (paramInt == 2)
    {
      i1 = 130;
    }
    else
    {
      i1 = paramInt;
      if (paramInt == 1) {
        i1 = 33;
      }
    }
    View localView;
    if (paramRect == null) {
      localView = FocusFinder.getInstance().findNextFocus(this, null, i1);
    } else {
      localView = FocusFinder.getInstance().findNextFocusFromRect(this, paramRect, i1);
    }
    if (localView == null) {
      return false;
    }
    if (a(localView)) {
      return false;
    }
    return localView.requestFocus(i1, paramRect);
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof c))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    paramParcelable = (c)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.getSuperState());
    x = paramParcelable;
    requestLayout();
  }
  
  protected Parcelable onSaveInstanceState()
  {
    c localC = new c(super.onSaveInstanceState());
    c = getScrollY();
    return localC;
  }
  
  protected void onScrollChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onScrollChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    b localB = B;
    if (localB != null) {
      localB.a(this, paramInt1, paramInt2, paramInt3, paramInt4);
    }
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    View localView = findFocus();
    if (localView != null)
    {
      if (this == localView) {
        return;
      }
      if (a(localView, 0, paramInt4))
      {
        localView.getDrawingRect(d);
        offsetDescendantRectToMyCoords(localView, d);
        g(a(d));
      }
      return;
    }
  }
  
  public boolean onStartNestedScroll(View paramView1, View paramView2, int paramInt)
  {
    return b(paramView1, paramView2, paramInt, 0);
  }
  
  public void onStopNestedScroll(View paramView)
  {
    a(paramView, 0);
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    f();
    MotionEvent localMotionEvent = MotionEvent.obtain(paramMotionEvent);
    int i1 = paramMotionEvent.getActionMasked();
    if (i1 == 0) {
      v = 0;
    }
    localMotionEvent.offsetLocation(0.0F, v);
    ViewParent localViewParent;
    if (i1 != 0)
    {
      if (i1 != 1)
      {
        if (i1 != 2)
        {
          if (i1 != 3)
          {
            if (i1 != 5)
            {
              if (i1 == 6)
              {
                a(paramMotionEvent);
                h = ((int)paramMotionEvent.getY(paramMotionEvent.findPointerIndex(s)));
              }
            }
            else
            {
              i1 = paramMotionEvent.getActionIndex();
              h = ((int)paramMotionEvent.getY(i1));
              s = paramMotionEvent.getPointerId(i1);
            }
          }
          else
          {
            if ((l) && (getChildCount() > 0) && (e.springBack(getScrollX(), getScrollY(), 0, 0, 0, getScrollRange()))) {
              u.B(this);
            }
            s = -1;
            b();
          }
        }
        else
        {
          int i3 = paramMotionEvent.findPointerIndex(s);
          if (i3 == -1)
          {
            paramMotionEvent = new StringBuilder();
            paramMotionEvent.append("Invalid pointerId=");
            paramMotionEvent.append(s);
            paramMotionEvent.append(" in onTouchEvent");
            Log.e("NestedScrollView", paramMotionEvent.toString());
          }
          else
          {
            int i4 = (int)paramMotionEvent.getY(i3);
            i1 = h - i4;
            int i2 = i1;
            if (a(0, i1, u, t, 0))
            {
              i2 = i1 - u[1];
              localMotionEvent.offsetLocation(0.0F, t[1]);
              v += t[1];
            }
            i1 = i2;
            if (!l)
            {
              i1 = i2;
              if (Math.abs(i2) > p)
              {
                localViewParent = getParent();
                if (localViewParent != null) {
                  localViewParent.requestDisallowInterceptTouchEvent(true);
                }
                l = true;
                if (i2 > 0) {
                  i1 = i2 - p;
                } else {
                  i1 = i2 + p;
                }
              }
            }
            if (l)
            {
              h = (i4 - t[1]);
              int i5 = getScrollY();
              i4 = getScrollRange();
              i2 = getOverScrollMode();
              if ((i2 != 0) && ((i2 != 1) || (i4 <= 0))) {
                i2 = 0;
              } else {
                i2 = 1;
              }
              if ((a(0, i1, 0, getScrollY(), 0, i4, 0, 0, true)) && (!e(0))) {
                m.clear();
              }
              int i6 = getScrollY() - i5;
              if (a(0, i6, 0, i1 - i6, t, 0))
              {
                i1 = h;
                paramMotionEvent = t;
                h = (i1 - paramMotionEvent[1]);
                localMotionEvent.offsetLocation(0.0F, paramMotionEvent[1]);
                v += t[1];
              }
              else if (i2 != 0)
              {
                c();
                i2 = i5 + i1;
                if (i2 < 0)
                {
                  g.a(f, i1 / getHeight(), paramMotionEvent.getX(i3) / getWidth());
                  if (!g.isFinished()) {
                    g.onRelease();
                  }
                }
                else if (i2 > i4)
                {
                  g.a(g, i1 / getHeight(), 1.0F - paramMotionEvent.getX(i3) / getWidth());
                  if (!f.isFinished()) {
                    f.onRelease();
                  }
                }
                paramMotionEvent = f;
                if ((paramMotionEvent != null) && ((!paramMotionEvent.isFinished()) || (!g.isFinished()))) {
                  u.B(this);
                }
              }
            }
          }
        }
      }
      else
      {
        paramMotionEvent = m;
        paramMotionEvent.computeCurrentVelocity(1000, r);
        i1 = (int)paramMotionEvent.getYVelocity(s);
        if (Math.abs(i1) > q) {
          h(-i1);
        } else if (e.springBack(getScrollX(), getScrollY(), 0, 0, 0, getScrollRange())) {
          u.B(this);
        }
        s = -1;
        b();
      }
    }
    else
    {
      if (getChildCount() == 0) {
        return false;
      }
      boolean bool = e.isFinished() ^ true;
      l = bool;
      if (bool)
      {
        localViewParent = getParent();
        if (localViewParent != null) {
          localViewParent.requestDisallowInterceptTouchEvent(true);
        }
      }
      if (!e.isFinished()) {
        e.abortAnimation();
      }
      h = ((int)paramMotionEvent.getY());
      s = paramMotionEvent.getPointerId(0);
      c(2, 0);
    }
    paramMotionEvent = m;
    if (paramMotionEvent != null) {
      paramMotionEvent.addMovement(localMotionEvent);
    }
    localMotionEvent.recycle();
    return true;
  }
  
  public void requestChildFocus(View paramView1, View paramView2)
  {
    if (!i) {
      b(paramView2);
    } else {
      k = paramView2;
    }
    super.requestChildFocus(paramView1, paramView2);
  }
  
  public boolean requestChildRectangleOnScreen(View paramView, Rect paramRect, boolean paramBoolean)
  {
    paramRect.offset(paramView.getLeft() - paramView.getScrollX(), paramView.getTop() - paramView.getScrollY());
    return a(paramRect, paramBoolean);
  }
  
  public void requestDisallowInterceptTouchEvent(boolean paramBoolean)
  {
    if (paramBoolean) {
      g();
    }
    super.requestDisallowInterceptTouchEvent(paramBoolean);
  }
  
  public void requestLayout()
  {
    i = true;
    super.requestLayout();
  }
  
  public void scrollTo(int paramInt1, int paramInt2)
  {
    if (getChildCount() > 0)
    {
      View localView = getChildAt(0);
      FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localView.getLayoutParams();
      int i7 = getWidth();
      int i8 = getPaddingLeft();
      int i9 = getPaddingRight();
      int i10 = localView.getWidth();
      int i11 = leftMargin;
      int i12 = rightMargin;
      int i1 = getHeight();
      int i2 = getPaddingTop();
      int i3 = getPaddingBottom();
      int i4 = localView.getHeight();
      int i5 = topMargin;
      int i6 = bottomMargin;
      paramInt1 = a(paramInt1, i7 - i8 - i9, i10 + i11 + i12);
      paramInt2 = a(paramInt2, i1 - i2 - i3, i4 + i5 + i6);
      if ((paramInt1 != getScrollX()) || (paramInt2 != getScrollY())) {
        super.scrollTo(paramInt1, paramInt2);
      }
    }
  }
  
  public void setFillViewport(boolean paramBoolean)
  {
    if (paramBoolean != n)
    {
      n = paramBoolean;
      requestLayout();
    }
  }
  
  public void setNestedScrollingEnabled(boolean paramBoolean)
  {
    z.a(paramBoolean);
  }
  
  public void setOnScrollChangeListener(b paramB)
  {
    B = paramB;
  }
  
  public void setSmoothScrollingEnabled(boolean paramBoolean)
  {
    o = paramBoolean;
  }
  
  public boolean shouldDelayChildPressedState()
  {
    return true;
  }
  
  public boolean startNestedScroll(int paramInt)
  {
    return c(paramInt, 0);
  }
  
  public void stopNestedScroll()
  {
    a(0);
  }
  
  static class a
    extends b
  {
    a() {}
    
    public void a(View paramView, c paramC)
    {
      super.a(paramView, paramC);
      paramView = (NestedScrollView)paramView;
      paramC.a(ScrollView.class.getName());
      if (paramView.isEnabled())
      {
        int i = paramView.getScrollRange();
        if (i > 0)
        {
          paramC.k(true);
          if (paramView.getScrollY() > 0) {
            paramC.a(8192);
          }
          if (paramView.getScrollY() < i) {
            paramC.a(4096);
          }
        }
      }
    }
    
    public boolean a(View paramView, int paramInt, Bundle paramBundle)
    {
      if (super.a(paramView, paramInt, paramBundle)) {
        return true;
      }
      paramView = (NestedScrollView)paramView;
      if (!paramView.isEnabled()) {
        return false;
      }
      if (paramInt != 4096)
      {
        if (paramInt != 8192) {
          return false;
        }
        paramInt = paramView.getHeight();
        i = paramView.getPaddingBottom();
        j = paramView.getPaddingTop();
        paramInt = Math.max(paramView.getScrollY() - (paramInt - i - j), 0);
        if (paramInt != paramView.getScrollY())
        {
          paramView.b(0, paramInt);
          return true;
        }
        return false;
      }
      paramInt = paramView.getHeight();
      int i = paramView.getPaddingBottom();
      int j = paramView.getPaddingTop();
      paramInt = Math.min(paramView.getScrollY() + (paramInt - i - j), paramView.getScrollRange());
      if (paramInt != paramView.getScrollY())
      {
        paramView.b(0, paramInt);
        return true;
      }
      return false;
    }
    
    public void b(View paramView, AccessibilityEvent paramAccessibilityEvent)
    {
      super.b(paramView, paramAccessibilityEvent);
      paramView = (NestedScrollView)paramView;
      paramAccessibilityEvent.setClassName(ScrollView.class.getName());
      boolean bool;
      if (paramView.getScrollRange() > 0) {
        bool = true;
      } else {
        bool = false;
      }
      paramAccessibilityEvent.setScrollable(bool);
      paramAccessibilityEvent.setScrollX(paramView.getScrollX());
      paramAccessibilityEvent.setScrollY(paramView.getScrollY());
      e.a(paramAccessibilityEvent, paramView.getScrollX());
      e.b(paramAccessibilityEvent, paramView.getScrollRange());
    }
  }
  
  public static abstract interface b
  {
    public abstract void a(NestedScrollView paramNestedScrollView, int paramInt1, int paramInt2, int paramInt3, int paramInt4);
  }
  
  static class c
    extends View.BaseSavedState
  {
    public static final Parcelable.Creator<c> CREATOR = new a();
    public int c;
    
    c(Parcel paramParcel)
    {
      super();
      c = paramParcel.readInt();
    }
    
    c(Parcelable paramParcelable)
    {
      super();
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("HorizontalScrollView.SavedState{");
      localStringBuilder.append(Integer.toHexString(System.identityHashCode(this)));
      localStringBuilder.append(" scrollPosition=");
      localStringBuilder.append(c);
      localStringBuilder.append("}");
      return localStringBuilder.toString();
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      super.writeToParcel(paramParcel, paramInt);
      paramParcel.writeInt(c);
    }
    
    static final class a
      implements Parcelable.Creator<NestedScrollView.c>
    {
      a() {}
      
      public NestedScrollView.c createFromParcel(Parcel paramParcel)
      {
        return new NestedScrollView.c(paramParcel);
      }
      
      public NestedScrollView.c[] newArray(int paramInt)
      {
        return new NestedScrollView.c[paramInt];
      }
    }
  }
}
