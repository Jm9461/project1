package g;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

abstract class a
  implements f
{
  protected final e a;
  protected final File b;
  private final OutputStream c;
  
  protected a(e paramE, File paramFile)
  {
    a = paramE;
    b = paramFile;
    c = a(paramFile);
  }
  
  private OutputStream a(File paramFile)
  {
    if (paramFile != null) {
      try
      {
        FileOutputStream localFileOutputStream = new FileOutputStream(paramFile);
        return localFileOutputStream;
      }
      catch (FileNotFoundException localFileNotFoundException)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("could not build OutputStream from this file");
        localStringBuilder.append(paramFile.getName());
        throw new RuntimeException(localStringBuilder.toString(), localFileNotFoundException);
      }
    }
    throw new RuntimeException("file is null !");
  }
  
  public void a()
  {
    a.stop();
  }
  
  public void b()
  {
    a.a().a(false);
  }
  
  public void c()
  {
    a.a().a(true);
    d();
  }
  
  public void d()
  {
    new Thread(new a()).start();
  }
  
  class a
    implements Runnable
  {
    a() {}
    
    public void run()
    {
      try
      {
        a.a(a.a(a.this));
        return;
      }
      catch (IOException localIOException)
      {
        new RuntimeException(localIOException);
      }
    }
  }
}
