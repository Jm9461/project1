package b.a.a;

import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnDismissListener;
import android.content.DialogInterface.OnKeyListener;
import android.content.DialogInterface.OnShowListener;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.Point;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.os.Build.VERSION;
import android.support.v7.widget.RecyclerView;
import android.text.method.LinkMovementMethod;
import android.text.method.PasswordTransformationMethod;
import android.view.Display;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.Window;
import android.view.WindowManager;
import android.view.WindowManager.LayoutParams;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.FrameLayout.LayoutParams;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.ScrollView;
import android.widget.TextView;
import com.afollestad.materialdialogs.internal.MDButton;
import com.afollestad.materialdialogs.internal.MDRootLayout;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Arrays;
import me.zhanghai.android.materialprogressbar.HorizontalProgressDrawable;
import me.zhanghai.android.materialprogressbar.IndeterminateCircularProgressDrawable;
import me.zhanghai.android.materialprogressbar.IndeterminateHorizontalProgressDrawable;

class d
{
  static int a(f.d paramD)
  {
    if (s != null) {
      return l.md_dialog_custom;
    }
    if ((l == null) && (X == null))
    {
      if (k0 > -2) {
        return l.md_dialog_progress;
      }
      if (i0)
      {
        if (B0) {
          return l.md_dialog_progress_indeterminate_horizontal;
        }
        return l.md_dialog_progress_indeterminate;
      }
      if (o0 != null)
      {
        if (w0 != null) {
          return l.md_dialog_input_check;
        }
        return l.md_dialog_input;
      }
      if (w0 != null) {
        return l.md_dialog_basic_check;
      }
      return l.md_dialog_basic;
    }
    if (w0 != null) {
      return l.md_dialog_list_check;
    }
    return l.md_dialog_list;
  }
  
  private static void a(ProgressBar paramProgressBar)
  {
    if ((Build.VERSION.SDK_INT < 18) && (paramProgressBar.isHardwareAccelerated()) && (paramProgressBar.getLayerType() != 1)) {
      paramProgressBar.setLayerType(1, null);
    }
  }
  
  static void a(f paramF)
  {
    f.d localD = e;
    paramF.setCancelable(L);
    paramF.setCanceledOnTouchOutside(M);
    if (g0 == 0) {
      g0 = b.a.a.r.a.a(a, g.md_background_color, b.a.a.r.a.e(paramF.getContext(), g.colorBackgroundFloating));
    }
    if (g0 != 0)
    {
      localObject1 = new GradientDrawable();
      ((GradientDrawable)localObject1).setCornerRadius(a.getResources().getDimension(i.md_bg_corner_radius));
      ((GradientDrawable)localObject1).setColor(g0);
      paramF.getWindow().setBackgroundDrawable((Drawable)localObject1);
    }
    if (!F0) {
      v = b.a.a.r.a.a(a, g.md_positive_color, v);
    }
    if (!G0) {
      x = b.a.a.r.a.a(a, g.md_neutral_color, x);
    }
    if (!H0) {
      w = b.a.a.r.a.a(a, g.md_negative_color, w);
    }
    if (!I0) {
      t = b.a.a.r.a.a(a, g.md_widget_color, t);
    }
    if (!C0)
    {
      i = b.a.a.r.a.e(paramF.getContext(), 16842806);
      i = b.a.a.r.a.a(a, g.md_title_color, i);
    }
    if (!D0)
    {
      i = b.a.a.r.a.e(paramF.getContext(), 16842808);
      j = b.a.a.r.a.a(a, g.md_content_color, i);
    }
    if (!E0) {
      h0 = b.a.a.r.a.a(a, g.md_item_color, j);
    }
    g = ((TextView)c.findViewById(k.md_title));
    f = ((ImageView)c.findViewById(k.md_icon));
    paramF.k = c.findViewById(k.md_titleFrame);
    h = ((TextView)c.findViewById(k.md_content));
    paramF.j = ((RecyclerView)c.findViewById(k.md_contentRecyclerView));
    q = ((CheckBox)c.findViewById(k.md_promptCheckbox));
    r = ((MDButton)c.findViewById(k.md_buttonDefaultPositive));
    s = ((MDButton)c.findViewById(k.md_buttonDefaultNeutral));
    t = ((MDButton)c.findViewById(k.md_buttonDefaultNegative));
    if ((o0 != null) && (m == null)) {
      m = a.getText(17039370);
    }
    Object localObject1 = r;
    if (m != null) {
      i = 0;
    } else {
      i = 8;
    }
    ((TextView)localObject1).setVisibility(i);
    localObject1 = s;
    if (n != null) {
      i = 0;
    } else {
      i = 8;
    }
    ((TextView)localObject1).setVisibility(i);
    localObject1 = t;
    if (o != null) {
      i = 0;
    } else {
      i = 8;
    }
    ((TextView)localObject1).setVisibility(i);
    r.setFocusable(true);
    s.setFocusable(true);
    t.setFocusable(true);
    if (p) {
      r.requestFocus();
    }
    if (q) {
      s.requestFocus();
    }
    if (r) {
      t.requestFocus();
    }
    if (U != null)
    {
      f.setVisibility(0);
      f.setImageDrawable(U);
    }
    else
    {
      localObject1 = b.a.a.r.a.g(a, g.md_icon);
      if (localObject1 != null)
      {
        f.setVisibility(0);
        f.setImageDrawable((Drawable)localObject1);
      }
      else
      {
        f.setVisibility(8);
      }
    }
    int j = W;
    int i = j;
    if (j == -1) {
      i = b.a.a.r.a.f(a, g.md_icon_max_size);
    }
    if ((V) || (b.a.a.r.a.d(a, g.md_icon_limit_icon_to_default_size))) {
      i = a.getResources().getDimensionPixelSize(i.md_icon_max_size);
    }
    if (i > -1)
    {
      f.setAdjustViewBounds(true);
      f.setMaxHeight(i);
      f.setMaxWidth(i);
      f.requestLayout();
    }
    if (!J0)
    {
      i = b.a.a.r.a.e(paramF.getContext(), g.md_divider);
      f0 = b.a.a.r.a.a(a, g.md_divider_color, i);
    }
    c.setDividerColor(f0);
    localObject1 = g;
    if (localObject1 != null)
    {
      paramF.a((TextView)localObject1, T);
      g.setTextColor(i);
      g.setGravity(c.a());
      if (Build.VERSION.SDK_INT >= 17) {
        g.setTextAlignment(c.b());
      }
      localObject1 = b;
      if (localObject1 == null)
      {
        paramF.k.setVisibility(8);
      }
      else
      {
        g.setText((CharSequence)localObject1);
        paramF.k.setVisibility(0);
      }
    }
    localObject1 = h;
    if (localObject1 != null)
    {
      ((TextView)localObject1).setMovementMethod(new LinkMovementMethod());
      paramF.a(h, S);
      h.setLineSpacing(0.0F, N);
      localObject1 = y;
      if (localObject1 == null) {
        h.setLinkTextColor(b.a.a.r.a.e(paramF.getContext(), 16842806));
      } else {
        h.setLinkTextColor((ColorStateList)localObject1);
      }
      h.setTextColor(j);
      h.setGravity(d.a());
      if (Build.VERSION.SDK_INT >= 17) {
        h.setTextAlignment(d.b());
      }
      localObject1 = k;
      if (localObject1 != null)
      {
        h.setText((CharSequence)localObject1);
        h.setVisibility(0);
      }
      else
      {
        h.setVisibility(8);
      }
    }
    localObject1 = q;
    if (localObject1 != null)
    {
      ((CheckBox)localObject1).setText(w0);
      q.setChecked(x0);
      q.setOnCheckedChangeListener(y0);
      paramF.a(q, S);
      q.setTextColor(j);
      com.afollestad.materialdialogs.internal.c.a(q, t);
    }
    c.setButtonGravity(g);
    c.setButtonStackedGravity(e);
    c.setStackingBehavior(d0);
    boolean bool1;
    if (Build.VERSION.SDK_INT >= 14)
    {
      boolean bool2 = b.a.a.r.a.a(a, 16843660, true);
      bool1 = bool2;
      if (bool2) {
        bool1 = b.a.a.r.a.a(a, g.textAllCaps, true);
      }
    }
    else
    {
      bool1 = b.a.a.r.a.a(a, g.textAllCaps, true);
    }
    localObject1 = r;
    paramF.a((TextView)localObject1, T);
    ((MDButton)localObject1).setAllCapsCompat(bool1);
    ((TextView)localObject1).setText(m);
    ((TextView)localObject1).setTextColor(v);
    r.setStackedSelector(paramF.a(b.c, true));
    r.setDefaultSelector(paramF.a(b.c, false));
    r.setTag(b.c);
    r.setOnClickListener(paramF);
    localObject1 = t;
    paramF.a((TextView)localObject1, T);
    ((MDButton)localObject1).setAllCapsCompat(bool1);
    ((TextView)localObject1).setText(o);
    ((TextView)localObject1).setTextColor(w);
    t.setStackedSelector(paramF.a(b.e, true));
    t.setDefaultSelector(paramF.a(b.e, false));
    t.setTag(b.e);
    t.setOnClickListener(paramF);
    localObject1 = s;
    paramF.a((TextView)localObject1, T);
    ((MDButton)localObject1).setAllCapsCompat(bool1);
    ((TextView)localObject1).setText(n);
    ((TextView)localObject1).setTextColor(x);
    s.setStackedSelector(paramF.a(b.d, true));
    s.setDefaultSelector(paramF.a(b.d, false));
    s.setTag(b.d);
    s.setOnClickListener(paramF);
    if (H != null) {
      v = new ArrayList();
    }
    if (paramF.j != null)
    {
      localObject1 = X;
      if (localObject1 == null)
      {
        if (G != null)
        {
          u = f.l.d;
        }
        else if (H != null)
        {
          u = f.l.e;
          localObject1 = P;
          if (localObject1 != null)
          {
            v = new ArrayList(Arrays.asList((Object[])localObject1));
            P = null;
          }
        }
        else
        {
          u = f.l.c;
        }
        X = new a(paramF, f.l.a(u));
      }
      else if ((localObject1 instanceof com.afollestad.materialdialogs.internal.b))
      {
        ((com.afollestad.materialdialogs.internal.b)localObject1).a(paramF);
      }
    }
    c(paramF);
    b(paramF);
    if (s != null)
    {
      ((MDRootLayout)c.findViewById(k.md_root)).a();
      FrameLayout localFrameLayout = (FrameLayout)c.findViewById(k.md_customViewFrame);
      l = localFrameLayout;
      localObject1 = s;
      if (((View)localObject1).getParent() != null) {
        ((ViewGroup)((View)localObject1).getParent()).removeView((View)localObject1);
      }
      if (e0)
      {
        Resources localResources = paramF.getContext().getResources();
        i = localResources.getDimensionPixelSize(i.md_dialog_frame_margin);
        localObject2 = new ScrollView(paramF.getContext());
        j = localResources.getDimensionPixelSize(i.md_content_padding_top);
        k = localResources.getDimensionPixelSize(i.md_content_padding_bottom);
        ((ScrollView)localObject2).setClipToPadding(false);
        if ((localObject1 instanceof EditText))
        {
          ((ScrollView)localObject2).setPadding(i, j, i, k);
        }
        else
        {
          ((ScrollView)localObject2).setPadding(0, j, 0, k);
          ((View)localObject1).setPadding(i, 0, i, 0);
        }
        ((ScrollView)localObject2).addView((View)localObject1, new FrameLayout.LayoutParams(-1, -2));
        localObject1 = localObject2;
      }
      localFrameLayout.addView((View)localObject1, new ViewGroup.LayoutParams(-1, -2));
    }
    localObject1 = c0;
    if (localObject1 != null) {
      paramF.setOnShowListener((DialogInterface.OnShowListener)localObject1);
    }
    localObject1 = a0;
    if (localObject1 != null) {
      paramF.setOnCancelListener((DialogInterface.OnCancelListener)localObject1);
    }
    localObject1 = Z;
    if (localObject1 != null) {
      paramF.setOnDismissListener((DialogInterface.OnDismissListener)localObject1);
    }
    localObject1 = b0;
    if (localObject1 != null) {
      paramF.setOnKeyListener((DialogInterface.OnKeyListener)localObject1);
    }
    paramF.a();
    paramF.h();
    paramF.a(c);
    paramF.b();
    localObject1 = paramF.getWindow().getWindowManager().getDefaultDisplay();
    Object localObject2 = new Point();
    ((Display)localObject1).getSize((Point)localObject2);
    i = x;
    j = y;
    int k = a.getResources().getDimensionPixelSize(i.md_dialog_vertical_margin);
    int m = a.getResources().getDimensionPixelSize(i.md_dialog_horizontal_margin);
    int n = a.getResources().getDimensionPixelSize(i.md_dialog_max_width);
    c.setMaxHeight(j - k * 2);
    localObject1 = new WindowManager.LayoutParams();
    ((WindowManager.LayoutParams)localObject1).copyFrom(paramF.getWindow().getAttributes());
    width = Math.min(n, i - m * 2);
    paramF.getWindow().setAttributes((WindowManager.LayoutParams)localObject1);
  }
  
  static int b(f.d paramD)
  {
    Object localObject = a;
    int i = g.md_dark_theme;
    if (K == p.d) {
      bool = true;
    } else {
      bool = false;
    }
    boolean bool = b.a.a.r.a.a((Context)localObject, i, bool);
    if (bool) {
      localObject = p.d;
    } else {
      localObject = p.c;
    }
    K = ((p)localObject);
    if (bool) {
      return m.MD_Dark;
    }
    return m.MD_Light;
  }
  
  private static void b(f paramF)
  {
    f.d localD = e;
    paramF.i = ((EditText)c.findViewById(16908297));
    Object localObject = paramF.i;
    if (localObject == null) {
      return;
    }
    paramF.a((TextView)localObject, S);
    localObject = m0;
    if (localObject != null) {
      paramF.i.setText((CharSequence)localObject);
    }
    paramF.i();
    paramF.i.setHint(n0);
    paramF.i.setSingleLine();
    paramF.i.setTextColor(j);
    paramF.i.setHintTextColor(b.a.a.r.a.a(j, 0.3F));
    com.afollestad.materialdialogs.internal.c.b(paramF.i, e.t);
    int i = q0;
    if (i != -1)
    {
      paramF.i.setInputType(i);
      i = q0;
      if ((i != 144) && ((i & 0x80) == 128)) {
        paramF.i.setTransformationMethod(PasswordTransformationMethod.getInstance());
      }
    }
    p = ((TextView)c.findViewById(k.md_minMax));
    if ((s0 <= 0) && (t0 <= -1))
    {
      p.setVisibility(8);
      p = null;
      return;
    }
    paramF.a(paramF.i.getText().toString().length(), p0 ^ true);
  }
  
  private static void c(f paramF)
  {
    Object localObject1 = e;
    if ((i0) || (k0 > -2))
    {
      m = ((ProgressBar)c.findViewById(16908301));
      Object localObject2 = m;
      if (localObject2 == null) {
        return;
      }
      if (Build.VERSION.SDK_INT >= 14)
      {
        if (i0)
        {
          if (B0)
          {
            localObject2 = new IndeterminateHorizontalProgressDrawable(((f.d)localObject1).b());
            ((IndeterminateHorizontalProgressDrawable)localObject2).setTint(t);
            m.setProgressDrawable((Drawable)localObject2);
            m.setIndeterminateDrawable((Drawable)localObject2);
          }
          else
          {
            localObject2 = new IndeterminateCircularProgressDrawable(((f.d)localObject1).b());
            ((IndeterminateCircularProgressDrawable)localObject2).setTint(t);
            m.setProgressDrawable((Drawable)localObject2);
            m.setIndeterminateDrawable((Drawable)localObject2);
          }
        }
        else
        {
          localObject2 = new HorizontalProgressDrawable(((f.d)localObject1).b());
          ((HorizontalProgressDrawable)localObject2).setTint(t);
          m.setProgressDrawable((Drawable)localObject2);
          m.setIndeterminateDrawable((Drawable)localObject2);
        }
      }
      else {
        com.afollestad.materialdialogs.internal.c.a((ProgressBar)localObject2, t);
      }
      if ((!i0) || (B0))
      {
        localObject2 = m;
        boolean bool;
        if ((i0) && (B0)) {
          bool = true;
        } else {
          bool = false;
        }
        ((ProgressBar)localObject2).setIndeterminate(bool);
        m.setProgress(0);
        m.setMax(l0);
        n = ((TextView)c.findViewById(k.md_label));
        localObject2 = n;
        if (localObject2 != null)
        {
          ((TextView)localObject2).setTextColor(j);
          paramF.a(n, T);
          n.setText(A0.format(0L));
        }
        o = ((TextView)c.findViewById(k.md_minMax));
        localObject2 = o;
        if (localObject2 != null)
        {
          ((TextView)localObject2).setTextColor(j);
          paramF.a(o, S);
          if (j0)
          {
            o.setVisibility(0);
            o.setText(String.format(z0, new Object[] { Integer.valueOf(0), Integer.valueOf(l0) }));
            localObject1 = (ViewGroup.MarginLayoutParams)m.getLayoutParams();
            leftMargin = 0;
            rightMargin = 0;
          }
          else
          {
            o.setVisibility(8);
          }
        }
        else
        {
          j0 = false;
        }
      }
    }
    paramF = m;
    if (paramF != null) {
      a(paramF);
    }
  }
}
