package b.f.a;

import android.graphics.Canvas;
import android.graphics.DashPathEffect;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.PathEffect;
import android.graphics.PathMeasure;
import android.support.v4.view.u;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.Interpolator;
import b.f.a.g.a.b;
import java.text.ParseException;

public class a
  extends View
{
  private int c;
  private int d;
  private int e;
  private int f;
  private int g;
  private int h;
  private int i;
  private b.f.a.d.a j;
  private String k;
  private c l;
  private Paint m;
  private Paint n;
  private int o;
  private long p;
  private int q;
  private int r;
  private Interpolator s;
  private b.f.a.f.a t;
  
  a(ViewGroup paramViewGroup, ViewGroup.LayoutParams paramLayoutParams, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, b.f.a.d.a paramA, String paramString)
  {
    super(paramViewGroup.getContext());
    c = paramInt1;
    d = paramInt2;
    e = paramInt3;
    h = paramInt6;
    i = paramInt7;
    j = paramA;
    f = paramInt4;
    g = paramInt5;
    k = paramString;
    g();
    paramViewGroup.addView(this, paramLayoutParams);
  }
  
  private PathEffect a(float paramFloat)
  {
    return new DashPathEffect(new float[] { paramFloat, l.b }, 0.0F);
  }
  
  private void a(int paramInt)
  {
    if (o == paramInt) {
      return;
    }
    o = paramInt;
    b.f.a.f.a localA = t;
    if (localA != null) {
      localA.a(paramInt);
    }
  }
  
  private boolean b(long paramLong)
  {
    return paramLong < h + i;
  }
  
  private void c()
  {
    b.f.a.g.b localB = getPathParser();
    l = new c();
    try
    {
      l.a = localB.a(k);
    }
    catch (ParseException localParseException)
    {
      l.a = new Path();
    }
    PathMeasure localPathMeasure = new PathMeasure(l.a, true);
    for (;;)
    {
      c localC = l;
      b = Math.max(b, localPathMeasure.getLength());
      if (!localPathMeasure.nextContour()) {
        return;
      }
    }
  }
  
  private void d()
  {
    if ((f > 0) && (g > 0)) {
      return;
    }
    throw new IllegalArgumentException("You must provide the original image dimensions in order map the coordinates properly.");
  }
  
  private void e()
  {
    if (l != null) {
      return;
    }
    throw new IllegalArgumentException("You must provide a not empty path in order to draw the view properly.");
  }
  
  private void f()
  {
    d();
    e();
  }
  
  private void g()
  {
    o = 0;
    h();
    i();
    s = new DecelerateInterpolator();
    setLayerType(1, null);
  }
  
  private b.f.a.g.b getPathParser()
  {
    a.b localB = new a.b();
    localB.b(f);
    localB.a(g);
    localB.d(q);
    localB.c(r);
    return localB.a();
  }
  
  private void h()
  {
    m = new Paint();
    m.setStyle(Paint.Style.STROKE);
    m.setAntiAlias(true);
    m.setStrokeWidth(e);
    m.setColor(c);
  }
  
  private void i()
  {
    n = new Paint();
    n.setAntiAlias(true);
    n.setStyle(Paint.Style.FILL);
    n.setColor(d);
  }
  
  public boolean a()
  {
    return (o != 0) && (l != null);
  }
  
  public boolean a(long paramLong)
  {
    return paramLong > h;
  }
  
  public void b()
  {
    f();
    p = System.currentTimeMillis();
    a(1);
    u.B(this);
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    if (!a()) {
      return;
    }
    long l1 = System.currentTimeMillis() - p;
    float f1 = b.f.a.h.a.a(0.0F, 1.0F, (float)l1 * 1.0F / h);
    f1 = s.getInterpolation(f1);
    float f2 = l.b;
    m.setPathEffect(a(f1 * f2));
    paramCanvas.drawPath(l.a, m);
    if (a(l1))
    {
      if (o < 2) {
        a(2);
      }
      f1 = b.f.a.h.a.a(0.0F, 1.0F, (float)(l1 - h) * 1.0F / i);
      j.a(paramCanvas, f1, this);
      paramCanvas.drawPath(l.a, n);
    }
    if (b(l1))
    {
      u.B(this);
      return;
    }
    a(3);
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    q = paramInt1;
    r = paramInt2;
    c();
  }
  
  public void setClippingTransform(b.f.a.d.a paramA)
  {
    if (paramA == null) {
      paramA = new b.f.a.d.b();
    }
    j = paramA;
  }
  
  public void setFillColor(int paramInt)
  {
    d = paramInt;
  }
  
  public void setFillDuration(int paramInt)
  {
    i = paramInt;
  }
  
  public void setOnStateChangeListener(b.f.a.f.a paramA)
  {
    t = paramA;
  }
  
  public void setStrokeColor(int paramInt)
  {
    c = paramInt;
  }
  
  public void setStrokeDrawingDuration(int paramInt)
  {
    h = paramInt;
  }
  
  public void setStrokeWidth(int paramInt)
  {
    e = paramInt;
  }
  
  public void setSvgPath(String paramString)
  {
    if ((paramString != null) && (paramString.length() != 0))
    {
      k = paramString;
      c();
      return;
    }
    throw new IllegalArgumentException("You must provide a not empty path in order to draw the view properly.");
  }
}
