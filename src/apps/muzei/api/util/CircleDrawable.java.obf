package b.j.a.e;

import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Path.Direction;
import android.graphics.PointF;
import android.graphics.RadialGradient;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.Animatable;
import android.graphics.drawable.Drawable;
import android.os.SystemClock;

public class d
  extends Drawable
  implements Animatable
{
  private boolean c;
  private Paint d;
  private Paint e;
  private RadialGradient f;
  private RadialGradient g;
  private Matrix h;
  private int i;
  private RectF j;
  private Path k;
  private int l;
  private int m;
  private float n;
  private PointF o;
  private float p;
  private int q;
  private int r;
  private int s;
  private float t;
  private int u;
  private long v;
  private boolean w;
  private int x;
  private final Runnable y;
  
  private int a(float paramFloat1, float paramFloat2)
  {
    float f1;
    if (paramFloat1 < j.centerX()) {
      f1 = j.right;
    } else {
      f1 = j.left;
    }
    float f2;
    if (paramFloat2 < j.centerY()) {
      f2 = j.bottom;
    } else {
      f2 = j.top;
    }
    return (int)Math.round(Math.sqrt(Math.pow(f1 - paramFloat1, 2.0D) + Math.pow(f2 - paramFloat2, 2.0D)));
  }
  
  private void a(int paramInt)
  {
    if (x != paramInt)
    {
      x = paramInt;
      paramInt = x;
      if (paramInt != 0)
      {
        if (paramInt != 2)
        {
          start();
          return;
        }
        stop();
        return;
      }
      stop();
    }
  }
  
  private void a(Canvas paramCanvas)
  {
    if (x != 0)
    {
      if (n > 0.0F)
      {
        e.setColor(m);
        e.setAlpha(Math.round(i * n));
        paramCanvas.drawPath(k, e);
      }
      if (p > 0.0F)
      {
        float f1 = t;
        if (f1 > 0.0F)
        {
          d.setAlpha(Math.round(i * f1));
          d.setShader(f);
          paramCanvas.drawPath(k, d);
        }
      }
    }
  }
  
  private boolean a(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    Object localObject = o;
    if ((x == paramFloat1) && (y == paramFloat2) && (p == paramFloat3)) {
      return false;
    }
    o.set(paramFloat1, paramFloat2);
    p = paramFloat3;
    paramFloat3 = p / 16.0F;
    h.reset();
    h.postTranslate(paramFloat1, paramFloat2);
    h.postScale(paramFloat3, paramFloat3, paramFloat1, paramFloat2);
    f.setLocalMatrix(h);
    localObject = g;
    if (localObject != null) {
      ((RadialGradient)localObject).setLocalMatrix(h);
    }
    return true;
  }
  
  private void b(Canvas paramCanvas)
  {
    int i1 = x;
    if (i1 != 0)
    {
      if (i1 == 4)
      {
        if (p == 0.0F)
        {
          e.setColor(s);
          paramCanvas.drawPath(k, e);
          return;
        }
        d.setShader(g);
        paramCanvas.drawPath(k, d);
        return;
      }
      if (p > 0.0F)
      {
        d.setShader(f);
        paramCanvas.drawPath(k, d);
      }
    }
  }
  
  private void c()
  {
    v = SystemClock.uptimeMillis();
  }
  
  public void a()
  {
    a(0);
  }
  
  public long b()
  {
    int i1 = u;
    if (i1 != 0)
    {
      if (i1 != 1)
      {
        if (i1 != 2) {
          return -1L;
        }
        i1 = x;
        if (i1 == 3) {
          return Math.max(l, r) * 2 - (SystemClock.uptimeMillis() - v);
        }
        if (i1 == 4) {
          return Math.max(l, r) - (SystemClock.uptimeMillis() - v);
        }
      }
      else if (x == 3)
      {
        return Math.max(l, r) - (SystemClock.uptimeMillis() - v);
      }
      return -1L;
    }
    return -1L;
  }
  
  public void draw(Canvas paramCanvas)
  {
    int i1 = q;
    if ((i1 != -1) && (i1 != 0))
    {
      if (i1 != 1) {
        return;
      }
      b(paramCanvas);
      return;
    }
    a(paramCanvas);
  }
  
  public int getOpacity()
  {
    return -3;
  }
  
  public boolean isRunning()
  {
    return c;
  }
  
  public boolean isStateful()
  {
    return true;
  }
  
  protected void onBoundsChange(Rect paramRect)
  {
    j.set(left, top, right, bottom);
    k.reset();
    k.addRect(j, Path.Direction.CW);
  }
  
  protected boolean onStateChange(int[] paramArrayOfInt)
  {
    boolean bool = b.j.a.f.d.a(paramArrayOfInt, 16842919);
    if (w != bool)
    {
      w = bool;
      if (w)
      {
        paramArrayOfInt = getBounds();
        i1 = x;
        if ((i1 != 0) && (i1 != 4))
        {
          if (q == 0) {
            a(paramArrayOfInt.exactCenterX(), paramArrayOfInt.exactCenterY(), p);
          }
        }
        else
        {
          i1 = q;
          if ((i1 == 1) || (i1 == -1)) {
            a(paramArrayOfInt.exactCenterX(), paramArrayOfInt.exactCenterY());
          }
          a(paramArrayOfInt.exactCenterX(), paramArrayOfInt.exactCenterY(), 0.0F);
          a(1);
        }
        return true;
      }
      int i1 = x;
      if (i1 != 0)
      {
        if (i1 == 2)
        {
          i1 = q;
          if ((i1 == 1) || (i1 == -1))
          {
            paramArrayOfInt = o;
            a(x, y, 0.0F);
          }
          a(4);
          return true;
        }
        a(3);
      }
      return true;
    }
    return false;
  }
  
  public void scheduleSelf(Runnable paramRunnable, long paramLong)
  {
    c = true;
    super.scheduleSelf(paramRunnable, paramLong);
  }
  
  public void setAlpha(int paramInt)
  {
    i = paramInt;
  }
  
  public void setColorFilter(ColorFilter paramColorFilter)
  {
    e.setColorFilter(paramColorFilter);
    d.setColorFilter(paramColorFilter);
  }
  
  public void start()
  {
    if (isRunning()) {
      return;
    }
    c();
    scheduleSelf(y, SystemClock.uptimeMillis() + 16L);
    invalidateSelf();
  }
  
  public void stop()
  {
    if (!isRunning()) {
      return;
    }
    c = false;
    unscheduleSelf(y);
    invalidateSelf();
  }
}
