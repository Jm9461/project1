package b.j.a.e;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Path.Direction;
import android.graphics.PointF;
import android.graphics.RadialGradient;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Shader.TileMode;
import android.graphics.drawable.Animatable;
import android.graphics.drawable.Drawable;
import android.os.SystemClock;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.AnimationUtils;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.Interpolator;
import b.j.a.f.a;
import b.j.a.f.b;

public class c
  extends Drawable
  implements Animatable, View.OnTouchListener
{
  private static final float[] F = { 0.0F, 0.99F, 1.0F };
  private long A;
  private long B;
  private int C;
  private int D = 0;
  private final Runnable E = new a();
  private boolean c = false;
  private Paint d;
  private Paint e;
  private c f;
  private RadialGradient g;
  private RadialGradient h;
  private Matrix i;
  private int j = 255;
  private Drawable k;
  private RectF l;
  private Path m;
  private int n;
  private int o;
  private float p;
  private PointF q;
  private float r;
  private int s;
  private int t;
  private int u;
  private int v;
  private float w;
  private int x;
  private Interpolator y;
  private Interpolator z;
  
  private c(Drawable paramDrawable, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, Interpolator paramInterpolator1, Interpolator paramInterpolator2, int paramInt9, int paramInt10, int paramInt11, int paramInt12, int paramInt13, int paramInt14, int paramInt15, int paramInt16, int paramInt17)
  {
    a(paramDrawable);
    n = paramInt1;
    o = paramInt2;
    s = paramInt3;
    a(paramInt4);
    C = paramInt5;
    t = paramInt6;
    u = paramInt7;
    v = paramInt8;
    if ((s == 0) && (t <= 0)) {
      s = -1;
    }
    y = paramInterpolator1;
    z = paramInterpolator2;
    a(paramInt9, paramInt10, paramInt11, paramInt12, paramInt13, paramInt14, paramInt15, paramInt16, paramInt17);
    e = new Paint(1);
    e.setStyle(Paint.Style.FILL);
    d = new Paint(1);
    d.setStyle(Paint.Style.FILL);
    m = new Path();
    l = new RectF();
    q = new PointF();
    i = new Matrix();
    paramInt1 = v;
    paramDrawable = F;
    paramInterpolator1 = Shader.TileMode.CLAMP;
    g = new RadialGradient(0.0F, 0.0F, 16.0F, new int[] { paramInt1, paramInt1, 0 }, paramDrawable, paramInterpolator1);
    if (s == 1)
    {
      paramInt1 = a.a(v, 0.0F);
      paramInt2 = v;
      paramDrawable = F;
      paramInterpolator1 = Shader.TileMode.CLAMP;
      h = new RadialGradient(0.0F, 0.0F, 16.0F, new int[] { 0, paramInt1, paramInt2 }, paramDrawable, paramInterpolator1);
    }
  }
  
  private int a(float paramFloat1, float paramFloat2)
  {
    float f1;
    if (paramFloat1 < l.centerX()) {
      f1 = l.right;
    } else {
      f1 = l.left;
    }
    float f2;
    if (paramFloat2 < l.centerY()) {
      f2 = l.bottom;
    } else {
      f2 = l.top;
    }
    return (int)Math.round(Math.sqrt(Math.pow(f1 - paramFloat1, 2.0D) + Math.pow(f2 - paramFloat2, 2.0D)));
  }
  
  private void a(Canvas paramCanvas)
  {
    if (D != 0)
    {
      if (p > 0.0F)
      {
        e.setColor(o);
        e.setAlpha(Math.round(j * p));
        paramCanvas.drawPath(m, e);
      }
      if (r > 0.0F)
      {
        float f1 = w;
        if (f1 > 0.0F)
        {
          d.setAlpha(Math.round(j * f1));
          d.setShader(g);
          paramCanvas.drawPath(m, d);
        }
      }
    }
  }
  
  private boolean a(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    Object localObject = q;
    if ((x == paramFloat1) && (y == paramFloat2) && (r == paramFloat3)) {
      return false;
    }
    q.set(paramFloat1, paramFloat2);
    r = paramFloat3;
    paramFloat3 = r / 16.0F;
    i.reset();
    i.postTranslate(paramFloat1, paramFloat2);
    i.postScale(paramFloat3, paramFloat3, paramFloat1, paramFloat2);
    g.setLocalMatrix(i);
    localObject = h;
    if (localObject != null) {
      ((RadialGradient)localObject).setLocalMatrix(i);
    }
    return true;
  }
  
  private void b(int paramInt)
  {
    int i1 = D;
    if (i1 != paramInt)
    {
      if ((i1 == 0) && (paramInt != 1)) {
        return;
      }
      D = paramInt;
      paramInt = D;
      if ((paramInt != 0) && (paramInt != 2))
      {
        start();
        return;
      }
      stop();
    }
  }
  
  private void b(Canvas paramCanvas)
  {
    int i1 = D;
    if (i1 != 0)
    {
      if (i1 == 4)
      {
        if (r == 0.0F)
        {
          e.setColor(v);
          paramCanvas.drawPath(m, e);
          return;
        }
        d.setShader(h);
        paramCanvas.drawPath(m, d);
        return;
      }
      if (r > 0.0F)
      {
        d.setShader(g);
        paramCanvas.drawPath(m, d);
      }
    }
  }
  
  private void d()
  {
    A = SystemClock.uptimeMillis();
  }
  
  private void e()
  {
    int i2 = D;
    int i1 = 4;
    float f1;
    float f2;
    PointF localPointF;
    if (i2 != 4)
    {
      f1 = Math.min(1.0F, (float)(SystemClock.uptimeMillis() - A) / n);
      p = (y.getInterpolation(f1) * Color.alpha(o) / 255.0F);
      f2 = Math.min(1.0F, (float)(SystemClock.uptimeMillis() - A) / u);
      w = y.getInterpolation(f2);
      localPointF = q;
      a(x, y, t * y.getInterpolation(f2));
      if ((f1 == 1.0F) && (f2 == 1.0F))
      {
        A = SystemClock.uptimeMillis();
        if (D == 1) {
          i1 = 2;
        }
        b(i1);
      }
    }
    else
    {
      f1 = Math.min(1.0F, (float)(SystemClock.uptimeMillis() - A) / n);
      p = ((1.0F - z.getInterpolation(f1)) * Color.alpha(o) / 255.0F);
      f2 = Math.min(1.0F, (float)(SystemClock.uptimeMillis() - A) / u);
      w = (1.0F - z.getInterpolation(f2));
      localPointF = q;
      a(x, y, t * (z.getInterpolation(f2) * 0.5F + 1.0F));
      if ((f1 == 1.0F) && (f2 == 1.0F)) {
        b(0);
      }
    }
    if (isRunning()) {
      scheduleSelf(E, SystemClock.uptimeMillis() + 16L);
    }
    invalidateSelf();
  }
  
  private void f()
  {
    float f1 = Math.min(1.0F, (float)(SystemClock.uptimeMillis() - A) / u);
    PointF localPointF;
    if (D != 4)
    {
      localPointF = q;
      a(x, y, t * y.getInterpolation(f1));
      if (f1 == 1.0F)
      {
        A = SystemClock.uptimeMillis();
        if (D == 1)
        {
          b(2);
        }
        else
        {
          localPointF = q;
          a(x, y, 0.0F);
          b(4);
        }
      }
    }
    else
    {
      localPointF = q;
      a(x, y, t * z.getInterpolation(f1));
      if (f1 == 1.0F) {
        b(0);
      }
    }
    if (isRunning()) {
      scheduleSelf(E, SystemClock.uptimeMillis() + 16L);
    }
    invalidateSelf();
  }
  
  public void a()
  {
    b(0);
  }
  
  public void a(int paramInt)
  {
    x = paramInt;
  }
  
  public void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, int paramInt9)
  {
    f = new c(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8, paramInt9);
  }
  
  public void a(Drawable paramDrawable)
  {
    k = paramDrawable;
    paramDrawable = k;
    if (paramDrawable != null) {
      paramDrawable.setBounds(getBounds());
    }
  }
  
  public Drawable b()
  {
    return k;
  }
  
  public long c()
  {
    int i1 = x;
    if (i1 != 0)
    {
      if (i1 != 1)
      {
        if (i1 != 2) {
          return -1L;
        }
        i1 = D;
        if (i1 == 3) {
          return Math.max(n, u) * 2 - (SystemClock.uptimeMillis() - A);
        }
        if (i1 == 4) {
          return Math.max(n, u) - (SystemClock.uptimeMillis() - A);
        }
      }
      else if (D == 3)
      {
        return Math.max(n, u) - (SystemClock.uptimeMillis() - A);
      }
      return -1L;
    }
    return -1L;
  }
  
  public void draw(Canvas paramCanvas)
  {
    Drawable localDrawable = k;
    if (localDrawable != null) {
      localDrawable.draw(paramCanvas);
    }
    int i1 = s;
    if ((i1 != -1) && (i1 != 0))
    {
      if (i1 != 1) {
        return;
      }
      b(paramCanvas);
      return;
    }
    a(paramCanvas);
  }
  
  public int getOpacity()
  {
    return -3;
  }
  
  public boolean isRunning()
  {
    int i1 = D;
    return (i1 != 0) && (i1 != 2) && (c);
  }
  
  public boolean isStateful()
  {
    Drawable localDrawable = k;
    return (localDrawable != null) && (localDrawable.isStateful());
  }
  
  protected void onBoundsChange(Rect paramRect)
  {
    Object localObject = k;
    if (localObject != null) {
      ((Drawable)localObject).setBounds(paramRect);
    }
    localObject = l;
    int i1 = left;
    c localC = f;
    ((RectF)localObject).set(i1 + c, top + d, right - e, bottom - f);
    m.reset();
    paramRect = f;
    i1 = a;
    if (i1 != 0)
    {
      if (i1 != 1) {
        return;
      }
      m.addOval(l, Path.Direction.CW);
      return;
    }
    m.addRoundRect(l, b, Path.Direction.CW);
  }
  
  protected boolean onStateChange(int[] paramArrayOfInt)
  {
    Drawable localDrawable = k;
    return (localDrawable != null) && (localDrawable.setState(paramArrayOfInt));
  }
  
  public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getAction();
    if (i1 != 0)
    {
      if (i1 != 1)
      {
        if (i1 == 2) {
          break label145;
        }
        if (i1 != 3) {
          return true;
        }
      }
      else if ((B > 0L) && (D == 0))
      {
        i1 = s;
        if ((i1 == 1) || (i1 == -1)) {
          t = a(paramMotionEvent.getX(), paramMotionEvent.getY());
        }
        b(1);
      }
      B = 0L;
      i1 = D;
      if (i1 == 0) {
        break label280;
      }
      if (i1 == 2)
      {
        i1 = s;
        if ((i1 == 1) || (i1 == -1))
        {
          paramView = q;
          a(x, y, 0.0F);
        }
        b(4);
        return true;
      }
      b(3);
      return true;
    }
    label145:
    i1 = D;
    if ((i1 != 0) && (i1 != 4))
    {
      if ((s == 0) && (a(paramMotionEvent.getX(), paramMotionEvent.getY(), r)))
      {
        invalidateSelf();
        return true;
      }
    }
    else
    {
      long l1 = SystemClock.uptimeMillis();
      if (B == 0L) {
        B = l1;
      }
      a(paramMotionEvent.getX(), paramMotionEvent.getY(), 0.0F);
      if (B <= l1 - C)
      {
        i1 = s;
        if ((i1 == 1) || (i1 == -1)) {
          t = a(paramMotionEvent.getX(), paramMotionEvent.getY());
        }
        b(1);
      }
    }
    label280:
    return true;
  }
  
  public void scheduleSelf(Runnable paramRunnable, long paramLong)
  {
    c = true;
    super.scheduleSelf(paramRunnable, paramLong);
  }
  
  public void setAlpha(int paramInt)
  {
    j = paramInt;
    Drawable localDrawable = k;
    if (localDrawable != null) {
      localDrawable.setAlpha(paramInt);
    }
  }
  
  public void setColorFilter(ColorFilter paramColorFilter)
  {
    Drawable localDrawable = k;
    if (localDrawable != null) {
      localDrawable.setColorFilter(paramColorFilter);
    }
  }
  
  public void start()
  {
    if (isRunning()) {
      return;
    }
    d();
    scheduleSelf(E, SystemClock.uptimeMillis() + 16L);
    invalidateSelf();
  }
  
  public void stop()
  {
    c = false;
    unscheduleSelf(E);
    invalidateSelf();
  }
  
  class a
    implements Runnable
  {
    a() {}
    
    public void run()
    {
      int i = c.a(c.this);
      if ((i != -1) && (i != 0))
      {
        if (i != 1) {
          return;
        }
        c.c(c.this);
        return;
      }
      c.b(c.this);
    }
  }
  
  public static class b
  {
    private Drawable a;
    private int b = 200;
    private int c;
    private int d;
    private int e;
    private int f = 400;
    private int g;
    private int h;
    private int i;
    private Interpolator j;
    private Interpolator k;
    private int l;
    private int m;
    private int n;
    private int o;
    private int p;
    private int q;
    private int r;
    private int s;
    private int t;
    
    public b(Context paramContext, int paramInt)
    {
      this(paramContext, null, 0, paramInt);
    }
    
    public b(Context paramContext, AttributeSet paramAttributeSet, int paramInt1, int paramInt2)
    {
      paramAttributeSet = paramContext.obtainStyledAttributes(paramAttributeSet, b.j.a.c.RippleDrawable, paramInt1, paramInt2);
      b(paramAttributeSet.getColor(b.j.a.c.RippleDrawable_rd_backgroundColor, 0));
      a(paramAttributeSet.getInteger(b.j.a.c.RippleDrawable_rd_backgroundAnimDuration, paramContext.getResources().getInteger(17694721)));
      p(paramAttributeSet.getInteger(b.j.a.c.RippleDrawable_rd_rippleType, 0));
      g(paramAttributeSet.getInteger(b.j.a.c.RippleDrawable_rd_delayClick, 0));
      h(paramAttributeSet.getInteger(b.j.a.c.RippleDrawable_rd_delayRipple, 0));
      paramInt1 = b.a(paramAttributeSet, b.j.a.c.RippleDrawable_rd_maxRippleRadius);
      if ((paramInt1 >= 16) && (paramInt1 <= 31)) {
        k(paramAttributeSet.getInteger(b.j.a.c.RippleDrawable_rd_maxRippleRadius, -1));
      } else {
        k(paramAttributeSet.getDimensionPixelSize(b.j.a.c.RippleDrawable_rd_maxRippleRadius, b.d(paramContext, 48)));
      }
      o(paramAttributeSet.getColor(b.j.a.c.RippleDrawable_rd_rippleColor, b.b(paramContext, 0)));
      n(paramAttributeSet.getInteger(b.j.a.c.RippleDrawable_rd_rippleAnimDuration, paramContext.getResources().getInteger(17694721)));
      paramInt1 = paramAttributeSet.getResourceId(b.j.a.c.RippleDrawable_rd_inInterpolator, 0);
      if (paramInt1 != 0) {
        a(AnimationUtils.loadInterpolator(paramContext, paramInt1));
      }
      paramInt1 = paramAttributeSet.getResourceId(b.j.a.c.RippleDrawable_rd_outInterpolator, 0);
      if (paramInt1 != 0) {
        b(AnimationUtils.loadInterpolator(paramContext, paramInt1));
      }
      j(paramAttributeSet.getInteger(b.j.a.c.RippleDrawable_rd_maskType, 0));
      f(paramAttributeSet.getDimensionPixelSize(b.j.a.c.RippleDrawable_rd_cornerRadius, 0));
      r(paramAttributeSet.getDimensionPixelSize(b.j.a.c.RippleDrawable_rd_topLeftCornerRadius, m));
      s(paramAttributeSet.getDimensionPixelSize(b.j.a.c.RippleDrawable_rd_topRightCornerRadius, n));
      e(paramAttributeSet.getDimensionPixelSize(b.j.a.c.RippleDrawable_rd_bottomRightCornerRadius, p));
      d(paramAttributeSet.getDimensionPixelSize(b.j.a.c.RippleDrawable_rd_bottomLeftCornerRadius, o));
      l(paramAttributeSet.getDimensionPixelSize(b.j.a.c.RippleDrawable_rd_padding, 0));
      i(paramAttributeSet.getDimensionPixelSize(b.j.a.c.RippleDrawable_rd_leftPadding, q));
      m(paramAttributeSet.getDimensionPixelSize(b.j.a.c.RippleDrawable_rd_rightPadding, s));
      q(paramAttributeSet.getDimensionPixelSize(b.j.a.c.RippleDrawable_rd_topPadding, r));
      c(paramAttributeSet.getDimensionPixelSize(b.j.a.c.RippleDrawable_rd_bottomPadding, t));
      paramAttributeSet.recycle();
    }
    
    public b a(int paramInt)
    {
      b = paramInt;
      return this;
    }
    
    public b a(Drawable paramDrawable)
    {
      a = paramDrawable;
      return this;
    }
    
    public b a(Interpolator paramInterpolator)
    {
      j = paramInterpolator;
      return this;
    }
    
    public c a()
    {
      if (j == null) {
        j = new AccelerateInterpolator();
      }
      if (k == null) {
        k = new DecelerateInterpolator();
      }
      return new c(a, b, c, d, h, i, e, f, g, j, k, l, m, n, p, o, q, r, s, t, null);
    }
    
    public b b(int paramInt)
    {
      c = paramInt;
      return this;
    }
    
    public b b(Interpolator paramInterpolator)
    {
      k = paramInterpolator;
      return this;
    }
    
    public b c(int paramInt)
    {
      t = paramInt;
      return this;
    }
    
    public b d(int paramInt)
    {
      o = paramInt;
      return this;
    }
    
    public b e(int paramInt)
    {
      p = paramInt;
      return this;
    }
    
    public b f(int paramInt)
    {
      m = paramInt;
      n = paramInt;
      o = paramInt;
      p = paramInt;
      return this;
    }
    
    public b g(int paramInt)
    {
      h = paramInt;
      return this;
    }
    
    public b h(int paramInt)
    {
      i = paramInt;
      return this;
    }
    
    public b i(int paramInt)
    {
      q = paramInt;
      return this;
    }
    
    public b j(int paramInt)
    {
      l = paramInt;
      return this;
    }
    
    public b k(int paramInt)
    {
      e = paramInt;
      return this;
    }
    
    public b l(int paramInt)
    {
      q = paramInt;
      r = paramInt;
      s = paramInt;
      t = paramInt;
      return this;
    }
    
    public b m(int paramInt)
    {
      s = paramInt;
      return this;
    }
    
    public b n(int paramInt)
    {
      f = paramInt;
      return this;
    }
    
    public b o(int paramInt)
    {
      g = paramInt;
      return this;
    }
    
    public b p(int paramInt)
    {
      d = paramInt;
      return this;
    }
    
    public b q(int paramInt)
    {
      r = paramInt;
      return this;
    }
    
    public b r(int paramInt)
    {
      m = paramInt;
      return this;
    }
    
    public b s(int paramInt)
    {
      n = paramInt;
      return this;
    }
  }
  
  public static class c
  {
    final int a;
    final float[] b = new float[8];
    final int c;
    final int d;
    final int e;
    final int f;
    
    public c(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, int paramInt9)
    {
      a = paramInt1;
      float[] arrayOfFloat = b;
      arrayOfFloat[0] = paramInt2;
      arrayOfFloat[1] = paramInt2;
      arrayOfFloat[2] = paramInt3;
      arrayOfFloat[3] = paramInt3;
      arrayOfFloat[4] = paramInt4;
      arrayOfFloat[5] = paramInt4;
      arrayOfFloat[6] = paramInt5;
      arrayOfFloat[7] = paramInt5;
      c = paramInt6;
      d = paramInt7;
      e = paramInt8;
      f = paramInt9;
    }
  }
}
