package b.j.a.e;

import android.content.res.ColorStateList;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.DashPathEffect;
import android.graphics.Paint;
import android.graphics.Paint.Cap;
import android.graphics.Paint.Join;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.PathEffect;
import android.graphics.Rect;
import android.graphics.drawable.Animatable;
import android.graphics.drawable.Drawable;
import android.os.SystemClock;
import b.j.a.f.d;

public class b
  extends Drawable
  implements Animatable
{
  private boolean c = false;
  private long d;
  private float e;
  private int f;
  private Paint g;
  private ColorStateList h;
  private int i;
  private int j;
  private int k;
  private boolean l = true;
  private PathEffect m;
  private Path n;
  private boolean o = false;
  private boolean p = true;
  private int q;
  private int r;
  private final Runnable s = new a();
  
  public b(int paramInt1, int paramInt2, int paramInt3, ColorStateList paramColorStateList, int paramInt4)
  {
    i = paramInt1;
    q = paramInt2;
    r = paramInt3;
    f = paramInt4;
    g = new Paint();
    g.setAntiAlias(true);
    g.setStyle(Paint.Style.STROKE);
    g.setStrokeWidth(i);
    g.setStrokeCap(Paint.Cap.ROUND);
    g.setStrokeJoin(Paint.Join.ROUND);
    n = new Path();
    p = false;
    a(paramColorStateList);
    p = true;
  }
  
  public b(int paramInt1, ColorStateList paramColorStateList, int paramInt2)
  {
    this(paramInt1, 0, 0, paramColorStateList, paramInt2);
  }
  
  private PathEffect a()
  {
    if (m == null) {
      m = new DashPathEffect(new float[] { 0.2F, i * 2 }, 0.0F);
    }
    return m;
  }
  
  private void b()
  {
    d = SystemClock.uptimeMillis();
    e = 0.0F;
  }
  
  private void c()
  {
    e = Math.min(1.0F, (float)(SystemClock.uptimeMillis() - d) / f);
    if (e == 1.0F) {
      c = false;
    }
    if (isRunning()) {
      scheduleSelf(s, SystemClock.uptimeMillis() + 16L);
    }
    invalidateSelf();
  }
  
  public void a(int paramInt)
  {
    f = paramInt;
  }
  
  public void a(ColorStateList paramColorStateList)
  {
    h = paramColorStateList;
    onStateChange(getState());
  }
  
  public void b(int paramInt)
  {
    if (i != paramInt)
    {
      i = paramInt;
      g.setStrokeWidth(i);
      invalidateSelf();
    }
  }
  
  public void draw(Canvas paramCanvas)
  {
    if (i == 0) {
      return;
    }
    Object localObject = getBounds();
    float f1 = bottom - i / 2;
    boolean bool = isRunning();
    PathEffect localPathEffect = null;
    if (!bool)
    {
      n.reset();
      n.moveTo(left + q, f1);
      n.lineTo(right - r, f1);
      localObject = g;
      if (!l) {
        localPathEffect = a();
      }
      ((Paint)localObject).setPathEffect(localPathEffect);
      g.setColor(k);
      paramCanvas.drawPath(n, g);
      return;
    }
    int i1 = right;
    int i2 = left;
    int i3 = r;
    int i4 = q;
    float f3 = (i1 + i2 - i3 + i4) / 2.0F;
    float f4 = e;
    float f2 = (1.0F - f4) * f3 + (i2 + i4) * f4;
    f3 = (1.0F - f4) * f3 + (i1 + i3) * f4;
    g.setPathEffect(null);
    if (e < 1.0F)
    {
      g.setColor(j);
      n.reset();
      n.moveTo(left + q, f1);
      n.lineTo(f2, f1);
      n.moveTo(right - r, f1);
      n.lineTo(f3, f1);
      paramCanvas.drawPath(n, g);
    }
    g.setColor(k);
    n.reset();
    n.moveTo(f2, f1);
    n.lineTo(f3, f1);
    paramCanvas.drawPath(n, g);
  }
  
  public int getOpacity()
  {
    return -3;
  }
  
  public boolean isRunning()
  {
    return c;
  }
  
  public boolean isStateful()
  {
    return true;
  }
  
  protected boolean onStateChange(int[] paramArrayOfInt)
  {
    l = d.a(paramArrayOfInt, 16842910);
    int i2 = h.getColorForState(paramArrayOfInt, k);
    if (k != i2)
    {
      if ((!o) && (p) && (l) && (f > 0))
      {
        int i1;
        if (isRunning()) {
          i1 = j;
        } else {
          i1 = k;
        }
        j = i1;
        k = i2;
        start();
      }
      else
      {
        j = i2;
        k = i2;
      }
      return true;
    }
    if (!isRunning()) {
      j = i2;
    }
    return false;
  }
  
  public void scheduleSelf(Runnable paramRunnable, long paramLong)
  {
    c = true;
    super.scheduleSelf(paramRunnable, paramLong);
  }
  
  public void setAlpha(int paramInt)
  {
    g.setAlpha(paramInt);
  }
  
  public void setColorFilter(ColorFilter paramColorFilter)
  {
    g.setColorFilter(paramColorFilter);
  }
  
  public void start()
  {
    b();
    scheduleSelf(s, SystemClock.uptimeMillis() + 16L);
    invalidateSelf();
  }
  
  public void stop()
  {
    c = false;
    unscheduleSelf(s);
    invalidateSelf();
  }
  
  class a
    implements Runnable
  {
    a() {}
    
    public void run()
    {
      b.a(b.this);
    }
  }
}
