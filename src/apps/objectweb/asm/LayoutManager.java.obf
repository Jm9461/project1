package b.d.a;

import android.opengl.GLES20;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.ShortBuffer;
import java.util.Random;

class d
  extends g
{
  private final FloatBuffer c;
  private final ShortBuffer d;
  private final Random e;
  private float f;
  private float g;
  private float h;
  private float i;
  private float j = -1.0F;
  private float k;
  private float l;
  
  public d(float[] paramArrayOfFloat, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, Random paramRandom)
  {
    super(paramArrayOfFloat);
    e = paramRandom;
    a(paramFloat1, paramFloat2, paramFloat3, paramFloat4);
    Object localObject = new float[123];
    paramArrayOfFloat = new short[120];
    int m = 0;
    while (m < paramArrayOfFloat.length / 3 - 1)
    {
      paramArrayOfFloat[(m * 3)] = 0;
      paramArrayOfFloat[(m * 3 + 1)] = ((short)(m + 1));
      paramArrayOfFloat[(m * 3 + 2)] = ((short)(m + 2));
      m += 1;
    }
    paramArrayOfFloat[(m * 3)] = 0;
    paramArrayOfFloat[(m * 3 + 1)] = ((short)(m + 1));
    paramArrayOfFloat[(m * 3 + 2)] = 1;
    ByteBuffer localByteBuffer = ByteBuffer.allocateDirect(localObject.length * 4);
    localByteBuffer.order(ByteOrder.nativeOrder());
    c = localByteBuffer.asFloatBuffer();
    c.put((float[])localObject);
    c.position(0);
    localObject = ByteBuffer.allocateDirect(paramArrayOfFloat.length * 2);
    ((ByteBuffer)localObject).order(ByteOrder.nativeOrder());
    d = ((ByteBuffer)localObject).asShortBuffer();
    d.put(paramArrayOfFloat);
    d.position(0);
    double d1 = paramRandom.nextFloat() * 2.0F;
    Double.isNaN(d1);
    l = ((float)(d1 * 3.141592653589793D));
  }
  
  public void a(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
  {
    f = paramFloat2;
    g = paramFloat4;
    k = paramFloat1;
    j = -1.0F;
    paramFloat1 = e.nextFloat() * 0.8F + 0.4F;
    h = ((paramFloat3 - paramFloat2) / 1000.0F * paramFloat1);
    i = (0.002F * paramFloat1);
    a()[3] = 1.0F;
  }
  
  public void a(long paramLong, float paramFloat)
  {
    l += (float)paramLong * 0.0062831854F;
    float f1 = k + (float)(Math.sin(l) * 0.05000000074505806D);
    float f4 = g;
    float f2 = f1 + f4;
    float f3 = f + (float)paramLong * h;
    f4 += f3;
    j += (float)paramLong * i;
    a()[3] = (1.0F - j / 1.0F);
    c.put(0, l.b(0.0F, f1, f2));
    c.put(1, l.b(j * paramFloat, f3, f4));
    int m = 1;
    while (m <= 40)
    {
      FloatBuffer localFloatBuffer = c;
      double d1 = m;
      Double.isNaN(d1);
      localFloatBuffer.put(m * 3, l.b((float)Math.sin(d1 * 0.15707963267948966D - 3.141592653589793D), f1, f2));
      localFloatBuffer = c;
      d1 = m;
      Double.isNaN(d1);
      localFloatBuffer.put(m * 3 + 1, l.b((float)Math.cos(d1 * 0.15707963267948966D - 3.141592653589793D) * paramFloat, f3, f4));
      m += 1;
    }
    f = f3;
  }
  
  public void c()
  {
    GLES20.glUseProgram(b());
    int m = GLES20.glGetAttribLocation(b(), "vPosition");
    GLES20.glEnableVertexAttribArray(m);
    GLES20.glVertexAttribPointer(m, 3, 5126, false, 12, c);
    int n = GLES20.glGetUniformLocation(b(), "vColor");
    GLES20.glEnable(3042);
    GLES20.glBlendFunc(770, 771);
    GLES20.glUniform4fv(n, 1, a(), 0);
    GLES20.glDrawElements(6, d.capacity(), 5123, d);
    GLES20.glDisableVertexAttribArray(m);
    GLES20.glDisable(3042);
  }
  
  public boolean d()
  {
    return j > 1.0F;
  }
}
