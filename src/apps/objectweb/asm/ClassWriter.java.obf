package b.d.a;

import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

class i
{
  private final c.e a;
  private final h[] b;
  private final e c;
  private final Random d;
  private final float e;
  private final float f;
  private float g;
  private final Set<d> h;
  private final Queue<d> i;
  private final Set<d> j;
  private boolean k;
  private final d[] l;
  
  public i(c.e paramE, float[] paramArrayOfFloat, float paramFloat1, float paramFloat2, Random paramRandom)
  {
    a = paramE;
    d = paramRandom;
    b = new h[a];
    float f1 = f;
    f1 = paramFloat1 + f1 / (e * 2.0F + f1) * (paramFloat2 - paramFloat1);
    c = new e(paramArrayOfFloat, -1.0F, 1.0F, paramFloat1, f1);
    int m = a;
    paramFloat1 = 2.0F / m;
    float[] arrayOfFloat = a(d, m, paramFloat1, 0.15F);
    e = f1;
    f = paramFloat2;
    m = 0;
    while (m < a)
    {
      byte b1;
      if (m % 2 == 0) {
        b1 = 0;
      } else {
        b1 = 1;
      }
      b[m] = new h(paramArrayOfFloat, arrayOfFloat[m], arrayOfFloat[(m + 1)], f1, paramFloat2, b1, paramRandom);
      m += 1;
    }
    h = Collections.newSetFromMap(new ConcurrentHashMap());
    j = Collections.newSetFromMap(new ConcurrentHashMap());
    i = new LinkedList();
    l = a(paramArrayOfFloat, c);
    Collections.addAll(i, l);
  }
  
  private static float[] a(Random paramRandom, int paramInt, float paramFloat1, float paramFloat2)
  {
    float[] arrayOfFloat = new float[paramInt + 1];
    paramInt = 0;
    while (paramInt < arrayOfFloat.length)
    {
      if (paramInt == 0)
      {
        arrayOfFloat[paramInt] = -1.0F;
      }
      else
      {
        int m = arrayOfFloat.length;
        float f1 = 1.0F;
        if (paramInt == m - 1)
        {
          arrayOfFloat[paramInt] = 1.0F;
        }
        else
        {
          float f2 = paramRandom.nextFloat();
          if (!paramRandom.nextBoolean()) {
            f1 = -1.0F;
          }
          arrayOfFloat[paramInt] = (paramInt * paramFloat1 - 1.0F + f2 * paramFloat2 * paramFloat1 * f1);
        }
      }
      paramInt += 1;
    }
    return arrayOfFloat;
  }
  
  private d[] a(float[] paramArrayOfFloat, int paramInt)
  {
    d[] arrayOfD = new d[paramInt];
    int m = 0;
    while (m < paramInt)
    {
      Object localObject = a;
      float f2 = d;
      float f1 = f2;
      if (g) {
        f1 = f2 * (d.nextFloat() * 0.8F + 0.5F);
      }
      f2 = d.nextFloat();
      int n;
      if (d.nextBoolean()) {
        n = 1;
      } else {
        n = -1;
      }
      float f3 = n;
      localObject = new float[paramArrayOfFloat.length];
      System.arraycopy(paramArrayOfFloat, 0, localObject, 0, localObject.length);
      arrayOfD[m] = new d((float[])localObject, d.nextFloat() * 2.0F - 1.0F, e + f2 * 0.1F * f3, f, f1, d);
      m += 1;
    }
    return arrayOfD;
  }
  
  private void c()
  {
    int i1 = d.nextInt(3);
    int m = 0;
    while (m < i1)
    {
      d localD = (d)i.poll();
      if (localD != null)
      {
        float f3 = d.nextFloat();
        int n;
        if (d.nextBoolean()) {
          n = 1;
        } else {
          n = -1;
        }
        float f4 = n;
        c.e localE = a;
        float f2 = d;
        float f1 = f2;
        if (g) {
          f1 = f2 * (d.nextFloat() * 0.8F + 0.5F);
        }
        localD.a(d.nextFloat() * 2.0F - 1.0F, e + f3 * 0.1F * f4, f, f1);
        j.add(localD);
      }
      m += 1;
    }
  }
  
  public void a()
  {
    Object localObject = b;
    int n = localObject.length;
    int m = 0;
    while (m < n)
    {
      localObject[m].c();
      m += 1;
    }
    c.c();
    localObject = h.iterator();
    while (((Iterator)localObject).hasNext()) {
      ((d)((Iterator)localObject).next()).c();
    }
  }
  
  public void a(float paramFloat1, float paramFloat2)
  {
    h[] arrayOfH = b;
    int n = arrayOfH.length;
    int m = 0;
    while (m < n)
    {
      arrayOfH[m].a(l.a(paramFloat1, d));
      m += 1;
    }
    float f1 = g;
    if (paramFloat2 > f1)
    {
      g = paramFloat2;
      if (paramFloat1 > 0.25F) {
        c();
      }
    }
    else
    {
      g = l.c(f1, paramFloat2, 0.8F);
    }
  }
  
  public void a(long paramLong, float paramFloat1, float paramFloat2)
  {
    float f1 = (float)paramLong;
    k = true;
    Object localObject = b;
    int n = localObject.length;
    int m = 0;
    d localD;
    while (m < n)
    {
      localD = localObject[m];
      localD.b(f1 * paramFloat1);
      k &= localD.d();
      m += 1;
    }
    h.addAll(j);
    j.clear();
    localObject = h.iterator();
    while (((Iterator)localObject).hasNext())
    {
      localD = (d)((Iterator)localObject).next();
      localD.a(paramLong, paramFloat2);
      if (localD.d())
      {
        i.add(localD);
        ((Iterator)localObject).remove();
      }
    }
  }
  
  public boolean b()
  {
    return k;
  }
}
