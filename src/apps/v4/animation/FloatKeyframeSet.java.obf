package b.h.a;

import android.view.animation.Interpolator;
import java.util.ArrayList;

class e
  extends h
{
  private float f;
  private float g;
  private float h;
  private boolean i = true;
  
  public e(g.a... paramVarArgs)
  {
    super(paramVarArgs);
  }
  
  public Object a(float paramFloat)
  {
    return Float.valueOf(b(paramFloat));
  }
  
  public float b(float paramFloat)
  {
    int j = a;
    float f1;
    if (j == 2)
    {
      if (i)
      {
        i = false;
        f = ((g.a)d.get(0)).e();
        g = ((g.a)d.get(1)).e();
        h = (g - f);
      }
      localObject = c;
      f1 = paramFloat;
      if (localObject != null) {
        f1 = ((Interpolator)localObject).getInterpolation(paramFloat);
      }
      localObject = e;
      if (localObject == null) {
        return f + h * f1;
      }
      return ((Number)((l)localObject).evaluate(f1, Float.valueOf(f), Float.valueOf(g))).floatValue();
    }
    g.a localA;
    float f2;
    float f3;
    float f4;
    float f5;
    if (paramFloat <= 0.0F)
    {
      localObject = (g.a)d.get(0);
      localA = (g.a)d.get(1);
      f2 = ((g.a)localObject).e();
      f3 = localA.e();
      f4 = ((g)localObject).a();
      f5 = localA.a();
      localObject = localA.b();
      f1 = paramFloat;
      if (localObject != null) {
        f1 = ((Interpolator)localObject).getInterpolation(paramFloat);
      }
      paramFloat = (f1 - f4) / (f5 - f4);
      localObject = e;
      if (localObject == null) {
        return (f3 - f2) * paramFloat + f2;
      }
      return ((Number)((l)localObject).evaluate(paramFloat, Float.valueOf(f2), Float.valueOf(f3))).floatValue();
    }
    if (paramFloat >= 1.0F)
    {
      localObject = (g.a)d.get(j - 2);
      localA = (g.a)d.get(a - 1);
      f2 = ((g.a)localObject).e();
      f3 = localA.e();
      f4 = ((g)localObject).a();
      f5 = localA.a();
      localObject = localA.b();
      f1 = paramFloat;
      if (localObject != null) {
        f1 = ((Interpolator)localObject).getInterpolation(paramFloat);
      }
      paramFloat = (f1 - f4) / (f5 - f4);
      localObject = e;
      if (localObject == null) {
        return (f3 - f2) * paramFloat + f2;
      }
      return ((Number)((l)localObject).evaluate(paramFloat, Float.valueOf(f2), Float.valueOf(f3))).floatValue();
    }
    Object localObject = (g.a)d.get(0);
    j = 1;
    int k;
    for (;;)
    {
      k = a;
      if (j >= k) {
        break;
      }
      localA = (g.a)d.get(j);
      if (paramFloat < localA.a())
      {
        Interpolator localInterpolator = localA.b();
        f1 = paramFloat;
        if (localInterpolator != null) {
          f1 = localInterpolator.getInterpolation(paramFloat);
        }
        paramFloat = (f1 - ((g)localObject).a()) / (localA.a() - ((g)localObject).a());
        f1 = ((g.a)localObject).e();
        f2 = localA.e();
        localObject = e;
        if (localObject == null) {
          return (f2 - f1) * paramFloat + f1;
        }
        return ((Number)((l)localObject).evaluate(paramFloat, Float.valueOf(f1), Float.valueOf(f2))).floatValue();
      }
      localObject = localA;
      j += 1;
    }
    return ((Number)((g)d.get(k - 1)).c()).floatValue();
  }
  
  public e clone()
  {
    ArrayList localArrayList = d;
    int k = d.size();
    g.a[] arrayOfA = new g.a[k];
    int j = 0;
    while (j < k)
    {
      arrayOfA[j] = ((g.a)((g)localArrayList.get(j)).clone());
      j += 1;
    }
    return new e(arrayOfA);
  }
}
