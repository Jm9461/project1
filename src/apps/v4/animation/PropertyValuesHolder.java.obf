package b.h.a;

import android.util.Log;
import b.h.b.a;
import b.h.b.c;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;

public class k
  implements Cloneable
{
  private static final l m = new f();
  private static final l n = new d();
  private static Class[] o;
  private static Class[] p;
  private static Class[] q;
  private static final HashMap<Class, HashMap<String, Method>> r = new HashMap();
  private static final HashMap<Class, HashMap<String, Method>> s = new HashMap();
  String c;
  protected c d;
  Method e = null;
  private Method f = null;
  Class g;
  h h = null;
  final ReentrantReadWriteLock i = new ReentrantReadWriteLock();
  final Object[] j = new Object[1];
  private l k;
  private Object l;
  
  static
  {
    Class localClass2 = Float.TYPE;
    Class localClass3 = Double.TYPE;
    Class localClass1 = Integer.TYPE;
    o = new Class[] { localClass2, Float.class, localClass3, localClass1, Double.class, Integer.class };
    localClass2 = Float.TYPE;
    localClass3 = Double.TYPE;
    p = new Class[] { localClass1, Integer.class, localClass2, localClass3, Float.class, Double.class };
    q = new Class[] { localClass3, Double.class, Float.TYPE, Integer.TYPE, Float.class, Integer.class };
  }
  
  private k(c paramC)
  {
    d = paramC;
    if (paramC != null) {
      c = paramC.a();
    }
  }
  
  private k(String paramString)
  {
    c = paramString;
  }
  
  public static k a(c<?, Float> paramC, float... paramVarArgs)
  {
    return new b(paramC, paramVarArgs);
  }
  
  public static k a(String paramString, float... paramVarArgs)
  {
    return new b(paramString, paramVarArgs);
  }
  
  static String a(String paramString1, String paramString2)
  {
    if (paramString2 != null)
    {
      if (paramString2.length() == 0) {
        return paramString1;
      }
      char c1 = Character.toUpperCase(paramString2.charAt(0));
      paramString2 = paramString2.substring(1);
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramString1);
      localStringBuilder.append(c1);
      localStringBuilder.append(paramString2);
      return localStringBuilder.toString();
    }
    return paramString1;
  }
  
  private Method a(Class paramClass1, String paramString, Class paramClass2)
  {
    Method localMethod1 = null;
    String str = a(paramString, c);
    if (paramClass2 == null) {
      try
      {
        paramString = paramClass1.getMethod(str, null);
        return paramString;
      }
      catch (NoSuchMethodException paramClass2)
      {
        paramString = localMethod1;
        try
        {
          paramClass1 = paramClass1.getDeclaredMethod(str, null);
          paramString = paramClass1;
          paramClass1.setAccessible(true);
          return paramClass1;
        }
        catch (NoSuchMethodException paramClass1)
        {
          paramClass1 = new StringBuilder();
          paramClass1.append("Couldn't find no-arg method for property ");
          paramClass1.append(c);
          paramClass1.append(": ");
          paramClass1.append(paramClass2);
          Log.e("PropertyValuesHolder", paramClass1.toString());
          return paramString;
        }
      }
    }
    Class[] arrayOfClass = new Class[1];
    if (g.equals(Float.class)) {
      paramString = o;
    } else if (g.equals(Integer.class)) {
      paramString = p;
    } else if (g.equals(Double.class)) {
      paramString = q;
    } else {
      paramString = new Class[] { g };
    }
    int i2 = paramString.length;
    paramClass2 = null;
    int i1 = 0;
    while (i1 < i2)
    {
      Object localObject = paramString[i1];
      arrayOfClass[0] = localObject;
      try
      {
        localMethod1 = paramClass1.getMethod(str, arrayOfClass);
        paramClass2 = localMethod1;
        g = localObject;
        return localMethod1;
      }
      catch (NoSuchMethodException localNoSuchMethodException1)
      {
        try
        {
          Method localMethod2 = paramClass1.getDeclaredMethod(str, arrayOfClass);
          paramClass2 = localMethod2;
          localMethod2.setAccessible(true);
          paramClass2 = localMethod2;
          g = localObject;
          return localMethod2;
        }
        catch (NoSuchMethodException localNoSuchMethodException2)
        {
          i1 += 1;
        }
      }
    }
    paramClass1 = new StringBuilder();
    paramClass1.append("Couldn't find setter/getter for property ");
    paramClass1.append(c);
    paramClass1.append(" with value type ");
    paramClass1.append(g);
    Log.e("PropertyValuesHolder", paramClass1.toString());
    return paramClass2;
  }
  
  private Method a(Class paramClass1, HashMap<Class, HashMap<String, Method>> paramHashMap, String paramString, Class paramClass2)
  {
    Method localMethod1 = null;
    try
    {
      i.writeLock().lock();
      HashMap localHashMap = (HashMap)paramHashMap.get(paramClass1);
      if (localHashMap != null) {
        localMethod1 = (Method)localHashMap.get(c);
      }
      Method localMethod2 = localMethod1;
      if (localMethod1 == null)
      {
        localMethod2 = a(paramClass1, paramString, paramClass2);
        paramString = localHashMap;
        if (localHashMap == null)
        {
          paramString = new HashMap();
          paramHashMap.put(paramClass1, paramString);
        }
        paramString.put(c, localMethod2);
      }
      return localMethod2;
    }
    finally
    {
      i.writeLock().unlock();
    }
  }
  
  private void b(Class paramClass)
  {
    f = a(paramClass, s, "get", null);
  }
  
  Object a()
  {
    return l;
  }
  
  void a(float paramFloat)
  {
    l = h.a(paramFloat);
  }
  
  public void a(l paramL)
  {
    k = paramL;
    h.a(paramL);
  }
  
  public void a(c paramC)
  {
    d = paramC;
  }
  
  void a(Class paramClass)
  {
    e = a(paramClass, r, "set", g);
  }
  
  void a(Object paramObject)
  {
    c localC = d;
    if (localC != null) {
      localC.a(paramObject, a());
    }
    if (e != null) {
      try
      {
        j[0] = a();
        e.invoke(paramObject, j);
        return;
      }
      catch (IllegalAccessException paramObject)
      {
        Log.e("PropertyValuesHolder", paramObject.toString());
        return;
      }
      catch (InvocationTargetException paramObject)
      {
        Log.e("PropertyValuesHolder", paramObject.toString());
      }
    }
  }
  
  public void a(String paramString)
  {
    c = paramString;
  }
  
  public void a(float... paramVarArgs)
  {
    g = Float.TYPE;
    h = h.a(paramVarArgs);
  }
  
  public String b()
  {
    return c;
  }
  
  void b(Object paramObject)
  {
    Object localObject1 = d;
    if (localObject1 != null) {
      try
      {
        ((c)localObject1).a(paramObject);
        localObject1 = h.d.iterator();
        while (((Iterator)localObject1).hasNext())
        {
          localObject3 = (g)((Iterator)localObject1).next();
          if (!((g)localObject3).d()) {
            ((g)localObject3).a(d.a(paramObject));
          }
        }
        return;
      }
      catch (ClassCastException localClassCastException)
      {
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("No such property (");
        ((StringBuilder)localObject2).append(d.a());
        ((StringBuilder)localObject2).append(") on target object ");
        ((StringBuilder)localObject2).append(paramObject);
        ((StringBuilder)localObject2).append(". Trying reflection instead");
        Log.e("PropertyValuesHolder", ((StringBuilder)localObject2).toString());
        d = null;
      }
    }
    Object localObject2 = paramObject.getClass();
    if (e == null) {
      a((Class)localObject2);
    }
    Object localObject3 = h.d.iterator();
    while (((Iterator)localObject3).hasNext())
    {
      g localG = (g)((Iterator)localObject3).next();
      if (!localG.d())
      {
        if (f == null) {
          b((Class)localObject2);
        }
        try
        {
          localG.a(f.invoke(paramObject, new Object[0]));
        }
        catch (IllegalAccessException localIllegalAccessException)
        {
          Log.e("PropertyValuesHolder", localIllegalAccessException.toString());
        }
        catch (InvocationTargetException localInvocationTargetException)
        {
          Log.e("PropertyValuesHolder", localInvocationTargetException.toString());
        }
      }
    }
  }
  
  void c()
  {
    if (k == null)
    {
      localObject = g;
      if (localObject == Integer.class) {
        localObject = m;
      } else if (localObject == Float.class) {
        localObject = n;
      } else {
        localObject = null;
      }
      k = ((l)localObject);
    }
    Object localObject = k;
    if (localObject != null) {
      h.a((l)localObject);
    }
  }
  
  public k clone()
  {
    try
    {
      k localK = (k)super.clone();
      c = c;
      d = d;
      h = h.clone();
      k = k;
      return localK;
    }
    catch (CloneNotSupportedException localCloneNotSupportedException) {}
    return null;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(c);
    localStringBuilder.append(": ");
    localStringBuilder.append(h.toString());
    return localStringBuilder.toString();
  }
  
  static class b
    extends k
  {
    private a t;
    e u;
    float v;
    
    public b(c paramC, float... paramVarArgs)
    {
      super(null);
      a(paramVarArgs);
      if ((paramC instanceof a)) {
        t = ((a)d);
      }
    }
    
    public b(String paramString, float... paramVarArgs)
    {
      super(null);
      a(paramVarArgs);
    }
    
    Object a()
    {
      return Float.valueOf(v);
    }
    
    void a(float paramFloat)
    {
      v = u.b(paramFloat);
    }
    
    void a(Class paramClass)
    {
      if (d != null) {
        return;
      }
      super.a(paramClass);
    }
    
    void a(Object paramObject)
    {
      Object localObject = t;
      if (localObject != null)
      {
        ((a)localObject).a(paramObject, v);
        return;
      }
      localObject = d;
      if (localObject != null)
      {
        ((c)localObject).a(paramObject, Float.valueOf(v));
        return;
      }
      if (e != null) {
        try
        {
          j[0] = Float.valueOf(v);
          e.invoke(paramObject, j);
          return;
        }
        catch (IllegalAccessException paramObject)
        {
          Log.e("PropertyValuesHolder", paramObject.toString());
          return;
        }
        catch (InvocationTargetException paramObject)
        {
          Log.e("PropertyValuesHolder", paramObject.toString());
        }
      }
    }
    
    public void a(float... paramVarArgs)
    {
      super.a(paramVarArgs);
      u = ((e)h);
    }
    
    public b clone()
    {
      b localB = (b)super.clone();
      u = ((e)h);
      return localB;
    }
  }
}
