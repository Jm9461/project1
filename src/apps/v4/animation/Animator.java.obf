package b.h.a;

import android.view.animation.Interpolator;
import java.util.ArrayList;

public abstract class a
  implements Cloneable
{
  ArrayList<a> c = null;
  
  public a() {}
  
  public abstract a a(long paramLong);
  
  public ArrayList<a> a()
  {
    return c;
  }
  
  public abstract void a(Interpolator paramInterpolator);
  
  public void a(a paramA)
  {
    if (c == null) {
      c = new ArrayList();
    }
    c.add(paramA);
  }
  
  public void b() {}
  
  public void b(a paramA)
  {
    ArrayList localArrayList = c;
    if (localArrayList == null) {
      return;
    }
    localArrayList.remove(paramA);
    if (c.size() == 0) {
      c = null;
    }
  }
  
  public a clone()
  {
    AssertionError localAssertionError;
    try
    {
      a localA = (a)super.clone();
      if (c != null)
      {
        ArrayList localArrayList = c;
        c = new ArrayList();
        int j = localArrayList.size();
        int i = 0;
        while (i < j)
        {
          c.add(localArrayList.get(i));
          i += 1;
        }
      }
      return localA;
    }
    catch (CloneNotSupportedException localCloneNotSupportedException)
    {
      localAssertionError = new AssertionError();
    }
    for (;;)
    {
      throw localAssertionError;
    }
  }
  
  public static abstract interface a
  {
    public abstract void a(a paramA);
    
    public abstract void b(a paramA);
    
    public abstract void c(a paramA);
  }
}
