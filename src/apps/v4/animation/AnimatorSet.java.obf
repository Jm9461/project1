package b.h.a;

import android.view.animation.Interpolator;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;

public final class c
  extends a
{
  private ArrayList<a> d = new ArrayList();
  private HashMap<a, f> e = new HashMap();
  private ArrayList<f> f = new ArrayList();
  private ArrayList<f> g = new ArrayList();
  private boolean h = true;
  private b i = null;
  boolean j = false;
  private boolean k;
  private long l = 0L;
  private m m = null;
  
  public c() {}
  
  private void c()
  {
    Object localObject1;
    int i1;
    Object localObject2;
    int i3;
    if (h)
    {
      g.clear();
      localObject1 = new ArrayList();
      i1 = f.size();
      n = 0;
      Object localObject3;
      while (n < i1)
      {
        localObject2 = (f)f.get(n);
        localObject3 = d;
        if ((localObject3 == null) || (((ArrayList)localObject3).size() == 0)) {
          ((ArrayList)localObject1).add(localObject2);
        }
        n += 1;
      }
      localObject2 = new ArrayList();
      while (((ArrayList)localObject1).size() > 0)
      {
        i2 = ((ArrayList)localObject1).size();
        n = 0;
        while (n < i2)
        {
          localObject3 = (f)((ArrayList)localObject1).get(n);
          g.add(localObject3);
          Object localObject4 = g;
          if (localObject4 != null)
          {
            i3 = ((ArrayList)localObject4).size();
            i1 = 0;
            while (i1 < i3)
            {
              localObject4 = (f)g.get(i1);
              f.remove(localObject3);
              if (f.size() == 0) {
                ((ArrayList)localObject2).add(localObject4);
              }
              i1 += 1;
            }
          }
          n += 1;
        }
        ((ArrayList)localObject1).clear();
        ((ArrayList)localObject1).addAll((Collection)localObject2);
        ((ArrayList)localObject2).clear();
      }
      h = false;
      if (g.size() == f.size()) {
        return;
      }
      throw new IllegalStateException("Circular dependencies cannot exist in AnimatorSet");
    }
    int i2 = f.size();
    int n = 0;
    while (n < i2)
    {
      localObject1 = (f)f.get(n);
      localObject2 = d;
      if ((localObject2 != null) && (((ArrayList)localObject2).size() > 0))
      {
        i3 = d.size();
        i1 = 0;
        while (i1 < i3)
        {
          localObject2 = (d)d.get(i1);
          if (f == null) {
            f = new ArrayList();
          }
          if (!f.contains(a)) {
            f.add(a);
          }
          i1 += 1;
        }
      }
      h = false;
      n += 1;
    }
  }
  
  public c a(a paramA)
  {
    if (paramA != null)
    {
      h = true;
      return new c(paramA);
    }
    return null;
  }
  
  public c a(long paramLong)
  {
    if (paramLong >= 0L)
    {
      localObject = f.iterator();
      while (((Iterator)localObject).hasNext()) {
        nextc.a(paramLong);
      }
      return this;
    }
    Object localObject = new IllegalArgumentException("duration must be a value of zero or greater");
    for (;;)
    {
      throw ((Throwable)localObject);
    }
  }
  
  public void a(Interpolator paramInterpolator)
  {
    Iterator localIterator = f.iterator();
    while (localIterator.hasNext()) {
      nextc.a(paramInterpolator);
    }
  }
  
  public void a(a... paramVarArgs)
  {
    if (paramVarArgs != null)
    {
      h = true;
      c localC = a(paramVarArgs[0]);
      int n = 1;
      while (n < paramVarArgs.length)
      {
        localC.a(paramVarArgs[n]);
        n += 1;
      }
    }
  }
  
  public void b()
  {
    j = false;
    c();
    int i2 = g.size();
    int n = 0;
    Object localObject2;
    Object localObject3;
    while (n < i2)
    {
      localObject1 = (f)g.get(n);
      localObject2 = c.a();
      if ((localObject2 != null) && (((ArrayList)localObject2).size() > 0))
      {
        localObject2 = new ArrayList((Collection)localObject2).iterator();
        while (((Iterator)localObject2).hasNext())
        {
          localObject3 = (a.a)((Iterator)localObject2).next();
          if (((localObject3 instanceof e)) || ((localObject3 instanceof b))) {
            c.b((a.a)localObject3);
          }
        }
      }
      n += 1;
    }
    Object localObject1 = new ArrayList();
    n = 0;
    int i1;
    while (n < i2)
    {
      localObject2 = (f)g.get(n);
      if (i == null) {
        i = new b(this);
      }
      localObject3 = d;
      if ((localObject3 != null) && (((ArrayList)localObject3).size() != 0))
      {
        int i3 = d.size();
        i1 = 0;
        while (i1 < i3)
        {
          localObject3 = (d)d.get(i1);
          a.c.a(new e(this, (f)localObject2, b));
          i1 += 1;
        }
        e = ((ArrayList)d.clone());
      }
      else
      {
        ((ArrayList)localObject1).add(localObject2);
      }
      c.a(i);
      n += 1;
    }
    if (l <= 0L)
    {
      localObject1 = ((ArrayList)localObject1).iterator();
      while (((Iterator)localObject1).hasNext())
      {
        localObject2 = (f)((Iterator)localObject1).next();
        c.b();
        d.add(c);
      }
    }
    else
    {
      m = m.b(new float[] { 0.0F, 1.0F });
      m.a(l);
      m.a(new a((ArrayList)localObject1));
      m.b();
    }
    localObject1 = c;
    if (localObject1 != null)
    {
      localObject1 = (ArrayList)((ArrayList)localObject1).clone();
      i1 = ((ArrayList)localObject1).size();
      n = 0;
      while (n < i1)
      {
        ((a.a)((ArrayList)localObject1).get(n)).c(this);
        n += 1;
      }
    }
    if ((f.size() == 0) && (l == 0L))
    {
      localObject1 = c;
      if (localObject1 != null)
      {
        localObject1 = (ArrayList)((ArrayList)localObject1).clone();
        i1 = ((ArrayList)localObject1).size();
        n = 0;
        while (n < i1)
        {
          ((a.a)((ArrayList)localObject1).get(n)).a(this);
          n += 1;
        }
      }
    }
  }
  
  public void b(long paramLong)
  {
    l = paramLong;
  }
  
  public c clone()
  {
    c localC = (c)super.clone();
    h = true;
    j = false;
    k = false;
    d = new ArrayList();
    e = new HashMap();
    f = new ArrayList();
    g = new ArrayList();
    HashMap localHashMap = new HashMap();
    Object localObject3 = f.iterator();
    Object localObject2;
    Object localObject4;
    while (((Iterator)localObject3).hasNext())
    {
      localObject1 = (f)((Iterator)localObject3).next();
      localObject2 = ((f)localObject1).clone();
      localHashMap.put(localObject1, localObject2);
      f.add(localObject2);
      e.put(c, localObject2);
      d = null;
      e = null;
      g = null;
      f = null;
      localObject4 = c.a();
      if (localObject4 != null)
      {
        localObject1 = null;
        Iterator localIterator = ((ArrayList)localObject4).iterator();
        while (localIterator.hasNext())
        {
          a.a localA = (a.a)localIterator.next();
          localObject2 = localObject1;
          if ((localA instanceof b))
          {
            localObject2 = localObject1;
            if (localObject1 == null) {
              localObject2 = new ArrayList();
            }
            ((ArrayList)localObject2).add(localA);
          }
          localObject1 = localObject2;
        }
        if (localObject1 != null)
        {
          localObject1 = ((ArrayList)localObject1).iterator();
          while (((Iterator)localObject1).hasNext()) {
            ((ArrayList)localObject4).remove((a.a)((Iterator)localObject1).next());
          }
        }
      }
    }
    Object localObject1 = f.iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject3 = (f)((Iterator)localObject1).next();
      localObject2 = (f)localHashMap.get(localObject3);
      localObject3 = d;
      if (localObject3 != null)
      {
        localObject3 = ((ArrayList)localObject3).iterator();
        while (((Iterator)localObject3).hasNext())
        {
          localObject4 = (d)((Iterator)localObject3).next();
          ((f)localObject2).a(new d((f)localHashMap.get(a), b));
        }
      }
    }
    return localC;
  }
  
  class a
    extends b
  {
    boolean a = false;
    
    a(ArrayList paramArrayList) {}
    
    public void a(a paramA)
    {
      if (!a)
      {
        int j = b.size();
        int i = 0;
        while (i < j)
        {
          paramA = (c.f)b.get(i);
          c.b();
          c.a(c.this).add(c);
          i += 1;
        }
      }
    }
  }
  
  private class b
    implements a.a
  {
    private c a;
    
    b(c paramC)
    {
      a = paramC;
    }
    
    public void a(a paramA)
    {
      paramA.b(this);
      c.a(c.this).remove(paramA);
      ba).get(paramA)).h = true;
      if (!c.this.j)
      {
        paramA = c.c(a);
        int k = 1;
        int m = paramA.size();
        int i = 0;
        int j;
        for (;;)
        {
          j = k;
          if (i >= m) {
            break;
          }
          if (!geth)
          {
            j = 0;
            break;
          }
          i += 1;
        }
        if (j != 0)
        {
          paramA = c;
          if (paramA != null)
          {
            paramA = (ArrayList)paramA.clone();
            j = paramA.size();
            i = 0;
            while (i < j)
            {
              ((a.a)paramA.get(i)).a(a);
              i += 1;
            }
          }
          c.a(a, false);
        }
      }
    }
    
    public void b(a paramA) {}
    
    public void c(a paramA) {}
  }
  
  public class c
  {
    private c.f a;
    
    c(a paramA)
    {
      a = ((c.f)c.b(c.this).get(paramA));
      if (a == null)
      {
        a = new c.f(paramA);
        c.b(c.this).put(paramA, a);
        c.d(c.this).add(a);
      }
    }
    
    public c a(a paramA)
    {
      c.f localF2 = (c.f)c.b(c.this).get(paramA);
      c.f localF1 = localF2;
      if (localF2 == null)
      {
        localF1 = new c.f(paramA);
        c.b(c.this).put(paramA, localF1);
        c.d(c.this).add(localF1);
      }
      localF1.a(new c.d(a, 0));
      return this;
    }
  }
  
  private static class d
  {
    public c.f a;
    public int b;
    
    public d(c.f paramF, int paramInt)
    {
      a = paramF;
      b = paramInt;
    }
  }
  
  private static class e
    implements a.a
  {
    private c a;
    private c.f b;
    private int c;
    
    public e(c paramC, c.f paramF, int paramInt)
    {
      a = paramC;
      b = paramF;
      c = paramInt;
    }
    
    private void d(a paramA)
    {
      if (a.j) {
        return;
      }
      Object localObject2 = null;
      int j = b.e.size();
      int i = 0;
      Object localObject1;
      for (;;)
      {
        localObject1 = localObject2;
        if (i >= j) {
          break;
        }
        localObject1 = (c.d)b.e.get(i);
        if ((b == c) && (a.c == paramA))
        {
          paramA.b(this);
          break;
        }
        i += 1;
      }
      b.e.remove(localObject1);
      if (b.e.size() == 0)
      {
        b.c.b();
        c.a(a).add(b.c);
      }
    }
    
    public void a(a paramA)
    {
      if (c == 1) {
        d(paramA);
      }
    }
    
    public void b(a paramA) {}
    
    public void c(a paramA)
    {
      if (c == 0) {
        d(paramA);
      }
    }
  }
  
  private static class f
    implements Cloneable
  {
    public a c;
    public ArrayList<c.d> d = null;
    public ArrayList<c.d> e = null;
    public ArrayList<f> f = null;
    public ArrayList<f> g = null;
    public boolean h = false;
    
    public f(a paramA)
    {
      c = paramA;
    }
    
    public void a(c.d paramD)
    {
      if (d == null)
      {
        d = new ArrayList();
        f = new ArrayList();
      }
      d.add(paramD);
      if (!f.contains(a)) {
        f.add(a);
      }
      paramD = a;
      if (g == null) {
        g = new ArrayList();
      }
      g.add(this);
    }
    
    public f clone()
    {
      try
      {
        f localF = (f)super.clone();
        c = c.clone();
        return localF;
      }
      catch (CloneNotSupportedException localCloneNotSupportedException)
      {
        throw new AssertionError();
      }
    }
  }
}
